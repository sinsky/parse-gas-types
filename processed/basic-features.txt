[[[\"browser.d.ts\",\"interface Browser{Buttons:_ButtonSet;\\n/**Pops up a dialog box with a text input box in the user's browser.\\n\\nThe inputBox method raises a client-side input box that displays the given prompt to the\\nuser.Note that this function causes the server-side script to be suspended.It resumes\\nautomatically after the user clears the dialog,but JDBC connections don 't persist across the\\nsuspension.\\n\\n```\\n// The code below sets the value of name to the name input by the user, or 'cancel '.\\nvar name \\u003d Browser.inputBox('Enter your name ');\\n```\\n\\nThis method is not recommended. Instead, use a [UI prompt](/apps-script/guides/dialogs#prompt_dialogs).\\n@param prompt The text to be displayed in the dialog box.\\n@return The text entered by the user (or 'cancel ' for a canceled or dismissed dialog).*/inputBox(prompt:string):string;\\n/**Pops up a dialog box with a text input box in the user's browser.\\n\\nThe inputBox method raises a client-side input box that displays the given prompt to the\\nuser,and offers a choice of buttons to be displayed.Note that this function causes the\\nserver-side script to be suspended.It resumes automatically after the user clears the dialog,\\nbut JDBC connections don 't persist across the suspension.\\n\\n```\\n// The code below sets the value of name to the name input by the user, or 'cancel '.\\nvar name \\u003d Browser.inputBox('Enter your name ', Browser.Buttons.OK_CANCEL);\\n```\\n\\nThis method is not recommended. Instead, use a [UI prompt](/apps-script/guides/dialogs#prompt_dialogs).\\n@param prompt The text to be displayed in the dialog box.\\n@param buttons The type of button set to use.\\n@return The text entered by the user (or 'cancel ' for a canceled or dismissed dialog).*/inputBox(prompt:string,buttons:ButtonSet):string;\\n/**Pops up a dialog box with a text input box in the user's browser.\\n\\nThe inputBox method raises a client side input box with the given title,that displays the\\ngiven prompt to the user,and offers a choice of buttons to be displayed.Note that this\\nfunction causes the server-side script to be suspended.It resumes automatically after the user\\nclears the dialog,but JDBC connections don 't persist across the suspension.\\n\\n```\\n// The code below sets the value of name to the name input by the user, or 'cancel '.\\nvar name \\u003d Browser.inputBox('ID Check', 'Enter your name ', Browser.Buttons.OK_CANCEL);\\n```\\n\\nThis method is not recommended. Instead, use a [UI prompt](/apps-script/guides/dialogs#prompt_dialogs).\\n@param title The title for the dialog box.\\n@param prompt The text to be displayed in the dialog box.\\n@param buttons The type of button set to use.\\n@return The text entered by the user (or 'cancel ' for a canceled or dismissed dialog).*/inputBox(title:string,prompt:string,buttons:ButtonSet):string;\\n/**Pops up a dialog box with the given message and an OK button in the user's browser.\\n\\nThe msgBox method raises a client-side message box that displays the given message to the\\nuser.Note that this method causes the server-side script to be suspended.It resumes\\nautomatically after the user clears the dialog,but JDBC connections don 't persist across the\\nsuspension.\\n\\n```\\n// The code below displays \\\"hello world\\\" in a dialog box with an OK button\\nBrowser.msgBox('hello world ');\\n```\\n\\nThis method is not recommended. Instead, use a [UI alert](/apps-script/guides/dialogs#alert_dialogs) dialog.\\n@param prompt The text to be displayed in the dialog box.\\n@return The lower case text of the button that is clicked by the user (or 'cancel ' for a\\n    dismissed dialog).*/msgBox(prompt:string):string;\\n/**Pops up a dialog box with the given message and specified buttons in the user's browser.\\n\\nThe msgBox method raises a client-side message box that displays the given message to the\\nuser,and offers a choice of buttons to be displayed.Note that this method causes the\\nserver-side script to be suspended.It resumes automatically after the user clears the dialog,\\nbut JDBC connections don 't persist across the suspension.\\n\\n```\\n// The code below displays \\\"hello world\\\" in a dialog box with OK and Cancel buttons.\\nBrowser.msgBox('hello world ', Browser.Buttons.OK_CANCEL);\\n```\\n\\nThis method is not recommended. Instead, use a [UI alert](/apps-script/guides/dialogs#alert_dialogs) dialog.\\n@param prompt The text to be displayed in the dialog box.\\n@param buttons The type of button set to use.\\n@return The lower case text of the button that is clicked by the user (or 'cancel ' for a\\n    dismissed dialog).*/msgBox(prompt:string,buttons:ButtonSet):string;\\n/**Pops up a dialog box with the given title, message and specified buttons in the user's browser.\\n\\nThe msgBox method raises a client-side message box with the given title,that displays the\\ngiven message to the user,and offers a choice of buttons to be displayed.Note that this\\nmethod causes the server-side script to be suspended.It resumes automatically after the user\\nclears the dialog,but JDBC connections don 't persist across the suspension.\\n\\n```\\n// The code below displays \\\"hello world\\\" in a dialog box with a custom title and Yes and\\n// No buttons\\nBrowser.msgBox('Greetings', 'hello world ', Browser.Buttons.YES_NO);\\n```\\n\\nThis method is not recommended. Instead, use a [UI alert](/apps-script/guides/dialogs#alert_dialogs) dialog.\\n@param title The title of the dialog box.\\n@param prompt The text to be displayed in the dialog box.\\n@param buttons The type of button set to use.\\n@return The lower case text of the button that is clicked by the user (or 'cancel ' for a\\n    dismissed dialog).*/msgBox(title:string,prompt:string,buttons:ButtonSet):string;}const Browser:Browser;\"],[\"cache-service.d.ts\",\"interface CacheService{\\n/**Gets the cache instance scoped to the current document and script. Document caches are specific\\nto the current document which contains the script. Use these to store script information that\\nis specific to the current document. If this method is called outside of the context of a\\ncontaining document (such as from a standalone script or web app), this method returns `null`.\\n\\n```\\n// Gets a cache that is specific to the current document containing the script\\nvar cache \\u003d CacheService.getDocumentCache();\\n```\\n@return a document cache instance, or `null` if there is no containing document*/getDocumentCache():CacheService.Cache;\\n/**Gets the cache instance scoped to the script. Script caches are common to all users of the\\nscript. Use these to store information that is not specific to the current user.\\n\\n```\\n// Gets a cache that is common to all users of the script\\nvar cache \\u003d CacheService.getScriptCache();\\n```\\n@return a script cache instance*/getScriptCache():CacheService.Cache;\\n/**Gets the cache instance scoped to the current user and script. User caches are specific to the\\ncurrent user of the script. Use these to store script information that is specific to the\\ncurrent user.\\n\\n```\\n// Gets a cache that is specific to the current user of the script\\nvar cache \\u003d CacheService.getUserCache();\\n```\\n@return a user cache instance*/getUserCache():CacheService.Cache;}module CacheService{interface Cache{\\n/**Gets the cached value for the given key, or null if none is found.\\n\\n```\\n// Gets the value from the cache for the key 'foo '.\\nvar value \\u003d cache.get('foo ');\\n```\\n@param key the key to look up in the cache\\n@return the cached value, or null if none was found*/get(key:string):string;\\n/**Returns a JavaScript Object containing all key/value pairs found in the cache for an array of\\nkeys.\\n\\n```\\n// Gets a set of values from the cache\\nvar values \\u003d cache.getAll(['foo', 'x', 'missing ']);\\n// If there were values in the cache for 'foo ' and 'x ' but not 'missing ', then 'values ' would\\n// be: {'foo': 'somevalue', 'x': 'othervalue '}\\n```\\n@param keys the keys to lookup\\n@return a JavaScript Object containing the key/value pairs for all keys found in the cache*/getAll(keys:string[]):Object;\\n/**Adds a key/value pair to the cache.\\n\\nThe maximum length of a key is 250 characters. The maximum amount of data that can be stored\\nper key is 100KB. The value will expire from the cache after 600 seconds (10 minutes).\\n\\nThe cap for cached items is 1,000. If more than 1,000 items are written, the cache stores\\nthe 900 items farthest from expiration. This limit might change.\\n\\n```\\n// Puts the value 'bar ' into the cache using the key 'foo '\\ncache.put('foo', 'bar ');\\n```\\n@param key the key to store the value under\\n@param value the value to be cached*/put(key:string,value:string):void;\\n/**Adds a key/value pair to the cache, with an expiration time (in seconds).\\n\\nThe maximum length of a key is 250 characters. The maximum amount of data that can be stored\\nper key is 100KB. The specified expiration time is only a suggestion; cached data may be\\nremoved before this time if a lot of data is cached.\\n\\nThe cap for cached items is 1,000. If more than 1,000 items are written, the cache stores\\nthe 900 items farthest from expiration. This limit might change.\\n\\n```\\n// Puts the value 'bar ' into the cache using the key 'foo ', but only for the next 20 seconds.\\ncache.put('foo', 'bar ', 20);\\n```\\n@param key the key to store the value under\\n@param value the value to be cached\\n@param expirationInSeconds the maximum time the value remains in the cache, in seconds. The\\n    minimum is 1 second and the maximum is 21600 seconds (6 hours).*/put(key:string,value:string,expirationInSeconds:Integer):void;\\n/**Adds a set of key/value pairs to the cache.\\n\\nSimilar to repeated calls to \\\"put\\\", but more efficient as it only makes one call to the\\nmemcache server to set all values. The maximum length of a key is 250 characters. The maximum\\namount of data that can be stored per key is 100KB. The values will expire from the cache after\\n600 seconds (10 minutes).\\n\\nThe cap for cached items is 1,000. If more than 1,000 items are written, the cache stores\\nthe 900 items farthest from expiration. This limit might change.\\n\\n```\\n// Puts a set of values into the cache with the keys 'foo', 'x ', and 'key '.\\nvar values \\u003d {\\n  'foo': 'bar ',\\n  'x':'y ',\\n  'key': 'value '\\n};\\ncache.putAll(values);\\n```\\n@param values a JavaScript Object containing string keys and values*/putAll(values:Object):void;\\n/**Adds a set of key/value pairs to the cache, with an expiration time (in seconds).\\n\\nSimilar to repeated calls to \\\"put\\\", but more efficient as it only makes one call to the\\nmemcache server to set all values. The maximum length of a key is 250 characters. The maximum\\namount of data that can be stored per key is 100KB. The specified expiration time is only a\\nsuggestion; cached data may be removed before this time if a lot of data is cached.\\n\\nThe cap for cached items is 1,000. If more than 1,000 items are written, the cache stores\\nthe 900 items farthest from expiration. This limit might change.\\n\\n```\\n// Puts a set of values into the cache with the keys 'foo', 'x ', and 'key '.\\nvar values \\u003d {\\n  'foo': 'bar ',\\n  'x':'y ',\\n  'key': 'value '\\n};\\ncache.putAll(values, 20);\\n```\\n@param values A JavaScript Object containing string keys and values\\n@param expirationInSeconds The maximum time the value remains in the cache, in seconds The\\n    minimum allowed expiration is 1 second, and the maximum allowed expiration is 21600 seconds\\n    (6 hours). The default expiration is 600 seconds (10 minutes).*/putAll(values:Object,expirationInSeconds:Integer):void;\\n/**Removes an entry from the cache using the given key.\\n\\n```\\n// Removes any cache entries for 'foo '\\ncache.remove('foo ');\\n```\\n@param key the key to remove from the cache*/remove(key:string):void;\\n/**Removes a set of entries from the cache.\\n\\n```\\n// Removes entries from the cache with keys 'foo ' and 'x '\\ncache.removeAll(['foo', 'x ']);\\n```\\n@param keys the array of keys to remove*/removeAll(keys:string[]):void;}}const CacheService:CacheService;\"],[\"calendar-app.d.ts\",\"interface CalendarApp{\\n/**An enum representing the named colors available in the Calendar service.*/Color:CalendarApp._Color;\\n/**An enum representing the named event colors available in the Calendar service.*/EventColor:CalendarApp._EventColor;\\n/**An enum representing the statuses a guest can have for an event.*/GuestStatus:CalendarApp._GuestStatus;\\n/**An enum representing the months of the year.*/Month:_Month;\\n/**An enum representing the visibility of an event.*/Visibility:CalendarApp._Visibility;\\n/**An enum representing the days of the week.*/Weekday:_Weekday;\\n/**Creates a new all-day event.\\n\\n```\\n// Creates an all-day event for the moon landing and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createAllDayEvent('Apollo 11 Landing ',\\n    new Date('July 20,1969 '));\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title The title of the event.\\n@param date The date of the event (only the day is used; the time is ignored).\\n@return The created event.*/createAllDayEvent(title:string,date:Date):CalendarApp.CalendarEvent;\\n/**Creates a new all-day event that can span multiple days.\\n\\n```\\n// Creates an all-day event for the Woodstock festival (August 15th to 17th) and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createAllDayEvent('Woodstock Festival ',\\n    new Date('August 15,1969 '),\\n    new Date('August 18,1969 '));\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title The title of the event.\\n@param startDate The date when the event starts (only the day is used; the time is ignored).\\n@param endDate The date when the event ends (only the day is used; the time is ignored). The\\n    end date is exclusive.\\n@return The created event.*/createAllDayEvent(title:string,startDate:Date,endDate:Date):CalendarApp.CalendarEvent;\\n/**Creates a new all-day event that can span multiple days.\\n\\n```\\n// Creates an all-day event for the Woodstock festival (August 15th to 17th) and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createAllDayEvent('Woodstock Festival ',\\n    new Date('August 15,1969 '),\\n    new Date('August 18,1969 '),\\n    {location: 'Bethel,White Lake,New York,U.S.', sendInvites: true});\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title The title of the event.\\n@param startDate The date when the event starts (only the day is used; the time is ignored).\\n@param endDate The date when the event ends (only the day is used; the time is ignored). The\\n    end date is exclusive.\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return The created event.*/createAllDayEvent(title:string,startDate:Date,endDate:Date,options:Object):CalendarApp.CalendarEvent;\\n/**Creates a new all-day event.\\n\\n```\\n// Creates an all-day event for the moon landing and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createAllDayEvent('Apollo 11 Landing ',\\n    new Date('July 20,1969 '),\\n    {location: 'The Moon '});\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title The title of the event.\\n@param date The date of the event (only the day is used; the time is ignored).\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return The created event.*/createAllDayEvent(title:string,date:Date,options:Object):CalendarApp.CalendarEvent;\\n/**Creates a new all-day event series.\\n\\n```\\n// Creates an event series for a no-meetings day, taking place every Wednesday in 2013.\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().createAllDayEventSeries('No Meetings ',\\n    new Date('January 2,2013 03: 00: 00 PM EST '),\\n    CalendarApp.newRecurrence().addWeeklyRule()\\n        .onlyOnWeekday(CalendarApp.Weekday.WEDNESDAY)\\n        .until(new Date('January 1,2014 ')));\\nLogger.log('Event Series ID: ' + eventSeries.getId());\\n```\\n@param title the title of the events in the series\\n@param startDate the date of the first event in the series (only the day is used; the time is\\n    ignored)\\n@param recurrence the recurrence settings of the event series\\n@return the created event series*/createAllDayEventSeries(title:string,startDate:Date,recurrence:CalendarApp.EventRecurrence):CalendarApp.CalendarEventSeries;\\n/**Creates a new all-day event series.\\n\\n```\\n// Creates an event series for a no-meetings day, taking place every Wednesday in 2013.\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().createAllDayEventSeries('No Meetings ',\\n    new Date('January 2,2013 03: 00: 00 PM EST '),\\n    CalendarApp.newRecurrence().addWeeklyRule()\\n        .onlyOnWeekday(CalendarApp.Weekday.WEDNESDAY)\\n        .until(new Date('January 1,2014 ')),\\n    {guests: 'everyone@example.com '});\\nLogger.log('Event Series ID: ' + eventSeries.getId());\\n```\\n@param title the title of the events in the series\\n@param startDate the date of the first event in the series (only the day is used; the time is\\n    ignored)\\n@param recurrence the recurrence settings of the event series\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the created event series*/createAllDayEventSeries(title:string,startDate:Date,recurrence:CalendarApp.EventRecurrence,options:Object):CalendarApp.CalendarEventSeries;\\n/**Creates a new calendar, owned by the user.\\n\\n```\\n// Creates a new calendar named \\\"Travel Plans\\\".\\nvar calendar \\u003d CalendarApp.createCalendar('Travel Plans ');\\nLogger.log('Created the calendar\\\"%s\\\", with the ID \\\"%s\\\".',\\n    calendar.getName(), calendar.getId());\\n```\\n@param name the name of the new calendar\\n@return the newly created calendar*/createCalendar(name:string):CalendarApp.Calendar;\\n/**Creates a new calendar, owned by the user.\\n\\n```\\n// Creates a new calendar named \\\"Travel Plans\\\" with a description and color.\\nvar calendar \\u003d CalendarApp.createCalendar('Travel Plans', {\\n  description: 'A calendar to plan my travel schedule.',\\n  color: CalendarApp.Color.BLUE\\n});\\nLogger.log('Created the calendar \\\"%s\\\", with the ID \\\"%s\\\".',\\n    calendar.getName(), calendar.getId());\\n```\\n@param name the name of the new calendar\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the newly created calendar*/createCalendar(name:string,options:Object):CalendarApp.Calendar;\\n/**Creates a new event.\\n\\nIf no time zone is specified, the time values are interpreted in the context of the script's\\ntime zone, which may be different than the calendar's time zone.\\n\\n```\\n// Creates an event for the moon landing and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createEvent('Apollo 11 Landing',\\n    new Date('July 20, 1969 20:00:00 UTC'),\\n    new Date('July 21, 1969 21:00:00 UTC'));\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title the title of the event\\n@param startTime the date and time when the event starts\\n@param endTime the date and time when the event ends\\n@return the created event*/createEvent(title:string,startTime:Date,endTime:Date):CalendarApp.CalendarEvent;\\n/**Creates a new event.\\n\\nIf no time zone is specified, the time values are interpreted in the context of the script's\\ntime zone, which may be different than the calendar's time zone.\\n\\n```\\n// Creates an event for the moon landing and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createEvent('Apollo 11 Landing',\\n    new Date('July 20, 1969 20:00:00 UTC'),\\n    new Date('July 20, 1969 21:00:00 UTC'),\\n    {location: 'The Moon'});\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title the title of the event\\n@param startTime the date and time when the event starts\\n@param endTime the date and time when the event ends\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the created event*/createEvent(title:string,startTime:Date,endTime:Date,options:Object):CalendarApp.CalendarEvent;\\n/**Creates an event from a free-form description.\\n\\nThe description should use the same format as the UI's [\\\"Quick Add\\\"](http://support.google.com/calendar/answer/36604) feature.\\n\\n```\\n// Creates a new event and logs its ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar()\\n    .createEventFromDescription('Lunch with Mary, Friday at 1PM');\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param description a free-form description of the event\\n@return the created event*/createEventFromDescription(description:string):CalendarApp.CalendarEvent;\\n/**Creates a new event series.\\n\\n```\\n// Creates an event series for a team meeting, taking place every Tuesday and Thursday in 2013.\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().createEventSeries('Team Meeting',\\n    new Date('January 1, 2013 03:00:00 PM EST'),\\n    new Date('January 1, 2013 04:00:00 PM EST'),\\n    CalendarApp.newRecurrence().addWeeklyRule()\\n        .onlyOnWeekdays([CalendarApp.Weekday.TUESDAY, CalendarApp.Weekday.THURSDAY])\\n        .until(new Date('January 1, 2014')));\\nLogger.log('Event Series ID: ' + eventSeries.getId());\\n```\\n@param title the title of the events in the series\\n@param startTime the date and time when the first event in the series starts\\n@param endTime the date and time when the first event in the series ends\\n@param recurrence the recurrence settings of the event series\\n@return the created event series*/createEventSeries(title:string,startTime:Date,endTime:Date,recurrence:CalendarApp.EventRecurrence):CalendarApp.CalendarEventSeries;\\n/**Creates a new event series.\\n\\n```\\n// Creates an event series for a team meeting, taking place every Tuesday and Thursday in 2013.\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().createEventSeries('Team Meeting',\\n    new Date('January 1, 2013 03:00:00 PM EST'),\\n    new Date('January 1, 2013 04:00:00 PM EST'),\\n    CalendarApp.newRecurrence().addWeeklyRule()\\n        .onlyOnWeekdays([CalendarApp.Weekday.TUESDAY, CalendarApp.Weekday.THURSDAY])\\n        .until(new Date('January 1, 2014')),\\n    {location: 'Conference Room'});\\nLogger.log('Event Series ID: ' + eventSeries.getId());\\n```\\n@param title the title of the events in the series\\n@param startTime the date and time when the first event in the series starts\\n@param endTime the date and time when the first event in the series ends\\n@param recurrence the recurrence settings of the event series\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the created event series*/createEventSeries(title:string,startTime:Date,endTime:Date,recurrence:CalendarApp.EventRecurrence,options:Object):CalendarApp.CalendarEventSeries;\\n/**Gets all calendars that the user owns or is subscribed to.\\n\\n```\\n// Determines how many calendars the user can access.\\nvar calendars \\u003d CalendarApp.getAllCalendars();\\nLogger.log('This user owns or is subscribed to %s calendars.',\\n    calendars.length);\\n```\\n@return all calendars that the user can access*/getAllCalendars():CalendarApp.Calendar[];\\n/**Gets all calendars that the user owns.\\n\\n```\\n// Determines how many calendars the user owns.\\nvar calendars \\u003d CalendarApp.getAllOwnedCalendars();\\nLogger.log('This user owns %s calendars.', calendars.length);\\n```\\n@return all calendars that the user owns*/getAllOwnedCalendars():CalendarApp.Calendar[];\\n/**Gets the calendar with the given ID.\\n\\n```\\n// Gets the public calendar \\\"US Holidays\\\" by ID.\\nvar calendar \\u003d CalendarApp.getCalendarById(\\n    'en.usa#holiday@group.v.calendar.google.com');\\nLogger.log('The calendar is named \\\"%s\\\".', calendar.getName());\\n```\\n@param id the calendar ID\\n@return the calendar with the given ID, or `null` if the calendar does not exist, if the\\n    user cannot access it, or if the user is not subscribed to the calendar*/getCalendarById(id:string):CalendarApp.Calendar;\\n/**Gets all calendars with a given name that the user owns or is subscribed to. Names are not\\ncase-sensitive.\\n\\n```\\n// Gets the public calendar named \\\"US Holidays\\\".\\nvar calendars \\u003d CalendarApp.getCalendarsByName('US Holidays');\\nLogger.log('Found %s matching calendars.', calendars.length);\\n```\\n@param name the calendar name\\n@return all calendars with this name that the user can access*/getCalendarsByName(name:string):CalendarApp.Calendar[];\\n/**Gets the color of the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Gets the color of the calendar and logs it to the console.\\n// For the default calendar, you can use CalendarApp.getColor() instead.\\nconst calendarColor \\u003d calendar.getColor();\\nconsole.log(calendarColor);\\n```\\n@return A hexadecimal color string (\\\"#rrggbb\\\").*/getColor():string;\\n/**Gets the user's default calendar.\\n\\n```\\n// Determines the time zone of the user's default calendar.\\nvar calendar \\u003d CalendarApp.getDefaultCalendar();\\nLogger.log('My default calendar is set to the time zone \\\"%s\\\".',\\n    calendar.getTimeZone());\\n```\\n@return the user's default calendar*/getDefaultCalendar():CalendarApp.Calendar;\\n/**Gets the description of the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Sets the description of the calendar to 'Test description.'\\ncalendar.setDescription('Test description');\\n\\n// Gets the description of the calendar and logs it to the console.\\n// For the default calendar, you can use CalendarApp.getDescription() instead.\\nconst description \\u003d calendar.getDescription();\\nconsole.log(description);\\n```\\n@return The description of this calendar.*/getDescription():string;\\n/**Gets the event with the given ID. If the series belongs to a calendar other than the default\\ncalendar, this method must be called from that calendar. Calling [`getEventById(iCalId)`](https://developers.google.com/apps-script/reference/calendar/calendar-app.html#getEventById(String)) only\\nreturns an event in the default calendar.\\n\\nMultiple events may have the same ID if they are part of an event series. In this case this\\nmethod returns only the first event from that series.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com')\\n\\n// Creates an event for the moon landing.\\nconst event \\u003d calendar.createEvent('Apollo 11 Landing',\\n  new Date('July 20, 1969 20:05:00 UTC'),\\n  new Date('July 20, 1969 20:17:00 UTC'));\\n\\n// Gets the calendar event ID and logs it to the console.\\nconst iCalId \\u003d event.getId();\\nconsole.log(iCalId);\\n\\n// Gets the event by its ID and logs the title of the event to the console.\\n// For the default calendar, you can use CalendarApp.getEventById(iCalId) instead.\\nconst myEvent \\u003d calendar.getEventById(iCalId);\\nconsole.log(myEvent.getTitle());\\n```\\n@param iCalId ID of the event.\\n@return The event with the given ID, or `null` if the event doesn't exist or the user\\n    cannot access it.*/getEventById(iCalId:string):CalendarApp.CalendarEvent;\\n/**Gets the event series with the given ID. If the ID given is for a single [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html),\\nthen a [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) is returned with a single event in the series. Note that if\\nthe event series belongs to a calendar other than the default calendar, this method must be\\ncalled from that [`CalendarApp`](https://developers.google.com/apps-script/reference/calendar/calendar-app.html); calling [`getEventSeriesById(iCalId)`](https://developers.google.com/apps-script/reference/calendar/calendar-app.html#getEventSeriesById(String))\\ndirectly only returns an event series that exists in the default calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Creates an event series for a daily team meeting from 1 PM to 2 PM.\\n// The series adds the daily event from January 1, 2023 through December 31, 2023.\\nconst eventSeries \\u003d calendar.createEventSeries('Team meeting',\\n  new Date('Jan 1, 2023 13:00:00'),\\n  new Date('Jan 1, 2023 14:00:00'),\\n  CalendarApp.newRecurrence().addDailyRule().until(new Date('Jan 1, 2024')));\\n\\n// Gets the ID of the event series.\\nconst iCalId \\u003d eventSeries.getId();\\n\\n// Gets the event series by its ID and logs the series title to the console.\\n// For the default calendar, you can use CalendarApp.getEventSeriesById(iCalId) instead.\\nconsole.log(calendar.getEventSeriesById(iCalId).getTitle());\\n```\\n@param iCalId ID of the event series.\\n@return The series with the given ID, or `null` if the series doesn't exist or the user\\n    cannot access it.*/getEventSeriesById(iCalId:string):CalendarApp.CalendarEventSeries;\\n/**Gets all events that occur within a given time range.\\n\\nThis method returns events that start during the given time range, end during the time\\nrange, or encompass the time range. If no time zone is specified, the time values are\\ninterpreted in the context of the script's time zone, which may be different from the\\ncalendar's time zone.\\n\\n```\\n// Determines how many events are happening in the next two hours.\\nvar now \\u003d new Date();\\nvar twoHoursFromNow \\u003d new Date(now.getTime() + (2 * 60 * 60 * 1000));\\nvar events \\u003d CalendarApp.getDefaultCalendar().getEvents(now, twoHoursFromNow);\\nLogger.log('Number of events: ' + events.length);\\n```\\n@param startTime the start of the time range\\n@param endTime the end of the time range, non-inclusive\\n@return the events that occur within the time range*/getEvents(startTime:Date,endTime:Date):CalendarApp.CalendarEvent[];\\n/**Gets all events that occur within a given time range and meet the specified criteria.\\n\\nThis method returns events that start during the given time range, ends during the time\\nrange, or encompasses the time range. If no time zone is specified, the time values are\\ninterpreted in the context of the script's time zone, which may be different from the\\ncalendar's time zone.\\n\\nBe aware that filtering on `author`, `search`, or `statusFilters` takes\\nplace after applying `start` and `max`. This means that the number of events\\nreturned may be less than `max`, even though additional events meet the criteria.\\n\\n```\\n// Determines how many events are happening in the next two hours that contain the term\\n// \\\"meeting\\\".\\nvar now \\u003d new Date();\\nvar twoHoursFromNow \\u003d new Date(now.getTime() + (2 * 60 * 60 * 1000));\\nvar events \\u003d CalendarApp.getDefaultCalendar().getEvents(now, twoHoursFromNow,\\n    {search: 'meeting'});\\nLogger.log('Number of events: ' + events.length);\\n```\\n@param startTime the start of the time range\\n@param endTime the end of the time range, non-inclusive\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the events that take place within the time range and match the criteria*/getEvents(startTime:Date,endTime:Date,options:Object):CalendarApp.CalendarEvent[];\\n/**Gets all events that occur on a given day.\\n\\nThis method returns events if they start during the given day, end during the day, or\\nencompass the day.\\n\\nNote that only the date portion of the Date object is used, and the time portion is ignored.\\nThe date is interpreted as midnight that day to midnight the next day in the calendar's time\\nzone.\\n\\n```\\n// Determines how many events are happening today.\\nvar today \\u003d new Date();\\nvar events \\u003d CalendarApp.getDefaultCalendar().getEventsForDay(today);\\nLogger.log('Number of events: ' + events.length);\\n```\\n@param date the date to retrieve events for (only the day is used; the time is ignored)\\n@return the events that occur on the given date*/getEventsForDay(date:Date):CalendarApp.CalendarEvent[];\\n/**Gets all events that occur on a given day and meet specified criteria.\\n\\nThis method returns events if they start during the given day, end during the day, or\\nencompass the day.\\n\\nNote that only the date portion of the Date object is used, and the time portion is ignored.\\nThe date is interpreted as midnight that day to midnight the next day in the calendar's time\\nzone.\\n\\nBe aware that filtering on `author`, `search`, or `statusFilters` takes\\nplace after applying `start` and `max`. This means that the number of events\\nreturned may be less than `max`, even though additional events meet the criteria.\\n\\n```\\n// Determines how many events are happening today and contain the term \\\"meeting\\\".\\nvar today \\u003d new Date();\\nvar events \\u003d CalendarApp.getDefaultCalendar().getEventsForDay(today, {search: 'meeting'});\\nLogger.log('Number of events: ' + events.length);\\n```\\n@param date the date to retrieve events for (only the day is used; the time is ignored)\\n@param options advanced filtering options\\n@return the events that occur on the given date and match the criteria*/getEventsForDay(date:Date,options:Object):CalendarApp.CalendarEvent[];\\n/**Gets the ID of the calendar. The ID for a user's default calendar is their email address.\\n\\n```\\n// Opens the calendar by its ID.\\n// To get the user's default calendar, use CalendarApp.getDefaultCalendar().\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Gets the ID of the calendar and logs it to the console.\\nconst calendarId \\u003d calendar.getId();\\nconsole.log(calendarId);\\n```\\n@return The ID of the calendar.*/getId():string;\\n/**Gets the name of the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Gets the name of the calendar and logs it to the console.\\n// For the default calendar, you can use CalendarApp.getName() instead.\\nconst calendarName \\u003d calendar.getName();\\nconsole.log(calendarName);\\n```\\n@return This calendar's name.*/getName():string;\\n/**Gets the calendar with the given ID, if the user owns it.\\n\\nTo find a calendar ID, click the arrow next to the calendar's name in Google Calendar and\\nselect __Calendar settings__. The ID is shown near the bottom of the settings\\npage.\\n\\n```\\n// Gets a (non-existent) private calendar by ID.\\nvar calendar \\u003d CalendarApp.getOwnedCalendarById(\\n    '123456789@group.calendar.google.com');\\nLogger.log('The calendar is named \\\"%s\\\".', calendar.getName());\\n```\\n@param id the calendar id\\n@return the calendar with the given ID, or `null` if the calendar does not exist or the\\n    user does not own it*/getOwnedCalendarById(id:string):CalendarApp.Calendar;\\n/**Gets all calendars with a given name that the user owns. Names are not case-sensitive.\\n\\n```\\n// Gets a private calendar named \\\"Travel Plans\\\".\\nvar calendars \\u003d CalendarApp.getOwnedCalendarsByName('Travel Plans');\\nLogger.log('Found %s matching calendars.', calendars.length);\\n```\\n@param name the calendar name\\n@return all calendars with this name that the user owns*/getOwnedCalendarsByName(name:string):CalendarApp.Calendar[];\\n/**Gets the time zone of the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Gets the time zone of the calendar and logs it to the console.\\n// For the default calendar, you can use CalendarApp.getTimeZone() instead.\\nconst timeZone \\u003d calendar.getTimeZone();\\nconsole.log(timeZone);\\n```\\n@return The time zone, specified in \\\"long\\\" format (for example, \\\"America/New_York\\\", as listed\\n    by [Joda.org](http://joda-time.sourceforge.net/timezones.html)).*/getTimeZone():string;\\n/**Determines whether the calendar is hidden in the user interface.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Determines whether the calendar is hidden in the user interface and logs it to the console.\\n// For the default calendar, you can use CalendarApp.isHidden() instead.\\nconst isHidden \\u003d calendar.isHidden();\\nconsole.log(isHidden);\\n```\\n@return `true` if the calendar is hidden in the user interface; `false` if it\\n    isn't.*/isHidden():boolean;\\n/**Determines whether the calendar is the primary calendar for the effective user.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Determines whether the calendar is the default calendar for\\n// the effective user and logs it to the console.\\n// For the default calendar, you can use CalendarApp.isMyPrimaryCalendar() instead.\\nconst isMyPrimaryCalendar \\u003d calendar.isMyPrimaryCalendar();\\nconsole.log(isMyPrimaryCalendar);\\n```\\n@return `true` if the calendar is the default calendar for the effective user; `false` if it isn't.*/isMyPrimaryCalendar():boolean;\\n/**Determines whether the calendar is owned by you.\\n\\n```\\n// Gets a calendar by its ID. To get the user's default calendar, use\\n// CalendarApp.getDefault() instead.\\n// TODO(developer): Replace the ID with the calendar ID that you want to use.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Determines whether the calendar is owned by you and logs it.\\nconsole.log(calendar.isOwnedByMe());\\n```\\n@return `true` if the calendar is owned by you; `false` if not.*/isOwnedByMe():boolean;\\n/**Determines whether the calendar's events are displayed in the user interface.\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Determines whether the calendar's events are displayed in the user interface and logs it.\\nconsole.log(calendar.isSelected());\\n```\\n@return `true` if the calendar's events are displayed in the user interface; `false` if not*/isSelected():boolean;\\n/**Creates a new recurrence object, which can be used to create rules for event recurrence.\\n\\n```\\n// Creates an event series for a no-meetings day, taking place every Wednesday in 2013.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addWeeklyRule()\\n    .onlyOnWeekday(CalendarApp.Weekday.WEDNESDAY)\\n    .until(new Date('January 1, 2014'));\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().createAllDayEventSeries('No Meetings',\\n    new Date('January 2, 2013 03:00:00 PM EST'),\\n    recurrence);\\nLogger.log('Event Series ID: ' + eventSeries.getId());\\n```\\n@return a new recurrence object with no rules set (behaves as a weekly recurrence)*/newRecurrence():CalendarApp.EventRecurrence;\\n/**Sets the color of the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Sets the color of the calendar to pink using the Calendar Color enum.\\n// For the default calendar, you can use CalendarApp.setColor() instead.\\ncalendar.setColor(CalendarApp.Color.PINK);\\n```\\n@param color A [`CalendarApp.Color`](https://developers.google.com/apps-script/reference/calendar/color.html) or a hexadecimal color string\\n    (\\\"#rrggbb\\\").\\n@return This calendar for chaining.*/setColor(color:string):CalendarApp.Calendar;\\n/**Sets the description of a calendar.\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Sets the description of the calendar.\\n// TODO(developer): Update the string with the description that you want to use.\\ncalendar.setDescription('Updated calendar description.')\\n```\\n@param description the description of this calendar\\n@return this calendar for chaining*/setDescription(description:string):CalendarApp.Calendar;\\n/**Sets whether the calendar is visible in the user interface.\\n@param hidden `true` to hide the calendar in the user interface; `false` to show it\\n@return this calendar for chaining*/setHidden(hidden:boolean):CalendarApp.Calendar;\\n/**Sets the name of the calendar.\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Sets the name of the calendar.\\n// TODO(developer): Update the string with the name that you want to use.\\ncalendar.setName('Example calendar name');\\n```\\n@param name the new name\\n@return this calendar for chaining*/setName(name:string):CalendarApp.Calendar;\\n/**Sets whether the calendar's events are displayed in the user interface.\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Selects the calendar so that its events are displayed in the user interface. To\\n// unselect the calendar, set the parameter to false.\\ncalendar.setSelected(true);\\n```\\n@param selected `true` to show the calendar's events in the user interface; `false`\\n    to hide them\\n@return this calendar for chaining*/setSelected(selected:boolean):CalendarApp.Calendar;\\n/**Sets the time zone of the calendar.\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Sets the time zone of the calendar to America/New York (US/Eastern) time.\\ncalendar.setTimeZone('America/New_York');\\n```\\n@param timeZone The time zone, specified in \\\"long\\\" format (such as \\\"America/New_York\\\", as\\n    listed by [Joda.org](http://joda-time.sourceforge.net/timezones.html)).\\n@return This calendar for chaining.*/setTimeZone(timeZone:string):CalendarApp.Calendar;\\n/**Subscribes the user to the calendar with the given ID, if the user is allowed to subscribe.\\n\\n```\\n// Subscribe to the calendar \\\"US Holidays\\\".\\nvar calendar \\u003d CalendarApp.subscribeToCalendar(\\n    'en.usa#holiday@group.v.calendar.google.com');\\nLogger.log('Subscribed to the calendar \\\"%s\\\".', calendar.getName());\\n```\\n@param id the ID of the calendar to subscribe to\\n@return the newly subscribed to calendar*/subscribeToCalendar(id:string):CalendarApp.Calendar;\\n/**Subscribes the user to the calendar with the given ID, if the user is allowed to subscribe.\\n\\n```\\n// Subscribe to the calendar \\\"US Holidays\\\", and set it to the color blue.\\nvar calendar \\u003d CalendarApp.subscribeToCalendar(\\n    'en.usa#holiday@group.v.calendar.google.com',\\n    { color: CalendarApp.Color.BLUE });\\nLogger.log('Subscribed to the calendar \\\"%s\\\".', calendar.getName());\\n```\\n@param id The ID of the calendar to subscribe to.\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return The newly subscribed calendar.*/subscribeToCalendar(id:string,options:Object):CalendarApp.Calendar;}module CalendarApp{interface Visibility{}interface _Visibility{\\n/**The event is private. This value is provided for compatibility reasons.*/CONFIDENTIAL:Visibility;\\n/**Uses the default visibility for events on the calendar.*/DEFAULT:Visibility;\\n/**The event is private and only event attendees may view event details.*/PRIVATE:Visibility;\\n/**The event is public and event details are visible to all readers of the calendar.*/PUBLIC:Visibility;}interface RecurrenceRule{\\n/**Adds a rule that excludes occurrences on a daily basis.\\n\\n```\\n// Creates a rule that recurs every week after the first 30 days.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addWeeklyRule().addDailyExclusion().times(30);\\n```\\n@return the new RecurrenceRule*/addDailyExclusion():CalendarApp.RecurrenceRule;\\n/**Adds a rule that causes the event to recur on a daily basis.\\n\\n```\\n// Creates a rule that recurs every day for ten days.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addDailyRule().times(10);\\n```\\n@return the new RecurrenceRule*/addDailyRule():CalendarApp.RecurrenceRule;\\n/**Adds a rule that causes the event to recur on a specific date.\\n@return this EventRecurrence for chaining*/addDate(date:Date):CalendarApp.EventRecurrence;\\n/**Adds a rule that excludes an occurrence for a specific date.\\n@return this EventRecurrence for chaining*/addDateExclusion(date:Date):CalendarApp.EventRecurrence;\\n/**Adds a rule that excludes occurrences on a monthly basis.\\n\\nBy default the exclusion is applied on the same day of the month as the first event in the\\nseries, but this can be altered by calling [`onlyOnMonthDay(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnMonthDay(Integer)) or [`onlyOnMonthDays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnMonthDays(Integer)).\\n@return the new RecurrenceRule*/addMonthlyExclusion():CalendarApp.RecurrenceRule;\\n/**Adds a rule that causes the event to recur on a monthly basis.\\n\\nBy default the event recurs on the same day of the month as the first event in the series,\\nbut this can be altered by calling [`onlyOnMonthDay(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnMonthDay(Integer)) or [`onlyOnMonthDays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnMonthDays(Integer)).\\n\\n```\\n// Creates a rule that recurs every month for three months.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addMonthlyRule().times(4);\\n```\\n@return the new RecurrenceRule*/addMonthlyRule():CalendarApp.RecurrenceRule;\\n/**Adds a rule that excludes occurrences on a weekly basis.\\n\\nBy default the exclusion is applied on the same day of the week as the first event in the\\nseries, but this can be altered by calling [`onlyOnWeekday(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnWeekday(Weekday)) or [`onlyOnWeekdays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnWeekdays(Weekday)).\\n\\n```\\n// Creates a rule that recurs every day except the first four Wednesdays.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addDailyRule()\\n    .addWeeklyExclusion().onlyOnWeekday(CalendarApp.Weekday.WEDNESDAY).times(4);\\n```\\n@return the new RecurrenceRule*/addWeeklyExclusion():CalendarApp.RecurrenceRule;\\n/**Adds a rule that causes the event to recur on a weekly basis.\\n\\nBy default the event recurs on the same day of the week as the first event in the series,\\nbut this can be altered by calling [`onlyOnWeekday(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnWeekday(Weekday)) or [`onlyOnWeekdays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnWeekdays(Weekday)).\\n\\n```\\n// Creates a rule that recurs every week for ten weeks.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addWeeklyRule().times(10);\\n```\\n@return the new RecurrenceRule*/addWeeklyRule():CalendarApp.RecurrenceRule;\\n/**Adds a rule that excludes occurrences on a yearly basis.\\n\\nBy default the exclusion is applied on the same day of the year as the first event in the\\nseries, but this can be altered by calling [`onlyOnYearDay(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnYearDay(Integer)) or [`onlyOnYearDays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnYearDays(Integer)).\\n@return the new RecurrenceRule*/addYearlyExclusion():CalendarApp.RecurrenceRule;\\n/**Adds a rule that causes the event to recur on a yearly basis.\\n\\nBy default the event recurs on the same day of the year as the first event in the series,\\nbut this can be altered by calling [`onlyOnYearDay(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnYearDay(Integer)) or [`onlyOnYearDays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnYearDays(Integer)).\\n@return the new RecurrenceRule*/addYearlyRule():CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply at this interval of the rule's time unit.\\n\\n```\\n// Creates a rule that recurs every fourth week.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addWeeklyRule().interval(4);\\n```\\n@param interval the interval in the rule's time unit\\n@return this RecurrenceRule for chaining*/interval(interval:Integer):CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply to a specific month.\\n\\n```\\n// Creates a rule that recurs every week in February.\\nvar recurrence \\u003d CalendarApp.newRecurrence()\\n    .addWeeklyRule().onlyInMonth(CalendarApp.Month.FEBRUARY);\\n```\\n@param month the month\\n@return this RecurrenceRule for chaining*/onlyInMonth(month:Month):CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply to specific months.\\n\\n```\\n// Creates a rule that recurs every week in February and March.\\nvar recurrence \\u003d CalendarApp.newRecurrence()\\n    .addWeeklyRule().onlyInMonths([CalendarApp.Month.FEBRUARY, CalendarApp.Month.MARCH]);\\n```\\n@param months the months\\n@return this RecurrenceRule for chaining*/onlyInMonths(months:Month[]):CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply to a specific day of the month.\\n\\n```\\n// Creates a rule that recurs every month on the fifth day of the month.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addMonthlyRule().onlyOnMonthDay(5);\\n```\\n@param day the day of the month\\n@return this RecurrenceRule for chaining*/onlyOnMonthDay(day:Integer):CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply to specific days of the month.\\n\\n```\\n// Creates a rule that recurs every month on the first and fifteenth day of the month.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addMonthlyRule().onlyOnMonthDays([1, 15]);\\n```\\n@param days the days of the month\\n@return this RecurrenceRule for chaining*/onlyOnMonthDays(days:Integer[]):CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply to a specific week of the year.\\n\\n```\\n// Creates a rule that recurs on the fifth week of every year.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addWeeklyRule().onlyOnWeek(5);\\n```\\n@param week the week\\n@return this RecurrenceRule for chaining*/onlyOnWeek(week:Integer):CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply to a specific day of the week.\\n\\n```\\n// Creates a rule that recurs every week on Wednesdays.\\nvar recurrence \\u003d CalendarApp.newRecurrence()\\n    .addWeeklyRule().onlyOnWeekday(CalendarApp.Weekday.WEDNESDAY);\\n```\\n@param day the day of the week\\n@return this RecurrenceRule for chaining*/onlyOnWeekday(day:Weekday):CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply to specific days of the week.\\n\\n```\\n// Creates a rule that recurs every week on Tuesdays and Thursdays.\\nvar recurrence \\u003d CalendarApp.newRecurrence()\\n    .addWeeklyRule().onlyOnWeekdays(\\n        [CalendarApp.Weekday.TUESDAY, CalendarApp.Weekday.THURSDAY]);\\n```\\n@param days the days of the week\\n@return this RecurrenceRule for chaining*/onlyOnWeekdays(days:Weekday[]):CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply to specific weeks of the year.\\n\\n```\\n// Creates a rule that recurs on the fifth and tenth weeks of every year.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addWeeklyRule().onlyOnWeeks([5, 10]);\\n```\\n@param weeks the weeks\\n@return this RecurrenceRule for chaining*/onlyOnWeeks(weeks:Integer[]):CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply to a specific day of the year.\\n\\n```\\n// Creates a rule that recurs every year on February 15 (the 46th day).\\nvar recurrence \\u003d CalendarApp.newRecurrence().addYearlyRule().onlyOnYearDay(46);\\n```\\n@param day the day of the year\\n@return this RecurrenceRule for chaining*/onlyOnYearDay(day:Integer):CalendarApp.RecurrenceRule;\\n/**Configures the rule to only apply to specific days of the year.\\n\\n```\\n// Creates a rule that recurs every year on January 20 and February 15.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addYearlyRule().onlyOnYearDay([20, 46]);\\n```\\n@param days the days of the year\\n@return this RecurrenceRule for chaining*/onlyOnYearDays(days:Integer[]):CalendarApp.RecurrenceRule;\\n/**Sets the time zone for this recurrence. This affects the date and time that events recur on,\\nand whether the event shifts with daylight savings time. Defaults to the calendar's time zone.\\n@param timeZone the time zone, specified in \\\"long\\\" format (e.g., 'America/New_York', as listed\\n    by [Joda.org](http://joda-time.sourceforge.net/timezones.html))\\n@return this EventRecurrence for chaining*/setTimeZone(timeZone:string):CalendarApp.EventRecurrence;\\n/**Configures the rule to end after a given number of occurrences.\\n\\n```\\n// Creates a rule that recurs every day for ten days.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addDailyRule().times(10);\\n```\\n@param times the number of times to recur\\n@return this RecurrenceRule for chaining*/times(times:Integer):CalendarApp.RecurrenceRule;\\n/**Configures the rule to end on a given date (inclusive).\\n\\n```\\n// Creates a rule that recurs every day through the end of 2013.\\nvar recurrence \\u003d CalendarApp.newRecurrence()\\n    .addDailyRule().until(new Date('December 31, 2013'));\\n```\\n@return this RecurrenceRule for chaining*/until(endDate:Date):CalendarApp.RecurrenceRule;\\n/**Configures which day a week starts on, for the purposes of applying the rule.\\n\\n```\\n// Creates a weekly rule where weeks start on Monday.\\nvar recurrence \\u003d CalendarApp.newRecurrence()\\n    .addWeeklyRule().weekStartsOn(CalendarApp.Weekday.MONDAY);\\n```\\n@param day the day on which the week starts\\n@return this RecurrenceRule for chaining*/weekStartsOn(day:Weekday):CalendarApp.RecurrenceRule;}interface GuestStatus{}interface _GuestStatus{\\n/**The guest has been invited, but has not indicated whether they are attending.*/INVITED:GuestStatus;\\n/**The guest has indicated they might attend.*/MAYBE:GuestStatus;\\n/**The guest has indicated they are not attending.*/NO:GuestStatus;\\n/**The guest is the owner of the event.*/OWNER:GuestStatus;\\n/**The guest has indicated they are attending.*/YES:GuestStatus;}interface EventType{}interface _EventType{\\n/**The event is a special all-day event with an annual recurrence.*/BIRTHDAY:EventType;\\n/**The event is a regular event.*/DEFAULT:EventType;\\n/**The event is a focus-time event.*/FOCUS_TIME:EventType;\\n/**The event is an event from Gmail.*/FROM_GMAIL:EventType;\\n/**The event is an out-of-office event.*/OUT_OF_OFFICE:EventType;\\n/**The event is a working location event.*/WORKING_LOCATION:EventType;}interface EventRecurrence{\\n/**Adds a rule that excludes occurrences on a daily basis.\\n\\n```\\n// Creates a rule that recurs every week after the first 30 days.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addWeeklyRule().addDailyExclusion().times(30);\\n```\\n@return the new RecurrenceRule*/addDailyExclusion():CalendarApp.RecurrenceRule;\\n/**Adds a rule that causes the event to recur on a daily basis.\\n\\n```\\n// Creates a rule that recurs every day for ten days.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addDailyRule().times(10);\\n```\\n@return the new RecurrenceRule*/addDailyRule():CalendarApp.RecurrenceRule;\\n/**Adds a rule that causes the event to recur on a specific date.\\n@return this EventRecurrence for chaining*/addDate(date:Date):CalendarApp.EventRecurrence;\\n/**Adds a rule that excludes an occurrence for a specific date.\\n@return this EventRecurrence for chaining*/addDateExclusion(date:Date):CalendarApp.EventRecurrence;\\n/**Adds a rule that excludes occurrences on a monthly basis.\\n\\nBy default the exclusion is applied on the same day of the month as the first event in the\\nseries, but this can be altered by calling [`RecurrenceRule.onlyOnMonthDay(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnMonthDay(Integer)) or [`RecurrenceRule.onlyOnMonthDays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnMonthDays(Integer)).\\n@return the new RecurrenceRule*/addMonthlyExclusion():CalendarApp.RecurrenceRule;\\n/**Adds a rule that causes the event to recur on a monthly basis.\\n\\nBy default the event recurs on the same day of the month as the first event in the series,\\nbut this can be altered by calling [`RecurrenceRule.onlyOnMonthDay(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnMonthDay(Integer)) or [`RecurrenceRule.onlyOnMonthDays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnMonthDays(Integer)).\\n\\n```\\n// Creates a rule that recurs every month for three months.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addMonthlyRule().times(4);\\n```\\n@return the new RecurrenceRule*/addMonthlyRule():CalendarApp.RecurrenceRule;\\n/**Adds a rule that excludes occurrences on a weekly basis.\\n\\nBy default the exclusion is applied on the same day of the week as the first event in the\\nseries, but this can be altered by calling [`RecurrenceRule.onlyOnWeekday(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnWeekday(Weekday)) or [`RecurrenceRule.onlyOnWeekdays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnWeekdays(Weekday)).\\n\\n```\\n// Creates a rule that recurs every day except the first four Wednesdays.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addDailyRule()\\n    .addWeeklyExclusion().onlyOnWeekday(CalendarApp.Weekday.WEDNESDAY).times(4);\\n```\\n@return the new RecurrenceRule*/addWeeklyExclusion():CalendarApp.RecurrenceRule;\\n/**Adds a rule that causes the event to recur on a weekly basis.\\n\\nBy default the event recurs on the same day of the week as the first event in the series,\\nbut this can be altered by calling [`RecurrenceRule.onlyOnWeekday(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnWeekday(Weekday)) or [`RecurrenceRule.onlyOnWeekdays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnWeekdays(Weekday)).\\n\\n```\\n// Creates a rule that recurs every week for ten weeks.\\nvar recurrence \\u003d CalendarApp.newRecurrence().addWeeklyRule().times(10);\\n```\\n@return the new RecurrenceRule*/addWeeklyRule():CalendarApp.RecurrenceRule;\\n/**Adds a rule that excludes occurrences on a yearly basis.\\n\\nBy default the exclusion is applied on the same day of the year as the first event in the\\nseries, but this can be altered by calling [`RecurrenceRule.onlyOnYearDay(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnYearDay(Integer)) or [`RecurrenceRule.onlyOnYearDays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnYearDays(Integer)).\\n@return the new RecurrenceRule*/addYearlyExclusion():CalendarApp.RecurrenceRule;\\n/**Adds a rule that causes the event to recur on a yearly basis.\\n\\nBy default the event recurs on the same day of the year as the first event in the series,\\nbut this can be altered by calling [`RecurrenceRule.onlyOnYearDay(day)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnYearDay(Integer)) or [`RecurrenceRule.onlyOnYearDays(days)`](https://developers.google.com/apps-script/reference/calendar/recurrence-rule.html#onlyOnYearDays(Integer)).\\n@return the new RecurrenceRule*/addYearlyRule():CalendarApp.RecurrenceRule;\\n/**Sets the time zone for this recurrence. This affects the date and time that events recur on,\\nand whether the event shifts with daylight savings time. Defaults to the calendar's time zone.\\n@param timeZone the time zone, specified in \\\"long\\\" format (e.g., 'America/New_York', as listed\\n    by [Joda.org](http://joda-time.sourceforge.net/timezones.html))\\n@return this EventRecurrence for chaining*/setTimeZone(timeZone:string):CalendarApp.EventRecurrence;}interface EventGuest{\\n/**Gets the number of additional people that this guest has said are attending.\\n@return the number of additional people this guest has said are attending*/getAdditionalGuests():Integer;\\n/**Gets the email address of the guest.\\n@return the guest's email address*/getEmail():string;\\n/**Gets the status of the guest for the event.\\n@return the status of this guest*/getGuestStatus():CalendarApp.GuestStatus;\\n/**Gets the name of the guest. If the name of the guest is not available, this method returns the\\nguest's email address.\\n@return the guest's name, or the guest's email address if the name is not available*/getName():string;\\n/**Gets the status of the guest for the event.\\n@deprecated\\n@return the status of this guest*/getStatus():string;}interface EventColor{}interface _EventColor{\\n/**Blue (`\\\"9\\\"`), referred to as \\\"Blueberry\\\" in th Calendar UI.*/BLUE:EventColor;\\n/**Cyan (`\\\"7\\\"`), referred to as \\\"Lavender\\\" in th Calendar UI.*/CYAN:EventColor;\\n/**Gray (`\\\"8\\\"`), referred to as \\\"Graphite\\\" in th Calendar UI.*/GRAY:EventColor;\\n/**Green (`\\\"10\\\"`), referred to as \\\"Basil\\\" in th Calendar UI.*/GREEN:EventColor;\\n/**Mauve (`\\\"3\\\"`),, referred to as \\\"Grape\\\" in th Calendar UI.*/MAUVE:EventColor;\\n/**Orange (`\\\"6\\\"`), referred to as \\\"Tangerine\\\" in th Calendar UI.*/ORANGE:EventColor;\\n/**Pale Blue (`\\\"1\\\"`), referred to as \\\"Peacock\\\" in th Calendar UI.*/PALE_BLUE:EventColor;\\n/**Pale Green (`\\\"2\\\"`), referred to as \\\"Sage\\\" in th Calendar UI.*/PALE_GREEN:EventColor;\\n/**Pale Red (`\\\"4\\\"`), referred to as \\\"Flamingo\\\" in th Calendar UI.*/PALE_RED:EventColor;\\n/**Red (`\\\"11\\\"`), referred to as \\\"Tomato\\\" in th Calendar UI.*/RED:EventColor;\\n/**Yellow (`\\\"5\\\"`), referred to as \\\"Banana\\\" in th Calendar UI.*/YELLOW:EventColor;}interface Color{}interface _Color{\\n/**Blue (`#2952A3`).*/BLUE:Color;\\n/**Brown (`#8D6F47`).*/BROWN:Color;\\n/**Charcoal (`#4E5D6C`).*/CHARCOAL:Color;\\n/**Chestnut (`#865A5A`).*/CHESTNUT:Color;\\n/**Gray (`#5A6986`).*/GRAY:Color;\\n/**Green (`#0D7813`).*/GREEN:Color;\\n/**Indigo (`#5229A3`).*/INDIGO:Color;\\n/**Lime (`#528800`).*/LIME:Color;\\n/**Mustard (`#88880E`).*/MUSTARD:Color;\\n/**Olive (`#6E6E41`).*/OLIVE:Color;\\n/**Orange (`#BE6D00`).*/ORANGE:Color;\\n/**Pink (`#B1365F`).*/PINK:Color;\\n/**Plum (`#705770`).*/PLUM:Color;\\n/**Purple (`#7A367A`).*/PURPLE:Color;\\n/**Red (`#A32929`).*/RED:Color;\\n/**Red-Orange (`#B1440E`).*/RED_ORANGE:Color;\\n/**Sea Blue (`#29527A`).*/SEA_BLUE:Color;\\n/**Slate (`#4A716C`).*/SLATE:Color;\\n/**Teal (`#28754E`).*/TEAL:Color;\\n/**Turquoise (`#1B887A`).*/TURQOISE:Color;\\n/**Yellow (`#AB8B00`).*/YELLOW:Color;}interface CalendarEventSeries{\\n/**Adds a new email reminder to the event. The reminder must be at least 5 minutes, and at most 4\\nweeks (40320 minutes), before the event.\\n\\n```\\n// Gets an event by its ID. For an event series, use getEventSeriesById(iCalId) instead.\\n// TODO(developer): Replace the string with the event ID that you want to get.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Adds an email notification for 15 minutes before the event.\\nevent.addEmailReminder(15);\\n```\\n@param minutesBefore the number of minutes before the event\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/addEmailReminder(minutesBefore:Integer):CalendarApp.CalendarEventSeries;\\n/**Adds a guest to the event.\\n\\n```\\n// Example 1: Add a guest to one event\\nfunction addAttendeeToEvent() {\\n  // Replace the below values with your own\\n  let attendeeEmail \\u003d 'user@example.com'; // Email address of the person you need to add\\n  let calendarId \\u003d 'calendar_123@group.calendar.google.com'; // ID of calendar containing event\\n  let eventId \\u003d '123abc'; // ID of event instance\\n\\n  let calendar \\u003d CalendarApp.getCalendarById(calendarId);\\n  if (calendar \\u003d\\u003d\\u003d null) {\\n    // Calendar not found\\n    console.log('Calendar not found', calendarId);\\n    return;\\n    }\\n  let event \\u003d calendar.getEventById(eventId);\\n  if (event \\u003d\\u003d\\u003d null) {\\n    // Event not found\\n    console.log('Event not found', eventId);\\n    return;\\n    }\\n  event.addGuest(attendeeEmail);\\n  }\\n\\n// Example 2: Add a guest to all events on a calendar within a specified timeframe\\nfunction addAttendeeToAllEvents(){\\n// Replace the following values with your own\\n  let attendeeEmail \\u003d 'user@example.com'; // Email address of the person you need to add\\n  let calendarId \\u003d 'calendar_123@group.calendar.google.com'; // ID of calendar with the events\\n  let startDate \\u003d new Date(\\\"YYYY-MM-DD\\\"); // The first date to add the guest to the events\\n  let endDate \\u003d new Date(\\\"YYYY-MM-DD\\\"); // The last date to add the guest to the events\\n\\n  let calendar \\u003d CalendarApp.getCalendarById(calendarId);\\n    if (calendar \\u003d\\u003d\\u003d null) {\\n    // Calendar not found\\n    console.log('Calendar not found', calendarId);\\n    return;\\n  }\\n  // Get the events within the specified timeframe\\n  let calEvents \\u003d calendar.getEvents(startDate,endDate);\\n  console.log(calEvents.length); // Checks how many events are found\\n  // Loop through all events and add the attendee to each of them\\n  for (var i \\u003d 0; i \\u003c calEvents.length; i++) {\\n  let event \\u003d calEvents[i];\\n  event.addGuest(attendeeEmail);\\n  }\\n}\\n```\\n@param email The email address of the guest.\\n@return This [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining.*/addGuest(email:string):CalendarApp.CalendarEventSeries;\\n/**Adds a new pop-up notification to the event. The notification must be at least 5 minutes, and\\nat most 4 weeks (40320 minutes), before the event.\\n\\n```\\n// Gets an event by its ID. For an event series, use getEventSeriesById(iCalId) instead.\\n// TODO(developer): Replace the string with the event ID that you want to get.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Adds a pop-up notification for 15 minutes before the event.\\nevent.addPopupReminder(15);\\n```\\n@param minutesBefore the number of minutes before the event\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/addPopupReminder(minutesBefore:Integer):CalendarApp.CalendarEventSeries;\\n/**Adds a new SMS reminder to the event. The reminder must be at least 5 minutes, and at most 4\\nweeks (40320 minutes), before the event.\\n@param minutesBefore the number of minutes before the event\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/addSmsReminder(minutesBefore:Integer):CalendarApp.CalendarEventSeries;\\n/**Determines whether people can add themselves as guests to a Calendar event.\\n\\n```\\n// Gets an event by its ID. For an event series, use getEventSeriesById(iCalId) instead.\\n// TODO(developer): Replace the string with the event ID that you want to get.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Determines whether people can add themselves as guests to the event and logs it.\\nconsole.log(event.anyoneCanAddSelf());\\n```\\n@return `true` if non-guests can add themselves to the event; `false` if not*/anyoneCanAddSelf():boolean;\\n/**Deletes the event series.*/deleteEventSeries():void;\\n/**Deletes a key/value tag from the event.\\n@param key the tag key\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/deleteTag(key:string):CalendarApp.CalendarEventSeries;\\n/**Gets all keys for tags that have been set on the event.\\n@return an array of string keys*/getAllTagKeys():string[];\\n/**Returns the color of the calendar event.\\n\\n```\\n// Gets an event by its ID. For an event series, use getEventSeriesById(iCalId) instead.\\n// TODO(developer): Replace the string with the event ID that you want to get.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Gets the color of the calendar event and logs it.\\nconst eventColor \\u003d event.getColor();\\nconsole.log(eventColor);\\n```\\n@return The string representation of the event color, as an index (1-11) of values from [`CalendarApp.EventColor`](https://developers.google.com/apps-script/reference/calendar/event-color.html).*/getColor():string;\\n/**Gets the creators of an event.\\n\\n```\\n// Gets an event by its ID. For an event series, use getEventSeriesById(iCalId) instead.\\n// TODO(developer): Replace the string with the event ID that you want to get.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Gets a list of the creators of the event and logs it.\\nconsole.log(event.getCreators());\\n```\\n@return the email addresses of the event's creators*/getCreators():string[];\\n/**Gets the date the event was created. You must have access to the calendar.\\n\\n```\\n// Opens the calendar by using its ID.\\n// To get the user's default calendar use CalendarApp.getDefault() instead.\\n// TODO(developer): Replace the calendar ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 8:10 AM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 08:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, gets the date that the event\\n // was created and logs it.\\n const eventCreated \\u003d event.getDateCreated();\\n console.log(eventCreated);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the date of creation*/getDateCreated():Date;\\n/**Gets the description of the event. You must have edit access to the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// To get the user's default calendar use CalendarApp.getDefault() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 4th, 2023 that takes place\\nbetween 4:00 PM and 5:00 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 04, 2023 16:00:00'), new Date('Feb 04, 2023 17:00:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the description of the event.\\n event.setDescription('Important meeting');\\n\\n // Gets the description of the event and logs it.\\n const description \\u003d event.getDescription();\\n console.log(description);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the description*/getDescription():string;\\n/**Gets the minute values for all email reminders for the event. You must have edit access to the\\ncalendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 4th, 2023 that takes place\\nbetween 5:00 PM and 6:00 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 04, 2023 15:00:00'), new Date('Feb 04, 2023 18:00:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, adds email reminders for the user to be\\n // sent at 4 and 7 minutes before the event.\\n event.addEmailReminder(4);\\n event.addEmailReminder(7);\\n\\n // Gets the minute values for all email reminders that are set up for the user for this event\\n // and logs it.\\n const emailReminder \\u003d event.getEmailReminders();\\n console.log(emailReminder);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return an array in which each value corresponds to the number of minutes before the event that\\n    a reminder triggers*/getEmailReminders():Integer[];\\n/**Get the [`EventType`](https://developers.google.com/apps-script/reference/calendar/event-type.html) of this event.\\n@return The event type.*/getEventType():CalendarApp.EventType;\\n/**Gets a guest by email address.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 25th, 2023 that takes place\\n// between 5:00 PM and 5:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 25,2023 17:00:00'), new Date('Feb 25,2023 17:25:00'))[0];\\n\\n// Gets a guest by email address.\\nconst guestEmailId \\u003d event.getGuestByEmail('alex@example.com');\\n\\n// If the email address corresponds to an event guest, logs the email address.\\nif (guestEmailId) {\\n  console.log(guestEmailId.getEmail());\\n}\\n```\\n@param email the address of the guest\\n@return the guest, or null if the email address does not correspond to a guest*/getGuestByEmail(email:string):CalendarApp.EventGuest;\\n/**Gets the guests for the event, not including the event owner.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 25th, 2023 that takes place\\n// between 5:00 PM and 5:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 25,2023 17:00:00'), new Date('Feb 25,2023 17:25:00'))[0];\\n\\n// Adds two guests to the event by using their email addresses.\\nevent.addGuest('alex@example.com');\\nevent.addGuest('cruz@example.com');\\n\\n// Gets the guests list for the event.\\nconst guestList \\u003d event.getGuestList();\\n\\n// Loops through the list to get all the guests and logs their email addresses.\\nfor (const guest of guestList){\\n  console.log(guest.getEmail());\\n}\\n```\\n@return an array of the guests*/getGuestList():CalendarApp.EventGuest[];\\n/**Gets the guests for the event, potentially including the event owners.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 25th, 2023 that takes place\\n// between 5:00 PM and 5:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 25,2023 17:00:00'), new Date('Feb 25,2023 17:25:00'))[0];\\n\\n// Gets the guests list for the event, including the owner of the event.\\nconst guestList \\u003d event.getGuestList(true);\\n\\n// Loops through the list to get all the guests and logs it.\\nfor (const guest of guestList) {\\n  console.log(guest.getEmail());\\n}\\n```\\n@param includeOwner whether to include the owners as a guest\\n@return an array of the guests*/getGuestList(includeOwner:boolean):CalendarApp.EventGuest[];\\n/**Gets the unique iCalUID of the event. Note that the iCalUID and the event [`id`](/calendar/v3/reference/events#resource-representations) used by the\\n[Calendar v3 API](/calendar/v3/reference/) and [Calendar advanced service](/apps-script/advanced/calendar) are not identical and\\ncannot be used interchangeably. One difference in their semantics is that in recurring events\\nall occurrences of one event have different `ids` while they all share the same iCalUIDs.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for January 5th, 2023 that takes place\\n// between 9:00 AM and 9:25 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Jan 05, 2023 09:00:00'), new Date('Jan 05, 2023 09:25:00'))[0];\\n\\n// Gets the ID of the event and logs it.\\nconsole.log(event.getId());\\n```\\n@return the iCalUID of the event*/getId():string;\\n/**Gets the date the event was last updated.\\n\\n```\\n// Opens the calendar by its ID. You must have view access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\nbetween 4:00 PM and 5:00 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:00:00'), new Date('Feb 01, 2023 17:00:00'))[0];\\n\\n// Gets the date the event was last updated and logs it.\\nconst eventUpdatedDate \\u003d event.getLastUpdated();\\nconsole.log(eventUpdatedDate);\\n```\\n@return the last updated date*/getLastUpdated():Date;\\n/**Gets the location of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the location of the event to Mumbai.\\n event.setLocation('Mumbai');\\n\\n // Gets the location of the event and logs it.\\n const eventLocation \\u003d event.getLocation();\\n console.log(eventLocation);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the event location*/getLocation():string;\\n/**Gets the event status (such as attending or invited) of the effective user. Always returns\\n`GuestStatus.OWNER` if the effective user is the owner of the event.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, gets the event status of\\n // the effective user and logs it.\\n const myStatus \\u003d event.getMyStatus();\\n console.log(myStatus.toString());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the status*/getMyStatus():CalendarApp.GuestStatus;\\n/**Get the ID of the calendar where this event was originally created.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 25th, 2023 that takes place\\n// between 4:00 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 25,2023 16:00:00'), new Date('Feb 25,2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, gets the ID of the calendar where the\\n // event was originally created and logs it.\\n const calendarId \\u003d event.getOriginalCalendarId();\\n console.log(calendarId);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the ID of the original calendar*/getOriginalCalendarId():string;\\n/**Gets the minute values for all pop-up reminders for the event.\\n\\n```\\n  // Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 4th, 2023 that takes place\\n// between 5:05 PM and 5:35 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 04, 2023 17:05:00'), new Date('Feb 04, 2023 17:35:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, adds two pop-up reminders to the event.\\n // The first reminder pops up 5 minutes before the event starts and the second reminder\\n // pops up 3 minutes before the event starts.\\n event.addPopupReminder(3);\\n event.addPopupReminder(5);\\n\\n // Gets the minute values for all pop-up reminders for the event and logs it.\\n const popUpReminder \\u003d event.getPopupReminders();\\n console.log(popUpReminder);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return an array in which each value corresponds to the number of minutes before the event that\\n    a reminder triggers*/getPopupReminders():Integer[];\\n/**Gets the minute values for all SMS reminders for the event.\\n@return an array in which each value corresponds to the number of minutes before the event that\\n    a reminder triggers*/getSmsReminders():Integer[];\\n/**Gets a tag value of the event.\\n@param key the key\\n@return the tag value*/getTag(key:string):string;\\n/**Gets the title of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for January 31st, 2023 that takes place\\n// between 9:05 AM and 9:15 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Jan 31, 2023 09:05:00'), new Date('Jan 31, 2023 09:15:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, logs the title of the event.\\n console.log(event.getTitle());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the title*/getTitle():string;\\n/**Gets the visibility of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, gets the visibility of the event\\n // and logs it.\\n const eventVisibility \\u003d event.getVisibility();\\n console.log(eventVisibility.toString());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the visibility value*/getVisibility():CalendarApp.Visibility;\\n/**Determines whether guests can invite other guests.\\n\\n```\\n// Opens the calendar by its ID. You must have view access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 9:35 AM and 9:40 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 09:35:00'), new Date('Feb 01, 2023 09:40:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, determines whether guests can invite\\n // other guests and logs it.\\n console.log(event.guestsCanInviteOthers());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return `true` if guests can invite others; `false` if not*/guestsCanInviteOthers():boolean;\\n/**Determines whether guests can modify the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 9:35 AM and 9:40 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 09:35:00'), new Date('Feb 01, 2023 09:40:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the event so that guests can't\\n // modify it.\\n event.setGuestsCanModify(false);\\n\\n // Determines whether guests can modify the event and logs it.\\n console.log(event.guestsCanModify());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return `true` if guests can modify the event; `false` if not*/guestsCanModify():boolean;\\n/**Determines whether guests can see other guests.\\n\\n```\\n// Opens the calendar by its ID. You must have view access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 9:35 AM and 9:40 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 09:35:00'), new Date('Feb 01, 2023 09:40:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, determines whether guests can see other\\n // guests and logs it.\\n console.log(event.guestsCanSeeGuests());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return `true` if guests can see other guests; `false` if not*/guestsCanSeeGuests():boolean;\\n/**Determines whether you're the owner of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have view access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for January 31st, 2023 that takes place\\n// between 9:05 AM and 9:15 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Jan 31, 2023 09:05:00'), new Date('Jan 31, 2023 09:15:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, determines whether you're the owner\\n // of the event and logs it.\\n console.log(event.isOwnedByMe());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return `true` if the event is owned by the effective user; `false` if not*/isOwnedByMe():boolean;\\n/**Removes all reminders from the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 1,2023 16:10:00'), new Date('Feb 1,2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, removes all reminders from the event.\\n event.removeAllReminders();\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/removeAllReminders():CalendarApp.CalendarEventSeries;\\n/**Removes a guest from the event.\\n\\n```\\n// Example 1: Remove a guest from one event\\nfunction removeGuestFromEvent() {\\n  // Replace the below values with your own\\n  let attendeeEmail \\u003d 'user@example.com'; // Email address of the person you need to remove\\n  let calendarId \\u003d 'calendar_123@group.calendar.google.com'; // ID of calendar containing event\\n  let eventId \\u003d '123abc'; // ID of event instance\\n\\n  let calendar \\u003d CalendarApp.getCalendarById(calendarId);\\n  if (calendar \\u003d\\u003d\\u003d null) {\\n    // Calendar not found\\n    console.log('Calendar not found', calendarId);\\n    return;\\n    }\\n  let event \\u003d calendar.getEventById(eventId);\\n  if (event \\u003d\\u003d\\u003d null) {\\n    // Event not found\\n    console.log('Event not found', eventId);\\n    return;\\n    }\\n  event.removeGuest(attendeeEmail);\\n  }\\n\\n// Example 2: Remove a guest from all events on a calendar within a specified timeframe\\nfunction removeGuestFromAllEvents(){\\n// Replace the following values with your own\\n  let attendeeEmail \\u003d 'user@example.com'; // Email address of the person you need to remove\\n  let calendarId \\u003d 'calendar_123@group.calendar.google.com'; // ID of calendar with the events\\n  let startDate \\u003d new Date(\\\"YYYY-MM-DD\\\"); // The first date to remove the guest from the events\\n  let endDate \\u003d new Date(\\\"YYYY-MM-DD\\\"); // The last date to remove the attendee from the events\\n\\n  let calendar \\u003d CalendarApp.getCalendarById(calendarId);\\n    if (calendar \\u003d\\u003d\\u003d null) {\\n    // Calendar not found\\n    console.log('Calendar not found', calendarId);\\n    return;\\n  }\\n  // Get the events within the specified timeframe\\n  let calEvents \\u003d calendar.getEvents(startDate,endDate);\\n  console.log(calEvents.length); // Checks how many events are found\\n  // Loop through all events and remove the attendee from each of them\\n  for (var i \\u003d 0; i \\u003c calEvents.length; i++) {\\n  let event \\u003d calEvents[i];\\n  event.removeGuest(attendeeEmail);\\n  }\\n}\\n```\\n@param email the email address of the guest\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/removeGuest(email:string):CalendarApp.CalendarEventSeries;\\n/**Resets the reminders using the calendar's default settings.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 1, 2023 16:10:00'), new Date('Feb 1, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, resets the reminders using the calendar's\\n // default settings.\\n event.resetRemindersToDefault();\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/resetRemindersToDefault():CalendarApp.CalendarEventSeries;\\n/**Sets whether non-guests can add themselves to the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 15th, 2023 that takes place\\n// between 3:30 PM and 4:30 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 15, 2023 15:30:00'), new Date('Feb 15, 2023 16:30:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the event so that non-guests\\n // can't add themselves to the event.\\n event.setAnyoneCanAddSelf(false);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param anyoneCanAddSelf whether anyone can invite themselves\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/setAnyoneCanAddSelf(anyoneCanAddSelf:boolean):CalendarApp.CalendarEventSeries;\\n/**Sets the color of the calendar event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the color of the calendar event to\\n // green.\\n event.setColor(CalendarApp.EventColor.GREEN);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param color An integer color index as a string, or a value from [`CalendarApp.EventColor`](https://developers.google.com/apps-script/reference/calendar/event-color.html).\\n@return This calendar event, for chaining.*/setColor(color:string):CalendarApp.CalendarEventSeries;\\n/**Sets the description of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 4th, 2023 that takes place\\n// between 5:05 PM and 5:35 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 04, 2023 17:05:00'), new Date('Feb 04, 2023 17:35:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the description of the event to\\n // 'Meeting.'\\n event.setDescription('Meeting');\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param description the new description\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/setDescription(description:string):CalendarApp.CalendarEventSeries;\\n/**Sets whether guests can invite other guests.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own. You must have edit access to the calendar.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 9:35 AM and 9:40 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 09:35:00'), new Date('Feb 01, 2023 09:40:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the event so that guests can invite\\n // other guests.\\n event.setGuestsCanInviteOthers(true);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param guestsCanInviteOthers whether guests can invite others\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/setGuestsCanInviteOthers(guestsCanInviteOthers:boolean):CalendarApp.CalendarEventSeries;\\n/**Sets whether guests can modify the event.\\n@param guestsCanModify whether guests can modify the event\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/setGuestsCanModify(guestsCanModify:boolean):CalendarApp.CalendarEventSeries;\\n/**Sets whether guests can see other guests.\\n@param guestsCanSeeGuests whether guests can see others\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/setGuestsCanSeeGuests(guestsCanSeeGuests:boolean):CalendarApp.CalendarEventSeries;\\n/**Sets the location of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the location of the event to Noida.\\n event.setLocation('Noida');\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param location the new location\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/setLocation(location:string):CalendarApp.CalendarEventSeries;\\n/**Sets the event status (such as attending or invited) of the effective user.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the event status for the current user\\n to maybe.\\n event.setMyStatus(CalendarApp.GuestStatus.MAYBE);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param status the new status\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/setMyStatus(status:CalendarApp.GuestStatus):CalendarApp.CalendarEventSeries;\\n/**Sets the recurrence rules for an all-day event series. Applying this method changes a regular\\nevent series into an all-day event series.\\n\\n```\\n// Sets the events in a series to take place every Wednesday in 2013.\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().getEventSeriesById('123456789@google.com');\\nvar startDate \\u003d new Date('January 2, 2013 03:00:00 PM EST');\\nvar recurrence \\u003d CalendarApp.newRecurrence().addWeeklyRule()\\n    .onlyOnWeekday(CalendarApp.Weekday.WEDNESDAY)\\n    .until(new Date('January 1, 2014'));\\neventSeries.setRecurrence(recurrence, startDate);\\n```\\n@param recurrence the recurrence rules to use\\n@param startDate the date of the first event in the series (only the day is used; the time is\\n    ignored)\\n@return this CalendarEventSeries for chaining*/setRecurrence(recurrence:CalendarApp.EventRecurrence,startDate:Date):CalendarApp.CalendarEventSeries;\\n/**Sets the recurrence rules for this event series. Applying this method changes an all-day event\\nseries into a regular event series.\\n\\n```\\n// Sets the events in a series to take place from 3pm to 4pm every Tuesday and Thursday in\\n// 2013.\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().getEventSeriesById('123456789@google.com');\\nvar startTime \\u003d new Date('January 1, 2013 03:00:00 PM EST');\\nvar endTime \\u003d new Date('January 1, 2013 04:00:00 PM EST');\\nvar recurrence \\u003d CalendarApp.newRecurrence().addWeeklyRule()\\n     .onlyOnWeekdays([CalendarApp.Weekday.TUESDAY, CalendarApp.Weekday.THURSDAY])\\n     .until(new Date('January 1, 2014'));\\neventSeries.setRecurrence(recurrence, startTime, endTime);\\n```\\n@param recurrence the recurrence rules to use\\n@param startTime the date and time when the first event in the series starts\\n@param endTime the date and time when the first event in the series ends\\n@return this CalendarEventSeries for chaining*/setRecurrence(recurrence:CalendarApp.EventRecurrence,startTime:Date,endTime:Date):CalendarApp.CalendarEventSeries;\\n/**Sets a key/value tag on the event, for storing custom metadata.\\n@param key the tag key\\n@param value the tag value\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/setTag(key:string,value:string):CalendarApp.CalendarEventSeries;\\n/**Sets the title of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for January 31st, 2023 that takes place\\n// between 9:05 AM and 9:15 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Jan 31, 2023 09:05:00'), new Date('Jan 31, 2023 09:15:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, changes its title to Event1.\\n event.setTitle('Event1');\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param title the new title\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/setTitle(title:string):CalendarApp.CalendarEventSeries;\\n/**Sets the visibility of the event.\\n@return this [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) for chaining*/setVisibility(visibility:CalendarApp.Visibility):CalendarApp.CalendarEventSeries;}interface CalendarEvent{\\n/**Adds a new email reminder to the event. The reminder must be at least 5 minutes, and at most 4\\nweeks (40320 minutes), before the event.\\n\\n```\\n// Gets an event by its ID. For an event series, use getEventSeriesById(iCalId) instead.\\n// TODO(developer): Replace the string with the event ID that you want to get.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Adds an email notification for 15 minutes before the event.\\nevent.addEmailReminder(15);\\n```\\n@param minutesBefore the number of minutes before the event\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/addEmailReminder(minutesBefore:Integer):CalendarApp.CalendarEvent;\\n/**Adds a guest to the event.\\n\\n```\\n// Example 1: Add a guest to one event\\nfunction addAttendeeToEvent() {\\n  // Replace the below values with your own\\n  let attendeeEmail \\u003d 'user@example.com'; // Email address of the person you need to add\\n  let calendarId \\u003d 'calendar_123@group.calendar.google.com'; // ID of calendar containing event\\n  let eventId \\u003d '123abc'; // ID of event instance\\n\\n  let calendar \\u003d CalendarApp.getCalendarById(calendarId);\\n  if (calendar \\u003d\\u003d\\u003d null) {\\n    // Calendar not found\\n    console.log('Calendar not found', calendarId);\\n    return;\\n    }\\n  let event \\u003d calendar.getEventById(eventId);\\n  if (event \\u003d\\u003d\\u003d null) {\\n    // Event not found\\n    console.log('Event not found', eventId);\\n    return;\\n    }\\n  event.addGuest(attendeeEmail);\\n  }\\n\\n// Example 2: Add a guest to all events on a calendar within a specified timeframe\\nfunction addAttendeeToAllEvents(){\\n// Replace the following values with your own\\n  let attendeeEmail \\u003d 'user@example.com'; // Email address of the person you need to add\\n  let calendarId \\u003d 'calendar_123@group.calendar.google.com'; // ID of calendar with the events\\n  let startDate \\u003d new Date(\\\"YYYY-MM-DD\\\"); // The first date to add the guest to the events\\n  let endDate \\u003d new Date(\\\"YYYY-MM-DD\\\"); // The last date to add the guest to the events\\n\\n  let calendar \\u003d CalendarApp.getCalendarById(calendarId);\\n    if (calendar \\u003d\\u003d\\u003d null) {\\n    // Calendar not found\\n    console.log('Calendar not found', calendarId);\\n    return;\\n  }\\n  // Get the events within the specified timeframe\\n  let calEvents \\u003d calendar.getEvents(startDate,endDate);\\n  console.log(calEvents.length); // Checks how many events are found\\n  // Loop through all events and add the attendee to each of them\\n  for (var i \\u003d 0; i \\u003c calEvents.length; i++) {\\n  let event \\u003d calEvents[i];\\n  event.addGuest(attendeeEmail);\\n  }\\n}\\n```\\n@param email The email address of the guest.\\n@return This [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining.*/addGuest(email:string):CalendarApp.CalendarEvent;\\n/**Adds a new pop-up notification to the event. The notification must be at least 5 minutes, and\\nat most 4 weeks (40320 minutes), before the event.\\n\\n```\\n// Gets an event by its ID. For an event series, use getEventSeriesById(iCalId) instead.\\n// TODO(developer): Replace the string with the event ID that you want to get.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Adds a pop-up notification for 15 minutes before the event.\\nevent.addPopupReminder(15);\\n```\\n@param minutesBefore the number of minutes before the event\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/addPopupReminder(minutesBefore:Integer):CalendarApp.CalendarEvent;\\n/**Adds a new SMS reminder to the event. The reminder must be at least 5 minutes, and at most 4\\nweeks (40320 minutes), before the event.\\n@param minutesBefore the number of minutes before the event\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/addSmsReminder(minutesBefore:Integer):CalendarApp.CalendarEvent;\\n/**Determines whether people can add themselves as guests to a Calendar event.\\n\\n```\\n// Gets an event by its ID. For an event series, use getEventSeriesById(iCalId) instead.\\n// TODO(developer): Replace the string with the event ID that you want to get.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Determines whether people can add themselves as guests to the event and logs it.\\nconsole.log(event.anyoneCanAddSelf());\\n```\\n@return `true` if non-guests can add themselves to the event; `false` if not*/anyoneCanAddSelf():boolean;\\n/**Deletes a Calendar event.\\n\\n```\\n// Gets an event by its ID.\\n// TODO(developer): Replace the string with the ID of the event that you want to delete.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Deletes the event.\\nevent.deleteEvent();\\n```*/deleteEvent():void;\\n/**Deletes a key/value tag from the event.\\n@param key the tag key\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/deleteTag(key:string):CalendarApp.CalendarEvent;\\n/**Gets the date on which this all-day calendar event ends. (If this is not an all-day event, then\\nthis method throws an exception.) The returned `Date` represents midnight at the\\nbeginning of the day after the event ends _in the script's time zone_. To use the\\ncalendar's time zone instead, call [`getEndTime()`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html#getEndTime()).\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Creates an event named 'My all-day event' for May 16, 2023.\\nconst event \\u003d calendar.createAllDayEvent('My all-day event', new Date('May 16, 2023'));\\n\\n// Gets the event's end date and logs it.\\nconst endDate \\u003d event.getAllDayEndDate();\\nconsole.log(endDate);\\n```\\n@return this all-day calendar event's end date*/getAllDayEndDate():Date;\\n/**Gets the date on which this all-day calendar event begins. (If this is not an all-day event,\\nthen this method throws an exception.) The returned `Date` represents midnight at the\\nbeginning of the day on which the event starts _in the script's time zone_. To use the\\ncalendar's time zone instead, call [`getStartTime()`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html#getStartTime()).\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Creates an event named 'My all-day event' for May 16, 2023.\\nconst event \\u003d calendar.createAllDayEvent('My all-day event', new Date('May 16, 2023'));\\n\\n// Gets the event's start date and logs it.\\nconst startDate \\u003d event.getAllDayStartDate();\\nconsole.log(startDate);\\n```\\n@return this all-day calendar event's start date*/getAllDayStartDate():Date;\\n/**Gets all keys for tags that have been set on the event.\\n@return an array of string keys*/getAllTagKeys():string[];\\n/**Returns the color of the calendar event.\\n\\n```\\n// Gets an event by its ID. For an event series, use getEventSeriesById(iCalId) instead.\\n// TODO(developer): Replace the string with the event ID that you want to get.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Gets the color of the calendar event and logs it.\\nconst eventColor \\u003d event.getColor();\\nconsole.log(eventColor);\\n```\\n@return The string representation of the event color, as an index (1-11) of values from [`CalendarApp.EventColor`](https://developers.google.com/apps-script/reference/calendar/event-color.html).*/getColor():string;\\n/**Gets the creators of an event.\\n\\n```\\n// Gets an event by its ID. For an event series, use getEventSeriesById(iCalId) instead.\\n// TODO(developer): Replace the string with the event ID that you want to get.\\nconst event \\u003d CalendarApp.getEventById('abc123456');\\n\\n// Gets a list of the creators of the event and logs it.\\nconsole.log(event.getCreators());\\n```\\n@return the email addresses of the event's creators*/getCreators():string[];\\n/**Gets the date the event was created. You must have access to the calendar.\\n\\n```\\n// Opens the calendar by using its ID.\\n// To get the user's default calendar use CalendarApp.getDefault() instead.\\n// TODO(developer): Replace the calendar ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 8:10 AM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 08:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, gets the date that the event\\n // was created and logs it.\\n const eventCreated \\u003d event.getDateCreated();\\n console.log(eventCreated);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the date of creation*/getDateCreated():Date;\\n/**Gets the description of the event. You must have edit access to the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// To get the user's default calendar use CalendarApp.getDefault() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 4th, 2023 that takes place\\nbetween 4:00 PM and 5:00 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 04, 2023 16:00:00'), new Date('Feb 04, 2023 17:00:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the description of the event.\\n event.setDescription('Important meeting');\\n\\n // Gets the description of the event and logs it.\\n const description \\u003d event.getDescription();\\n console.log(description);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the description*/getDescription():string;\\n/**Gets the minute values for all email reminders for the event. You must have edit access to the\\ncalendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 4th, 2023 that takes place\\nbetween 5:00 PM and 6:00 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 04, 2023 15:00:00'), new Date('Feb 04, 2023 18:00:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, adds email reminders for the user to be\\n // sent at 4 and 7 minutes before the event.\\n event.addEmailReminder(4);\\n event.addEmailReminder(7);\\n\\n // Gets the minute values for all email reminders that are set up for the user for this event\\n // and logs it.\\n const emailReminder \\u003d event.getEmailReminders();\\n console.log(emailReminder);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return an array in which each value corresponds to the number of minutes before the event that\\n    a reminder triggers*/getEmailReminders():Integer[];\\n/**Gets the date and time at which this calendar event ends. You must have access to the calendar.\\nFor non–all-day events, this is the instant in time at which the event was defined to\\nend. For all-day events, which only store an end date (not a date and time), this is midnight\\nat the beginning of the day after the event ends _in the calendar's time zone_. This\\nallows meaningful comparison of end times for all types of events; however, it does not\\nnecessarily preserve the original day-of-year unmodified.\\n\\nFor [all-day events](https://developers.google.com/apps-script/reference/calendar/calendar-event.html#isAllDayEvent()), [`getAllDayEndDate()`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html#getAllDayEndDate()) should almost\\nalways be called in preference to this method.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:00 PM and 5:00 PM.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:00:00'), new Date('Feb 01, 2023 17:00:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, gets the date and time at which the\\n // event ends and logs it.\\n console.log(event.getEndTime());\\n} else {\\n // If no event exists within the given time frame, logs that info to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return this calendar event's end time*/getEndTime():Date;\\n/**Gets the series of recurring events that this event belongs to. You must have access to the\\ncalendar. A [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) object is returned even if this event doesn't belong to\\na series, so that you can add new recurrence settings.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 18th, 2023 that takes place between\\n// 1:00 PM and 2:00 PM.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 18, 2023 13:00:00'), new Date('Feb 18, 2023 14:00:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, gets the event series for the event\\n // and sets the color to pale green.\\n event.getEventSeries().setColor(CalendarApp.EventColor.PALE_GREEN);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the event series this event belongs to, or a new event series if it does not yet belong\\n    to a series*/getEventSeries():CalendarApp.CalendarEventSeries;\\n/**Get the [`EventType`](https://developers.google.com/apps-script/reference/calendar/event-type.html) of this event.\\n@return The event type.*/getEventType():CalendarApp.EventType;\\n/**Gets a guest by email address.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 25th, 2023 that takes place\\n// between 5:00 PM and 5:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 25,2023 17:00:00'), new Date('Feb 25,2023 17:25:00'))[0];\\n\\n// Gets a guest by email address.\\nconst guestEmailId \\u003d event.getGuestByEmail('alex@example.com');\\n\\n// If the email address corresponds to an event guest, logs the email address.\\nif (guestEmailId) {\\n  console.log(guestEmailId.getEmail());\\n}\\n```\\n@param email the address of the guest\\n@return the guest, or null if the email address does not correspond to a guest*/getGuestByEmail(email:string):CalendarApp.EventGuest;\\n/**Gets the guests for the event, not including the event owner.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 25th, 2023 that takes place\\n// between 5:00 PM and 5:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 25,2023 17:00:00'), new Date('Feb 25,2023 17:25:00'))[0];\\n\\n// Adds two guests to the event by using their email addresses.\\nevent.addGuest('alex@example.com');\\nevent.addGuest('cruz@example.com');\\n\\n// Gets the guests list for the event.\\nconst guestList \\u003d event.getGuestList();\\n\\n// Loops through the list to get all the guests and logs their email addresses.\\nfor (const guest of guestList){\\n  console.log(guest.getEmail());\\n}\\n```\\n@return an array of the guests*/getGuestList():CalendarApp.EventGuest[];\\n/**Gets the guests for the event, potentially including the event owners.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 25th, 2023 that takes place\\n// between 5:00 PM and 5:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 25,2023 17:00:00'), new Date('Feb 25,2023 17:25:00'))[0];\\n\\n// Gets the guests list for the event, including the owner of the event.\\nconst guestList \\u003d event.getGuestList(true);\\n\\n// Loops through the list to get all the guests and logs it.\\nfor (const guest of guestList) {\\n  console.log(guest.getEmail());\\n}\\n```\\n@param includeOwner whether to include the owners as a guest\\n@return an array of the guests*/getGuestList(includeOwner:boolean):CalendarApp.EventGuest[];\\n/**Gets the unique iCalUID of the event. Note that the iCalUID and the event [`id`](/calendar/v3/reference/events#resource-representations) used by the\\n[Calendar v3 API](/calendar/v3/reference/) and [Calendar advanced service](/apps-script/advanced/calendar) are not identical and\\ncannot be used interchangeably. One difference in their semantics is that in recurring events\\nall occurrences of one event have different `ids` while they all share the same iCalUIDs.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for January 5th, 2023 that takes place\\n// between 9:00 AM and 9:25 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Jan 05, 2023 09:00:00'), new Date('Jan 05, 2023 09:25:00'))[0];\\n\\n// Gets the ID of the event and logs it.\\nconsole.log(event.getId());\\n```\\n@return the iCalUID of the event*/getId():string;\\n/**Gets the date the event was last updated.\\n\\n```\\n// Opens the calendar by its ID. You must have view access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\nbetween 4:00 PM and 5:00 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:00:00'), new Date('Feb 01, 2023 17:00:00'))[0];\\n\\n// Gets the date the event was last updated and logs it.\\nconst eventUpdatedDate \\u003d event.getLastUpdated();\\nconsole.log(eventUpdatedDate);\\n```\\n@return the last updated date*/getLastUpdated():Date;\\n/**Gets the location of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the location of the event to Mumbai.\\n event.setLocation('Mumbai');\\n\\n // Gets the location of the event and logs it.\\n const eventLocation \\u003d event.getLocation();\\n console.log(eventLocation);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the event location*/getLocation():string;\\n/**Gets the event status (such as attending or invited) of the effective user. Always returns\\n`GuestStatus.OWNER` if the effective user is the owner of the event.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, gets the event status of\\n // the effective user and logs it.\\n const myStatus \\u003d event.getMyStatus();\\n console.log(myStatus.toString());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the status*/getMyStatus():CalendarApp.GuestStatus;\\n/**Get the ID of the calendar where this event was originally created.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 25th, 2023 that takes place\\n// between 4:00 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 25,2023 16:00:00'), new Date('Feb 25,2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, gets the ID of the calendar where the\\n // event was originally created and logs it.\\n const calendarId \\u003d event.getOriginalCalendarId();\\n console.log(calendarId);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the ID of the original calendar*/getOriginalCalendarId():string;\\n/**Gets the minute values for all pop-up reminders for the event.\\n\\n```\\n  // Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 4th, 2023 that takes place\\n// between 5:05 PM and 5:35 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 04, 2023 17:05:00'), new Date('Feb 04, 2023 17:35:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, adds two pop-up reminders to the event.\\n // The first reminder pops up 5 minutes before the event starts and the second reminder\\n // pops up 3 minutes before the event starts.\\n event.addPopupReminder(3);\\n event.addPopupReminder(5);\\n\\n // Gets the minute values for all pop-up reminders for the event and logs it.\\n const popUpReminder \\u003d event.getPopupReminders();\\n console.log(popUpReminder);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return an array in which each value corresponds to the number of minutes before the event that\\n    a reminder triggers*/getPopupReminders():Integer[];\\n/**Gets the minute values for all SMS reminders for the event.\\n@return an array in which each value corresponds to the number of minutes before the event that\\n    a reminder triggers*/getSmsReminders():Integer[];\\n/**Gets the date and time at which this calendar event begins. For non–all-day events, this\\nis the instant in time at which the event was defined to start. For all-day events, which only\\nstore a start date (not a date and time), this is midnight at the beginning of the day on which\\nthe event starts _in the calendar's time zone_. This allows meaningful comparison of\\nstart times for all types of events; however, it is not necessarily preserve the original\\nday-of-year unmodified.\\n\\nFor [all-day events](https://developers.google.com/apps-script/reference/calendar/calendar-event.html#isAllDayEvent()), [`getAllDayStartDate()`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html#getAllDayStartDate()) should\\nalmost always be called in preference to this method.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\n// Gets the date and time at which this calendar event begins and logs it.\\nconst startTime \\u003d event.getStartTime();\\nconsole.log(startTime);\\n```\\n@return this calendar event's start time*/getStartTime():Date;\\n/**Gets a tag value of the event.\\n@param key the key\\n@return the tag value*/getTag(key:string):string;\\n/**Gets the title of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for January 31st, 2023 that takes place\\n// between 9:05 AM and 9:15 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Jan 31, 2023 09:05:00'), new Date('Jan 31, 2023 09:15:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, logs the title of the event.\\n console.log(event.getTitle());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the title*/getTitle():string;\\n/**Gets the visibility of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, gets the visibility of the event\\n // and logs it.\\n const eventVisibility \\u003d event.getVisibility();\\n console.log(eventVisibility.toString());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return the visibility value*/getVisibility():CalendarApp.Visibility;\\n/**Determines whether guests can invite other guests.\\n\\n```\\n// Opens the calendar by its ID. You must have view access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 9:35 AM and 9:40 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 09:35:00'), new Date('Feb 01, 2023 09:40:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, determines whether guests can invite\\n // other guests and logs it.\\n console.log(event.guestsCanInviteOthers());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return `true` if guests can invite others; `false` if not*/guestsCanInviteOthers():boolean;\\n/**Determines whether guests can modify the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 9:35 AM and 9:40 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 09:35:00'), new Date('Feb 01, 2023 09:40:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the event so that guests can't\\n // modify it.\\n event.setGuestsCanModify(false);\\n\\n // Determines whether guests can modify the event and logs it.\\n console.log(event.guestsCanModify());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return `true` if guests can modify the event; `false` if not*/guestsCanModify():boolean;\\n/**Determines whether guests can see other guests.\\n\\n```\\n// Opens the calendar by its ID. You must have view access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 9:35 AM and 9:40 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 09:35:00'), new Date('Feb 01, 2023 09:40:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, determines whether guests can see other\\n // guests and logs it.\\n console.log(event.guestsCanSeeGuests());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return `true` if guests can see other guests; `false` if not*/guestsCanSeeGuests():boolean;\\n/**Determines whether this is an all-day event.\\n\\n```\\n// Opens the calendar by its ID. You must have view access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for January 31st, 2023 that takes place\\n// between 9:05 AM and 9:15 AM.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Jan 31, 2023 09:05:00'), new Date('Jan 31, 2023 09:15:00'))[0];\\n\\n// Determines whether this event is an all-day event and logs it.\\nconsole.log(event.isAllDayEvent());\\n```\\n@return `true` if the event is all-day; `false` if not*/isAllDayEvent():boolean;\\n/**Determines whether you're the owner of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have view access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for January 31st, 2023 that takes place\\n// between 9:05 AM and 9:15 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Jan 31, 2023 09:05:00'), new Date('Jan 31, 2023 09:15:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, determines whether you're the owner\\n // of the event and logs it.\\n console.log(event.isOwnedByMe());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return `true` if the event is owned by the effective user; `false` if not*/isOwnedByMe():boolean;\\n/**Determines whether the event is part of an event series.\\n\\n```\\n// Opens the calendar by its ID. You must have view access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for Januart 31st, 2023 that takes place\\n// between 9:00 AM and 10:00 AM.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Jan 31, 2023 09:00:00'), new Date('Jan 31, 2023 10:00:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, determines whether the event is part of an\\n // event series and logs it.\\n console.log(event.isRecurringEvent());\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return `true` if the event is part of an event series; `false` if not*/isRecurringEvent():boolean;\\n/**Removes all reminders from the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 1,2023 16:10:00'), new Date('Feb 1,2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, removes all reminders from the event.\\n event.removeAllReminders();\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/removeAllReminders():CalendarApp.CalendarEvent;\\n/**Removes a guest from the event.\\n\\n```\\n// Example 1: Remove a guest from one event\\nfunction removeGuestFromEvent() {\\n  // Replace the below values with your own\\n  let attendeeEmail \\u003d 'user@example.com'; // Email address of the person you need to remove\\n  let calendarId \\u003d 'calendar_123@group.calendar.google.com'; // ID of calendar containing event\\n  let eventId \\u003d '123abc'; // ID of event instance\\n\\n  let calendar \\u003d CalendarApp.getCalendarById(calendarId);\\n  if (calendar \\u003d\\u003d\\u003d null) {\\n    // Calendar not found\\n    console.log('Calendar not found', calendarId);\\n    return;\\n    }\\n  let event \\u003d calendar.getEventById(eventId);\\n  if (event \\u003d\\u003d\\u003d null) {\\n    // Event not found\\n    console.log('Event not found', eventId);\\n    return;\\n    }\\n  event.removeGuest(attendeeEmail);\\n  }\\n\\n// Example 2: Remove a guest from all events on a calendar within a specified timeframe\\nfunction removeGuestFromAllEvents(){\\n// Replace the following values with your own\\n  let attendeeEmail \\u003d 'user@example.com'; // Email address of the person you need to remove\\n  let calendarId \\u003d 'calendar_123@group.calendar.google.com'; // ID of calendar with the events\\n  let startDate \\u003d new Date(\\\"YYYY-MM-DD\\\"); // The first date to remove the guest from the events\\n  let endDate \\u003d new Date(\\\"YYYY-MM-DD\\\"); // The last date to remove the attendee from the events\\n\\n  let calendar \\u003d CalendarApp.getCalendarById(calendarId);\\n    if (calendar \\u003d\\u003d\\u003d null) {\\n    // Calendar not found\\n    console.log('Calendar not found', calendarId);\\n    return;\\n  }\\n  // Get the events within the specified timeframe\\n  let calEvents \\u003d calendar.getEvents(startDate,endDate);\\n  console.log(calEvents.length); // Checks how many events are found\\n  // Loop through all events and remove the attendee from each of them\\n  for (var i \\u003d 0; i \\u003c calEvents.length; i++) {\\n  let event \\u003d calEvents[i];\\n  event.removeGuest(attendeeEmail);\\n  }\\n}\\n```\\n@param email the email address of the guest\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/removeGuest(email:string):CalendarApp.CalendarEvent;\\n/**Resets the reminders using the calendar's default settings.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 1, 2023 16:10:00'), new Date('Feb 1, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, resets the reminders using the calendar's\\n // default settings.\\n event.resetRemindersToDefault();\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/resetRemindersToDefault():CalendarApp.CalendarEvent;\\n/**Sets the date of the event. Applying this method changes a regular event into an all-day event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 17th, 2023 that takes place\\n// between 4:00 PM and 5:00 PM.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 17, 2023 16:00:00'), new Date('Feb 17, 2023 17:00:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the date of the event and updates\\n // it to an all-day event.\\n event.setAllDayDate(new Date('Feb 17, 2023'));\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param date the date for the event (the time is ignored)\\n@return this CalendarEvent for chaining*/setAllDayDate(date:Date):CalendarApp.CalendarEvent;\\n/**Sets the dates of the event. Applying this method changes a regular event into an all-day\\nevent.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 18th, 2023 that takes place\\n// between 4:00 PM and 5:00 PM.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 18, 2023 16:00:00'), new Date('Feb 18, 2023 17:00:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the event to be an all-day event from\\n // Feb 18th, 2023 until Feb 25th, 2023. Applying this method changes a regular event into an\\n // all-day event.\\n event.setAllDayDates(new Date('Feb 18, 2023'), new Date('Feb 25, 2023'));\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param startDate the date when the event starts (the time is ignored)\\n@param endDate the date when the event ends (the time is ignored)\\n@return this CalendarEvent for chaining*/setAllDayDates(startDate:Date,endDate:Date):CalendarApp.CalendarEvent;\\n/**Sets whether non-guests can add themselves to the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 15th, 2023 that takes place\\n// between 3:30 PM and 4:30 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 15, 2023 15:30:00'), new Date('Feb 15, 2023 16:30:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the event so that non-guests\\n // can't add themselves to the event.\\n event.setAnyoneCanAddSelf(false);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param anyoneCanAddSelf whether anyone can invite themselves\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/setAnyoneCanAddSelf(anyoneCanAddSelf:boolean):CalendarApp.CalendarEvent;\\n/**Sets the color of the calendar event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the color of the calendar event to\\n // green.\\n event.setColor(CalendarApp.EventColor.GREEN);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param color An integer color index as a string, or a value from [`CalendarApp.EventColor`](https://developers.google.com/apps-script/reference/calendar/event-color.html).\\n@return This calendar event, for chaining.*/setColor(color:string):CalendarApp.CalendarEvent;\\n/**Sets the description of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 4th, 2023 that takes place\\n// between 5:05 PM and 5:35 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 04, 2023 17:05:00'), new Date('Feb 04, 2023 17:35:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the description of the event to\\n // 'Meeting.'\\n event.setDescription('Meeting');\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param description the new description\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/setDescription(description:string):CalendarApp.CalendarEvent;\\n/**Sets whether guests can invite other guests.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own. You must have edit access to the calendar.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 9:35 AM and 9:40 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 09:35:00'), new Date('Feb 01, 2023 09:40:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the event so that guests can invite\\n // other guests.\\n event.setGuestsCanInviteOthers(true);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param guestsCanInviteOthers whether guests can invite others\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/setGuestsCanInviteOthers(guestsCanInviteOthers:boolean):CalendarApp.CalendarEvent;\\n/**Sets whether guests can modify the event.\\n@param guestsCanModify whether guests can modify the event\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/setGuestsCanModify(guestsCanModify:boolean):CalendarApp.CalendarEvent;\\n/**Sets whether guests can see other guests.\\n@param guestsCanSeeGuests whether guests can see others\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/setGuestsCanSeeGuests(guestsCanSeeGuests:boolean):CalendarApp.CalendarEvent;\\n/**Sets the location of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the location of the event to Noida.\\n event.setLocation('Noida');\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param location the new location\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/setLocation(location:string):CalendarApp.CalendarEvent;\\n/**Sets the event status (such as attending or invited) of the effective user.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for February 1st, 2023 that takes place\\n// between 4:10 PM and 4:25 PM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Feb 01, 2023 16:10:00'), new Date('Feb 01, 2023 16:25:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, sets the event status for the current user\\n to maybe.\\n event.setMyStatus(CalendarApp.GuestStatus.MAYBE);\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param status the new status\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/setMyStatus(status:CalendarApp.GuestStatus):CalendarApp.CalendarEvent;\\n/**Sets a key/value tag on the event, for storing custom metadata.\\n@param key the tag key\\n@param value the tag value\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/setTag(key:string,value:string):CalendarApp.CalendarEvent;\\n/**Sets the dates and times for the start and end of the event. Applying this method changes an\\nall-day event into a regular event.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Declares a start time of 11:00 AM on February 20th, 2023 and an end time of 12:00 PM on\\n// February 20th, 2023.\\nconst startTime \\u003d new Date('Feb 20,2023 11:00:00');\\nconst endTime \\u003d new Date('Feb 20, 2023  12:00:00');\\n\\n// Creates an all-day event on February 20th, 2023.\\nconst event \\u003d calendar.createAllDayEvent('Meeting', new Date('Feb 20,2023'));\\n\\n// Updates the all-day event to a regular event by setting a start and end time for the event.\\nevent.setTime(startTime, endTime);\\n```\\n@param startTime the new start of the event\\n@param endTime the new end of the event\\n@return this CalendarEvent for chaining*/setTime(startTime:Date,endTime:Date):CalendarApp.CalendarEvent;\\n/**Sets the title of the event.\\n\\n```\\n// Opens the calendar by its ID. You must have edit access to the calendar.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Gets the first event from the calendar for January 31st, 2023 that takes place\\n// between 9:05 AM and 9:15 AM.\\n// For an event series, use calendar.getEventSeriesById('abc123456@google.com');\\n// and replace the series ID with your own.\\nconst event \\u003d\\n  calendar.getEvents(new Date('Jan 31, 2023 09:05:00'), new Date('Jan 31, 2023 09:15:00'))[0];\\n\\nif (event) {\\n // If an event exists within the given time frame, changes its title to Event1.\\n event.setTitle('Event1');\\n} else {\\n // If no event exists within the given time frame, logs that information to the console.\\n console.log('No events exist for the specified range');\\n}\\n```\\n@param title the new title\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/setTitle(title:string):CalendarApp.CalendarEvent;\\n/**Sets the visibility of the event.\\n@return this [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html) for chaining*/setVisibility(visibility:CalendarApp.Visibility):CalendarApp.CalendarEvent;}interface Calendar{\\n/**Creates a new all-day event.\\n\\n```\\n// Creates an all-day event for the moon landing and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createAllDayEvent('Apollo 11 Landing',\\n    new Date('July 20, 1969'));\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title The title of the event.\\n@param date The date of the event (only the day is used; the time is ignored).\\n@return The created event.*/createAllDayEvent(title:string,date:Date):CalendarApp.CalendarEvent;\\n/**Creates a new all-day event that can span multiple days.\\n\\n```\\n// Creates an all-day event for the Woodstock festival (August 15th to 17th) and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createAllDayEvent('Woodstock Festival',\\n    new Date('August 15, 1969'),\\n    new Date('August 18, 1969'));\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title The title of the event.\\n@param startDate The date when the event starts (only the day is used; the time is ignored).\\n@param endDate The date when the event ends (only the day is used; the time is ignored). The\\n    end date is exclusive.\\n@return The created event.*/createAllDayEvent(title:string,startDate:Date,endDate:Date):CalendarApp.CalendarEvent;\\n/**Creates a new all-day event that can span multiple days.\\n\\n```\\n// Creates an all-day event for the Woodstock festival (August 15th to 17th) and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createAllDayEvent('Woodstock Festival',\\n    new Date('August 15, 1969'),\\n    new Date('August 18, 1969'),\\n    {location: 'Bethel, White Lake, New York, U.S.', sendInvites: true});\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title The title of the event.\\n@param startDate The date when the event starts (only the day is used; the time is ignored).\\n@param endDate The date when the event ends (only the day is used; the time is ignored). The\\n    end date is exclusive.\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return The created event.*/createAllDayEvent(title:string,startDate:Date,endDate:Date,options:Object):CalendarApp.CalendarEvent;\\n/**Creates a new all-day event.\\n\\n```\\n// Creates an all-day event for the moon landing and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createAllDayEvent('Apollo 11 Landing',\\n    new Date('July 20, 1969'),\\n    {location: 'The Moon'});\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title The title of the event.\\n@param date The date of the event (only the day is used; the time is ignored).\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return The created event.*/createAllDayEvent(title:string,date:Date,options:Object):CalendarApp.CalendarEvent;\\n/**Creates a new all-day event series.\\n\\n```\\n// Creates an event series for a no-meetings day, taking place every Wednesday in 2013.\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().createAllDayEventSeries('No Meetings',\\n    new Date('January 2, 2013 03:00:00 PM EST'),\\n    CalendarApp.newRecurrence().addWeeklyRule()\\n        .onlyOnWeekday(CalendarApp.Weekday.WEDNESDAY)\\n        .until(new Date('January 1, 2014')));\\nLogger.log('Event Series ID: ' + eventSeries.getId());\\n```\\n@param title the title of the events in the series\\n@param startDate the date of the first event in the series (only the day is used; the time is\\n    ignored)\\n@param recurrence the recurrence settings of the event series\\n@return the created event series*/createAllDayEventSeries(title:string,startDate:Date,recurrence:CalendarApp.EventRecurrence):CalendarApp.CalendarEventSeries;\\n/**Creates a new all-day event series.\\n\\n```\\n// Creates an event series for a no-meetings day, taking place every Wednesday in 2013.\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().createAllDayEventSeries('No Meetings',\\n    new Date('January 2, 2013 03:00:00 PM EST'),\\n    CalendarApp.newRecurrence().addWeeklyRule()\\n        .onlyOnWeekday(CalendarApp.Weekday.WEDNESDAY)\\n        .until(new Date('January 1, 2014')),\\n    {guests: 'everyone@example.com'});\\nLogger.log('Event Series ID: ' + eventSeries.getId());\\n```\\n@param title the title of the events in the series\\n@param startDate the date of the first event in the series (only the day is used; the time is\\n    ignored)\\n@param recurrence the recurrence settings of the event series\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the created event series*/createAllDayEventSeries(title:string,startDate:Date,recurrence:CalendarApp.EventRecurrence,options:Object):CalendarApp.CalendarEventSeries;\\n/**Creates a new event.\\n\\nIf no time zone is specified, the time values are interpreted in the context of the script's\\ntime zone, which may be different than the calendar's time zone.\\n\\n```\\n// Creates an event for the moon landing and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createEvent('Apollo 11 Landing',\\n    new Date('July 20, 1969 20:00:00 UTC'),\\n    new Date('July 21, 1969 21:00:00 UTC'));\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title the title of the event\\n@param startTime the date and time when the event starts\\n@param endTime the date and time when the event ends\\n@return the created event*/createEvent(title:string,startTime:Date,endTime:Date):CalendarApp.CalendarEvent;\\n/**Creates a new event.\\n\\nIf no time zone is specified, the time values are interpreted in the context of the script's\\ntime zone, which may be different than the calendar's time zone.\\n\\n```\\n// Creates an event for the moon landing and logs the ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar().createEvent('Apollo 11 Landing',\\n    new Date('July 20, 1969 20:00:00 UTC'),\\n    new Date('July 20, 1969 21:00:00 UTC'),\\n    {location: 'The Moon'});\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param title the title of the event\\n@param startTime the date and time when the event starts\\n@param endTime the date and time when the event ends\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the created event*/createEvent(title:string,startTime:Date,endTime:Date,options:Object):CalendarApp.CalendarEvent;\\n/**Creates an event from a free-form description.\\n\\nThe description should use the same format as the UI's [\\\"Quick Add\\\"](http://support.google.com/calendar/answer/36604) feature.\\n\\n```\\n// Creates a new event and logs its ID.\\nvar event \\u003d CalendarApp.getDefaultCalendar()\\n    .createEventFromDescription('Lunch with Mary, Friday at 1PM');\\nLogger.log('Event ID: ' + event.getId());\\n```\\n@param description a free-form description of the event\\n@return the created event*/createEventFromDescription(description:string):CalendarApp.CalendarEvent;\\n/**Creates a new event series.\\n\\n```\\n// Creates an event series for a team meeting, taking place every Tuesday and Thursday in 2013.\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().createEventSeries('Team Meeting',\\n    new Date('January 1, 2013 03:00:00 PM EST'),\\n    new Date('January 1, 2013 04:00:00 PM EST'),\\n    CalendarApp.newRecurrence().addWeeklyRule()\\n        .onlyOnWeekdays([CalendarApp.Weekday.TUESDAY, CalendarApp.Weekday.THURSDAY])\\n        .until(new Date('January 1, 2014')));\\nLogger.log('Event Series ID: ' + eventSeries.getId());\\n```\\n@param title the title of the events in the series\\n@param startTime the date and time when the first event in the series starts\\n@param endTime the date and time when the first event in the series ends\\n@param recurrence the recurrence settings of the event series\\n@return the created event series*/createEventSeries(title:string,startTime:Date,endTime:Date,recurrence:CalendarApp.EventRecurrence):CalendarApp.CalendarEventSeries;\\n/**Creates a new event series.\\n\\n```\\n// Creates an event series for a team meeting, taking place every Tuesday and Thursday in 2013.\\nvar eventSeries \\u003d CalendarApp.getDefaultCalendar().createEventSeries('Team Meeting',\\n    new Date('January 1, 2013 03:00:00 PM EST'),\\n    new Date('January 1, 2013 04:00:00 PM EST'),\\n    CalendarApp.newRecurrence().addWeeklyRule()\\n        .onlyOnWeekdays([CalendarApp.Weekday.TUESDAY, CalendarApp.Weekday.THURSDAY])\\n        .until(new Date('January 1, 2014')),\\n    {location: 'Conference Room'});\\nLogger.log('Event Series ID: ' + eventSeries.getId());\\n```\\n@param title the title of the events in the series\\n@param startTime the date and time when the first event in the series starts\\n@param endTime the date and time when the first event in the series ends\\n@param recurrence the recurrence settings of the event series\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the created event series*/createEventSeries(title:string,startTime:Date,endTime:Date,recurrence:CalendarApp.EventRecurrence,options:Object):CalendarApp.CalendarEventSeries;\\n/**Deletes the calendar permanently. A user can only delete a calendar they own.\\n\\n```\\n// Creates a calendar to delete.\\nconst calendar \\u003d CalendarApp.createCalendar('Test');\\n\\n// Deletes the 'Test' calendar permanently.\\ncalendar.deleteCalendar();\\n```*/deleteCalendar():void;\\n/**Gets the color of the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Gets the color of the calendar and logs it to the console.\\n// For the default calendar, you can use CalendarApp.getColor() instead.\\nconst calendarColor \\u003d calendar.getColor();\\nconsole.log(calendarColor);\\n```\\n@return A hexadecimal color string (\\\"#rrggbb\\\").*/getColor():string;\\n/**Gets the description of the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Sets the description of the calendar to 'Test description.'\\ncalendar.setDescription('Test description');\\n\\n// Gets the description of the calendar and logs it to the console.\\n// For the default calendar, you can use CalendarApp.getDescription() instead.\\nconst description \\u003d calendar.getDescription();\\nconsole.log(description);\\n```\\n@return The description of this calendar.*/getDescription():string;\\n/**Gets the event with the given ID. If the series belongs to a calendar other than the default\\ncalendar, this method must be called from that calendar. Calling [`CalendarApp.getEventById(iCalId)`](https://developers.google.com/apps-script/reference/calendar/calendar-app.html#getEventById(String)) only\\nreturns an event in the default calendar.\\n\\nMultiple events may have the same ID if they are part of an event series. In this case this\\nmethod returns only the first event from that series.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com')\\n\\n// Creates an event for the moon landing.\\nconst event \\u003d calendar.createEvent('Apollo 11 Landing',\\n  new Date('July 20, 1969 20:05:00 UTC'),\\n  new Date('July 20, 1969 20:17:00 UTC'));\\n\\n// Gets the calendar event ID and logs it to the console.\\nconst iCalId \\u003d event.getId();\\nconsole.log(iCalId);\\n\\n// Gets the event by its ID and logs the title of the event to the console.\\n// For the default calendar, you can use CalendarApp.getEventById(iCalId) instead.\\nconst myEvent \\u003d calendar.getEventById(iCalId);\\nconsole.log(myEvent.getTitle());\\n```\\n@param iCalId ID of the event.\\n@return The event with the given ID, or `null` if the event doesn't exist or the user\\n    cannot access it.*/getEventById(iCalId:string):CalendarApp.CalendarEvent;\\n/**Gets the event series with the given ID. If the ID given is for a single [`CalendarEvent`](https://developers.google.com/apps-script/reference/calendar/calendar-event.html),\\nthen a [`CalendarEventSeries`](https://developers.google.com/apps-script/reference/calendar/calendar-event-series.html) is returned with a single event in the series. Note that if\\nthe event series belongs to a calendar other than the default calendar, this method must be\\ncalled from that [`Calendar`](https://developers.google.com/apps-script/reference/calendar/calendar.html); calling [`CalendarApp.getEventSeriesById(iCalId)`](https://developers.google.com/apps-script/reference/calendar/calendar-app.html#getEventSeriesById(String))\\ndirectly only returns an event series that exists in the default calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Creates an event series for a daily team meeting from 1 PM to 2 PM.\\n// The series adds the daily event from January 1, 2023 through December 31, 2023.\\nconst eventSeries \\u003d calendar.createEventSeries('Team meeting',\\n  new Date('Jan 1, 2023 13:00:00'),\\n  new Date('Jan 1, 2023 14:00:00'),\\n  CalendarApp.newRecurrence().addDailyRule().until(new Date('Jan 1, 2024')));\\n\\n// Gets the ID of the event series.\\nconst iCalId \\u003d eventSeries.getId();\\n\\n// Gets the event series by its ID and logs the series title to the console.\\n// For the default calendar, you can use CalendarApp.getEventSeriesById(iCalId) instead.\\nconsole.log(calendar.getEventSeriesById(iCalId).getTitle());\\n```\\n@param iCalId ID of the event series.\\n@return The series with the given ID, or `null` if the series doesn't exist or the user\\n    cannot access it.*/getEventSeriesById(iCalId:string):CalendarApp.CalendarEventSeries;\\n/**Gets all events that occur within a given time range.\\n\\nThis method returns events that start during the given time range, end during the time\\nrange, or encompass the time range. If no time zone is specified, the time values are\\ninterpreted in the context of the script's time zone, which may be different from the\\ncalendar's time zone.\\n\\n```\\n// Determines how many events are happening in the next two hours.\\nvar now \\u003d new Date();\\nvar twoHoursFromNow \\u003d new Date(now.getTime() + (2 * 60 * 60 * 1000));\\nvar events \\u003d CalendarApp.getDefaultCalendar().getEvents(now, twoHoursFromNow);\\nLogger.log('Number of events: ' + events.length);\\n```\\n@param startTime the start of the time range\\n@param endTime the end of the time range, non-inclusive\\n@return the events that occur within the time range*/getEvents(startTime:Date,endTime:Date):CalendarApp.CalendarEvent[];\\n/**Gets all events that occur within a given time range and meet the specified criteria.\\n\\nThis method returns events that start during the given time range, ends during the time\\nrange, or encompasses the time range. If no time zone is specified, the time values are\\ninterpreted in the context of the script's time zone, which may be different from the\\ncalendar's time zone.\\n\\nBe aware that filtering on `author`, `search`, or `statusFilters` takes\\nplace after applying `start` and `max`. This means that the number of events\\nreturned may be less than `max`, even though additional events meet the criteria.\\n\\n```\\n// Determines how many events are happening in the next two hours that contain the term\\n// \\\"meeting\\\".\\nvar now \\u003d new Date();\\nvar twoHoursFromNow \\u003d new Date(now.getTime() + (2 * 60 * 60 * 1000));\\nvar events \\u003d CalendarApp.getDefaultCalendar().getEvents(now, twoHoursFromNow,\\n    {search: 'meeting'});\\nLogger.log('Number of events: ' + events.length);\\n```\\n@param startTime the start of the time range\\n@param endTime the end of the time range, non-inclusive\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the events that take place within the time range and match the criteria*/getEvents(startTime:Date,endTime:Date,options:Object):CalendarApp.CalendarEvent[];\\n/**Gets all events that occur on a given day.\\n\\nThis method returns events if they start during the given day, end during the day, or\\nencompass the day.\\n\\nNote that only the date portion of the Date object is used, and the time portion is ignored.\\nThe date is interpreted as midnight that day to midnight the next day in the calendar's time\\nzone.\\n\\n```\\n// Determines how many events are happening today.\\nvar today \\u003d new Date();\\nvar events \\u003d CalendarApp.getDefaultCalendar().getEventsForDay(today);\\nLogger.log('Number of events: ' + events.length);\\n```\\n@param date the date to retrieve events for (only the day is used; the time is ignored)\\n@return the events that occur on the given date*/getEventsForDay(date:Date):CalendarApp.CalendarEvent[];\\n/**Gets all events that occur on a given day and meet specified criteria.\\n\\nThis method returns events if they start during the given day, end during the day, or\\nencompass the day.\\n\\nNote that only the date portion of the Date object is used, and the time portion is ignored.\\nThe date is interpreted as midnight that day to midnight the next day in the calendar's time\\nzone.\\n\\nBe aware that filtering on `author`, `search`, or `statusFilters` takes\\nplace after applying `start` and `max`. This means that the number of events\\nreturned may be less than `max`, even though additional events meet the criteria.\\n\\n```\\n// Determines how many events are happening today and contain the term \\\"meeting\\\".\\nvar today \\u003d new Date();\\nvar events \\u003d CalendarApp.getDefaultCalendar().getEventsForDay(today, {search: 'meeting'});\\nLogger.log('Number of events: ' + events.length);\\n```\\n@param date the date to retrieve events for (only the day is used; the time is ignored)\\n@param options advanced filtering options\\n@return the events that occur on the given date and match the criteria*/getEventsForDay(date:Date,options:Object):CalendarApp.CalendarEvent[];\\n/**Gets the ID of the calendar. The ID for a user's default calendar is their email address.\\n\\n```\\n// Opens the calendar by its ID.\\n// To get the user's default calendar, use CalendarApp.getDefaultCalendar().\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Gets the ID of the calendar and logs it to the console.\\nconst calendarId \\u003d calendar.getId();\\nconsole.log(calendarId);\\n```\\n@return The ID of the calendar.*/getId():string;\\n/**Gets the name of the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Gets the name of the calendar and logs it to the console.\\n// For the default calendar, you can use CalendarApp.getName() instead.\\nconst calendarName \\u003d calendar.getName();\\nconsole.log(calendarName);\\n```\\n@return This calendar's name.*/getName():string;\\n/**Gets the time zone of the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Gets the time zone of the calendar and logs it to the console.\\n// For the default calendar, you can use CalendarApp.getTimeZone() instead.\\nconst timeZone \\u003d calendar.getTimeZone();\\nconsole.log(timeZone);\\n```\\n@return The time zone, specified in \\\"long\\\" format (for example, \\\"America/New_York\\\", as listed\\n    by [Joda.org](http://joda-time.sourceforge.net/timezones.html)).*/getTimeZone():string;\\n/**Determines whether the calendar is hidden in the user interface.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Determines whether the calendar is hidden in the user interface and logs it to the console.\\n// For the default calendar, you can use CalendarApp.isHidden() instead.\\nconst isHidden \\u003d calendar.isHidden();\\nconsole.log(isHidden);\\n```\\n@return `true` if the calendar is hidden in the user interface; `false` if it\\n    isn't.*/isHidden():boolean;\\n/**Determines whether the calendar is the primary calendar for the effective user.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Determines whether the calendar is the default calendar for\\n// the effective user and logs it to the console.\\n// For the default calendar, you can use CalendarApp.isMyPrimaryCalendar() instead.\\nconst isMyPrimaryCalendar \\u003d calendar.isMyPrimaryCalendar();\\nconsole.log(isMyPrimaryCalendar);\\n```\\n@return `true` if the calendar is the default calendar for the effective user; `false` if it isn't.*/isMyPrimaryCalendar():boolean;\\n/**Determines whether the calendar is owned by you.\\n\\n```\\n// Gets a calendar by its ID. To get the user's default calendar, use\\n// CalendarApp.getDefault() instead.\\n// TODO(developer): Replace the ID with the calendar ID that you want to use.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Determines whether the calendar is owned by you and logs it.\\nconsole.log(calendar.isOwnedByMe());\\n```\\n@return `true` if the calendar is owned by you; `false` if not.*/isOwnedByMe():boolean;\\n/**Determines whether the calendar's events are displayed in the user interface.\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Determines whether the calendar's events are displayed in the user interface and logs it.\\nconsole.log(calendar.isSelected());\\n```\\n@return `true` if the calendar's events are displayed in the user interface; `false` if not*/isSelected():boolean;\\n/**Sets the color of the calendar.\\n\\n```\\n// Opens the calendar by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst calendar \\u003d CalendarApp.getCalendarById('222larabrown@gmail.com');\\n\\n// Sets the color of the calendar to pink using the Calendar Color enum.\\n// For the default calendar, you can use CalendarApp.setColor() instead.\\ncalendar.setColor(CalendarApp.Color.PINK);\\n```\\n@param color A [`CalendarApp.Color`](https://developers.google.com/apps-script/reference/calendar/color.html) or a hexadecimal color string\\n    (\\\"#rrggbb\\\").\\n@return This calendar for chaining.*/setColor(color:string):CalendarApp.Calendar;\\n/**Sets the description of a calendar.\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Sets the description of the calendar.\\n// TODO(developer): Update the string with the description that you want to use.\\ncalendar.setDescription('Updated calendar description.')\\n```\\n@param description the description of this calendar\\n@return this calendar for chaining*/setDescription(description:string):CalendarApp.Calendar;\\n/**Sets whether the calendar is visible in the user interface.\\n@param hidden `true` to hide the calendar in the user interface; `false` to show it\\n@return this calendar for chaining*/setHidden(hidden:boolean):CalendarApp.Calendar;\\n/**Sets the name of the calendar.\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Sets the name of the calendar.\\n// TODO(developer): Update the string with the name that you want to use.\\ncalendar.setName('Example calendar name');\\n```\\n@param name the new name\\n@return this calendar for chaining*/setName(name:string):CalendarApp.Calendar;\\n/**Sets whether the calendar's events are displayed in the user interface.\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Selects the calendar so that its events are displayed in the user interface. To\\n// unselect the calendar, set the parameter to false.\\ncalendar.setSelected(true);\\n```\\n@param selected `true` to show the calendar's events in the user interface; `false`\\n    to hide them\\n@return this calendar for chaining*/setSelected(selected:boolean):CalendarApp.Calendar;\\n/**Sets the time zone of the calendar.\\n\\n```\\n// Gets the user's default calendar. To get a different calendar, use getCalendarById()\\n// instead.\\nconst calendar \\u003d CalendarApp.getDefaultCalendar();\\n\\n// Sets the time zone of the calendar to America/New York (US/Eastern) time.\\ncalendar.setTimeZone('America/New_York');\\n```\\n@param timeZone The time zone, specified in \\\"long\\\" format (such as \\\"America/New_York\\\", as\\n    listed by [Joda.org](http://joda-time.sourceforge.net/timezones.html)).\\n@return This calendar for chaining.*/setTimeZone(timeZone:string):CalendarApp.Calendar;\\n/**Unsubscribes the user from a calendar. A user can't unsubscribe from calendars listed under the\\n__My calendars__ list. They can unsubscribe from calendars listed under __Other\\ncalendars__.\\n\\n```\\n// Gets the calendar by its ID.\\n// TODO(developer): Replace the calendar ID with the calendar ID that you want to get.\\nconst calendar \\u003d CalendarApp.getCalendarById('abc123456@group.calendar.google.com');\\n\\n// Unsubscribes the user from the calendar.\\nconst result \\u003d calendar.unsubscribeFromCalendar();\\n```*/unsubscribeFromCalendar():void;}}const CalendarApp:CalendarApp;\"],[\"card-service.d.ts\",\"interface CardService{\\n/**The [`BorderType`](https://developers.google.com/apps-script/reference/card-service/border-type.html) enumeration.*/BorderType:CardService._BorderType;\\n/**The [`ChipListLayout`](https://developers.google.com/apps-script/reference/card-service/chip-list-layout.html) enumeration.*/ChipListLayout:CardService._ChipListLayout;\\n/**The [`ComposedEmailType`](https://developers.google.com/apps-script/reference/card-service/composed-email-type.html) enumeration.*/ComposedEmailType:CardService._ComposedEmailType;\\n/**The [`ContentType`](https://developers.google.com/apps-script/reference/card-service/content-type.html) enumeration.*/ContentType:CardService._ContentType;\\n/**The [`GridItemLayout`](https://developers.google.com/apps-script/reference/card-service/grid-item-layout.html) enumeration.*/GridItemLayout:CardService._GridItemLayout;\\n/**The [`HorizontalAlignment`](https://developers.google.com/apps-script/reference/card-service/horizontal-alignment.html) enumeration.*/HorizontalAlignment:CardService._HorizontalAlignment;\\n/**The [`Icon`](https://developers.google.com/apps-script/reference/card-service/icon.html) enumeration.*/Icon:CardService._Icon;\\n/**The [`ImageButtonStyle`](https://developers.google.com/apps-script/reference/card-service/image-button-style.html) enumeration.*/ImageButtonStyle:CardService._ImageButtonStyle;\\n/**The [`ImageCropType`](https://developers.google.com/apps-script/reference/card-service/image-crop-type.html) enumeration.*/ImageCropType:CardService._ImageCropType;\\n/**The [`ImageStyle`](https://developers.google.com/apps-script/reference/card-service/image-style.html) enumeration.*/ImageStyle:CardService._ImageStyle;\\n/**The [`InputType`](https://developers.google.com/apps-script/reference/card-service/input-type.html) enumeration.*/InputType:CardService._InputType;\\n/**The [`LoadIndicator`](https://developers.google.com/apps-script/reference/card-service/load-indicator.html) enumeration.*/LoadIndicator:CardService._LoadIndicator;\\n/**The [`OnClose`](https://developers.google.com/apps-script/reference/card-service/on-close.html) enumeration.*/OnClose:CardService._OnClose;\\n/**The [`OpenAs`](https://developers.google.com/apps-script/reference/card-service/open-as.html) enumeration.*/OpenAs:CardService._OpenAs;\\n/**The [`SelectionInputType`](https://developers.google.com/apps-script/reference/card-service/selection-input-type.html) enumeration.*/SelectionInputType:CardService._SelectionInputType;\\n/**The [`TextButtonStyle`](https://developers.google.com/apps-script/reference/card-service/text-button-style.html) enumeration.*/TextButtonStyle:CardService._TextButtonStyle;\\n/**The [`UpdateDraftBodyType`](https://developers.google.com/apps-script/reference/card-service/update-draft-body-type.html) enumeration.*/UpdateDraftBodyType:CardService._UpdateDraftBodyType;\\n/**The [`DisplayStyle`](https://developers.google.com/apps-script/reference/card-service/display-style.html) enumeration.*/DisplayStyle:CardService._DisplayStyle;\\n/**The [`SwitchControlType`](https://developers.google.com/apps-script/reference/card-service/switch-control-type.html) enumeration.*/SwitchControlType:CardService._SwitchControlType;\\n/**Creates a new [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html).\\n@return An empty Action.*/newAction():CardService.Action;\\n/**Creates a new [`ActionResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html).\\n@return An empty ActionResponse builder.*/newActionResponseBuilder():CardService.ActionResponseBuilder;\\n/**Creates a new [`ActionStatus`](https://developers.google.com/apps-script/reference/card-service/action-status.html).\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\nconst actionStatus \\u003d CardService.newActionStatus()\\n    .setStatusCode(CardService.Status.OK)\\n    .setUserFacingMessage('Success');\\n```\\n@return An empty ActionStatus.*/newActionStatus():CardService.ActionStatus;\\n/**Creates a new [`Attachment`](https://developers.google.com/apps-script/reference/card-service/attachment.html).\\n@return An empty attachment.*/newAttachment():CardService.Attachment;\\n/**Creates a new [`AuthorizationAction`](https://developers.google.com/apps-script/reference/card-service/authorization-action.html).\\n@return An empty AuthorizationAction.*/newAuthorizationAction():CardService.AuthorizationAction;\\n/**Creates a new [`AuthorizationException`](https://developers.google.com/apps-script/reference/card-service/authorization-exception.html).\\n@return An empty AuthorizationException.*/newAuthorizationException():CardService.AuthorizationException;\\n/**Creates a new [`BorderStyle`](https://developers.google.com/apps-script/reference/card-service/border-style.html).\\n@return An empty BorderStyle.*/newBorderStyle():CardService.BorderStyle;\\n/**Creates a new [`ButtonSet`](https://developers.google.com/apps-script/reference/card-service/button-set.html).\\n@return An empty ButtonSet.*/newButtonSet():CardService.ButtonSet;\\n/**Creates a new [`CalendarEventActionResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/calendar-event-action-response-builder.html).\\n@return An empty [`CalendarEventActionResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/calendar-event-action-response-builder.html).*/newCalendarEventActionResponseBuilder():CardService.CalendarEventActionResponseBuilder;\\n/**Creates a new [`CardAction`](https://developers.google.com/apps-script/reference/card-service/card-action.html).\\n@return An empty CardAction.*/newCardAction():CardService.CardAction;\\n/**Creates a new Card builder.\\n@return An empty Card builder.*/newCardBuilder():CardService.CardBuilder;\\n/**Creates a new [`CardHeader`](https://developers.google.com/apps-script/reference/card-service/card-header.html).\\n@return An empty CardHeader.*/newCardHeader():CardService.CardHeader;\\n/**Creates a new [`CardSection`](https://developers.google.com/apps-script/reference/card-service/card-section.html).\\n@return An empty CardSection.*/newCardSection():CardService.CardSection;\\n/**Creates a new [`CardWithId`](https://developers.google.com/apps-script/reference/card-service/card-with-id.html). This is used to send a card in a Google Chat message. card ID\\nis a unique identifier for a card in a message when sending multiple cards.\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\nconst cardSection \\u003d CardService.newCardSection();\\ncardSection.addWidget(\\n    CardService.newTextParagraph().setText('This is a text paragraph widget.'));\\n\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle('Card title'))\\n    .addSection(cardSection)\\n    .build();\\n\\nconst cardWithId \\u003d CardService.newCardWithId()\\n    .setCardId('card_id')\\n    .setCard(card);\\n```\\n@return An empty [`CardWithId`](https://developers.google.com/apps-script/reference/card-service/card-with-id.html).*/newCardWithId():CardService.CardWithId;\\n/**Creates a new [`ChatActionResponse`](https://developers.google.com/apps-script/reference/card-service/chat-action-response.html).\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle('Card title')).build();\\nconst dialog \\u003d CardService.newDialog()\\n    .setBody(card);\\n\\nconst dialogAction \\u003d CardService.newDialogAction()\\n    .setDialog(dialog)\\n\\nconst chatActionResponse \\u003d CardService.newChatActionResponse()\\n    .setResponseType(CardService.ResponseType.DIALOG)\\n    .setDialogAction(dialogAction);\\n```\\n@return An empty [`ChatActionResponse`](https://developers.google.com/apps-script/reference/card-service/chat-action-response.html).*/newChatActionResponse():CardService.ChatActionResponse;\\n/**Creates a new [`ChatResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/chat-response-builder.html).\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\nconst cardSection \\u003d CardService.newCardSection();\\ncardSection.addWidget(\\n    CardService.newTextParagraph().setText('This is a text paragraph widget.'));\\n\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle('Card title'))\\n    .addSection(cardSection)\\n    .build();\\n\\nconst cardWithId \\u003d CardService.newCardWithId()\\n    .setCardId('card_id')\\n    .setCard(card);\\n\\nconst chatResponse \\u003d CardService.newChatResponseBuilder()\\n    .addCardsV2(cardWithId)\\n    .build();\\n```\\n@return An empty ChatResponseBuilder.*/newChatResponseBuilder():CardService.ChatResponseBuilder;\\n/**Creates a new [`Chip`](https://developers.google.com/apps-script/reference/card-service/chip.html).\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@return An empty Chip.*/newChip():CardService.Chip;\\n/**Creates a new [`ChipList`](https://developers.google.com/apps-script/reference/card-service/chip-list.html).\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@return An empty ChipList.*/newChipList():CardService.ChipList;\\n/**Creates a new [`CollapseControl`](https://developers.google.com/apps-script/reference/card-service/collapse-control.html).\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\nconst collapseControl \\u003d CardService.newCollapseControl()\\n    .setHorizontalAlign(CardService.HorizontalAlignment.START)\\n    .setExpandButton(CardService.newTextButton().setText('Expand'))\\n    .setCollapseButton(CardService.newTextButton().setText('Collapse'));\\n```\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@return An empty CollapseControl.*/newCollapseControl():CardService.CollapseControl;\\n/**Creates a new [`Column`](https://developers.google.com/apps-script/reference/card-service/column.html).\\n\\nAvailable for Google Chat apps and Google Workspace Add-ons.\\n\\n```\\nconst columnWidget \\u003d CardService.newTextParagraph();\\nconst column \\u003d CardService.newColumn()\\n    .setHorizontalSizeStyle(CardService.HorizontalSizeStyle.FILL_AVAILABLE_SPACE)\\n    .setHorizontalAlignment(CardService.HorizontalAlignment.CENTER)\\n    .setVerticalAlignment(CardService.VerticalAlignment.CENTER)\\n    .addWidget(columnWidget);\\n```\\n@return An empty Column.*/newColumn():CardService.Column;\\n/**Creates a new set of [`Columns`](https://developers.google.com/apps-script/reference/card-service/columns.html).\\n\\nAvailable for Google Chat apps and Google Workspace Add-ons.\\n\\n```\\nconst firstColumn \\u003d CardService.newColumn()\\n    .setHorizontalSizeStyle(CardService.HorizontalSizeStyle.FILL_AVAILABLE_SPACE)\\n    .setHorizontalAlignment(CardService.HorizontalAlignment.CENTER)\\n    .setVerticalAlignment(CardService.VerticalAlignment.CENTER);\\nconst secondColumn \\u003d CardService.newColumn()\\n    .setHorizontalSizeStyle(CardService.HorizontalSizeStyle.FILL_AVAILABLE_SPACE)\\n    .setHorizontalAlignment(CardService.HorizontalAlignment.CENTER)\\n    .setVerticalAlignment(CardService.VerticalAlignment.CENTER);\\nconst columns \\u003d CardService.newColumns()\\n    .addColumn(column)\\n    .addColumn(secondColumn)\\n    .setWrapStyle(CardService.WrapStyle.WRAP);\\n```\\n@return An empty set of Columns.*/newColumns():CardService.Columns;\\n/**Creates a new [`ComposeActionResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html).\\n@return An empty ComposeActionResponse builder.*/newComposeActionResponseBuilder():CardService.ComposeActionResponseBuilder;\\n/**Creates a new [`DatePicker`](https://developers.google.com/apps-script/reference/card-service/date-picker.html).\\n@return An empty DatePicker.*/newDatePicker():CardService.DatePicker;\\n/**Creates a new [`DateTimePicker`](https://developers.google.com/apps-script/reference/card-service/date-time-picker.html).\\n@return An empty DateTimePicker.*/newDateTimePicker():CardService.DateTimePicker;\\n/**Creates a new [`DecoratedText`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html).\\n@return An empty DecoratedText.*/newDecoratedText():CardService.DecoratedText;\\n/**Creates a new [`Dialog`](https://developers.google.com/apps-script/reference/card-service/dialog.html).\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle('Card title')).build();\\n\\n// Sets the card of the dialog.\\nconst dialog \\u003d CardService.newDialog()\\n    .setBody(card);\\n```\\n@return An empty [`Dialog`](https://developers.google.com/apps-script/reference/card-service/dialog.html).*/newDialog():CardService.Dialog;\\n/**Creates a new [`DialogAction`](https://developers.google.com/apps-script/reference/card-service/dialog-action.html).\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle('Card title')).build();\\nconst dialog \\u003d CardService.newDialog()\\n    .setBody(card);\\n\\nconst dialogAction \\u003d CardService.newDialogAction()\\n    .setDialog(dialog)\\n```\\n@return An empty [`DialogAction`](https://developers.google.com/apps-script/reference/card-service/dialog-action.html).*/newDialogAction():CardService.DialogAction;\\n/**Creates a new [`Divider`](https://developers.google.com/apps-script/reference/card-service/divider.html). The following sample builds a simple card with 2 paragraphs\\nseparated by a divider.\\n\\n```\\nfunction buildCard() {\\n    let cardSection1TextParagraph1 \\u003d CardService.newTextParagraph()\\n        .setText('Hello world!');\\n\\n    let cardSection1Divider1 \\u003d CardService.newDivider();\\n\\n    let cardSection1TextParagraph2 \\u003d CardService.newTextParagraph()\\n        .setText('Hello world!');\\n\\n    let cardSection1 \\u003d CardService.newCardSection()\\n        .addWidget(cardSection1TextParagraph1)\\n        .addWidget(cardSection1Divider1)\\n        .addWidget(cardSection1TextParagraph2);\\n\\n    let card \\u003d CardService.newCardBuilder()\\n        .addSection(cardSection1)\\n        .build();\\n\\n   return card;\\n}\\n```\\n@return A divider.*/newDivider():CardService.Divider;\\n/**Creates a new [`DriveItemsSelectedActionResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/drive-items-selected-action-response-builder.html).\\n@return An empty [`DriveItemsSelectedActionResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/drive-items-selected-action-response-builder.html).*/newDriveItemsSelectedActionResponseBuilder():CardService.DriveItemsSelectedActionResponseBuilder;\\n/**Creates a new [`EditorFileScopeActionResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/editor-file-scope-action-response-builder.html).\\n@return An empty [`EditorFileScopeActionResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/editor-file-scope-action-response-builder.html).*/newEditorFileScopeActionResponseBuilder():CardService.EditorFileScopeActionResponseBuilder;\\n/**Creates a new [`FixedFooter`](https://developers.google.com/apps-script/reference/card-service/fixed-footer.html).\\n@return An empty FixedFooter.*/newFixedFooter():CardService.FixedFooter;\\n/**Creates a new [`Grid`](https://developers.google.com/apps-script/reference/card-service/grid.html).\\n@return An empty Grid.*/newGrid():CardService.Grid;\\n/**Creates a new [`GridItem`](https://developers.google.com/apps-script/reference/card-service/grid-item.html).\\n@return An empty GridItem.*/newGridItem():CardService.GridItem;\\n/**Creates a new [`IconImage`](https://developers.google.com/apps-script/reference/card-service/icon-image.html).\\n@return An empty icon image.*/newIconImage():CardService.IconImage;\\n/**Creates a new [`Image`](https://developers.google.com/apps-script/reference/card-service/image.html).\\n@return An empty Image.*/newImage():CardService.Image;\\n/**Creates a new [`ImageButton`](https://developers.google.com/apps-script/reference/card-service/image-button.html).\\n@return An empty ImageButton.*/newImageButton():CardService.ImageButton;\\n/**Creates a new [`ImageComponent`](https://developers.google.com/apps-script/reference/card-service/image-component.html).\\n@return An empty ImageComponent.*/newImageComponent():CardService.ImageComponent;\\n/**Creates a new [`ImageCropStyle`](https://developers.google.com/apps-script/reference/card-service/image-crop-style.html).\\n@return An empty ImageCropStyle.*/newImageCropStyle():CardService.ImageCropStyle;\\n/**Creates a new ~~[`KeyValue`](https://developers.google.com/apps-script/reference/card-service/key-value.html)~~.\\n@return An empty KeyValue.*/newKeyValue():CardService.KeyValue;\\n/**Creates a new [`LinkPreview`](https://developers.google.com/apps-script/reference/card-service/link-preview.html).\\n\\n```\\nconst decoratedText \\u003d CardService.newDecoratedText()\\n    .setTopLabel('Hello')\\n    .setText('Hi!');\\n\\nconst cardSection \\u003d CardService.newCardSection()\\n    .addWidget(decoratedText);\\n\\nconst card \\u003d CardService.newCardBuilder()\\n    .addSection(cardSection)\\n    .build();\\n\\nconst linkPreview \\u003d CardService.newLinkPreview()\\n    .setPreviewCard(card)\\n    .setTitle('Smart chip title');\\n```\\n@return An empty LinkPreview.*/newLinkPreview():CardService.LinkPreview;\\n/**Creates a new [`MaterialIcon`](https://developers.google.com/apps-script/reference/card-service/material-icon.html).\\n\\nAvailable for Google Chat apps and Google Workspace Add-ons.\\n\\n```\\nconst materialIcon \\u003d CardService.newMaterialIcon().setName('check_box').setFill(true);\\n\\nconst cardSection \\u003d CardService.newCardSection();\\ncardSection.addWidget(\\n    CardService.newDecoratedText()\\n         .setStartIcon(\\n              CardService.newIconImage().setMaterialIcon(materialIcon))\\n         .setText('sasha@example.com')));\\n\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle('Card Title'))\\n    .addSection(cardSection)\\n    .build();\\n```\\n@return An empty MaterialIcon.*/newMaterialIcon():CardService.MaterialIcon;\\n/**Creates a new [`Navigation`](https://developers.google.com/apps-script/reference/card-service/navigation.html).\\n@return An empty Navigation.*/newNavigation():CardService.Navigation;\\n/**Creates a new [`Notification`](https://developers.google.com/apps-script/reference/card-service/notification.html).\\n@return An empty Notification.*/newNotification():CardService.Notification;\\n/**Creates a new [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html).\\n@return An empty OpenLink.*/newOpenLink():CardService.OpenLink;\\n/**Creates a new [`OverflowMenu`](https://developers.google.com/apps-script/reference/card-service/overflow-menu.html).\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@return An empty OverflowMenu.*/newOverflowMenu():CardService.OverflowMenu;\\n/**Creates a new [`OverflowMenuItem`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html).\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@return An empty OverflowMenuItem.*/newOverflowMenuItem():CardService.OverflowMenuItem;\\n/**Creates a new [`SelectionInput`](https://developers.google.com/apps-script/reference/card-service/selection-input.html).\\n@return An empty SelectionInput.*/newSelectionInput():CardService.SelectionInput;\\n/**Creates a new [`Suggestions`](https://developers.google.com/apps-script/reference/card-service/suggestions.html).\\n@return An empty Suggestions.*/newSuggestions():CardService.Suggestions;\\n/**Creates a new [`SuggestionsResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/suggestions-response-builder.html).\\n@return An empty SuggestionsResponse builder.*/newSuggestionsResponseBuilder():CardService.SuggestionsResponseBuilder;\\n/**Creates a new [`Switch`](https://developers.google.com/apps-script/reference/card-service/switch.html).\\n@return An empty Switch.*/newSwitch():CardService.Switch;\\n/**Creates a new [`TextButton`](https://developers.google.com/apps-script/reference/card-service/text-button.html).\\n@return An empty TextButton.*/newTextButton():CardService.TextButton;\\n/**Creates a new [`TextInput`](https://developers.google.com/apps-script/reference/card-service/text-input.html).\\n@return An empty TextInput.*/newTextInput():CardService.TextInput;\\n/**Creates a new [`TextParagraph`](https://developers.google.com/apps-script/reference/card-service/text-paragraph.html).\\n@return An empty TextParagraph.*/newTextParagraph():CardService.TextParagraph;\\n/**Creates a new [`TimePicker`](https://developers.google.com/apps-script/reference/card-service/time-picker.html).\\n@return An empty TimePicker.*/newTimePicker():CardService.TimePicker;\\n/**Creates a new [`UniversalActionResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/universal-action-response-builder.html).\\n@return An empty UniversalActionResponse builder.*/newUniversalActionResponseBuilder():CardService.UniversalActionResponseBuilder;\\n/**Creates a new [`UpdateDraftActionResponseBuilder`](https://developers.google.com/apps-script/reference/card-service/update-draft-action-response-builder.html).\\n@return An empty UpdateDraftActionResponseBuilder.*/newUpdateDraftActionResponseBuilder():CardService.UpdateDraftActionResponseBuilder;\\n/**Creates a new [`UpdateDraftBccRecipientsAction`](https://developers.google.com/apps-script/reference/card-service/update-draft-bcc-recipients-action.html);\\n@return An empty UpdateDraftBccRecipientsAction.*/newUpdateDraftBccRecipientsAction():CardService.UpdateDraftBccRecipientsAction;\\n/**Creates a new [`UpdateDraftBodyAction`](https://developers.google.com/apps-script/reference/card-service/update-draft-body-action.html).\\n@return An empty UpdateDraftBodyAction.*/newUpdateDraftBodyAction():CardService.UpdateDraftBodyAction;\\n/**Creates a new [`UpdateDraftCcRecipientsAction`](https://developers.google.com/apps-script/reference/card-service/update-draft-cc-recipients-action.html).\\n@return An Empty UpdateDraftCcRecipientsAction.*/newUpdateDraftCcRecipientsAction():CardService.UpdateDraftCcRecipientsAction;\\n/**Creates a new [`UpdateDraftSubjectAction`](https://developers.google.com/apps-script/reference/card-service/update-draft-subject-action.html).\\n@return An empty UpdateDraftSubjectAction.*/newUpdateDraftSubjectAction():CardService.UpdateDraftSubjectAction;\\n/**Creates a new [`UpdateDraftToRecipientsAction`](https://developers.google.com/apps-script/reference/card-service/update-draft-to-recipients-action.html).\\n@return An empty UpdateDraftToRecipientsAction.*/newUpdateDraftToRecipientsAction():CardService.UpdateDraftToRecipientsAction;\\n/**Creates a new [`Validation`](https://developers.google.com/apps-script/reference/card-service/validation.html).\\n\\nAvailable for Google Chat apps and Google Workspace Add-ons.\\n\\n```\\nconst validation \\u003d CardService.newValidation()\\n    .setCharacterLimit(5)\\n    .setInputType(CardService.InputType.EMAIL);\\n```\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@return An empty validation.*/newValidation():CardService.Validation;}module CardService{interface WrapStyle{}interface _WrapStyle{\\n/**No wrapping. Default.*/NOWRAP:WrapStyle;\\n/**Wraps the content for any widgets in a column.*/WRAP:WrapStyle;}interface Widget{}interface VerticalAlignment{}interface _VerticalAlignment{\\n/**Vertically places the content at the bottom of the container.*/BOTTOM:VerticalAlignment;\\n/**Vertically places the content at the center of the container. Default.*/CENTER:VerticalAlignment;\\n/**Vertically places the content at the top of the container.*/TOP:VerticalAlignment;}interface Validation{\\n/**Sets the character limit of the widget.\\n\\nAvailable for Google Chat apps and Google Workspace Add-ons.\\n@param characterLimit The character limit to set. Note that this restriction is only effective\\n    for [`TextInput`](https://developers.google.com/apps-script/reference/card-service/text-input.html) and is ignored for other widgets.\\n@return This object, for chaining.*/setCharacterLimit(characterLimit:Integer):CardService.Validation;\\n/**Sets the input type of the widget.\\n\\nAvailable for Google Chat apps and Google Workspace Add-ons.\\n@param inputType The [`InputType`](https://developers.google.com/apps-script/reference/card-service/input-type.html) to set.\\n@return This object, for chaining.*/setInputType(inputType:CardService.InputType):CardService.Validation;}interface UpdatedWidget{\\n/**Adds a new item that can be selected.\\n\\n```\\nconst updatedWidget \\u003d CardService.newUpdatedWidget()\\n    .addItem(\\\"item_one_title\\\", \\\"item_one_value\\\", false, \\\"item_one_uri\\\", \\\"item_one_bottom_text\\\")\\n   .addItem(\\\"item_two_title\\\", \\\"item_two_value\\\", false, \\\"item_two_uri\\\", \\\"item_two_bottom_text\\\");\\n```\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n@param text The text to be shown for this item. Non-string primitive arguments are converted to\\n    strings automatically.\\n@param value The form input value that is sent via the callback. Non-string primitive arguments\\n    are converted to strings automatically.\\n@param selected Whether the item is selected by default. If the selection input only accepts\\n    one value (such as for radio buttons or a dropdown menu), only set this field for one item.\\n@param startIconUri For multiselect menus, the URL for the icon displayed next to the item's\\n    text field. Supports PNG and JPEG files.\\n@param bottomText For multiselect menus, a text description or label that's displayed below the\\n    item's text field.\\n@return This object, for chaining.*/addItem(text:Object,value:Object,selected:boolean,startIconUri:Object,bottomText:Object):CardService.UpdatedWidget;}interface UpdateDraftToRecipientsAction{\\n/**Updates the To recipients of an email draft.\\n@param toRecipientEmails The To recipients to insert to the email draft.\\n@return This object, for chaining.*/addUpdateToRecipients(toRecipientEmails:string[]):CardService.UpdateDraftToRecipientsAction;}interface UpdateDraftSubjectAction{\\n/**Updates the subject line of an email draft.\\n@param subject The subject line to insert to the email draft.\\n@return This object, for chaining.*/addUpdateSubject(subject:string):CardService.UpdateDraftSubjectAction;}interface UpdateDraftCcRecipientsAction{\\n/**Updates the Cc recipients of an email draft.\\n@param ccRecipientEmails The Cc recipients to insert to the email draft.\\n@return This object, for chaining.*/addUpdateCcRecipients(ccRecipientEmails:string[]):CardService.UpdateDraftCcRecipientsAction;}interface UpdateDraftBodyType{}interface _UpdateDraftBodyType{\\n/**Update actions insert content at the end of the message body. If an email signature is present,\\nin Gmail on the web, the update action inserts after the user's signature. In the Gmail mobile\\napp, the update action inserts before the user's signature.*/INSERT_AT_END:UpdateDraftBodyType;\\n/**Update actions insert content at the start of message body.*/INSERT_AT_START:UpdateDraftBodyType;\\n/**Default. Update actions insert content at the current cursor position, replacing any selected\\ncontent.*/IN_PLACE_INSERT:UpdateDraftBodyType;}interface UpdateDraftBodyAction{\\n/**Adds the specified content to the draft body. The type of the `content` is specified by\\n[`ContentType`](https://developers.google.com/apps-script/reference/card-service/content-type.html).\\n@param content The content to insert to the email draft.\\n@param contentType The content type of the content to be inserted.\\n@return This object, for chaining.*/addUpdateContent(content:string,contentType:CardService.ContentType):CardService.UpdateDraftBodyAction;\\n/**Sets the [`UpdateDraftBodyType`](https://developers.google.com/apps-script/reference/card-service/update-draft-body-type.html) of this update action on the draft body. For example,\\ninserting content at the start, end, or cursor position of the draft body.\\n@param updateType The type of update to be performed on an email draft.\\n@return This object, for chaining.*/setUpdateType(updateType:CardService.UpdateDraftBodyType):CardService.UpdateDraftBodyAction;}interface UpdateDraftBccRecipientsAction{\\n/**Updates the Bcc recipients of an email draft.\\n@param bccRecipientEmails The Bcc recipients to insert to the email draft.\\n@return This object, for chaining.*/addUpdateBccRecipients(bccRecipientEmails:string[]):CardService.UpdateDraftBccRecipientsAction;}interface UpdateDraftActionResponseBuilder{\\n/**Builds the current update draft action response and validates it.\\n@return A validated draft action response.*/build():CardService.UpdateDraftActionResponse;\\n/**Sets an action that updates the email Bcc recipients of a draft.\\n@param updateDraftBccRecipientsAction The action that updates the draft Bcc recipients.\\n@return This object, for chaining.*/setUpdateDraftBccRecipientsAction(updateDraftBccRecipientsAction:CardService.UpdateDraftBccRecipientsAction):CardService.UpdateDraftActionResponseBuilder;\\n/**Set an action that updates the email body of a draft.\\n@param updateDraftBodyAction The action that updates the draft body.\\n@return This object, for chaining.*/setUpdateDraftBodyAction(updateDraftBodyAction:CardService.UpdateDraftBodyAction):CardService.UpdateDraftActionResponseBuilder;\\n/**Sets an action that updates the Cc recipients of a draft.\\n@param updateDraftCcRecipientsAction The action that updates the draft Cc recipients.\\n@return This object, for chaining.*/setUpdateDraftCcRecipientsAction(updateDraftCcRecipientsAction:CardService.UpdateDraftCcRecipientsAction):CardService.UpdateDraftActionResponseBuilder;\\n/**Sets an action that updates the subject line of a draft.\\n@param updateDraftSubjectAction The action that updates the subject line.\\n@return This object, for chaining.*/setUpdateDraftSubjectAction(updateDraftSubjectAction:CardService.UpdateDraftSubjectAction):CardService.UpdateDraftActionResponseBuilder;\\n/**Sets an action that updates the To recipients of a draft.\\n@param updateDraftToRecipientsAction The action that updates the To recipients.\\n@return This object, for chaining.*/setUpdateDraftToRecipientsAction(updateDraftToRecipientsAction:CardService.UpdateDraftToRecipientsAction):CardService.UpdateDraftActionResponseBuilder;}interface UpdateDraftActionResponse{printJson():string;}interface UniversalActionResponseBuilder{\\n/**Builds the current universal action response and validates it.\\n@return A validated UniversalActionResponse.*/build():CardService.UniversalActionResponse;\\n/**Displays the add-on with the specified cards.\\n@param cardObjects An array of [`Card`](https://developers.google.com/apps-script/reference/card-service/card.html)s to display.\\n@return This object, for chaining.*/displayAddOnCards(cardObjects:Object[]):CardService.UniversalActionResponseBuilder;\\n/**Sets the URL to open when the universal action is selected.\\n@param openLink The link object to use.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.UniversalActionResponseBuilder;}interface UniversalActionResponse{printJson():string;}interface TimePicker{\\n/**Sets the field name that identifies this picker in the event object that is generated when\\nthere is a UI interaction. The field name is visible to the user. Required; the specified field\\nname must be unique.\\n@param fieldName The name to assign to this input.\\n@return This picker, for chaining.*/setFieldName(fieldName:string):CardService.TimePicker;\\n/**Sets the prefilled hours value to set in the input field.\\n@param hours The default hour value placed in the input, range from 0 to 23. It is always\\n    represented as a string in the form callback parameters.\\n@return This picker, for chaining.*/setHours(hours:Integer):CardService.TimePicker;\\n/**Sets the prefilled minutes value to set in the input field.\\n@param minutes The default minutes value placed in the input, range from 0 to 59. It is always\\n    represented as a string in the form callback parameters.\\n@return This picker, for chaining.*/setMinutes(minutes:Integer):CardService.TimePicker;\\n/**Sets an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that the script performs whenever the picker input changes.\\n@param action The action to take.\\n@return This picker, for chaining.*/setOnChangeAction(action:CardService.Action):CardService.TimePicker;\\n/**Sets the title displayed above the input field.\\n@param title The input field title.\\n@return This picker, for chaining.*/setTitle(title:string):CardService.TimePicker;}interface TextParagraph{\\n/**Sets the maximum number of lines of text that are displayed in the widget. If the text exceeds\\nthe specified maximum number of lines, the excess content is concealed behind a \\\"show more\\\"\\nbutton. If the text is equal or shorter than the specified maximum number of lines, a \\\"show\\nmore\\\" button isn't displayed.\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@param maxLines The maximum number of lines of text that are displayed.\\n@return This object, for chaining.*/setMaxLines(maxLines:Integer):CardService.TextParagraph;\\n/**Sets the text of the paragraph. Required.\\n@param text The text to display.\\n@return This object, for chaining.*/setText(text:string):CardService.TextParagraph;}interface TextInput{\\n/**Sets the key that identifies this text input in the event object that is generated when there\\nis a UI interaction. Not visible to the user. Required, must be unique.\\n@param fieldName The key that is used to identify this input.\\n@return This object, for chaining.*/setFieldName(fieldName:string):CardService.TextInput;\\n/**Sets a hint for the text input. Used to give the user extra guidance on what to input. For\\nexample, a hint could describe formatting (\\\"xxx-xxx-xxxx\\\") for a phone number field.\\n@param hint The text hint to display below the input field. This text is always visible.\\n@return This object, for chaining.*/setHint(hint:string):CardService.TextInput;\\n/**Sets whether the input text shows on one line or multiple lines.\\n@param multiline The multiline setting.\\n@return This object, for chaining.*/setMultiline(multiline:boolean):CardService.TextInput;\\n/**Sets an action to be performed whenever the text input changes.\\n@param action The action to take.\\n@return This object, for chaining.*/setOnChangeAction(action:CardService.Action):CardService.TextInput;\\n/**Sets the suggestions for autocompletion in the text field.\\n@param suggestions The collection of suggestions to use.\\n@return This object, for chaining.*/setSuggestions(suggestions:CardService.Suggestions):CardService.TextInput;\\n/**Sets the callback action to fetch suggestions based on user input for autocompletion. The\\n[`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`SuggestionsResponse`](https://developers.google.com/apps-script/reference/card-service/suggestions-response.html) object.\\n\\n```\\nvar action \\u003d CardService.newAction()\\n    .setFunctionName('suggestionCallback')\\n    .setParameters({'numSuggestions': 3});\\n\\nCardService.newTextInput()\\n    .setFieldName('option-field')\\n    .setTitle('Option Selected')\\n    .setSuggestionsAction(action);\\n\\n// ...\\n\\nfunction suggestionCallback(e) {\\n  var suggestions \\u003d CardService.newSuggestions();\\n  var numSuggestions \\u003d parseInt(e.parameter['numSuggestions']);\\n  for(var i \\u003d 1; i \\u003c\\u003d numSuggestions; i++) {\\n    suggestions.addSuggestion('Suggestion ' + i);\\n  }\\n  return CardService.newSuggestionsResponseBuilder()\\n      .setSuggestions(suggestions)\\n      .build();\\n}\\n```\\n@param suggestionsAction The action that fetches suggestions for this input.\\n@return This object, for chaining.*/setSuggestionsAction(suggestionsAction:CardService.Action):CardService.TextInput;\\n/**Sets the title to be shown above the input field. Required.\\n@param title The text label for this input.\\n@return This object, for chaining.*/setTitle(title:string):CardService.TextInput;\\n/**Sets the validation rule for this widget.\\n\\n```\\nconst validation \\u003d CardService.newValidation()\\n  .setCharacterLimit('10')\\n  .setType(CardService.InputType.TEXT);\\n\\nconst input \\u003d CardService.newTextInput()\\n  .setFieldName('text_name_xxx1')\\n  .setTitle('Max 10 characters')\\n  .setValidation(validation);\\n```\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@param validation The validation rule for this [`TextInput`](https://developers.google.com/apps-script/reference/card-service/text-input.html) widget.\\n@return This object, for chaining.*/setValidation(validation:CardService.Validation):CardService.TextInput;\\n/**Sets the pre-filled value to be set in the input field.\\n@param value The default value placed in the input. It is always represented as a string in the\\n    form callback parameters.\\n@return This object, for chaining.*/setValue(value:string):CardService.TextInput;}interface TextButtonStyle{}interface _TextButtonStyle{\\n/**Normal text button with no border.\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).*/BORDERLESS:TextButtonStyle;\\n/**Text button with colored background.*/FILLED:TextButtonStyle;\\n/**Normal text button with an alternative middle ground between filled and outlined buttons.\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).*/FILLED_TONAL:TextButtonStyle;\\n/**Normal text button with clear background. Default.*/OUTLINED:TextButtonStyle;\\n/**DO NOT USE. Deprecated version of OUTLINED. Do not remove the field until it is confirmed not\\nbeing used by any apps.*/TEXT:TextButtonStyle;}interface TextButton{\\n/**Sets the alternative text of the button for accessibility. If unset, defaults to the text that\\ndisplays on the button.\\n@param altText The alternative text to assign to this button.\\n@return This object, for chaining.*/setAltText(altText:string):CardService.TextButton;\\n/**Sets an authorization action that opens a URL to the authorization flow when the object is\\nclicked. This opens the URL in a new window. When the user finishes the authorization flow and\\nreturns to the application, the add-on reloads.\\n\\nA UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAuthorizationAction().setAuthorizationUrl('url');\\nCardService.newTextButton().setText('Authorize').setAuthorizationAction(action);\\n\\n```\\n@param action The object that specifies the authorization action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setAuthorizationAction(action:CardService.AuthorizationAction):CardService.TextButton;\\n/**Sets the background color for [`TextButtonStyle.FILLED`](https://developers.google.com/apps-script/reference/card-service/text-button-style.html#FILLED) button. If unset for a [`TextButtonStyle.FILLED`](https://developers.google.com/apps-script/reference/card-service/text-button-style.html#FILLED) button, the button uses the secondary color defined in the add-on [manifest](/gmail/add-ons/concepts/manifests#manifest_structure_for_gmail_add-ons).\\nThis method is a no-op for [`TextButtonStyle.OUTLINED`](https://developers.google.com/apps-script/reference/card-service/text-button-style.html#OUTLINED) buttons.\\n@param backgroundColor The color in #rgb format.\\n@return This object, for chaining.*/setBackgroundColor(backgroundColor:string):CardService.TextButton;\\n/**Sets an action that composes a draft email when the object is clicked. A UI object can only\\nhave one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOnClickOpenLinkAction(Action)),\\n[`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html) object configured using [`ComposeActionResponseBuilder.setGmailDraft(draft)`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html#setGmailDraft(GmailDraft)).\\n\\n__Note__: This method doesn't set a __compose action__ that is\\nused to [extend the compose UI](/gmail/add-ons/how-tos/extending-compose-ui).\\nRather, this method connects this UI element to an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that [composes draft messages](/gmail/add-ons/how-tos/compose) in Apps Script that are\\nopened in Gmail when the action completes. \\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('composeEmailCallback');\\nCardService.newTextButton()\\n    .setText('Compose Email')\\n    .setComposeAction(action, CardService.ComposedEmailType.REPLY_AS_DRAFT);\\n\\n// ...\\n\\nfunction composeEmailCallback() {\\n  var thread \\u003d GmailApp.getThreadById(e.threadId);\\n  var draft \\u003d thread.createDraftReply('This is a reply');\\n  return CardService.newComposeActionResponseBuilder()\\n      .setGmailDraft(draft)\\n      .build();\\n}\\n```\\n@param action The object that specifies the compose action to take when this element is\\n    clicked.\\n@param composedEmailType An enum value that specifies whether the composed draft is a\\n    standalone or reply draft.\\n@return This object, for chaining.*/setComposeAction(action:CardService.Action,composedEmailType:CardService.ComposedEmailType):CardService.TextButton;\\n/**Sets whether the button is disabled. A disabled button is greyed out and cannot be clicked.\\n@param disabled The disabled state.\\n@return This object, for chaining.*/setDisabled(disabled:boolean):CardService.TextButton;\\n/**Sets a predefined [`Icon`](https://developers.google.com/apps-script/reference/card-service/icon.html) to display on the button. Either this or [`setIconUrl(url)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setIconUrl(String))\\nmust be used to define the button image.\\n@param icon One of the predefined [`Icon`](https://developers.google.com/apps-script/reference/card-service/icon.html) values.\\n@return This object, for chaining.*/setIcon(icon:CardService.Icon):CardService.TextButton;\\n/**Sets the URL of an image to use as this button's icon. Either this or [`setIcon(icon)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setIcon(Icon)) must be\\nused to define the button image.\\n@param url The URL address of a hosted image to use as this button's icon.\\n@return This object, for chaining.*/setIconUrl(url:string):CardService.TextButton;\\n/**Sets the material design icon.\\n\\n```\\nconst textButton \\u003d CardService.newTextButton()\\n   .setMaterialIcon(CardService.newMaterialIcon().setName('search'));\\n```\\n@param icon The material design icon.\\n@return This object, for chaining.*/setMaterialIcon(icon:CardService.MaterialIcon):CardService.TextButton;\\n/**Sets an action that executes when the object is clicked. A UI object can only have one of\\n[`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('notificationCallback');\\nCardService.newTextButton().setText('Create notification').setOnClickAction(action);\\n\\n// ...\\n\\nfunction notificationCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setNotification(CardService.newNotification()\\n          .setText(\\\"Some info to display to user\\\"))\\n      .build();\\n}\\n```\\n@param action The action to take when this element is clicked.\\n@return This object, for chaining.*/setOnClickAction(action:CardService.Action):CardService.TextButton;\\n/**Sets an action that opens a URL in a tab when the object is clicked. Use this function when the\\nURL needs to be built or when you need to take other actions in addition to creating the [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setAuthorizationAction(AuthorizationAction)), or\\n[`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object configured using [`ActionResponseBuilder.setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html#setOpenLink(OpenLink)).\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('openLinkCallback');\\nCardService.newTextButton().setText('Open Link').setOnClickOpenLinkAction(action);\\n\\n// ...\\n\\nfunction openLinkCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setOpenLink(CardService.newOpenLink()\\n          .setUrl('https://www.google.com'))\\n      .build();\\n}\\n```\\n@param action The object that specifies the open link action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setOnClickOpenLinkAction(action:CardService.Action):CardService.TextButton;\\n/**Sets a URL to be opened when the object is clicked. Use this function when the URL is already\\nknown and only needs to be opened. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOpenLink(OpenLink)),\\n[`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setAuthorizationAction(AuthorizationAction)),\\nor [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/text-button.html#setComposeAction(Action,ComposedEmailType)) set.\\n@param openLink An [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object describing the URL to open.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.TextButton;\\n/**Sets a pop-up menu to be opened when the object is clicked. Each item in the menu can specify\\nan action to be triggered when clicked. Nested menus are not supported, actions for menu items\\nshould not specify an overflow menu.\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\n  var overflowMenuItem \\u003d CardService.newOverflowMenuItem()\\n    .setStartIcon(CardService.newIconImage()\\n    .setIconUrl(\\\"https://www.google.com/images/branding/googleg/1x/googleg_standard_color_64dp.png\\\"))\\n    .setText(\\\"Open Link\\\")\\n    .setOpenLink(CardService.newOpenLink()\\n        .setUrl(\\\"https://www.google.com\\\"));\\n\\nvar overflowMenu \\u003d CardService.newOverflowMenu()\\n    .addMenuItem(overflowMenuItem).build();\\n```\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@param menu The object that specifies the overflow menu to display when this element is\\n    clicked.\\n@return This object, for chaining.*/setOverflowMenu(menu:CardService.OverflowMenu):CardService.TextButton;\\n/**Sets the text that displays on the button.\\n@param text The text that appears on the button.\\n@return This object, for chaining.*/setText(text:string):CardService.TextButton;\\n/**Sets the button style. If unset, it defaults to [`TextButtonStyle.OUTLINED`](https://developers.google.com/apps-script/reference/card-service/text-button-style.html#OUTLINED) button.\\n\\n```\\nconst button \\u003d CardService.newTextButton()\\n      .setText(\\\"Filled\\\")\\n      .setTextButtonStyle(CardService.TextButtonStyle.FILLED)\\n      .setOpenLink(CardService.newOpenLink()\\n        .setUrl(\\\"www.google.com\\\"));\\n```\\n@param textButtonStyle The button style.\\n@return This object, for chaining.*/setTextButtonStyle(textButtonStyle:CardService.TextButtonStyle):CardService.TextButton;}interface SwitchControlType{}interface _SwitchControlType{\\n/**Checkbox-styled control for a switch widget.*/CHECK_BOX:SwitchControlType;\\n/**Toggle-styled control for a switch widget. Default.*/SWITCH:SwitchControlType;}interface Switch{\\n/**Sets the control type of the switch. Defaults to `SWITCH`.\\n@param controlType The switch control type.\\n@return This object, for chaining.*/setControlType(controlType:CardService.SwitchControlType):CardService.Switch;\\n/**Sets the key that identifies this switch in the event object that is generated when there is a\\nUI interaction. Not visible to the user. Required.\\n\\nUnlike other form fields, this field name does not need to be unique. The form input values\\nfor switches using the same field name are returned as an array. The array consists of the\\nvalues for all enabled switches with that field name.\\n@param fieldName The key that is used to identify this switch.\\n@return This object, for chaining.*/setFieldName(fieldName:string):CardService.Switch;\\n/**Sets the action to take when the switch is toggled.\\n@param action The action to take when the switch is toggled.\\n@return This object, for chaining.*/setOnChangeAction(action:CardService.Action):CardService.Switch;\\n/**Sets whether this switch should start as selected or unselected.\\n@param selected The starting switch state setting.\\n@return This object, for chaining.*/setSelected(selected:boolean):CardService.Switch;\\n/**Sets the value that is sent as the form input when this switch is toggled on.\\n@param value The value associated with the name when the switch is on. When this is sent to the\\n    form callback, it is always represented as a string.\\n@return This object, for chaining.*/setValue(value:string):CardService.Switch;}interface SuggestionsResponseBuilder{\\n/**Builds the current suggestions response and validates it.\\n@return A validated SuggestionsResponse.*/build():CardService.SuggestionsResponse;\\n/**Sets the suggestions used in auto complete in text fields.\\n@param suggestions The [`Suggestions`](https://developers.google.com/apps-script/reference/card-service/suggestions.html) to use.\\n@return This object.*/setSuggestions(suggestions:CardService.Suggestions):CardService.SuggestionsResponseBuilder;}interface SuggestionsResponse{printJson():string;}interface Suggestions{\\n/**Add a text suggestion.\\n@param suggestion The suggestion text.\\n@return This object, for chaining.*/addSuggestion(suggestion:string):CardService.Suggestions;\\n/**Add a list of text suggestions.\\n@param suggestions An array of string suggestions.\\n@return This object, for chaining.*/addSuggestions(suggestions:Object[]):CardService.Suggestions;}interface Status{}interface _Status{\\n/**The operation was aborted, typically due to a concurrency issue such as a sequencer check\\nfailure or transaction abort. HTTP Mapping: 409 Conflict*/ABORTED:Status;\\n/**The entity that a client attempted to create already exists. HTTP Mapping: 409 Conflict*/ALREADY_EXISTS:Status;\\n/**HTTP Mapping: 499 Client Closed Request*/CANCELLED:Status;\\n/**Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error.*/DATA_LOSS:Status;\\n/**HTTP Mapping: 504 Gateway Timeout*/DEADLINE_EXCEEDED:Status;\\n/**The operation was rejected because the system is not in a state required for the operation's\\nexecution. HTTP Mapping: 400 Bad Request*/FAILED_PRECONDITION:Status;\\n/**Internal errors. This means that some invariants expected by the underlying system have been\\nbroken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server\\nError*/INTERNAL:Status;\\n/**The client specified an invalid argument. HTTP Mapping: 400 Bad Request*/INVALID_ARGUMENT:Status;\\n/**HTTP Mapping: 404 Not Found*/NOT_FOUND:Status;\\n/**HTTP Mapping: 200 OK*/OK:Status;\\n/**The operation was attempted past the valid range. HTTP Mapping: 400 Bad Request*/OUT_OF_RANGE:Status;\\n/**HTTP Mapping: 403 Forbidden*/PERMISSION_DENIED:Status;\\n/**HTTP Mapping: 429 Too Many Requests*/RESOURCE_EXHAUSTED:Status;\\n/**HTTP Mapping: 401 Unauthorized*/UNAUTHENTICATED:Status;\\n/**HTTP Mapping: 503 Service Unavailable*/UNAVAILABLE:Status;\\n/**HTTP Mapping: 501 Not Implemented*/UNIMPLEMENTED:Status;\\n/**Unknown error. HTTP Mapping: 500 Internal Server Error*/UNKNOWN:Status;}interface SelectionInputType{}interface _SelectionInputType{\\n/**Checkbox input style. Default.*/CHECK_BOX:SelectionInputType;\\n/**Dropdown menu selection input style.*/DROPDOWN:SelectionInputType;\\n/**A multiselect menu for static or dynamic data.*/MULTI_SELECT:SelectionInputType;\\n/**Radio button input style. At most one item in the group can be selected.*/RADIO_BUTTON:SelectionInputType;\\n/**A set of switches. Users can turn on one or more switches.*/SWITCH:SelectionInputType;}interface SelectionInput{\\n/**Adds a new item that can be selected.\\n@param text The text to be shown for this item. Non-string primitive arguments are converted to\\n    strings automatically.\\n@param value The form input value that is sent via the callback. Non-string primitive arguments\\n    are converted to strings automatically.\\n@param selected Whether the item is selected by default. If the selection input only accepts\\n    one value (such as for radio buttons or a dropdown menu), only set this field for one item.\\n@return This object, for chaining.*/addItem(text:Object,value:Object,selected:boolean):CardService.SelectionInput;\\n/**Adds a new item that can be selected, for multi-select menus.\\n\\n```\\nconst multiSelect \\u003d CardService.newSelectionInput()\\n    .setType(CardService.SelectionInputType.MULTI_SELECT)\\n    .setFieldName(\\\"multiselect\\\")\\n    .setTitle(\\\"A multi select input example.\\\")\\n    .addMultiSelectItem(\\\"Contact 1\\\", \\\"contact-1\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact one description\\\")\\n    .addMultiSelectItem(\\\"Contact 2\\\", \\\"contact-2\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact two description\\\")\\n    .addMultiSelectItem(\\\"Contact 3\\\", \\\"contact-3\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact three description\\\")\\n    .addMultiSelectItem(\\\"Contact 4\\\", \\\"contact-4\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact four description\\\")\\n    .addMultiSelectItem(\\\"Contact 5\\\", \\\"contact-5\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact five description\\\");\\n```\\n@param text The text to be shown for this item. Non-string primitive arguments are converted to\\n    strings automatically.\\n@param value The form input value that is sent via the callback. Non-string primitive arguments\\n    are converted to strings automatically.\\n@param selected Whether the item is selected by default. If the selection input only accepts\\n    one value (such as for radio buttons or a dropdown menu), only set this field for one item.\\n@param startIconUri For multiselect menus, the URL for the icon displayed next to the item's\\n    text field. Supports PNG and JPEG files.\\n@param bottomText For multiselect menus, a text description or label that's displayed below the\\n    item's text field.\\n@return This object, for chaining.*/addMultiSelectItem(text:Object,value:Object,selected:boolean,startIconUri:Object,bottomText:Object):CardService.SelectionInput;\\n/**Sets external data source, such as a relational data base.\\n\\n```\\nconst multiSelect \\u003d CardService.newSelectionInput()\\n    .setType(CardService.SelectionInputType.MULTI_SELECT)\\n    .setFieldName(\\\"contacts\\\")\\n    .setTitle(\\\"Selected contacts\\\")\\n    .addMultiSelectItem(\\\"Contact 3\\\", \\\"contact-3\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact three description\\\")\\n    .setMultiSelectMaxSelectedItems(5)\\n    .setMultiSelectMinQueryLength(2)\\n    .setExternalDataSource(CardService.newAction().setFunctionName(\\\"getContacts\\\"));\\n```\\n@param action The external data source.\\n@return This object, for chaining.*/setExternalDataSource(action:CardService.Action):CardService.SelectionInput;\\n/**Sets the key that identifies this selection input in the event object that is generated when\\nthere is a UI interaction. Not visible to the user. Required, must be unique.\\n@param fieldName The name to assign to this input.\\n@return This object, for chaining.*/setFieldName(fieldName:string):CardService.SelectionInput;\\n/**Sets the maximum number of items that a user can select.\\n\\n```\\nconst multiSelect \\u003d CardService.newSelectionInput()\\n    .setType(CardService.SelectionInputType.MULTI_SELECT)\\n    .setFieldName(\\\"multiselect\\\")\\n    .setTitle(\\\"A multi select input example.\\\")\\n    .setMultiSelectMaxSelectedItems(3)\\n    .addMultiSelectItem(\\\"Contact 1\\\", \\\"contact-1\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact one description\\\")\\n    .addMultiSelectItem(\\\"Contact 2\\\", \\\"contact-2\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact two description\\\")\\n    .addMultiSelectItem(\\\"Contact 3\\\", \\\"contact-3\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact three description\\\")\\n    .addMultiSelectItem(\\\"Contact 4\\\", \\\"contact-4\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact four description\\\")\\n    .addMultiSelectItem(\\\"Contact 5\\\", \\\"contact-5\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact five description\\\");\\n```\\n@param maxSelectedItems The maximum number of items.\\n@return This object, for chaining.*/setMultiSelectMaxSelectedItems(maxSelectedItems:Integer):CardService.SelectionInput;\\n/**Sets the number of text characters that a user inputs before the app queries autocomplete and\\ndisplays suggested items on the card.\\n\\n```\\nconst multiSelect \\u003d CardService.newSelectionInput()\\n    .setType(CardService.SelectionInputType.MULTI_SELECT)\\n    .setFieldName(\\\"multiselect\\\")\\n    .setTitle(\\\"A multi select input example.\\\")\\n    .setMultiSelectMinQueryLength(1)\\n    .addMultiSelectItem(\\\"Contact 1\\\", \\\"contact-1\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact one description\\\")\\n    .addMultiSelectItem(\\\"Contact 2\\\", \\\"contact-2\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact two description\\\")\\n    .addMultiSelectItem(\\\"Contact 3\\\", \\\"contact-3\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact three description\\\")\\n    .addMultiSelectItem(\\\"Contact 4\\\", \\\"contact-4\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact four description\\\")\\n    .addMultiSelectItem(\\\"Contact 5\\\", \\\"contact-5\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact five description\\\");\\n```\\n@param queryLength The number of text characters.\\n@return This object, for chaining.*/setMultiSelectMinQueryLength(queryLength:Integer):CardService.SelectionInput;\\n/**Sets an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) to be performed whenever the selection input changes.\\n@param action The action to take.\\n@return This object, for chaining.*/setOnChangeAction(action:CardService.Action):CardService.SelectionInput;\\n/**Sets a data source from Google Workspace. Used to populate items in a multiselect menu.\\n\\n```\\nconst multiSelect \\u003d CardService.newSelectionInput()\\n    .setType(CardService.SelectionInputType.MULTI_SELECT)\\n    .setFieldName(\\\"contacts\\\")\\n    .setTitle(\\\"Selected contacts\\\")\\n    .setPlatformDataSource(\\n       CardService.newPlatformDataSource()\\n         .setCommonDataSource(CardService.CommonDataSource.USER));\\n```\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n@param platformDataSource The data source.\\n@return This object, for chaining.*/setPlatformDataSource(platformDataSource:CardService.PlatformDataSource):CardService.SelectionInput;\\n/**Sets the title to be shown ahead of the input field.\\n@param title The input field title.\\n@return This object, for chaining.*/setTitle(title:string):CardService.SelectionInput;\\n/**Sets the type of this input. Defaults to `CHECKBOX`.\\n@param type The selection type.\\n@return This object, for chaining.*/setType(type:CardService.SelectionInputType):CardService.SelectionInput;}interface ResponseType{}interface _ResponseType{\\n/**Presents a dialog.*/DIALOG:ResponseType;\\n/**Post as a new message in the topic.*/NEW_MESSAGE:ResponseType;\\n/**Privately ask the user for additional authentication or configuration.*/REQUEST_CONFIG:ResponseType;\\n/**Default type that's handled as `NEW_MESSAGE`.*/TYPE_UNSPECIFIED:ResponseType;\\n/**Update the Chat app's message. This is only permitted on a `CARD_CLICKED` event where\\nthe message sender type is `BOT`.*/UPDATE_MESSAGE:ResponseType;\\n/**Update the cards on a user's message. This is only permitted as a response to a `MESSAGE` event with a matched URL, or a `CARD_CLICKED` event where the message sender\\ntype is `HUMAN`. Text is ignored.*/UPDATE_USER_MESSAGE_CARDS:ResponseType;\\n/**Widget text autocomplete options query.*/UPDATE_WIDGET:ResponseType;}interface PlatformDataSource{\\n/**Sets the data source from Google Workspace.\\n\\n```\\nconst platformDataSource \\u003d CardService.newPlatformDataSource()\\n     .setCommonDataSource(CardService.CommonDataSource.USER);\\n\\nconst multiSelect \\u003d CardService.newSelectionInput()\\n    .setType(CardService.SelectionInputType.MULTI_SELECT)\\n    .setFieldName(\\\"contacts\\\")\\n    .setTitle(\\\"Selected contacts\\\")\\n    .setMultiSelectMaxSelectedItems(5)\\n    .setMultiSelectMinQueryLength(1)\\n    .setPlatformDataSource(platformDataSource);\\n```\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n@param commonDataSource The data source to be set.\\n@return This object, for chaining.*/setCommonDataSource(commonDataSource:CardService.CommonDataSource):CardService.PlatformDataSource;\\n/**Used to populate spaces in multiselect menu.\\n\\n```\\nconst chatSpaceDataSource \\u003d CardService.newChatSpaceDataSource()\\n    .setDefaultToCurrentSpace(true);\\n\\nconst chatClientDataSource \\u003d CardService.newChatClientDataSource()\\n    .setSpaceDataSource(chatSpaceDataSource);\\n\\nconst hostAppDataSource \\u003d CardService.newHostAppDataSource()\\n    .setChatDataSource(chatClientDataSource);\\n\\nconst platformDataSource \\u003d CardService.newPlatformDataSource()\\n    .setHostAppDataSource(hostAppDataSource);\\n\\nconst multiSelect \\u003d CardService.newSelectionInput()\\n    .setType(CardService.SelectionInputType.MULTI_SELECT)\\n    .setFieldName(\\\"contacts\\\")\\n    .setTitle(\\\"Selected contacts\\\")\\n    .setMultiSelectMaxSelectedItems(5)\\n    .setMultiSelectMinQueryLength(1)\\n    .setPlatformDataSource(platformDataSource);\\n```\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n@param hostAppDataSource The data source to be set.\\n@return This object, for chaining.*/setHostAppDataSource(hostAppDataSource:CardService.HostAppDataSource):CardService.PlatformDataSource;}interface OverflowMenuItem{\\n/**Sets an authorization action that opens a URL to the authorization flow when the object is\\nclicked. This opens the URL in a new window. When the user finishes the authorization flow and\\nreturns to the application, the add-on reloads.\\n\\nA UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAuthorizationAction().setAuthorizationUrl('url');\\nCardService.newTextButton().setText('Authorize').setAuthorizationAction(action);\\n\\n```\\n@param action The object that specifies the authorization action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setAuthorizationAction(action:CardService.AuthorizationAction):CardService.OverflowMenuItem;\\n/**Sets an action that composes a draft email when the object is clicked. A UI object can only\\nhave one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOnClickOpenLinkAction(Action)),\\n[`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html) object configured using [`ComposeActionResponseBuilder.setGmailDraft(draft)`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html#setGmailDraft(GmailDraft)).\\n\\n__Note__: This method doesn't set a __compose action__ that is\\nused to [extend the compose UI](/gmail/add-ons/how-tos/extending-compose-ui).\\nRather, this method connects this UI element to an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that [composes draft messages](/gmail/add-ons/how-tos/compose) in Apps Script that are\\nopened in Gmail when the action completes. \\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('composeEmailCallback');\\nCardService.newTextButton()\\n    .setText('Compose Email')\\n    .setComposeAction(action, CardService.ComposedEmailType.REPLY_AS_DRAFT);\\n\\n// ...\\n\\nfunction composeEmailCallback() {\\n  var thread \\u003d GmailApp.getThreadById(e.threadId);\\n  var draft \\u003d thread.createDraftReply('This is a reply');\\n  return CardService.newComposeActionResponseBuilder()\\n      .setGmailDraft(draft)\\n      .build();\\n}\\n```\\n@param action The object that specifies the compose action to take when this element is\\n    clicked.\\n@param composedEmailType An enum value that specifies whether the composed draft is a\\n    standalone or reply draft.\\n@return This object, for chaining.*/setComposeAction(action:CardService.Action,composedEmailType:CardService.ComposedEmailType):CardService.OverflowMenuItem;\\n/**Sets whether the menu item is disabled. A disabled item is greyed out and cannot be clicked.\\n@param disabled The disabled state.\\n@return This object, for chaining.*/setDisabled(disabled:boolean):CardService.OverflowMenuItem;\\n/**Sets an action that executes when the object is clicked. A UI object can only have one of\\n[`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('notificationCallback');\\nCardService.newTextButton().setText('Create notification').setOnClickAction(action);\\n\\n// ...\\n\\nfunction notificationCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setNotification(CardService.newNotification()\\n          .setText(\\\"Some info to display to user\\\"))\\n      .build();\\n}\\n```\\n@param action The action to take when this element is clicked.\\n@return This object, for chaining.*/setOnClickAction(action:CardService.Action):CardService.OverflowMenuItem;\\n/**Sets an action that opens a URL in a tab when the object is clicked. Use this function when the\\nURL needs to be built or when you need to take other actions in addition to creating the [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setAuthorizationAction(AuthorizationAction)), or\\n[`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object configured using [`ActionResponseBuilder.setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html#setOpenLink(OpenLink)).\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('openLinkCallback');\\nCardService.newTextButton().setText('Open Link').setOnClickOpenLinkAction(action);\\n\\n// ...\\n\\nfunction openLinkCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setOpenLink(CardService.newOpenLink()\\n          .setUrl('https://www.google.com'))\\n      .build();\\n}\\n```\\n@param action The object that specifies the open link action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setOnClickOpenLinkAction(action:CardService.Action):CardService.OverflowMenuItem;\\n/**Sets a URL to be opened when the object is clicked. Use this function when the URL is already\\nknown and only needs to be opened. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOpenLink(OpenLink)),\\n[`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setAuthorizationAction(AuthorizationAction)),\\nor [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/overflow-menu-item.html#setComposeAction(Action,ComposedEmailType)) set.\\n@param openLink An [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object describing the URL to open.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.OverflowMenuItem;\\n/**Sets the menu item's leading icon.\\n@param icon The icon to display.\\n@return This object, for chaining.*/setStartIcon(icon:CardService.IconImage):CardService.OverflowMenuItem;\\n/**Sets the title of the menu item. Required.\\n@param text The text to display.\\n@return This object, for chaining.*/setText(text:string):CardService.OverflowMenuItem;}interface OverflowMenu{\\n/**Adds a menu item.\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@param menuItem The menu item to add.\\n@return This object, for chaining.*/addMenuItem(menuItem:CardService.OverflowMenuItem):CardService.OverflowMenu;}interface OpenLink{\\n/**Sets the behavior of the URL action when the URL window or tab is closed.\\n@param onClose The closing setting.\\n@return This object, for chaining.*/setOnClose(onClose:CardService.OnClose):CardService.OpenLink;\\n/**Sets the behavior of URL when it is opened.\\n@param openAs The opening setting.\\n@return This object, for chaining.*/setOpenAs(openAs:CardService.OpenAs):CardService.OpenLink;\\n/**Sets the URL to be opened. The URL must match a prefix [whitelisted in\\nthe manifest](/gmail/add-ons/concepts/manifests#manifest_structure_for_gmail_add-ons).\\n@param url The URL to open.\\n@return This object, for chaining.*/setUrl(url:string):CardService.OpenLink;}interface OpenAs{}interface _OpenAs{\\n/**Open in a full window or tab. Default.*/FULL_SIZE:OpenAs;\\n/**Open as an overlay such as a pop-up.*/OVERLAY:OpenAs;}interface OnClose{}interface _OnClose{\\n/**Do nothing on close. Default.*/NOTHING:OnClose;\\n/**Reloads the add-on on when the window closes.\\n\\nIf [`OpenAs.OVERLAY`](https://developers.google.com/apps-script/reference/card-service/open-as.html#OVERLAY) is also set, then the main card is blocked until the overlay\\nwindow is closed and the add-on has finished reloading.*/RELOAD:OnClose;\\n/**Reload the add-on on closing the URL. This action differs from [`RELOAD`](https://developers.google.com/apps-script/reference/card-service/on-close.html#RELOAD) in that it does\\nnot block the main card while showing an [`OpenAs.OVERLAY`](https://developers.google.com/apps-script/reference/card-service/open-as.html#OVERLAY) window.\\n@deprecated*/RELOAD_ADD_ON:OnClose;}interface Notification{\\n/**Sets the text to show in the notification. Required.\\n@param text The notification text.\\n@return This object, for chaining.*/setText(text:string):CardService.Notification;}interface Navigation{\\n/**Pops a card from the navigation stack. Can be chained with other card navigation actions.\\n@return This object, for chaining.*/popCard():CardService.Navigation;\\n/**Pops to the specified card by its card name. Can be chained with other card navigation actions.\\n@param cardName The name of the card to navigate to.\\n@return This object, for chaining.*/popToNamedCard(cardName:string):CardService.Navigation;\\n/**Pops the card stack to the root card. Can be chained with other card navigation actions.\\n@return This object, for chaining.*/popToRoot():CardService.Navigation;printJson():string;\\n/**Pushes the given card onto the stack. Can be chained with other card navigation actions.\\n@param card A card to add to the stack.\\n@return This object, for chaining.*/pushCard(card:CardService.Card):CardService.Navigation;\\n/**Does an in-place replacement of the current card. Can be chained with other card navigation\\nactions.\\n@param card A card to replace the current card with.\\n@return This object, for chaining.*/updateCard(card:CardService.Card):CardService.Navigation;}interface MaterialIcon{\\n/**Whether the icon renders as filled. Default value is `false`.\\n\\nTo preview different icon settings, go to [Google\\nFont Icons](https://fonts.google.com/icons) and adjust the settings under __Customize__.\\n\\n```\\nconst materialIcon \\u003d CardService.newMaterialIcon()\\n    .setName('search')\\n    .setFill(true);\\n```\\n@param fill Whether the icon is filled.\\n@return This object, for chaining.*/setFill(fill:boolean):CardService.MaterialIcon;\\n/**Weight and grade affect a symbol’s thickness. Adjustments to grade are more granular than\\nadjustments to weight and have a small impact on the size of the symbol. Choose from {-25, 0,\\n200}. If absent, default value is 0. If any other value is specified, the default value is\\nused.\\n\\nTo preview different icon settings, go to [Google\\nFont Icons](https://fonts.google.com/icons) and adjust the settings under __Customize__.\\n\\n```\\nconst materialIcon \\u003d CardService.newMaterialIcon()\\n    .setName('search')\\n    .setGrade(200);\\n```\\n@param grade The icon's grade.\\n@return This object, for chaining.*/setGrade(grade:Integer):CardService.MaterialIcon;\\n/**Sets the name of the icon. Required.\\n\\nThe icon name defined in [Google Font Icon](https://fonts.google.com/icons), For\\nexample, `check_box`.\\n\\nAny invalid names are abandoned and replaced with an empty string and results in the icon\\nfailing to render.\\n\\n```\\nconst materialIcon \\u003d CardService.newMaterialIcon().setName('search');\\n```\\n@param name The name of the icon.\\n@return This object, for chaining.*/setName(name:string):CardService.MaterialIcon;\\n/**The stroke weight of the icon. Choose from {100, 200, 300, 400, 500, 600, 700}. If absent,\\ndefault value is 400. If any other value is specified, the default value is used.\\n\\nTo preview different icon settings, go to [Google\\nFont Icons](https://fonts.google.com/icons) and adjust the settings under __Customize__.\\n\\n```\\nconst materialIcon \\u003d CardService.newMaterialIcon()\\n    .setName('search')\\n    .setWeight(700);\\n```\\n@param weight The stroke weight of the icon.\\n@return This object, for chaining.*/setWeight(weight:Integer):CardService.MaterialIcon;}interface LoadIndicator{}interface _LoadIndicator{\\n/**Do not use an indicator.*/NONE:LoadIndicator;\\n/**Use a spinner indicator. Default.*/SPINNER:LoadIndicator;}interface LinkPreview{printJson():string;\\n/**Sets the title that displays in the link preview above the preview card. If unset, the link\\npreview displays the header of the `PreviewCard`.\\n\\n```\\nconst linkPreview \\u003d CardService.newLinkPreview()\\n    .setLinkPreviewTitle(\\\"Link preview title\\\");\\n```\\n@param title The title of the link preview.\\n@return This object, for chaining.*/setLinkPreviewTitle(title:string):CardService.LinkPreview;\\n/**Sets the card that displays information about a link from a third-party or non-Google service.\\n\\n```\\nconst decoratedText \\u003d CardService.newDecoratedText()\\n    .setTopLabel('Hello')\\n    .setText('Hi!');\\n\\nconst cardSection \\u003d CardService.newCardSection()\\n    .addWidget(decoratedText);\\n\\nconst card \\u003d CardService.newCardBuilder()\\n    .addSection(cardSection)\\n    .build();\\n\\nconst linkPreview \\u003d CardService.newLinkPreview()\\n    .setPreviewCard(card)\\n    .setTitle('Smart chip title');\\n```\\n@param previewCard The preview card.\\n@return This object, for chaining.*/setPreviewCard(previewCard:CardService.Card):CardService.LinkPreview;\\n/**Sets the title that displays in the smart chip for the link preview. If unset, the smart chip\\ndisplays the header of the `PreviewCard`.\\n\\n```\\nconst linkPreview \\u003d CardService.newLinkPreview()\\n    .setTitle('Smart chip title');\\n```\\n@param title The title of the smart chip.\\n@return This object, for chaining.*/setTitle(title:string):CardService.LinkPreview;}interface KeyValue{\\n/**Sets an authorization action that opens a URL to the authorization flow when the object is\\nclicked. This opens the URL in a new window. When the user finishes the authorization flow and\\nreturns to the application, the add-on reloads.\\n\\nA UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAuthorizationAction().setAuthorizationUrl('url');\\nCardService.newTextButton().setText('Authorize').setAuthorizationAction(action);\\n\\n```\\n@param action The object that specifies the authorization action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setAuthorizationAction(action:CardService.AuthorizationAction):CardService.KeyValue;\\n/**Sets the label text to be used as the key. Displayed below the text-content.\\n@deprecated\\n@param text The label text. Note: It doesn't support [basic HTML formatting](/gmail/add-ons/concepts/widgets#text_formatting).\\n@return This object, for chaining.*/setBottomLabel(text:string):CardService.KeyValue;\\n/**Sets the [`Button`](https://developers.google.com/apps-script/reference/card-service/button.html) that is displayed to the right of the context. A ~~[`KeyValue`](https://developers.google.com/apps-script/reference/card-service/key-value.html)~~ can\\nonly support one button, one switch or one icon.\\n@deprecated\\n@param button The button to add.\\n@return This object, for chaining.*/setButton(button:CardService.Button):CardService.KeyValue;\\n/**Sets an action that composes a draft email when the object is clicked. A UI object can only\\nhave one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOnClickOpenLinkAction(Action)),\\n[`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html) object configured using [`ComposeActionResponseBuilder.setGmailDraft(draft)`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html#setGmailDraft(GmailDraft)).\\n\\n__Note__: This method doesn't set a __compose action__ that is\\nused to [extend the compose UI](/gmail/add-ons/how-tos/extending-compose-ui).\\nRather, this method connects this UI element to an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that [composes draft messages](/gmail/add-ons/how-tos/compose) in Apps Script that are\\nopened in Gmail when the action completes. \\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('composeEmailCallback');\\nCardService.newTextButton()\\n    .setText('Compose Email')\\n    .setComposeAction(action, CardService.ComposedEmailType.REPLY_AS_DRAFT);\\n\\n// ...\\n\\nfunction composeEmailCallback() {\\n  var thread \\u003d GmailApp.getThreadById(e.threadId);\\n  var draft \\u003d thread.createDraftReply('This is a reply');\\n  return CardService.newComposeActionResponseBuilder()\\n      .setGmailDraft(draft)\\n      .build();\\n}\\n```\\n@param action The object that specifies the compose action to take when this element is\\n    clicked.\\n@param composedEmailType An enum value that specifies whether the composed draft is a\\n    standalone or reply draft.\\n@return This object, for chaining.*/setComposeAction(action:CardService.Action,composedEmailType:CardService.ComposedEmailType):CardService.KeyValue;\\n/**Sets the text to be used as the value. Supports [basic HTML formatting](/gmail/add-ons/concepts/widgets#text_formatting). Required.\\n@deprecated\\n@param text The text content for this widget.\\n@return This object, for chaining.*/setContent(text:string):CardService.KeyValue;\\n/**Sets the icon to be used as the key.\\n@deprecated\\n@param icon One of the predefined [`Icon`](https://developers.google.com/apps-script/reference/card-service/icon.html) values.\\n@return This object, for chaining.*/setIcon(icon:CardService.Icon):CardService.KeyValue;\\n/**Sets the alternative text for the icon.\\n@deprecated\\n@param altText The alternative text for the icon.\\n@return This object, for chaining.*/setIconAltText(altText:string):CardService.KeyValue;\\n/**Sets the URL of the icon to be used as the key.\\n@deprecated\\n@param url The URL address of a hosted image to use as an icon.\\n@return This object, for chaining.*/setIconUrl(url:string):CardService.KeyValue;\\n/**Sets whether the value text should be displayed on a single line or multiple lines.\\n@deprecated\\n@param multiline The multiline setting.\\n@return This object, for chaining.*/setMultiline(multiline:boolean):CardService.KeyValue;\\n/**Sets an action that executes when the object is clicked. A UI object can only have one of\\n[`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('notificationCallback');\\nCardService.newTextButton().setText('Create notification').setOnClickAction(action);\\n\\n// ...\\n\\nfunction notificationCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setNotification(CardService.newNotification()\\n          .setText(\\\"Some info to display to user\\\"))\\n      .build();\\n}\\n```\\n@param action The action to take when this element is clicked.\\n@return This object, for chaining.*/setOnClickAction(action:CardService.Action):CardService.KeyValue;\\n/**Sets an action that opens a URL in a tab when the object is clicked. Use this function when the\\nURL needs to be built or when you need to take other actions in addition to creating the [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setAuthorizationAction(AuthorizationAction)), or\\n[`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object configured using [`ActionResponseBuilder.setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html#setOpenLink(OpenLink)).\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('openLinkCallback');\\nCardService.newTextButton().setText('Open Link').setOnClickOpenLinkAction(action);\\n\\n// ...\\n\\nfunction openLinkCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setOpenLink(CardService.newOpenLink()\\n          .setUrl('https://www.google.com'))\\n      .build();\\n}\\n```\\n@param action The object that specifies the open link action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setOnClickOpenLinkAction(action:CardService.Action):CardService.KeyValue;\\n/**Sets a URL to be opened when the object is clicked. Use this function when the URL is already\\nknown and only needs to be opened. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOpenLink(OpenLink)),\\n[`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setAuthorizationAction(AuthorizationAction)),\\nor [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/key-value.html#setComposeAction(Action,ComposedEmailType)) set.\\n@param openLink An [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object describing the URL to open.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.KeyValue;\\n/**Sets the [`Switch`](https://developers.google.com/apps-script/reference/card-service/switch.html) that is displayed to the right of the content. A ~~[`KeyValue`](https://developers.google.com/apps-script/reference/card-service/key-value.html)~~ can\\nonly support one button, one switch or one icon.\\n@deprecated\\n@param switchToSet The switch to add.\\n@return This object, for chaining.*/setSwitch(switchToSet:CardService.Switch):CardService.KeyValue;\\n/**Sets the label text to be used as the key. Displayed above the text-content.\\n@deprecated\\n@param text The label text. Note: It doesn't support [basic HTML formatting](/gmail/add-ons/concepts/widgets#text_formatting).\\n@return This object, for chaining.*/setTopLabel(text:string):CardService.KeyValue;\\n/**Sets the optional [`IconImage`](https://developers.google.com/apps-script/reference/card-service/icon-image.html) that is displayed to the right of the content. A ~~[`KeyValue`](https://developers.google.com/apps-script/reference/card-service/key-value.html)~~ can only support one button, one switch or one icon.\\n@deprecated\\n@param endIcon The icon to add.\\n@return This object, for chaining.*/setEndIcon(endIcon:CardService.IconImage):CardService.KeyValue;\\n/**Sets the optional [`IconImage`](https://developers.google.com/apps-script/reference/card-service/icon-image.html) to display before the text content.\\n@deprecated\\n@param startIcon The icon to display.\\n@return This object, for chaining.*/setStartIcon(startIcon:CardService.IconImage):CardService.KeyValue;}interface Interaction{}interface _Interaction{\\n/**Default value. The `action` executes as normal.*/INTERACTION_UNSPECIFIED:Interaction;\\n/**Opens a dialog, a card-based interface that Chat apps use to interact with users.*/OPEN_DIALOG:Interaction;}interface InputType{}interface _InputType{\\n/**Accept an email address.*/EMAIL:InputType;\\n/**Accept a floating-point number.*/FLOAT:InputType;\\n/**Accept an integer.*/INTEGER:InputType;\\n/**Accept regular text.*/TEXT:InputType;}interface ImageStyle{}interface _ImageStyle{\\n/**Crop to a circle shape.*/CIRCLE:ImageStyle;\\n/**No cropping. Default.*/SQUARE:ImageStyle;}interface ImageCropType{}interface _ImageCropType{\\n/**Circle shape crop style.*/CIRCLE:ImageCropType;\\n/**Rectangle shape crop style with 4:3 ratio.*/RECTANGLE_4_3:ImageCropType;\\n/**Rectangle shape crop style with custom ratio.*/RECTANGLE_CUSTOM:ImageCropType;\\n/**Square shape crop style.*/SQUARE:ImageCropType;}interface ImageCropStyle{\\n/**Sets the aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`. The ratio must\\nbe a positive value.\\n@param ratio The ratio to apply.\\n@return This object, for chaining.*/setAspectRatio(ratio:number):CardService.ImageCropStyle;\\n/**Sets the crop type for the image. Default is SQUARE.\\n@param type The crop type.\\n@return This object, for chaining.*/setImageCropType(type:CardService.ImageCropType):CardService.ImageCropStyle;}interface ImageComponent{\\n/**Sets the alternative text of the image.\\n@param altText The alt_text to set for the image.\\n@return This object, for chaining.*/setAltText(altText:string):CardService.ImageComponent;\\n/**Sets the border style applied to the image.\\n@param borderStyle The BorderStyle object to apply.\\n@return This object, for chaining.*/setBorderStyle(borderStyle:CardService.BorderStyle):CardService.ImageComponent;\\n/**Sets the crop style for the image.\\n@param imageCropStyle The ImageCropStyle object to apply.\\n@return This object, for chaining.*/setCropStyle(imageCropStyle:CardService.ImageCropStyle):CardService.ImageComponent;\\n/**Sets the URL of the image.\\n@param url The URL.\\n@return This object, for chaining.*/setImageUrl(url:string):CardService.ImageComponent;}interface ImageButtonStyle{}interface _ImageButtonStyle{\\n/**Image button with no border. Default.*/BORDERLESS:ImageButtonStyle;\\n/**Image button with colored background.*/FILLED:ImageButtonStyle;\\n/**Image button with an alternative middle ground between filled and outlined buttons.*/FILLED_TONAL:ImageButtonStyle;\\n/**Image button with clear background.*/OUTLINED:ImageButtonStyle;}interface ImageButton{\\n/**Sets the alternative text of the button for accessibility. Required.\\n@param altText The alternative text to assign to this button.\\n@return This object, for chaining.*/setAltText(altText:string):CardService.ImageButton;\\n/**Sets an authorization action that opens a URL to the authorization flow when the object is\\nclicked. This opens the URL in a new window. When the user finishes the authorization flow and\\nreturns to the application, the add-on reloads.\\n\\nA UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAuthorizationAction().setAuthorizationUrl('url');\\nCardService.newTextButton().setText('Authorize').setAuthorizationAction(action);\\n\\n```\\n@param action The object that specifies the authorization action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setAuthorizationAction(action:CardService.AuthorizationAction):CardService.ImageButton;\\n/**Sets an action that composes a draft email when the object is clicked. A UI object can only\\nhave one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOnClickOpenLinkAction(Action)),\\n[`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html) object configured using [`ComposeActionResponseBuilder.setGmailDraft(draft)`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html#setGmailDraft(GmailDraft)).\\n\\n__Note__: This method doesn't set a __compose action__ that is\\nused to [extend the compose UI](/gmail/add-ons/how-tos/extending-compose-ui).\\nRather, this method connects this UI element to an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that [composes draft messages](/gmail/add-ons/how-tos/compose) in Apps Script that are\\nopened in Gmail when the action completes. \\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('composeEmailCallback');\\nCardService.newTextButton()\\n    .setText('Compose Email')\\n    .setComposeAction(action, CardService.ComposedEmailType.REPLY_AS_DRAFT);\\n\\n// ...\\n\\nfunction composeEmailCallback() {\\n  var thread \\u003d GmailApp.getThreadById(e.threadId);\\n  var draft \\u003d thread.createDraftReply('This is a reply');\\n  return CardService.newComposeActionResponseBuilder()\\n      .setGmailDraft(draft)\\n      .build();\\n}\\n```\\n@param action The object that specifies the compose action to take when this element is\\n    clicked.\\n@param composedEmailType An enum value that specifies whether the composed draft is a\\n    standalone or reply draft.\\n@return This object, for chaining.*/setComposeAction(action:CardService.Action,composedEmailType:CardService.ComposedEmailType):CardService.ImageButton;\\n/**Sets a predefined [`Icon`](https://developers.google.com/apps-script/reference/card-service/icon.html) to display on the button. Either this or [`setIconUrl(url)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setIconUrl(String))\\nmust be used to define the button image.\\n@param icon One of the predefined [`Icon`](https://developers.google.com/apps-script/reference/card-service/icon.html) values.\\n@return This object, for chaining.*/setIcon(icon:CardService.Icon):CardService.ImageButton;\\n/**Sets the URL of an image to use as this button's icon. Either this or [`setIcon(icon)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setIcon(Icon)) must be\\nused to define the button image.\\n@param url The URL address of a hosted image to use as this button's icon.\\n@return This object, for chaining.*/setIconUrl(url:string):CardService.ImageButton;\\n/**Sets the button style. If unset, it defaults to [`ImageButtonStyle.BORDERLESS`](https://developers.google.com/apps-script/reference/card-service/image-button-style.html#BORDERLESS) button.\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\nconst imageButton \\u003d CardService.newImageButton()\\n   .setImageButtonStyle(CardService.ImageButtonStyle.BORDERLESS);\\n```\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@param imageButtonStyle The button style.\\n@return This object, for chaining.*/setImageButtonStyle(imageButtonStyle:CardService.ImageButtonStyle):CardService.ImageButton;\\n/**Sets the material design icon.\\n\\n```\\nconst imageButton \\u003d CardService.newImageButton()\\n   .setMaterialIcon(CardService.newMaterialIcon().setName('search'));\\n```\\n@param icon The material design icon.\\n@return This object, for chaining.*/setMaterialIcon(icon:CardService.MaterialIcon):CardService.ImageButton;\\n/**Sets an action that executes when the object is clicked. A UI object can only have one of\\n[`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('notificationCallback');\\nCardService.newTextButton().setText('Create notification').setOnClickAction(action);\\n\\n// ...\\n\\nfunction notificationCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setNotification(CardService.newNotification()\\n          .setText(\\\"Some info to display to user\\\"))\\n      .build();\\n}\\n```\\n@param action The action to take when this element is clicked.\\n@return This object, for chaining.*/setOnClickAction(action:CardService.Action):CardService.ImageButton;\\n/**Sets an action that opens a URL in a tab when the object is clicked. Use this function when the\\nURL needs to be built or when you need to take other actions in addition to creating the [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setAuthorizationAction(AuthorizationAction)), or\\n[`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object configured using [`ActionResponseBuilder.setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html#setOpenLink(OpenLink)).\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('openLinkCallback');\\nCardService.newTextButton().setText('Open Link').setOnClickOpenLinkAction(action);\\n\\n// ...\\n\\nfunction openLinkCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setOpenLink(CardService.newOpenLink()\\n          .setUrl('https://www.google.com'))\\n      .build();\\n}\\n```\\n@param action The object that specifies the open link action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setOnClickOpenLinkAction(action:CardService.Action):CardService.ImageButton;\\n/**Sets a URL to be opened when the object is clicked. Use this function when the URL is already\\nknown and only needs to be opened. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOpenLink(OpenLink)),\\n[`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setAuthorizationAction(AuthorizationAction)),\\nor [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/image-button.html#setComposeAction(Action,ComposedEmailType)) set.\\n@param openLink An [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object describing the URL to open.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.ImageButton;\\n/**Sets a pop-up menu to be opened when the object is clicked. Each item in the menu can specify\\nan action to be triggered when clicked. Nested menus are not supported, actions for menu items\\nshould not specify an overflow menu.\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\n  var overflowMenuItem \\u003d CardService.newOverflowMenuItem()\\n    .setStartIcon(CardService.newIconImage()\\n    .setIconUrl(\\\"https://www.google.com/images/branding/googleg/1x/googleg_standard_color_64dp.png\\\"))\\n    .setText(\\\"Open Link\\\")\\n    .setOpenLink(CardService.newOpenLink()\\n        .setUrl(\\\"https://www.google.com\\\"));\\n\\nvar overflowMenu \\u003d CardService.newOverflowMenu()\\n    .addMenuItem(overflowMenuItem).build();\\n```\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@param menu The object that specifies the overflow menu to display when this element is\\n    clicked.\\n@return This object, for chaining.*/setOverflowMenu(menu:CardService.OverflowMenu):CardService.ImageButton;}interface Image{\\n/**Sets the alternative text of the image for accessibility. Required.\\n@param altText The alternative text to assign to this image.\\n@return This object, for chaining.*/setAltText(altText:string):CardService.Image;\\n/**Sets an authorization action that opens a URL to the authorization flow when the object is\\nclicked. This opens the URL in a new window. When the user finishes the authorization flow and\\nreturns to the application, the add-on reloads.\\n\\nA UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/image.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAuthorizationAction().setAuthorizationUrl('url');\\nCardService.newTextButton().setText('Authorize').setAuthorizationAction(action);\\n\\n```\\n@param action The object that specifies the authorization action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setAuthorizationAction(action:CardService.AuthorizationAction):CardService.Image;\\n/**Sets an action that composes a draft email when the object is clicked. A UI object can only\\nhave one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOnClickOpenLinkAction(Action)),\\n[`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/image.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html) object configured using [`ComposeActionResponseBuilder.setGmailDraft(draft)`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html#setGmailDraft(GmailDraft)).\\n\\n__Note__: This method doesn't set a __compose action__ that is\\nused to [extend the compose UI](/gmail/add-ons/how-tos/extending-compose-ui).\\nRather, this method connects this UI element to an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that [composes draft messages](/gmail/add-ons/how-tos/compose) in Apps Script that are\\nopened in Gmail when the action completes. \\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('composeEmailCallback');\\nCardService.newTextButton()\\n    .setText('Compose Email')\\n    .setComposeAction(action, CardService.ComposedEmailType.REPLY_AS_DRAFT);\\n\\n// ...\\n\\nfunction composeEmailCallback() {\\n  var thread \\u003d GmailApp.getThreadById(e.threadId);\\n  var draft \\u003d thread.createDraftReply('This is a reply');\\n  return CardService.newComposeActionResponseBuilder()\\n      .setGmailDraft(draft)\\n      .build();\\n}\\n```\\n@param action The object that specifies the compose action to take when this element is\\n    clicked.\\n@param composedEmailType An enum value that specifies whether the composed draft is a\\n    standalone or reply draft.\\n@return This object, for chaining.*/setComposeAction(action:CardService.Action,composedEmailType:CardService.ComposedEmailType):CardService.Image;\\n/**Sets the image to use by providing its URL or data string. Required.\\n\\nThe provided URL can either be a publicly accessible URL or a base64 encoded image string.\\nTo obtain the latter, you can use the following code to create an encoded image string from an\\nimage in your Google Drive, then store that string for later use with [`setImageUrl(url)`](https://developers.google.com/apps-script/reference/card-service/image.html#setImageUrl(String)). This method prevents the need for your add-on to access a publicly\\navailable image URL:\\n\\n```\\n// The following assumes you have the image to use in Google Drive and have its ID.\\nvar imageBytes \\u003d DriveApp.getFileById(imageID).getBlob().getBytes();\\nvar encodedImageURL \\u003d \\\"data:image/jpeg;base64,\\\" + Utilities.base64Encode(imageBytes);\\n\\n// You can store encodeImageURL and use it as a parameter to Image.setImageUrl(url).\\n```\\n@param url The URL address of a hosted image to use, or an encoded image string.\\n@return This object, for chaining.*/setImageUrl(url:string):CardService.Image;\\n/**Sets an action that executes when the object is clicked. A UI object can only have one of\\n[`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/image.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('notificationCallback');\\nCardService.newTextButton().setText('Create notification').setOnClickAction(action);\\n\\n// ...\\n\\nfunction notificationCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setNotification(CardService.newNotification()\\n          .setText(\\\"Some info to display to user\\\"))\\n      .build();\\n}\\n```\\n@param action The action to take when this element is clicked.\\n@return This object, for chaining.*/setOnClickAction(action:CardService.Action):CardService.Image;\\n/**Sets an action that opens a URL in a tab when the object is clicked. Use this function when the\\nURL needs to be built or when you need to take other actions in addition to creating the [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setAuthorizationAction(AuthorizationAction)), or\\n[`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/image.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object configured using [`ActionResponseBuilder.setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html#setOpenLink(OpenLink)).\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('openLinkCallback');\\nCardService.newTextButton().setText('Open Link').setOnClickOpenLinkAction(action);\\n\\n// ...\\n\\nfunction openLinkCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setOpenLink(CardService.newOpenLink()\\n          .setUrl('https://www.google.com'))\\n      .build();\\n}\\n```\\n@param action The object that specifies the open link action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setOnClickOpenLinkAction(action:CardService.Action):CardService.Image;\\n/**Sets a URL to be opened when the object is clicked. Use this function when the URL is already\\nknown and only needs to be opened. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOpenLink(OpenLink)),\\n[`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/image.html#setAuthorizationAction(AuthorizationAction)),\\nor [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/image.html#setComposeAction(Action,ComposedEmailType)) set.\\n@param openLink An [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object describing the URL to open.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.Image;}interface IconImage{\\n/**Sets the alternative text of the URL which is used for accessibility.\\n@param altText The alternative text.\\n@return This object, for chaining.*/setAltText(altText:string):CardService.IconImage;\\n/**Sets the predefined icon if the URL is not set. Default is NONE.\\n@param icon One of the predefined [`Icon`](https://developers.google.com/apps-script/reference/card-service/icon.html) values.\\n@return This object, for chaining.*/setIcon(icon:CardService.Icon):CardService.IconImage;\\n/**Sets the URL of the icon if the icon is not set.\\n@param url The URL address of a hosted image to use as an icon.\\n@return This object, for chaining.*/setIconUrl(url:string):CardService.IconImage;\\n/**Sets the crop style for the image. The crop type options you can use for icons are `SQUARE` and `CIRCLE`. Default is `SQUARE`.\\n@param imageCropType The ImageCropType option to apply.\\n@return This object, for chaining.*/setImageCropType(imageCropType:CardService.ImageCropType):CardService.IconImage;\\n/**Sets the material design icon.\\n\\n```\\nconst iconImage \\u003d CardService.newIconImage()\\n    .setMaterialIcon(CardService.newMaterialIcon().setName('search'));\\n```\\n@param icon The material icon.\\n@return This object, for chaining.*/setMaterialIcon(icon:CardService.MaterialIcon):CardService.IconImage;}interface Icon{}interface _Icon{\\n/**![Airplane flight icon](https://www.gstatic.com/images/icons/material/system/1x/flight_grey600_48dp.png)*/AIRPLANE:Icon;\\n/**![Bookmark icon](https://www.gstatic.com/images/icons/material/system/1x/bookmark_grey600_48dp.png)*/BOOKMARK:Icon;\\n/**![Bus icon](https://www.gstatic.com/images/icons/material/system/1x/directions_bus_grey600_48dp.png)*/BUS:Icon;\\n/**![Car icon](https://www.gstatic.com/images/icons/material/system/1x/directions_car_grey600_48dp.png)*/CAR:Icon;\\n/**![Clock icon](https://www.gstatic.com/images/icons/material/system/1x/schedule_grey600_48dp.png)*/CLOCK:Icon;\\n/**![Confirmation number icon](https://www.gstatic.com/images/icons/material/system/1x/confirmation_num_grey600_48dp.png)*/CONFIRMATION_NUMBER_ICON:Icon;\\n/**![Description icon](https://www.gstatic.com/images/icons/material/system/1x/subject_grey600_48dp.png)*/DESCRIPTION:Icon;\\n/**![Dollar icon](https://www.gstatic.com/images/icons/material/system/1x/attach_money_grey600_48dp.png)*/DOLLAR:Icon;\\n/**![Email icon](https://www.gstatic.com/images/icons/material/system/1x/email_grey600_48dp.png)*/EMAIL:Icon;\\n/**![Email icon](https://www.gstatic.com/images/icons/material/system/1x/people_grey600_48dp.png)*/EVENT_PERFORMER:Icon;\\n/**![Event seat icon](https://www.gstatic.com/images/icons/material/system/1x/event_seat_grey600_48dp.png)*/EVENT_SEAT:Icon;\\n/**![Flight arrival icon](https://www.gstatic.com/images/icons/material/system/1x/flight_land_grey600_48dp.png)*/FLIGHT_ARRIVAL:Icon;\\n/**![Flight departure icon](https://www.gstatic.com/images/icons/material/system/1x/flight_takeoff_grey600_48dp.png)*/FLIGHT_DEPARTURE:Icon;\\n/**![Hotel icon](https://www.gstatic.com/images/icons/material/system/1x/hotel_grey600_48dp.png)*/HOTEL:Icon;\\n/**![Hotel icon](https://www.gstatic.com/images/icons/material/system/1x/star_grey600_48dp.png)*/HOTEL_ROOM_TYPE:Icon;\\n/**![Invite icon](https://www.gstatic.com/images/icons/material/system/1x/event_grey600_48dp.png)*/INVITE:Icon;\\n/**![Map pin icon](https://www.gstatic.com/images/icons/material/system/1x/place_grey600_48dp.png)*/MAP_PIN:Icon;\\n/**![Membershipt icon](https://www.gstatic.com/images/icons/material/system/1x/card_membership_grey600_48dp.png)*/MEMBERSHIP:Icon;\\n/**![Multiple people icon](https://www.gstatic.com/images/icons/material/system/1x/people_grey600_48dp.png)*/MULTIPLE_PEOPLE:Icon;\\n/**No icon. Default.*/NONE:Icon;\\n/**![Offer icon](https://www.gstatic.com/images/icons/material/system/1x/local_offer_grey600_48dp.png)*/OFFER:Icon;\\n/**![Person icon](https://www.gstatic.com/images/icons/material/system/1x/person_grey600_48dp.png)*/PERSON:Icon;\\n/**![Phone icon](https://www.gstatic.com/images/icons/material/system/1x/call_grey600_48dp.png)*/PHONE:Icon;\\n/**![Restaurant icon](https://www.gstatic.com/images/icons/material/system/1x/restaurant_grey600_48dp.png)*/RESTAURANT_ICON:Icon;\\n/**![Shopping cart icon](https://www.gstatic.com/images/icons/material/system/1x/shopping_cart_grey600_48dp.png)*/SHOPPING_CART:Icon;\\n/**![Star icon](https://www.gstatic.com/images/icons/material/system/1x/star_grey600_48dp.png)*/STAR:Icon;\\n/**![Store icon](https://www.gstatic.com/images/icons/material/system/1x/store_grey600_48dp.png)*/STORE:Icon;\\n/**![Ticket icon](https://www.gstatic.com/images/icons/material/system/1x/local_attraction_grey600_48dp.png)*/TICKET:Icon;\\n/**![Train icon](https://www.gstatic.com/images/icons/material/system/1x/train_grey600_48dp.png)*/TRAIN:Icon;\\n/**![Video camera icon](https://www.gstatic.com/images/icons/material/system/1x/videocam_grey600_48dp.png)*/VIDEO_CAMERA:Icon;\\n/**![Video play icon](https://www.gstatic.com/images/icons/material/system/1x/play_circle_filled_grey600_48dp.png)*/VIDEO_PLAY:Icon;}interface HostAppDataSource{\\n/**Sets the data source from Google Chat.\\n\\n```\\nconst chatSpaceDataSource \\u003d CardService.newChatSpaceDataSource()\\n    .setDefaultToCurrentSpace(true);\\n\\nconst chatClientDataSource \\u003d CardService.newChatClientDataSource()\\n    .setSpaceDataSource(chatSpaceDataSource);\\n\\nconst hostAppDataSource \\u003d CardService.newHostAppDataSource()\\n    .setChatDataSource(chatClientDataSource);\\n```\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n@param chatClientDataSource The data source to be set.\\n@return This object, for chaining.*/setChatDataSource(chatClientDataSource:CardService.ChatClientDataSource):CardService.HostAppDataSource;}interface HorizontalSizeStyle{}interface _HorizontalSizeStyle{\\n/**Sizes the [`Widget`](https://developers.google.com/apps-script/reference/card-service/widget.html) to fill the available horizontal space of a [`Column`](https://developers.google.com/apps-script/reference/card-service/column.html). If the\\nother column has more space, the widget can fill the space beyond the space of its own column.\\nDefault.*/FILL_AVAILABLE_SPACE:HorizontalSizeStyle;\\n/**Resizes the [`Widget`](https://developers.google.com/apps-script/reference/card-service/widget.html) to fill the least amount of horizontal space in a [`Column`](https://developers.google.com/apps-script/reference/card-service/column.html).\\nThe minimum space is based on the size of the widget. If the widget is smaller than the space\\nof the column, it doesn't expand to fill the space.*/FILL_MINIMUM_SPACE:HorizontalSizeStyle;}interface HorizontalAlignment{}interface _HorizontalAlignment{\\n/**Align the widget to the center.*/CENTER:HorizontalAlignment;\\n/**Align the widget to the end of the sentence side.*/END:HorizontalAlignment;\\n/**Align the widget to the start of the sentence side.*/START:HorizontalAlignment;}interface GridItemLayout{}interface _GridItemLayout{\\n/**The title and subtitle are shown above the grid item's image.*/TEXT_ABOVE:GridItemLayout;\\n/**The title and subtitle are shown below the grid item's image.*/TEXT_BELOW:GridItemLayout;}interface GridItem{\\n/**Sets the identifier for the grid item. When a user clicks this grid item, this ID is returned\\nin the parent grid's on_click call back parameters.\\n@param id The ID.\\n@return This object, for chaining.*/setIdentifier(id:string):CardService.GridItem;\\n/**Sets the image for this grid item.\\n@param image The ImageComponent object.\\n@return This object, for chaining.*/setImage(image:CardService.ImageComponent):CardService.GridItem;\\n/**Sets the layout of text and image for the grid item. Default is TEXT_BELOW\\n@param layout The layout setting.\\n@return This object, for chaining.*/setLayout(layout:CardService.GridItemLayout):CardService.GridItem;\\n/**Sets the subtitle of the grid item.\\n@param subtitle The subtitle text.\\n@return This object, for chaining.*/setSubtitle(subtitle:string):CardService.GridItem;\\n/**Sets the horizontal alignment of the grid item. Default is START.\\n@param alignment The alignment setting.\\n@return This object, for chaining.*/setTextAlignment(alignment:CardService.HorizontalAlignment):CardService.GridItem;\\n/**Sets the title text of the grid item.\\n@param title The title text.\\n@return This object, for chaining.*/setTitle(title:string):CardService.GridItem;}interface Grid{\\n/**Adds a new grid item to the grid.\\n@param gridItem The grid item to add.\\n@return This object, for chaining.*/addItem(gridItem:CardService.GridItem):CardService.Grid;\\n/**Sets an authorization action that opens a URL to the authorization flow when the object is\\nclicked. This opens the URL in a new window. When the user finishes the authorization flow and\\nreturns to the application, the add-on reloads.\\n\\nA UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAuthorizationAction().setAuthorizationUrl('url');\\nCardService.newTextButton().setText('Authorize').setAuthorizationAction(action);\\n\\n```\\n@param action The object that specifies the authorization action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setAuthorizationAction(action:CardService.AuthorizationAction):CardService.Grid;\\n/**Sets the border style applied to each grid item. Default is NO_BORDER.\\n@param borderStyle The border style to apply.\\n@return This object, for chaining.*/setBorderStyle(borderStyle:CardService.BorderStyle):CardService.Grid;\\n/**Sets an action that composes a draft email when the object is clicked. A UI object can only\\nhave one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOnClickOpenLinkAction(Action)),\\n[`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html) object configured using [`ComposeActionResponseBuilder.setGmailDraft(draft)`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html#setGmailDraft(GmailDraft)).\\n\\n__Note__: This method doesn't set a __compose action__ that is\\nused to [extend the compose UI](/gmail/add-ons/how-tos/extending-compose-ui).\\nRather, this method connects this UI element to an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that [composes draft messages](/gmail/add-ons/how-tos/compose) in Apps Script that are\\nopened in Gmail when the action completes. \\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('composeEmailCallback');\\nCardService.newTextButton()\\n    .setText('Compose Email')\\n    .setComposeAction(action, CardService.ComposedEmailType.REPLY_AS_DRAFT);\\n\\n// ...\\n\\nfunction composeEmailCallback() {\\n  var thread \\u003d GmailApp.getThreadById(e.threadId);\\n  var draft \\u003d thread.createDraftReply('This is a reply');\\n  return CardService.newComposeActionResponseBuilder()\\n      .setGmailDraft(draft)\\n      .build();\\n}\\n```\\n@param action The object that specifies the compose action to take when this element is\\n    clicked.\\n@param composedEmailType An enum value that specifies whether the composed draft is a\\n    standalone or reply draft.\\n@return This object, for chaining.*/setComposeAction(action:CardService.Action,composedEmailType:CardService.ComposedEmailType):CardService.Grid;\\n/**The number of columns to display in the grid. If shown in the right side panel, you can display\\n1-2 columns and the default value is 1. If shown in a dialog, you can display 2-3 columns and\\nthe default value is 2.\\n@param numColumns The number of columns.\\n@return This object, for chaining.*/setNumColumns(numColumns:Integer):CardService.Grid;\\n/**Sets an action that executes when the object is clicked. A UI object can only have one of\\n[`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('notificationCallback');\\nCardService.newTextButton().setText('Create notification').setOnClickAction(action);\\n\\n// ...\\n\\nfunction notificationCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setNotification(CardService.newNotification()\\n          .setText(\\\"Some info to display to user\\\"))\\n      .build();\\n}\\n```\\n@param action The action to take when this element is clicked.\\n@return This object, for chaining.*/setOnClickAction(action:CardService.Action):CardService.Grid;\\n/**Sets an action that opens a URL in a tab when the object is clicked. Use this function when the\\nURL needs to be built or when you need to take other actions in addition to creating the [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setAuthorizationAction(AuthorizationAction)), or\\n[`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object configured using [`ActionResponseBuilder.setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html#setOpenLink(OpenLink)).\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('openLinkCallback');\\nCardService.newTextButton().setText('Open Link').setOnClickOpenLinkAction(action);\\n\\n// ...\\n\\nfunction openLinkCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setOpenLink(CardService.newOpenLink()\\n          .setUrl('https://www.google.com'))\\n      .build();\\n}\\n```\\n@param action The object that specifies the open link action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setOnClickOpenLinkAction(action:CardService.Action):CardService.Grid;\\n/**Sets a URL to be opened when the object is clicked. Use this function when the URL is already\\nknown and only needs to be opened. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOpenLink(OpenLink)),\\n[`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setAuthorizationAction(AuthorizationAction)),\\nor [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/grid.html#setComposeAction(Action,ComposedEmailType)) set.\\n@param openLink An [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object describing the URL to open.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.Grid;\\n/**Sets the title text of the grid. The text must be a plain string with no formatting.\\n@param title The title text.\\n@return This object, for chaining.*/setTitle(title:string):CardService.Grid;}interface FixedFooter{\\n/**Set the primary button in the fixed footer. The primary button must be a [`TextButtonStyle.FILLED`](https://developers.google.com/apps-script/reference/card-service/text-button-style.html#FILLED) button. If the background color is unset for the primary button, the\\nbutton uses the primary color defined in the add-on [manifest](/gmail/add-ons/concepts/manifests#manifest_structure_for_gmail_add-ons).\\n@param button The button to add.\\n@return This object, for chaining.*/setPrimaryButton(button:CardService.TextButton):CardService.FixedFooter;\\n/**Set the secondary button in the fixed footer. The secondary button must be a [`TextButtonStyle.OUTLINED`](https://developers.google.com/apps-script/reference/card-service/text-button-style.html#OUTLINED) button. This method does nothing if [`setPrimaryButton(button)`](https://developers.google.com/apps-script/reference/card-service/fixed-footer.html#setPrimaryButton(TextButton)) isn't called to set the primary button.\\n@param button The button to add.\\n@return This object, for chaining.*/setSecondaryButton(button:CardService.TextButton):CardService.FixedFooter;}interface EditorFileScopeActionResponseBuilder{\\n/**Builds the current Editor action response.\\n@return A validated [`EditorFileScopeActionResponse`](https://developers.google.com/apps-script/reference/card-service/editor-file-scope-action-response.html).*/build():CardService.EditorFileScopeActionResponse;\\n/**Requests the `drive.file` scope for the current active Editor document.\\n\\n```\\n// Display a permissions dialog to the user, requesting `drive.file` scope for the current\\n// document on behalf of this add-on.\\nCardService.newEditorFileScopeActionResponseBuilder()\\n    .requestFileScopeForActiveDocument()\\n    .build();\\n```\\n\\nNote: To call this method, you must add the `drive.file` scope to the add-on's\\nmanifest.\\n@return This object, for chaining.*/requestFileScopeForActiveDocument():CardService.EditorFileScopeActionResponseBuilder;}interface EditorFileScopeActionResponse{printJson():string;}interface DriveItemsSelectedActionResponseBuilder{\\n/**Builds the current Drive action response.\\n@return A validated [`DriveItemsSelectedActionResponse`](https://developers.google.com/apps-script/reference/card-service/drive-items-selected-action-response.html).*/build():CardService.DriveItemsSelectedActionResponse;\\n/**Specifies that the response requests file scope for the contextually-relevant item in Drive.\\n@param itemId ID of the Drive item to request file scope for.\\n@return This object, for chaining.*/requestFileScope(itemId:string):CardService.DriveItemsSelectedActionResponseBuilder;}interface DriveItemsSelectedActionResponse{printJson():string;}interface Divider{}interface DisplayStyle{}interface _DisplayStyle{\\n/**Show the card header at the bottom of add-on content over existing content.*/PEEK:DisplayStyle;\\n/**Show the card by replacing existing content.*/REPLACE:DisplayStyle;}interface DialogAction{\\n/**Sets the action status of `DialogAction`.\\n\\n```\\nconst actionStatus \\u003d CardService.newActionStatus()\\n   .setStatusCode(CardService.Status.OK);\\n\\nconst dialogAction \\u003d CardService.newDialogAction()\\n   .setActionStatus(actionStatus);\\n```\\n@param actionStatus The [`ActionStatus`](https://developers.google.com/apps-script/reference/card-service/action-status.html) to use.\\n@return This object, for chaining.*/setActionStatus(actionStatus:CardService.ActionStatus):CardService.DialogAction;\\n/**Sets the dialog of the `DialogAction`.\\n\\n```\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle(\\\"card title\\\")).build();\\n\\n// Sets the card of the dialog.\\nconst dialog \\u003d CardService.newDialog()\\n    .setBody(card);\\n\\nconst dialogAction \\u003d CardService.newDialogAction()\\n   .setDialog(dialog)\\n```\\n@param dialog The [`Dialog`](https://developers.google.com/apps-script/reference/card-service/dialog.html) to use.\\n@return This object, for chaining.*/setDialog(dialog:CardService.Dialog):CardService.DialogAction;}interface Dialog{\\n/**Sets the card of the `Dialog`.\\n\\n```\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle('Card title')).build();\\n\\n// Sets the card of the dialog.\\nconst dialog \\u003d CardService.newDialog()\\n    .setBody(card);\\n```\\n@param card The [`Card`](https://developers.google.com/apps-script/reference/card-service/card.html) to use.\\n@return This object, for chaining.*/setBody(card:CardService.Card):CardService.Dialog;}interface DecoratedText{\\n/**Sets an authorization action that opens a URL to the authorization flow when the object is\\nclicked. This opens the URL in a new window. When the user finishes the authorization flow and\\nreturns to the application, the add-on reloads.\\n\\nA UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAuthorizationAction().setAuthorizationUrl('url');\\nCardService.newTextButton().setText('Authorize').setAuthorizationAction(action);\\n\\n```\\n@param action The object that specifies the authorization action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setAuthorizationAction(action:CardService.AuthorizationAction):CardService.DecoratedText;\\n/**Sets the label text to be used as the key and is displayed below the text content.\\n@param text The label text.\\n@return This object, for chaining.*/setBottomLabel(text:string):CardService.DecoratedText;\\n/**Sets the [`Button`](https://developers.google.com/apps-script/reference/card-service/button.html) that is displayed to the right of the text. A [`DecoratedText`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html) can\\nonly support one button or one switch.\\n@param button The button to add.\\n@return This object, for chaining.*/setButton(button:CardService.Button):CardService.DecoratedText;\\n/**Sets an action that composes a draft email when the object is clicked. A UI object can only\\nhave one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOnClickOpenLinkAction(Action)),\\n[`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html) object configured using [`ComposeActionResponseBuilder.setGmailDraft(draft)`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html#setGmailDraft(GmailDraft)).\\n\\n__Note__: This method doesn't set a __compose action__ that is\\nused to [extend the compose UI](/gmail/add-ons/how-tos/extending-compose-ui).\\nRather, this method connects this UI element to an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that [composes draft messages](/gmail/add-ons/how-tos/compose) in Apps Script that are\\nopened in Gmail when the action completes. \\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('composeEmailCallback');\\nCardService.newTextButton()\\n    .setText('Compose Email')\\n    .setComposeAction(action, CardService.ComposedEmailType.REPLY_AS_DRAFT);\\n\\n// ...\\n\\nfunction composeEmailCallback() {\\n  var thread \\u003d GmailApp.getThreadById(e.threadId);\\n  var draft \\u003d thread.createDraftReply('This is a reply');\\n  return CardService.newComposeActionResponseBuilder()\\n      .setGmailDraft(draft)\\n      .build();\\n}\\n```\\n@param action The object that specifies the compose action to take when this element is\\n    clicked.\\n@param composedEmailType An enum value that specifies whether the composed draft is a\\n    standalone or reply draft.\\n@return This object, for chaining.*/setComposeAction(action:CardService.Action,composedEmailType:CardService.ComposedEmailType):CardService.DecoratedText;\\n/**Sets the optional [`IconImage`](https://developers.google.com/apps-script/reference/card-service/icon-image.html) that is displayed to the right of the content. A [`DecoratedText`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html) can only support one button, one switch or one icon.\\n@param endIcon The icon to add.\\n@return This object, for chaining.*/setEndIcon(endIcon:CardService.IconImage):CardService.DecoratedText;\\n/**Sets an action that executes when the object is clicked. A UI object can only have one of\\n[`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('notificationCallback');\\nCardService.newTextButton().setText('Create notification').setOnClickAction(action);\\n\\n// ...\\n\\nfunction notificationCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setNotification(CardService.newNotification()\\n          .setText(\\\"Some info to display to user\\\"))\\n      .build();\\n}\\n```\\n@param action The action to take when this element is clicked.\\n@return This object, for chaining.*/setOnClickAction(action:CardService.Action):CardService.DecoratedText;\\n/**Sets an action that opens a URL in a tab when the object is clicked. Use this function when the\\nURL needs to be built or when you need to take other actions in addition to creating the [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setAuthorizationAction(AuthorizationAction)), or\\n[`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object configured using [`ActionResponseBuilder.setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html#setOpenLink(OpenLink)).\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('openLinkCallback');\\nCardService.newTextButton().setText('Open Link').setOnClickOpenLinkAction(action);\\n\\n// ...\\n\\nfunction openLinkCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setOpenLink(CardService.newOpenLink()\\n          .setUrl('https://www.google.com'))\\n      .build();\\n}\\n```\\n@param action The object that specifies the open link action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setOnClickOpenLinkAction(action:CardService.Action):CardService.DecoratedText;\\n/**Sets a URL to be opened when the object is clicked. Use this function when the URL is already\\nknown and only needs to be opened. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOpenLink(OpenLink)),\\n[`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setAuthorizationAction(AuthorizationAction)),\\nor [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html#setComposeAction(Action,ComposedEmailType)) set.\\n@param openLink An [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object describing the URL to open.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.DecoratedText;\\n/**Sets the optional [`IconImage`](https://developers.google.com/apps-script/reference/card-service/icon-image.html) to display before the text content.\\n@param startIcon The icon to display.\\n@return This object, for chaining.*/setStartIcon(startIcon:CardService.IconImage):CardService.DecoratedText;\\n/**Sets the [`Switch`](https://developers.google.com/apps-script/reference/card-service/switch.html) that is displayed to the right of the content. A [`DecoratedText`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html)\\ncan only support one button or one switch.\\n@param switchToSet The switch to add.\\n@return This object, for chaining.*/setSwitchControl(switchToSet:CardService.Switch):CardService.DecoratedText;\\n/**Sets the text to be used as the value. Supports [basic HTML formatting](/gmail/add-ons/concepts/widgets#text_formatting). Required.\\n@param text The text content for this widget.\\n@return This object, for chaining.*/setText(text:string):CardService.DecoratedText;\\n/**Sets the label text to be used as the key and is displayed above the text content.\\n@param text The label text.\\n@return This object, for chaining.*/setTopLabel(text:string):CardService.DecoratedText;\\n/**Sets whether the value text should be displayed on a single line or multiple lines.\\n@param wrapText If `true`, the text is wrapped and displayed on multiple lines. Otherwise\\n    the text is truncated.\\n@return This object, for chaining.*/setWrapText(wrapText:boolean):CardService.DecoratedText;\\n/**Sets the icon to be used as the key.\\n@deprecated\\n@param icon One of the predefined [`Icon`](https://developers.google.com/apps-script/reference/card-service/icon.html) values.\\n@return This object, for chaining.*/setIcon(icon:CardService.Icon):CardService.DecoratedText;\\n/**Sets the alternative text for the icon.\\n@deprecated\\n@param altText The alternative text for the icon.\\n@return This object, for chaining.*/setIconAltText(altText:string):CardService.DecoratedText;\\n/**Sets the URL of the icon to be used as the key.\\n@deprecated\\n@param url The URL address of a hosted image to use as an icon.\\n@return This object, for chaining.*/setIconUrl(url:string):CardService.DecoratedText;}interface DateTimePicker{\\n/**Sets the field name that identifies this picker in the event object that is generated when\\nthere is a UI interaction. The field name is visible to the user. Required; the specified field\\nname must be unique.\\n@param fieldName The name to assign to this input.\\n@return This picker, for chaining.*/setFieldName(fieldName:string):CardService.DateTimePicker;\\n/**Sets an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that the script performs whenever the picker input changes.\\n@param action The action to take.\\n@return This picker, for chaining.*/setOnChangeAction(action:CardService.Action):CardService.DateTimePicker;\\n/**Sets the number of minutes that the time zone should be offset from UTC. If set, the date and\\ntime is displayed in the specified time zone. If not set, the time is displayed in the user's\\ntime zone.\\n@param timeZoneOffsetMins The number of minutes that the time zone is offset from UTC.\\n@return This picker, for chaining.*/setTimeZoneOffsetInMins(timeZoneOffsetMins:Integer):CardService.DateTimePicker;\\n/**Sets the title displayed above the input field.\\n@param title The input field title.\\n@return This picker, for chaining.*/setTitle(title:string):CardService.DateTimePicker;\\n/**Sets the prefilled value to be set in the input field.\\n@param valueMsEpoch The default value placed in the input as a number, in milliseconds since\\n    the epoch. It is always represented as a string in the form callback parameters.\\n@return This picker, for chaining.*/setValueInMsSinceEpoch(valueMsEpoch:number):CardService.DateTimePicker;\\n/**Sets the prefilled value to be set in the input field.\\n@param valueMsEpoch The default value placed in the input as a string, in milliseconds since\\n    the epoch. It is always represented as a string in the form callback parameters.\\n@return This picker, for chaining.*/setValueInMsSinceEpoch(valueMsEpoch:string):CardService.DateTimePicker;}interface DatePicker{\\n/**Sets the field name that identifies this picker in the event object that is generated when\\nthere is a UI interaction. The field name is visible to the user. Required; the specified field\\nname must be unique.\\n@param fieldName The name to assign to this input.\\n@return This picker, for chaining.*/setFieldName(fieldName:string):CardService.DatePicker;\\n/**Sets an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that the script performs whenever the picker input changes.\\n@param action The action to take.\\n@return This picker, for chaining.*/setOnChangeAction(action:CardService.Action):CardService.DatePicker;\\n/**Sets the title displayed above the input field.\\n@param title The input field title.\\n@return This picker, for chaining.*/setTitle(title:string):CardService.DatePicker;\\n/**Sets the prefilled value to be set in the input field.\\n@param valueMsEpoch The default value placed in the input as a number, in milliseconds since\\n    the epoch. Only the date of the epoch time is used, and the time of the epoch time is\\n    discarded. It is always represented as a string in the form callback parameters.\\n@return This picker, for chaining.*/setValueInMsSinceEpoch(valueMsEpoch:number):CardService.DatePicker;\\n/**Sets the prefilled value to be set in the input field.\\n@param valueMsEpoch The default value placed in the input as a string, in milliseconds since\\n    the epoch. Only the date of the epoch time is used, and the time of the epoch time is\\n    discarded. It is always represented as a string in the form callback parameters.\\n@return This picker, for chaining.*/setValueInMsSinceEpoch(valueMsEpoch:string):CardService.DatePicker;}interface ContentType{}interface _ContentType{\\n/**Indicates that the generated content is formatted as HTML, but this content cannot be edited\\nafter it is generated.*/IMMUTABLE_HTML:ContentType;\\n/**Indicates that the generated content is formatted as HTML. The content can be edited after it\\nis generated.*/MUTABLE_HTML:ContentType;\\n/**Indicates that the generated content is plain text. Default.*/TEXT:ContentType;}interface ComposedEmailType{}interface _ComposedEmailType{\\n/**A draft that is a reply to another message. Default.*/REPLY_AS_DRAFT:ComposedEmailType;\\n/**A draft that is a standalone message.*/STANDALONE_DRAFT:ComposedEmailType;}interface ComposeActionResponseBuilder{\\n/**Builds the current compose action response and validates it.\\n@return A validated [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html).*/build():CardService.ComposeActionResponse;\\n/**Sets the draft [`GmailMessage`](https://developers.google.com/apps-script/reference/card-service/../gmail/gmail-message.html) created\\nusing [`GmailMessage.createDraftReply(body)`](https://developers.google.com/apps-script/reference/card-service/../gmail/gmail-message.html#createDraftReply(String)) or\\nsimilar functions.\\n@param draft The [`GmailDraft`](https://developers.google.com/apps-script/reference/card-service/../gmail/gmail-draft.html) to use.\\n@return This object, for chaining.*/setGmailDraft(draft:GmailApp.GmailDraft):CardService.ComposeActionResponseBuilder;}interface ComposeActionResponse{printJson():string;}interface CommonDataSource{}interface _CommonDataSource{\\n/**Default value. Don't use.*/UNKNOWN:CommonDataSource;\\n/**Google Workspace users.*/USER:CommonDataSource;}interface Columns{\\n/**Adds a [`Column`](https://developers.google.com/apps-script/reference/card-service/column.html) to the Columns widget. Columns are displayed in the order in which\\nthey're added. You can add up to two columns.\\n\\n```\\nconst columns \\u003d CardService.newColumns()\\n    .addColumn(CardService.newColumn());\\n```\\n@param column A child column to add to the Columns widget.\\n@return This object, for chaining.*/addColumn(column:CardService.Column):CardService.Columns;\\n/**Sets the wrap style of the columns, controls how the column resizes based on screen width.\\n\\n```\\nconst columns \\u003d CardService.newColumns()\\n    .addColumn(CardService.newColumn())\\n    .setWrapStyle(CardService.WrapStyle.WRAP);\\n```\\n@param wrapStyle The wrap style to set for the columns.\\n@return This object, for chaining.*/setWrapStyle(wrapStyle:CardService.WrapStyle):CardService.Columns;}interface Column{\\n/**Adds a widget to the column.\\n\\nWidgets are displayed in the order they are added. You can add the following widgets to a\\ncolumn:\\n\\n  + [`TextParagraph`](https://developers.google.com/apps-script/reference/card-service/text-paragraph.html)\\n  + [`Image`](https://developers.google.com/apps-script/reference/card-service/image.html)\\n  + [`DecoratedText`](https://developers.google.com/apps-script/reference/card-service/decorated-text.html)\\n  + [`ButtonSet`](https://developers.google.com/apps-script/reference/card-service/button-set.html)\\n  + [`TextInput`](https://developers.google.com/apps-script/reference/card-service/text-input.html)\\n  + [`SelectionInput`](https://developers.google.com/apps-script/reference/card-service/selection-input.html)\\n  + [`DateTimePicker`](https://developers.google.com/apps-script/reference/card-service/date-time-picker.html)\\n\\n```\\nconst column \\u003d CardService.newColumn()\\n    .addWidget(CardService.newTextParagraph()\\n       .setText('This is a text paragraph widget'));\\n```\\n@param widget The widget to add to the column.\\n@return This object, for chaining.*/addWidget(widget:CardService.Widget):CardService.Column;\\n/**Sets the [`HorizontalAlignment`](https://developers.google.com/apps-script/reference/card-service/horizontal-alignment.html) of the [`Column`](https://developers.google.com/apps-script/reference/card-service/column.html). Optional.\\n\\n```\\nconst column \\u003d CardService.newColumn()\\n    .setHorizontalAlignment(CardService.HorizontalAlignment.CENTER);\\n```\\n@param horizontalAlignment The horizontal alignment of the column.\\n@return This object, for chaining.*/setHorizontalAlignment(horizontalAlignment:CardService.HorizontalAlignment):CardService.Column;\\n/**Sets the [`HorizontalSizeStyle`](https://developers.google.com/apps-script/reference/card-service/horizontal-size-style.html) of the Column. Optional.\\n\\n```\\nconst column \\u003d CardService.newColumn()\\n    .setHorizontalSizeStyle(CardService.HorizontalSizeStyle.FILL_AVAILABLE_SPACE);\\n```\\n@param horizontalSizeStyle The horizontal size of the column.\\n@return This object, for chaining.*/setHorizontalSizeStyle(horizontalSizeStyle:CardService.HorizontalSizeStyle):CardService.Column;\\n/**Sets the [`VerticalAlignment`](https://developers.google.com/apps-script/reference/card-service/vertical-alignment.html) of the [`Column`](https://developers.google.com/apps-script/reference/card-service/column.html). Optional.\\n\\n```\\nconst column \\u003d CardService.newColumn()\\n    .setVerticalAlignment(CardService.VerticalAlignment.CENTER);\\n```\\n@param verticalAlignment The vertical alignment of the column.\\n@return This object, for chaining.*/setVerticalAlignment(verticalAlignment:CardService.VerticalAlignment):CardService.Column;}interface CollapseControl{\\n/**Sets the [`Button`](https://developers.google.com/apps-script/reference/card-service/button.html) that is displayed for \\\"show less\\\" button. Optional.  \\\\\\n\\nMust be set together with collapse button.\\n\\n```\\nconst collapseControl \\u003d CardService.newCollapseControl()\\n    .setCollapseButton(collapseButton);\\n```\\n@param button The collapse button to set.\\n@return This object, for chaining.*/setCollapseButton(button:CardService.Button):CardService.CollapseControl;\\n/**Sets the [`Button`](https://developers.google.com/apps-script/reference/card-service/button.html) that is displayed for \\\"show more\\\" button. Optional.  \\\\\\n\\nMust be set together with collapse button.\\n\\n```\\nconst collapseControl \\u003d CardService.newCollapseControl()\\n    .setExpandButton(expandButton);\\n```\\n@param button The expand button to set.\\n@return This object, for chaining.*/setExpandButton(button:CardService.Button):CardService.CollapseControl;\\n/**Sets the [`HorizontalAlignment`](https://developers.google.com/apps-script/reference/card-service/horizontal-alignment.html) of the [`CollapseControl`](https://developers.google.com/apps-script/reference/card-service/collapse-control.html). Optional. *\\n\\n```\\nconst collapseControl \\u003d CardService.newCollapseControl()\\n    .setHorizontalAlign(CardService.HorizontalAlignment.START);\\n```\\n@param horizontalAlignment The horizontal alignment of the CollapseControl widget.\\n@return This object, for chaining.*/setHorizontalAlign(horizontalAlignment:CardService.HorizontalAlignment):CardService.CollapseControl;}interface ChipListLayout{}interface _ChipListLayout{\\n/**The chips scroll horizontally if they don't fit in the available space.*/HORIZONTAL_SCROLLABLE:ChipListLayout;\\n/**The chip list wraps to the next line if there isn't enough horizontal space. Default.*/WRAPPED:ChipListLayout;}interface ChipList{\\n/**Adds a chip.\\n@param chip The chip to add.\\n@return This object, for chaining.*/addChip(chip:CardService.Chip):CardService.ChipList;\\n/**Sets the chip list layout. If unset, it defaults to [`ChipListLayout.WRAPPED`](https://developers.google.com/apps-script/reference/card-service/chip-list-layout.html#WRAPPED) layout.\\n\\n```\\nvar chip \\u003d CardService.newChip();\\n// Finish building the text chip...\\n\\nvar chipList \\u003d CardService.newChipList()\\n    .setLayout(CardService.ChipListLayout.HORIZONTAL_SCROLLABLE)\\n    .addChip(chip);\\n```\\n@param layout The chip list layout.\\n@return This object, for chaining.*/setLayout(layout:CardService.ChipListLayout):CardService.ChipList;}interface Chip{\\n/**Sets the alternative text of the chip for accessibility. If unset, defaults to the text that\\ndisplays on the chip.\\n@param altText The alternative text to assign to this chip.\\n@return This object, for chaining.*/setAltText(altText:string):CardService.Chip;\\n/**Sets an authorization action that opens a URL to the authorization flow when the object is\\nclicked. This opens the URL in a new window. When the user finishes the authorization flow and\\nreturns to the application, the add-on reloads.\\n\\nA UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAuthorizationAction().setAuthorizationUrl('url');\\nCardService.newTextButton().setText('Authorize').setAuthorizationAction(action);\\n\\n```\\n@param action The object that specifies the authorization action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setAuthorizationAction(action:CardService.AuthorizationAction):CardService.Chip;\\n/**Sets an action that composes a draft email when the object is clicked. A UI object can only\\nhave one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOnClickOpenLinkAction(Action)),\\n[`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html) object configured using [`ComposeActionResponseBuilder.setGmailDraft(draft)`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html#setGmailDraft(GmailDraft)).\\n\\n__Note__: This method doesn't set a __compose action__ that is\\nused to [extend the compose UI](/gmail/add-ons/how-tos/extending-compose-ui).\\nRather, this method connects this UI element to an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that [composes draft messages](/gmail/add-ons/how-tos/compose) in Apps Script that are\\nopened in Gmail when the action completes. \\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('composeEmailCallback');\\nCardService.newTextButton()\\n    .setText('Compose Email')\\n    .setComposeAction(action, CardService.ComposedEmailType.REPLY_AS_DRAFT);\\n\\n// ...\\n\\nfunction composeEmailCallback() {\\n  var thread \\u003d GmailApp.getThreadById(e.threadId);\\n  var draft \\u003d thread.createDraftReply('This is a reply');\\n  return CardService.newComposeActionResponseBuilder()\\n      .setGmailDraft(draft)\\n      .build();\\n}\\n```\\n@param action The object that specifies the compose action to take when this element is\\n    clicked.\\n@param composedEmailType An enum value that specifies whether the composed draft is a\\n    standalone or reply draft.\\n@return This object, for chaining.*/setComposeAction(action:CardService.Action,composedEmailType:CardService.ComposedEmailType):CardService.Chip;\\n/**Sets whether the chip is disabled. A disabled chip is greyed out and cannot be clicked.\\n\\n```\\nconst chip \\u003d CardService.newChip()\\n    .setLabel(\\\"bug Report\\\")\\n    .setDisabled(true);\\n```\\n@param disabled The disabled state.\\n@return This object, for chaining.*/setDisabled(disabled:boolean):CardService.Chip;\\n/**Sets the icon to be used as the chip.\\n\\n```\\nconst chip \\u003d CardService.newChip()\\n    .setIcon(CardService.newIconImage()\\n       .setMaterialIcon(CardService.newMaterialIcon().setName(\\\"bug_report\\\")));\\n```\\n@param icon One of the predefined [`IconImage`](https://developers.google.com/apps-script/reference/card-service/icon-image.html) values.\\n@return This object, for chaining.*/setIcon(icon:CardService.IconImage):CardService.Chip;\\n/**Sets the title of the chip. Required.\\n\\n```\\nconst chip \\u003d CardService.newChip()\\n    .setLabel(\\\"bug Report\\\");\\n```\\n@param label The text to display.\\n@return This object, for chaining.*/setLabel(label:string):CardService.Chip;\\n/**Sets an action that executes when the object is clicked. A UI object can only have one of\\n[`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('notificationCallback');\\nCardService.newTextButton().setText('Create notification').setOnClickAction(action);\\n\\n// ...\\n\\nfunction notificationCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setNotification(CardService.newNotification()\\n          .setText(\\\"Some info to display to user\\\"))\\n      .build();\\n}\\n```\\n@param action The action to take when this element is clicked.\\n@return This object, for chaining.*/setOnClickAction(action:CardService.Action):CardService.Chip;\\n/**Sets an action that opens a URL in a tab when the object is clicked. Use this function when the\\nURL needs to be built or when you need to take other actions in addition to creating the [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setAuthorizationAction(AuthorizationAction)), or\\n[`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object configured using [`ActionResponseBuilder.setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html#setOpenLink(OpenLink)).\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('openLinkCallback');\\nCardService.newTextButton().setText('Open Link').setOnClickOpenLinkAction(action);\\n\\n// ...\\n\\nfunction openLinkCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setOpenLink(CardService.newOpenLink()\\n          .setUrl('https://www.google.com'))\\n      .build();\\n}\\n```\\n@param action The object that specifies the open link action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setOnClickOpenLinkAction(action:CardService.Action):CardService.Chip;\\n/**Sets a URL to be opened when the object is clicked. Use this function when the URL is already\\nknown and only needs to be opened. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOpenLink(OpenLink)),\\n[`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setAuthorizationAction(AuthorizationAction)),\\nor [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/chip.html#setComposeAction(Action,ComposedEmailType)) set.\\n@param openLink An [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object describing the URL to open.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.Chip;}interface ChatSpaceDataSource{\\n/**If set to `true`, the multi select menu selects the current Google Chat space as an item\\nby default.\\n\\n```\\nconst chatSpaceDataSource \\u003d CardService.newChatSpaceDataSource()\\n    .setDefaultToCurrentSpace(true);\\n```\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n@param defaultToCurrentSpace The boolean to be set.\\n@return This object, for chaining.*/setDefaultToCurrentSpace(defaultToCurrentSpace:boolean):CardService.ChatSpaceDataSource;}interface ChatResponseBuilder{\\n/**Sets the card field of the message. This is used to send a card in a Google Chat message. Each\\ncard is associated with a unique id, [`CardWithId`](https://developers.google.com/apps-script/reference/card-service/card-with-id.html) object should be built and be used with\\nthis method.\\n\\n```\\nconst cardSection \\u003d CardService.newCardSection();\\ncardSection.addWidget(\\n    CardService.newTextParagraph().setText('This is a text paragraph widget.'));\\n\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle('Card title'))\\n    .addSection(cardSection)\\n    .build();\\n\\nconst cardWithId \\u003d CardService.newCardWithId()\\n    .setCardId('card_id')\\n    .setCard(card);\\n\\nconst chatResponse \\u003d CardService.newChatResponseBuilder()\\n    .addCardsV2(cardWithId)\\n    .build();\\n```\\n@param cardWithId The [`CardWithId`](https://developers.google.com/apps-script/reference/card-service/card-with-id.html) to use.\\n@return This object, for chaining.*/addCardsV2(cardWithId:CardService.CardWithId):CardService.ChatResponseBuilder;\\n/**Builds the current action response and validates it.\\n@return A validated ChatResponse.*/build():CardService.ChatResponse;\\n/**Sets the action response field of the message.\\n\\n```\\n// Build the card.\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle('card title')).build();\\n\\n// Creates the dialog.\\nconst dialog \\u003d CardService.newDialog()\\n    .setBody(card);\\n\\n// Creates the dialog action.\\nconst dialogAction \\u003d CardService.newDialogAction()\\n   .setDialog(dialog)\\n\\n// Creates the action response and sets the type to DIALOG.\\nconst actionResponse \\u003d CardService.newChatActionResponse()\\n       .setDialogAction(dialogAction).setResponseType(CardService.Type.DIALOG);\\n\\n// Creates the Chat response and sets the action response.\\nconst chatResponse \\u003d CardService.newChatResponseBuilder()\\n       .setActionResponse(actionResponse)\\n    .build();\\n```\\n@param actionResponse The [`ChatActionResponse`](https://developers.google.com/apps-script/reference/card-service/chat-action-response.html) to use.\\n@return This object, for chaining.*/setActionResponse(actionResponse:CardService.ChatActionResponse):CardService.ChatResponseBuilder;\\n/**Sets the text of the Chat message.\\n\\n```\\nconst chatResponse \\u003d CardService.newChatResponseBuilder()\\n       .setText('Example text')\\n    .build();\\n```\\n@param text The text to use.\\n@return This object, for chaining.*/setText(text:string):CardService.ChatResponseBuilder;}interface ChatResponse{printJson():string;}interface ChatClientDataSource{\\n/**A data source that populates Google Chat spaces as selection items for a multiselect menu. Only\\npopulates spaces that the user is a member of.\\n\\n```\\nconst chatSpaceDataSource \\u003d CardService.newChatSpaceDataSource()\\n    .setDefaultToCurrentSpace(true);\\n\\nconst chatClientDataSource \\u003d CardService.newChatClientDataSource()\\n    .setSpaceDataSource(chatSpaceDataSource);\\n```\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n@param spaceDataSource The data source to be set.\\n@return This object, for chaining.*/setSpaceDataSource(spaceDataSource:CardService.ChatSpaceDataSource):CardService.ChatClientDataSource;}interface ChatActionResponse{\\n/**Sets the dialog action to an event related to a dialog.\\n\\n```\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle('Card title')).build();\\nconst dialog \\u003d CardService.newDialog()\\n    .setBody(card);\\n\\nconst dialogAction \\u003d CardService.newDialogAction()\\n   .setDialog(dialog)\\n\\nconst chatActionResponse \\u003d CardService.newChatActionResponse()\\n   .setResponseType(CardService.Type.DIALOG)\\n   .setDialogAction(dialogAction);\\n```\\n@param dialogAction The dialog action to set.\\n@return This object, for chaining.*/setDialogAction(dialogAction:CardService.DialogAction):CardService.ChatActionResponse;\\n/**The type of Chat app response.\\n\\n```\\nconst chatActionResponse \\u003d CardService.newChatActionResponse()\\n   .setResponseType(CardService.Type.DIALOG)\\n```\\n@param responseType The response type.\\n@return This object, for chaining.*/setResponseType(responseType:CardService.ResponseType):CardService.ChatActionResponse;\\n/**Sets the updated widget, used to provide autocomplete options for a widget.\\n\\n```\\nconst updatedWidget \\u003d CardService.newUpdatedWidget()\\n    .addItem(\\\"Contact 1\\\", \\\"contact-1\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact one description\\\")\\n    .addItem(\\\"Contact 2\\\", \\\"contact-2\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact two description\\\")\\n    .addItem(\\\"Contact 3\\\", \\\"contact-3\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact three description\\\")\\n    .addItem(\\\"Contact 4\\\", \\\"contact-4\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact four description\\\")\\n    .addItem(\\\"Contact 5\\\", \\\"contact-5\\\", false,\\n       \\\"https://www.gstatic.com/images/branding/product/2x/contacts_48dp.png\\\",\\n       \\\"Contact five description\\\");\\n\\nconst actionResponse \\u003d CardService.newChatActionResponse()\\n    .setUpdatedWidget(updatedWidget)\\n    .setResponseType(CardService.ResponseType.UPDATE_WIDGET);\\n```\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n@param updatedWidget The updated widget to be set.\\n@return This object, for chaining.*/setUpdatedWidget(updatedWidget:CardService.UpdatedWidget):CardService.ChatActionResponse;\\n/**The URL for users to authenticate or configure. Only for the `REQUEST_CONFIG` response\\ntype.\\n\\n```\\nconst chatActionResponse \\u003d CardService.newChatActionResponse()\\n   .setResponseType(CardService.Type.REQUEST_CONFIG)\\n   .setUrl('https://www.google.com');\\n```\\n@param url The URL to send.\\n@return This object, for chaining.*/setUrl(url:string):CardService.ChatActionResponse;}interface CardWithId{\\n/**Sets the card of the `cardWithId`.\\n\\n```\\nconst cardHeader \\u003d CardService.newCardHeader()\\n    .setTitle('Card Header Title')\\n    .setSubtitle('Card Header Subtitle');\\n\\nconst card \\u003d CardService.newCardBuilder()\\n    .setHeader(cardHeader)\\n    .build();\\n\\nconst cardWithId \\u003d CardService.newCardWithId()\\n    .setCard(card);\\n```\\n@param card The [`Card`](https://developers.google.com/apps-script/reference/card-service/card.html) to use.\\n@return This object, for chaining.*/setCard(card:CardService.Card):CardService.CardWithId;\\n/**Sets the unique card ID of the `cardWithId`.\\n\\n```\\nconst cardWithId \\u003d CardService.newCardWithId();\\n\\n// Sets the card ID of the cardWithId.\\ncardWithId.setCardId('card_id');\\n```\\n@param id The text to use.\\n@return This object, for chaining.*/setCardId(id:string):CardService.CardWithId;}interface CardSection{\\n/**Adds the given widget to this section. Widgets are shown in the order they were added. You\\ncan't add more than 100 widgets to a card section.\\n@param widget A widget to add to the section.\\n@return This object, for chaining.*/addWidget(widget:CardService.Widget):CardService.CardSection;\\n/**Sets the customizable expand and collapse buttons of the section. These buttons are shown only\\nif the section is collapsible. If this field isn't set, default buttons are used.\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@param collapseControl The collapse control setting.\\n@return This object, for chaining.*/setCollapseControl(collapseControl:CardService.CollapseControl):CardService.CardSection;\\n/**Sets whether the section can be collapsed.\\n@param collapsible The collapsible setting.\\n@return This object, for chaining.*/setCollapsible(collapsible:boolean):CardService.CardSection;\\n/**Sets the header of the section. Optional.\\n@param header The header text.\\n@return This object, for chaining.*/setHeader(header:string):CardService.CardSection;\\n/**Sets the number of widgets that are still shown when this section is collapsed. The widgets\\nshown are always the first ones that were added.\\n@param numUncollapsibleWidgets The number of widgets to show.\\n@return This object, for chaining.*/setNumUncollapsibleWidgets(numUncollapsibleWidgets:Integer):CardService.CardSection;}interface CardHeader{\\n/**Sets the alternative text for the header image.\\n@param imageAltText The alternative text for the header image.\\n@return This object, for chaining.*/setImageAltText(imageAltText:string):CardService.CardHeader;\\n/**Sets the cropping of the icon in the card header. Defaults to no crop. Optional.\\n@param imageStyle The style setting.\\n@return This object, for chaining.*/setImageStyle(imageStyle:CardService.ImageStyle):CardService.CardHeader;\\n/**Sets the image to use in the header by providing its URL or data string.\\n\\nThe provided URL can either be a publicly accessible URL or a base64 encoded image string.\\nTo obtain the latter, you can use the following code to create an encoded image string from an\\nimage in your Google Drive, then store that string for later use with [`setImageUrl(imageUrl)`](https://developers.google.com/apps-script/reference/card-service/card-header.html#setImageUrl(String)). This method prevents the need for your add-on to access a publicly\\navailable image URL:\\n\\n```\\n// The following assumes you have the image to use in Google Drive and have its ID.\\nvar imageBytes \\u003d DriveApp.getFileById(imageID).getBlob().getBytes();\\nvar encodedImageURL \\u003d \\\"data:image/jpeg;base64,\\\" + Utilities.base64Encode(imageBytes);\\n\\n// You can store encodeImageURL and use it as a parameter to CardHeader.setImageUrl(imageUrl).\\n```\\n@param imageUrl The URL address of a hosted image to use, or an encoded image string.\\n@return This object, for chaining.*/setImageUrl(imageUrl:string):CardService.CardHeader;\\n/**Sets the subtitle of the card header. Optional.\\n@param subtitle The header subtitle text.\\n@return This object, for chaining.*/setSubtitle(subtitle:string):CardService.CardHeader;\\n/**Sets the title of the card header. Required.\\n@param title The header text.\\n@return This object, for chaining.*/setTitle(title:string):CardService.CardHeader;}interface CardBuilder{\\n/**Adds a [`CardAction`](https://developers.google.com/apps-script/reference/card-service/card-action.html) to this Card.\\n@param cardAction The [`CardAction`](https://developers.google.com/apps-script/reference/card-service/card-action.html) to use.\\n@return This object, for chaining.*/addCardAction(cardAction:CardService.CardAction):CardService.CardBuilder;\\n/**Adds a section to this card. You can't add more than 100 sections to a card.\\n@param section The [`CardSection`](https://developers.google.com/apps-script/reference/card-service/card-section.html) to use.\\n@return This object, for chaining.*/addSection(section:CardService.CardSection):CardService.CardBuilder;\\n/**Builds the current card and validates it.\\n@return A validated card.*/build():CardService.Card;\\n/**Sets the display style for this card.\\n\\nIf the display style is set to `DisplayStyle.REPLACE`, the card is shown by replacing\\nthe view of top card in the card stack.\\n\\nIf the display style is set to `DisplayStyle.PEEK`, the header of the card appears at\\nthe bottom of the sidebar, partially covering the current top card of the stack. Clicking the\\nheader pops the card into the card stack. If the card has no header, a generated header is used\\ninstead.\\n\\n`DisplayStyle` only works for card returned from contextual trigger function.\\n@param displayStyle The [`DisplayStyle`](https://developers.google.com/apps-script/reference/card-service/display-style.html) to set.\\n@return This object, for chaining.*/setDisplayStyle(displayStyle:CardService.DisplayStyle):CardService.CardBuilder;\\n/**Sets a fixed footer for this card.\\n@param fixedFooter The [`FixedFooter`](https://developers.google.com/apps-script/reference/card-service/fixed-footer.html) to use.\\n@return This object, for chaining.*/setFixedFooter(fixedFooter:CardService.FixedFooter):CardService.CardBuilder;\\n/**Sets the header for this card.\\n@param cardHeader The [`CardHeader`](https://developers.google.com/apps-script/reference/card-service/card-header.html) to use.\\n@return This object, for chaining.*/setHeader(cardHeader:CardService.CardHeader):CardService.CardBuilder;\\n/**Sets the name for this card. The name can be used for [navigation](/gmail/add-ons/how-tos/navigation).\\n@param name The name.\\n@return This object, for chaining.*/setName(name:string):CardService.CardBuilder;\\n/**Sets the peek card header.\\n\\nThe peek card is set on the first card returned from a contextual trigger function. It is\\nused as a descriptive placeholder widget so that users can navigate from a homepage stack to\\nthe contextual stack.\\n@param peekCardHeader The [`CardHeader`](https://developers.google.com/apps-script/reference/card-service/card-header.html) to set.\\n@return This object, for chaining.*/setPeekCardHeader(peekCardHeader:CardService.CardHeader):CardService.CardBuilder;}interface CardAction{\\n/**Sets an authorization action that opens a URL to the authorization flow when the object is\\nclicked. This opens the URL in a new window. When the user finishes the authorization flow and\\nreturns to the application, the add-on reloads.\\n\\nA UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAuthorizationAction().setAuthorizationUrl('url');\\nCardService.newTextButton().setText('Authorize').setAuthorizationAction(action);\\n\\n```\\n@param action The object that specifies the authorization action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setAuthorizationAction(action:CardService.AuthorizationAction):CardService.CardAction;\\n/**Sets an action that composes a draft email when the object is clicked. A UI object can only\\nhave one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOnClickOpenLinkAction(Action)),\\n[`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html) object configured using [`ComposeActionResponseBuilder.setGmailDraft(draft)`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html#setGmailDraft(GmailDraft)).\\n\\n__Note__: This method doesn't set a __compose action__ that is\\nused to [extend the compose UI](/gmail/add-ons/how-tos/extending-compose-ui).\\nRather, this method connects this UI element to an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that [composes draft messages](/gmail/add-ons/how-tos/compose) in Apps Script that are\\nopened in Gmail when the action completes. \\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('composeEmailCallback');\\nCardService.newTextButton()\\n    .setText('Compose Email')\\n    .setComposeAction(action, CardService.ComposedEmailType.REPLY_AS_DRAFT);\\n\\n// ...\\n\\nfunction composeEmailCallback() {\\n  var thread \\u003d GmailApp.getThreadById(e.threadId);\\n  var draft \\u003d thread.createDraftReply('This is a reply');\\n  return CardService.newComposeActionResponseBuilder()\\n      .setGmailDraft(draft)\\n      .build();\\n}\\n```\\n@param action The object that specifies the compose action to take when this element is\\n    clicked.\\n@param composedEmailType An enum value that specifies whether the composed draft is a\\n    standalone or reply draft.\\n@return This object, for chaining.*/setComposeAction(action:CardService.Action,composedEmailType:CardService.ComposedEmailType):CardService.CardAction;\\n/**Sets an action that executes when the object is clicked. A UI object can only have one of\\n[`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('notificationCallback');\\nCardService.newTextButton().setText('Create notification').setOnClickAction(action);\\n\\n// ...\\n\\nfunction notificationCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setNotification(CardService.newNotification()\\n          .setText(\\\"Some info to display to user\\\"))\\n      .build();\\n}\\n```\\n@param action The action to take when this element is clicked.\\n@return This object, for chaining.*/setOnClickAction(action:CardService.Action):CardService.CardAction;\\n/**Sets an action that opens a URL in a tab when the object is clicked. Use this function when the\\nURL needs to be built or when you need to take other actions in addition to creating the [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setAuthorizationAction(AuthorizationAction)), or\\n[`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object configured using [`ActionResponseBuilder.setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html#setOpenLink(OpenLink)).\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('openLinkCallback');\\nCardService.newTextButton().setText('Open Link').setOnClickOpenLinkAction(action);\\n\\n// ...\\n\\nfunction openLinkCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setOpenLink(CardService.newOpenLink()\\n          .setUrl('https://www.google.com'))\\n      .build();\\n}\\n```\\n@param action The object that specifies the open link action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setOnClickOpenLinkAction(action:CardService.Action):CardService.CardAction;\\n/**Sets a URL to be opened when the object is clicked. Use this function when the URL is already\\nknown and only needs to be opened. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOpenLink(OpenLink)),\\n[`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setAuthorizationAction(AuthorizationAction)),\\nor [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/card-action.html#setComposeAction(Action,ComposedEmailType)) set.\\n@param openLink An [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object describing the URL to open.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.CardAction;\\n/**Sets the menu text for this action.\\n@param text The menu item text.\\n@return This object, for chaining.*/setText(text:string):CardService.CardAction;}interface Card{printJson():string;}interface CalendarEventActionResponseBuilder{\\n/**Specifies that the response should add the attachments to the Calendar event when the\\nassociated UI action is taken.\\n@param attachments An array of [`Attachment`](https://developers.google.com/apps-script/reference/card-service/attachment.html)s to add.\\n@return This object, for chaining.*/addAttachments(attachments:CardService.Attachment[]):CardService.CalendarEventActionResponseBuilder;\\n/**Specifies that the response should add the indicated attendees to the Calendar event when the\\nassociated UI action is taken.\\n@param emails An array of email addresses to add to the event.\\n@return This object, for chaining.*/addAttendees(emails:string[]):CardService.CalendarEventActionResponseBuilder;\\n/**Builds the current Calendar event action response and validates it.\\n@return A validated [`CalendarEventActionResponse`](https://developers.google.com/apps-script/reference/card-service/calendar-event-action-response.html).*/build():CardService.CalendarEventActionResponse;\\n/**Specifies that the response should set the indicated conference data to the Calendar event when\\nthe associated UI action is taken.\\n@param conferenceData Conference data to set to the event, created by an add on.\\n@return This object, for chaining.*/setConferenceData(conferenceData:ConferenceDataService.ConferenceData):CardService.CalendarEventActionResponseBuilder;}interface CalendarEventActionResponse{printJson():string;}interface ButtonSet{\\n/**Adds a button.\\n@param button The button to add.\\n@return This object, for chaining.*/addButton(button:CardService.Button):CardService.ButtonSet;}interface Button{\\n/**Sets an authorization action that opens a URL to the authorization flow when the object is\\nclicked. This opens the URL in a new window. When the user finishes the authorization flow and\\nreturns to the application, the add-on reloads.\\n\\nA UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAuthorizationAction().setAuthorizationUrl('url');\\nCardService.newTextButton().setText('Authorize').setAuthorizationAction(action);\\n\\n```\\n@param action The object that specifies the authorization action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setAuthorizationAction(action:CardService.AuthorizationAction):CardService.Button;\\n/**Sets an action that composes a draft email when the object is clicked. A UI object can only\\nhave one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOnClickOpenLinkAction(Action)),\\n[`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ComposeActionResponse`](https://developers.google.com/apps-script/reference/card-service/compose-action-response.html) object configured using [`ComposeActionResponseBuilder.setGmailDraft(draft)`](https://developers.google.com/apps-script/reference/card-service/compose-action-response-builder.html#setGmailDraft(GmailDraft)).\\n\\n__Note__: This method doesn't set a __compose action__ that is\\nused to [extend the compose UI](/gmail/add-ons/how-tos/extending-compose-ui).\\nRather, this method connects this UI element to an [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) that [composes draft messages](/gmail/add-ons/how-tos/compose) in Apps Script that are\\nopened in Gmail when the action completes. \\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('composeEmailCallback');\\nCardService.newTextButton()\\n    .setText('Compose Email')\\n    .setComposeAction(action, CardService.ComposedEmailType.REPLY_AS_DRAFT);\\n\\n// ...\\n\\nfunction composeEmailCallback() {\\n  var thread \\u003d GmailApp.getThreadById(e.threadId);\\n  var draft \\u003d thread.createDraftReply('This is a reply');\\n  return CardService.newComposeActionResponseBuilder()\\n      .setGmailDraft(draft)\\n      .build();\\n}\\n```\\n@param action The object that specifies the compose action to take when this element is\\n    clicked.\\n@param composedEmailType An enum value that specifies whether the composed draft is a\\n    standalone or reply draft.\\n@return This object, for chaining.*/setComposeAction(action:CardService.Action,composedEmailType:CardService.ComposedEmailType):CardService.Button;\\n/**Sets an action that executes when the object is clicked. A UI object can only have one of\\n[`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setAuthorizationAction(AuthorizationAction)), or [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object.\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('notificationCallback');\\nCardService.newTextButton().setText('Create notification').setOnClickAction(action);\\n\\n// ...\\n\\nfunction notificationCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setNotification(CardService.newNotification()\\n          .setText(\\\"Some info to display to user\\\"))\\n      .build();\\n}\\n```\\n@param action The action to take when this element is clicked.\\n@return This object, for chaining.*/setOnClickAction(action:CardService.Action):CardService.Button;\\n/**Sets an action that opens a URL in a tab when the object is clicked. Use this function when the\\nURL needs to be built or when you need to take other actions in addition to creating the [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOpenLink(OpenLink)), [`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setAuthorizationAction(AuthorizationAction)), or\\n[`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/button.html#setComposeAction(Action,ComposedEmailType)) set.\\n\\nThe [`Action`](https://developers.google.com/apps-script/reference/card-service/action.html) parameter must specify a callback function that returns a [`ActionResponse`](https://developers.google.com/apps-script/reference/card-service/action-response.html) object configured using [`ActionResponseBuilder.setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/action-response-builder.html#setOpenLink(OpenLink)).\\n\\n```\\n// ...\\n\\nvar action \\u003d CardService.newAction().setFunctionName('openLinkCallback');\\nCardService.newTextButton().setText('Open Link').setOnClickOpenLinkAction(action);\\n\\n// ...\\n\\nfunction openLinkCallback() {\\n  return CardService.newActionResponseBuilder()\\n      .setOpenLink(CardService.newOpenLink()\\n          .setUrl('https://www.google.com'))\\n      .build();\\n}\\n```\\n@param action The object that specifies the open link action to take when this element is\\n    clicked.\\n@return This object, for chaining.*/setOnClickOpenLinkAction(action:CardService.Action):CardService.Button;\\n/**Sets a URL to be opened when the object is clicked. Use this function when the URL is already\\nknown and only needs to be opened. A UI object can only have one of [`setOpenLink(openLink)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOpenLink(OpenLink)),\\n[`setOnClickAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOnClickAction(Action)), [`setOnClickOpenLinkAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setOnClickOpenLinkAction(Action)), [`setAuthorizationAction(action)`](https://developers.google.com/apps-script/reference/card-service/button.html#setAuthorizationAction(AuthorizationAction)),\\nor [`setComposeAction(action, composedEmailType)`](https://developers.google.com/apps-script/reference/card-service/button.html#setComposeAction(Action,ComposedEmailType)) set.\\n@param openLink An [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) object describing the URL to open.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.Button;\\n/**Sets a pop-up menu to be opened when the object is clicked. Each item in the menu can specify\\nan action to be triggered when clicked. Nested menus are not supported, actions for menu items\\nshould not specify an overflow menu.\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\n  var overflowMenuItem \\u003d CardService.newOverflowMenuItem()\\n    .setStartIcon(CardService.newIconImage()\\n    .setIconUrl(\\\"https://www.google.com/images/branding/googleg/1x/googleg_standard_color_64dp.png\\\"))\\n    .setText(\\\"Open Link\\\")\\n    .setOpenLink(CardService.newOpenLink()\\n        .setUrl(\\\"https://www.google.com\\\"));\\n\\nvar overflowMenu \\u003d CardService.newOverflowMenu()\\n    .addMenuItem(overflowMenuItem).build();\\n```\\n\\n[Developer Preview](https://developers.google.com/workspace/preview).\\n@param menu The object that specifies the overflow menu to display when this element is\\n    clicked.\\n@return This object, for chaining.*/setOverflowMenu(menu:CardService.OverflowMenu):CardService.Button;}interface BorderType{}interface _BorderType{\\n/**No border style.*/NO_BORDER:BorderType;\\n/**Stroke border style.*/STROKE:BorderType;}interface BorderStyle{\\n/**Sets the corner radius of the border, for example 8.\\n@param radius The corner radius to be applied to the border.\\n@return This object, for chaining.*/setCornerRadius(radius:Integer):CardService.BorderStyle;\\n/**Sets the color of the border.\\n@param color The color in #RGB format to be applied to the border.\\n@return This object, for chaining.*/setStrokeColor(color:string):CardService.BorderStyle;\\n/**Sets the type of the border.\\n@param type The border type.\\n@return This object, for chaining.*/setType(type:CardService.BorderType):CardService.BorderStyle;}interface AuthorizationException{printJson():string;\\n/**Sets the authorization URL that user is taken to from the authorization prompt. Required.\\n@param authUrl The authorization URL to set.\\n@return This object, for chaining.*/setAuthorizationUrl(authUrl:string):CardService.AuthorizationException;\\n/**The name of a function to call to generate a custom authorization prompt. Optional.\\n@param callback The name of the function that generates a custom authorization prompt.\\n@return This object, for chaining.*/setCustomUiCallback(callback:string):CardService.AuthorizationException;\\n/**Sets the name that is displayed to the user when asking for authorization. Required.\\n@param name The display name.\\n@return This object, for chaining.*/setResourceDisplayName(name:string):CardService.AuthorizationException;\\n/**Triggers this exception to be thrown.*/throwException():void;}interface AuthorizationAction{\\n/**Sets the authorization URL that user is taken to from the authorization prompt. Required.\\n@param authorizationUrl The authorization URL to set.\\n@return This object, for chaining.*/setAuthorizationUrl(authorizationUrl:string):CardService.AuthorizationAction;}interface Attachment{\\n/**Sets the icon URL for the attachment.\\n@param iconUrl The URL address of the attachment icon.\\n@return This object, for chaining.*/setIconUrl(iconUrl:string):CardService.Attachment;\\n/**Sets the MIME type for the attachment.\\n@param mimeType The MIME type of the content in the attachment resource.\\n@return This object, for chaining.*/setMimeType(mimeType:string):CardService.Attachment;\\n/**Sets the resource URL for the attachment.\\n@param resourceUrl The URL address of a resource.\\n@return This object, for chaining.*/setResourceUrl(resourceUrl:string):CardService.Attachment;\\n/**Sets the title for the attachment.\\n@param title The title of the attachment.\\n@return This object, for chaining.*/setTitle(title:string):CardService.Attachment;}interface ActionStatus{\\n/**Represents the status for a request to either open or submit a dialog.\\n\\n```\\nconst actionStatus \\u003d CardService.newActionStatus()\\n    .setStatusCode(CardService.Status.OK)\\n```\\n@param statusCode The status code.\\n@return This object, for chaining.*/setStatusCode(statusCode:CardService.Status):CardService.ActionStatus;\\n/**The message to send users about the status of their request. If unset, a generic message based\\non the `Status` is sent.\\n\\n```\\nconst actionStatus \\u003d CardService.newActionStatus()\\n    .setUserFacingMessage('Success');\\n```\\n@param message The message to send.\\n@return This object, for chaining.*/setUserFacingMessage(message:string):CardService.ActionStatus;}interface ActionResponseBuilder{\\n/**Builds the current action response and validates it.\\n@return A validated ActionResponse.*/build():CardService.ActionResponse;\\n/**Sets the response to a [`Navigation`](https://developers.google.com/apps-script/reference/card-service/navigation.html) action.\\n@param navigation The [`Navigation`](https://developers.google.com/apps-script/reference/card-service/navigation.html) to use.\\n@return This object, for chaining.*/setNavigation(navigation:CardService.Navigation):CardService.ActionResponseBuilder;\\n/**Sets the notification to display when the action is activated.\\n@param notification The [`Notification`](https://developers.google.com/apps-script/reference/card-service/notification.html) to use.\\n@return This object, for chaining.*/setNotification(notification:CardService.Notification):CardService.ActionResponseBuilder;\\n/**Sets the URL to navigate to when the action is activated.\\n@param openLink The [`OpenLink`](https://developers.google.com/apps-script/reference/card-service/open-link.html) to use.\\n@return This object, for chaining.*/setOpenLink(openLink:CardService.OpenLink):CardService.ActionResponseBuilder;\\n/**Sets a flag to indicate that this action changed the existing data state. For example, if the\\naction created a task or updated contact information. When this flag is set to true, services\\nsuch as Gmail can attempt to clear any cached state data associated with this action.\\n@param stateChanged Whether this action has changed the existing state data. Defaults to false.\\n@return This object, for chaining.*/setStateChanged(stateChanged:boolean):CardService.ActionResponseBuilder;}interface ActionResponse{printJson():string;}interface Action{\\n/**Adds the names of the widgets that this Action needs for a valid submission. If the widgets in\\nthis list don't have a value when this Action is invoked, the form submission is aborted.\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\nvar textInput \\u003d CardService.newTextInput()\\n    .setFieldName(\\\"text_input_1\\\")\\n    .setTitle(\\\"Text input title\\\")\\n\\n// Creates a footer button that requires an input from the above TextInput Widget.\\nvar action \\u003d CardService.newAction()\\n    .setFunctionName(\\\"notificationCallback\\\")\\n    .addRequiredWidget(\\\"text_input_1\\\");\\nvar fixedFooter \\u003d\\n      CardService\\n          .newFixedFooter()\\n          .setPrimaryButton(\\n              CardService\\n                  .newTextButton()\\n                  .setText(\\\"help\\\")\\n                  .setOnClickAction(action));\\n```\\n@param requiredWidget The name of the widget required by this Action.\\n@return This object, for chaining.*/addRequiredWidget(requiredWidget:string):CardService.Action;\\n/**Indicates whether this Action requires inputs from all widgets.\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\n// Creates a button with an action that requires inputs from all widgets.\\nconst button \\u003d CardService.newTextButton()\\n    .setText('Create notification')\\n    .setOnClickAction(\\n        CardService.newAction()\\n            .setAllWidgetsAreRequired(true));\\n```\\n@param allWidgetsAreRequired Whether the action requires inputs from all widgets. Defaults to\\n    `false`.\\n@return This object, for chaining.*/setAllWidgetsAreRequired(allWidgetsAreRequired:boolean):CardService.Action;\\n/**Sets the name of the callback function to be called. Required.\\n@param functionName The name of the function. You can use functions from included libraries,\\n    such as `Library.libFunction1`.\\n@return This object, for chaining.*/setFunctionName(functionName:string):CardService.Action;\\n/**Sets the interaction with a user, only required when opening a dialog. If unspecified, the app\\nresponds by executing an `Action` like opening a link or running a function—as normal.\\n\\nOnly available for Google Chat apps. Not available for Google Workspace Add-ons.\\n\\n```\\nconst action \\u003d CardService.newAction()\\n    .setFunctionName('handleDialog')\\n    .setInteraction(CardService.Interaction.OPEN_DIALOG);\\n```\\n@param interaction The interaction to specify.\\n@return This object, for chaining.*/setInteraction(interaction:CardService.Interaction):CardService.Action;\\n/**Sets the loading indicator that displays while the action is in progress.\\n@param loadIndicator The indicator to display.\\n@return This object, for chaining.*/setLoadIndicator(loadIndicator:CardService.LoadIndicator):CardService.Action;setMethodName(functionName:string):CardService.Action;\\n/**Allows custom parameters to be passed to the callback function. Optional.\\n@param parameters Both keys and values must be strings.\\n@return This object, for chaining.*/setParameters(parameters:Object):CardService.Action;\\n/**Indicates whether form values are determined by the client's values or the server's values\\nafter an action response updates the form's [`Card`](https://developers.google.com/apps-script/reference/card-service/card.html). When set to `true`, the\\nclient's values persist after the server response. When set to `false`, the server's\\nvalues overwrite the form values. Defaults to `false`.\\n\\nPersisting the client values helps prevent situations where a form changes unexpectedly\\nafter a user makes an edit. For example, if a user makes an edit to a [`TextInput`](https://developers.google.com/apps-script/reference/card-service/text-input.html) after\\nsubmitting a form, but before the server responds. If the values are persisted, the edit the\\nuser made remains after the server response updates the [`Card`](https://developers.google.com/apps-script/reference/card-service/card.html); otherwise the form value\\nreturns to the value that the user originally submitted to the form.\\n\\nPersisting client values can interfere with your script's ability to clear form fields or\\noverride form values, so avoid turning on persistence for that type of functionality. Without\\npersistence, it's recommended that you use the [`LoadIndicator.SPINNER`](https://developers.google.com/apps-script/reference/card-service/load-indicator.html#SPINNER) for events,\\nbecause this locks the UI and prevents user edits before the server responds. Alternatively,\\nyou can use [`LoadIndicator.NONE`](https://developers.google.com/apps-script/reference/card-service/load-indicator.html#NONE) and make sure every element in the form has an onChange\\naction.\\n\\n```\\n// Creates a button with an action that persists the client's values as the on-click action.\\nconst button \\u003d CardService.newTextButton()\\n    .setText('Create notification')\\n    .setOnClickAction(\\n        CardService.newAction()\\n            .setPersistValues(true)\\n            .setFunctionName('functionName'));\\n```\\n@param persistValues Whether to persist values. Defaults to `false`.\\n@return This object, for chaining.*/setPersistValues(persistValues:boolean):CardService.Action;}}const CardService:CardService;\"],[\"charts.d.ts\",\"interface Charts{\\n/**An enumeration of how hidden dimensions in a source are expressed in a chart.*/ChartHiddenDimensionStrategy:Charts._ChartHiddenDimensionStrategy;\\n/**An enumeration of how multiple ranges in the source are expressed in a chart.*/ChartMergeStrategy:Charts._ChartMergeStrategy;\\n/**An enumeration of chart types supported by the Charts service.*/ChartType:Charts._ChartType;\\n/**An enumeration of the valid data types for columns in a [`DataTable`](https://developers.google.com/apps-script/reference/charts/data-table.html).*/ColumnType:_ColumnType;\\n/**An enumeration of the styles for curves in a chart.*/CurveStyle:Charts._CurveStyle;\\n/**An enumeration of the styles of points in a line.*/PointStyle:Charts._PointStyle;\\n/**An enumeration of legend positions within a chart.*/Position:Charts._Position;\\n/**Starts building an area chart, as described in the [Google Chart\\nTools](https://developers.google.com/chart/interactive/docs/gallery/areachart) documentation.\\n@return An AreaChartBuilder, which can be used to build an area chart.*/newAreaChart():Charts.AreaChartBuilder;\\n/**Starts building a bar chart, as described in the [Google Chart\\nTools](https://developers.google.com/chart/interactive/docs/gallery/barchart) documentation.\\n@return A BarChartBuilder, which can be used to build a bar chart.*/newBarChart():Charts.BarChartBuilder;\\n/**Starts building a column chart, as described in the [Google Chart\\nTools](https://developers.google.com/chart/interactive/docs/gallery/columnchart) documentation.\\n@return A ColumnChartBuilder, which can be used to build a column chart.*/newColumnChart():Charts.ColumnChartBuilder;\\n/**Creates an empty data table, which can have its values set manually.\\n\\nData tables hold the data for all chart types.\\n@return A DataTableBuilder, which can hold data for charts.*/newDataTable():DataTableBuilder;\\n/**Creates a new data view definition.\\n\\nUse setters to define the different properties of the data view.\\n@return A DataViewDefinitionBuilder, which can be used to build a data view definition.*/newDataViewDefinition():Charts.DataViewDefinitionBuilder;\\n/**Starts building a line chart, as described in the [Google Chart\\nTools](https://developers.google.com/chart/interactive/docs/gallery/linechart) documentation.\\n@return A LineChartBuilder, which can be used to build a line chart.*/newLineChart():Charts.LineChartBuilder;\\n/**Starts building a pie chart, as described in the [Google Chart\\nTools](https://developers.google.com/chart/interactive/docs/gallery/piechart) documentation.\\n@return A PieChartBuilder, which can be used to build a pie chart.*/newPieChart():Charts.PieChartBuilder;\\n/**Starts building a scatter chart, as described in the [Google Chart\\nTools](https://developers.google.com/chart/interactive/docs/gallery/scatterchart) documentation.\\n@return A ScatterChartBuilder, which can be used to build a scatter chart.*/newScatterChart():Charts.ScatterChartBuilder;\\n/**Starts building a table chart, as described in the [Google Chart\\nTools](https://developers.google.com/chart/interactive/docs/gallery/table) documentation.\\n@return A TableChartBuilder, which can be used to build a table chart.*/newTableChart():Charts.TableChartBuilder;\\n/**Creates a new text style builder.\\n\\nTo change the default values, use the setter functions.\\n@return A TextStyleBuilder, which can be used to build a text style configuration object.*/newTextStyle():Charts.TextStyleBuilder;}module Charts{interface TextStyleBuilder{\\n/**Builds and returns a text style configuration object that was built using this builder.\\n\\n```\\n// Creates a new text style that uses 26-point blue font.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\n```\\n@return A text style object built using this builder.*/build():Charts.TextStyle;\\n/**Sets the color of the text style.\\n\\n```\\n// Creates a new text style that uses blue font.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF');\\nvar style \\u003d textStyleBuilder.build();\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setColor(cssValue:string):Charts.TextStyleBuilder;\\n/**Sets the font name of the text style\\n\\n```\\n// Creates a new text style that uses Ariel font.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setFontName('Ariel');\\nvar style \\u003d textStyleBuilder.build();\\n```\\n@param fontName The font name to use for the text style.\\n@return This builder, useful for chaining.*/setFontName(fontName:string):Charts.TextStyleBuilder;\\n/**Sets the font size of the text style.\\n\\n```\\n// Creates a new text style that uses 26-point font.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\n```\\n@param fontSize The font size in pixels to use for the text style.\\n@return This builder, useful for chaining.*/setFontSize(fontSize:number):Charts.TextStyleBuilder;}interface TextStyle{\\n/**Gets the color of the text style.\\n\\n```\\n// Creates a new text style that uses blue text and logs the color.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').build();\\nLogger.log(textStyle.getColor());\\n```\\n@return The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).*/getColor():string;\\n/**Gets the font name of the text style.\\n\\n```\\n// Creates a new text style that uses Ariel font and logs the font name.\\nvar textStyle \\u003d Charts.newTextStyle().setFontName('Ariel').build();\\nLogger.log(textStyle.getFontName());\\n```\\n@return The font name.*/getFontName():string;\\n/**Gets the font size of the text style.\\n\\n```\\n// Creates a new text style that uses 18 pixel font size and logs the font size.\\nvar textStyle \\u003d Charts.newTextStyle().setFontSize(18).build();\\nLogger.log(textStyle.getFontSize());\\n```\\n@return The font size in pixels.*/getFontSize():number;}interface TableChartBuilder{\\n/**Builds the chart.\\n@return A Chart object, which can be embedded into documents, UI elements, or used as a static\\n    image.*/build():Charts.Chart;\\n/**Sets whether to enable paging through the data.\\n\\nThe default behavior is paging disabled. If paging is enabled the default page size is 10.\\n@param enablePaging `true` if paging should be enabled, `false` otherwise.\\n@return This builder, useful for chaining.*/enablePaging(enablePaging:boolean):Charts.TableChartBuilder;\\n/**Enables paging and sets the number of rows in each page.\\n\\nThe default page size is 10.\\n\\n```\\n// Creates a table chart builder and enables paging with page size of 5.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.enablePaging(5);\\n```\\n@param pageSize The number of rows in each page of the table.\\n@return This builder, useful for chaining.*/enablePaging(pageSize:Integer):Charts.TableChartBuilder;\\n/**Enables paging, sets the number of rows in each page and the first table page to display (page\\nnumbers are zero based).\\n\\nThe default page size is 10, and the default start page is 0.\\n\\n```\\n// Creates a table chart builder and enables paging with page size of 5 and displays page 2\\n// first.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.enablePaging(5, 2);\\n```\\n@param pageSize The number of rows in each page of the table.\\n@param startPage The first table page to display (page numbers are zero-based).\\n@return This builder, useful for chaining.*/enablePaging(pageSize:Integer,startPage:Integer):Charts.TableChartBuilder;\\n/**Adds basic support for right-to-left languages (such as Arabic or Hebrew) by reversing the\\ncolumn order of the table, so that column zero is the right-most column, and the last column is\\nthe left-most column.\\n\\nThis does not affect the column index in the underlying data, only the order of display.\\nFull bi-directional (BiDi) language display is not supported by the table visualization even\\nwith this option. This option is ignored if you enable paging (using the page option), or if\\nthe table has scroll bars because you have specified height and width options smaller than the\\nrequired table size. The default behavior is RTL support disabled.\\n@param rtlEnabled `true` if right-to-left support should be enabled, `false`\\n    otherwise.\\n@return This builder, useful for chaining.*/enableRtlTable(rtlEnabled:boolean):Charts.TableChartBuilder;\\n/**Sets whether to sort columns when the user clicks a column heading.\\n\\nIf sorting is enabled, when users click on the column header the rows are automatically\\nsorted. The default behavior is sorting enabled.\\n@param enableSorting `true` to enable sorting by clicking on column headers, `false` otherwise.\\n@return This builder, useful for chaining.*/enableSorting(enableSorting:boolean):Charts.TableChartBuilder;\\n/**Sets the data source URL that is used to pull data in from an external source, such as Google\\nSheets. If a data source URL and a DataTable are provided, the data source URL is ignored.\\n\\nFor more information about querying data sources, check out the [Google Charts documentation](/chart/interactive/docs/queries).\\n@param url The data source URL, including any query parameters.\\n@return This builder, useful for chaining.*/setDataSourceUrl(url:string):Charts.TableChartBuilder;\\n/**Sets the data table to use for the chart using a DataTableBuilder. This is a convenience method\\nfor setting the data table without needing to call `build()`.\\n@param tableBuilder A data table builder. A new data table is created instantly as part of this\\n    call, so any further updates to the builder won't be reflected in the chart.\\n@return This builder, useful for chaining.*/setDataTable(tableBuilder:DataTableBuilder):Charts.TableChartBuilder;\\n/**Sets the data table which contains the lines for the chart, as well as the X-axis labels. The\\nfirst column should be a string, and contain the horizontal axis labels. Any number of columns\\ncan follow, all must be numeric. Each column is displayed as a separate line.\\n@param table The data table to use for the chart.\\n@return This builder, useful for chaining.*/setDataTable(table:DataTableSource):Charts.TableChartBuilder;\\n/**Sets the data view definition to use for the chart.\\n@param dataViewDefinition A data view definition object that defines the view that should be\\n    derived from the given data source for the chart drawing.\\n@return This builder, useful for chaining.*/setDataViewDefinition(dataViewDefinition:Charts.DataViewDefinition):Charts.TableChartBuilder;\\n/**Sets the dimensions for the chart.\\n@param width The width of the chart, in pixels.\\n@param height The height of the chart, in pixels.\\n@return This builder, useful for chaining.*/setDimensions(width:Integer,height:Integer):Charts.TableChartBuilder;\\n/**Sets the row number for the first row in the data table.\\n\\nThe default row number of the first row is 1.\\n\\n```\\n// Creates a table chart builder and sets the first row to be 2.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setFirstRowNumber(2);\\n```\\n@param number The row number for the first row in the data table.\\n@return This builder, useful for chaining.*/setFirstRowNumber(number:Integer):Charts.TableChartBuilder;\\n/**Sets the index of the column according to which the table should be initially sorted\\n(ascending).\\n\\nThe column os sorted in ascending order and is marked with a small arrow indicating that.\\n\\n```\\n// Creates a table chart builder and sorts it by the second column (ascending).\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setInitialSortingAscending(2);\\n```\\n@param column The number of the column according to which the table should be initially sorted.\\n@return This builder, useful for chaining.*/setInitialSortingAscending(column:Integer):Charts.TableChartBuilder;\\n/**Sets the index of the column according to which the table should be initially sorted\\n(descending).\\n\\nThe column os sorted in descending order and is marked with a a small arrow indicating that.\\n\\n```\\n// Creates a table chart builder and sorts it by the second column (descending).\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setInitialSortingDescending(2);\\n```\\n@param column The number of the column according to which the table should be initially sorted.\\n@return This builder, useful for chaining.*/setInitialSortingDescending(column:Integer):Charts.TableChartBuilder;\\n/**Sets advanced options for this chart. See [the available options for\\nthis chart](/chart/interactive/docs/gallery/table). This method has no effect if the given option is invalid.\\n\\n```\\n// Build a table chart which renders HTML.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setOption('allowHtml', {@code true});\\nvar chart \\u003d builder.build();\\n```\\n@param option The option to set.\\n@param value The value to set.\\n@return This builder, useful for chaining.*/setOption(option:string,value:Object):Charts.TableChartBuilder;\\n/**Sets whether to show the row number as the first column of the table.\\n\\nThe default behavior is not showing row numbers.\\n@param showRowNumber `true` if the first column of the table should show the row number,\\n    `false` otherwise.\\n@return This builder, useful for chaining.*/showRowNumberColumn(showRowNumber:boolean):Charts.TableChartBuilder;\\n/**Sets whether alternating color style is assigned to odd and even rows of a table chart.\\n\\nThe default behavior is the rows having alternating color style.\\n@param alternate `true` if color styles should be alternating, `false` otherwise.\\n@return This builder, useful for chaining.*/useAlternatingRowStyle(alternate:boolean):Charts.TableChartBuilder;}interface StringFilterBuilder{\\n/**Sets whether matching should be case sensitive or not.\\n\\n```\\n// Builds a case insensitive string filter to filter column \\\"Col1\\\".\\nvar stringFilter \\u003d Charts.newStringFilter()\\n  .setFilterColumnLabel(\\\"Col1\\\")\\n  .setCaseSensitive(false)\\n  .build();\\n```\\n@param caseSensitive If `true`, enables string matching case sensitivity.\\n@return This builder, useful for chaining.*/setCaseSensitive(caseSensitive:boolean):Charts.StringFilterBuilder;\\n/**Sets whether the control should match exact values only ([`MatchType.EXACT`](https://developers.google.com/apps-script/reference/charts/match-type.html#EXACT)), prefixes\\nstarting from the beginning of the value ([`MatchType.PREFIX`](https://developers.google.com/apps-script/reference/charts/match-type.html#PREFIX)), or any substring\\n([`MatchType.ANY`](https://developers.google.com/apps-script/reference/charts/match-type.html#ANY)).\\n\\n```\\n// Builds a string filter to filter column \\\"Col1\\\" matching the prefix.\\nvar stringFilter \\u003d Charts.newStringFilter()\\n  .setFilterColumnLabel(\\\"Col1\\\")\\n  .setMatchType(Charts.MatchType.PREFIX)\\n  .build();\\n```\\n@param matchType The string matching type.\\n@return This builder, useful for chaining.*/setMatchType(matchType:Charts.MatchType):Charts.StringFilterBuilder;\\n/**Sets whether the control should match any time a key is pressed or only when the input field\\n'changes' (loss of focus or pressing the Enter key).\\n\\n```\\n// Builds a string filter to filter column \\\"Col1\\\" that checks the match any time a key is\\n// pressed.\\nvar stringFilter \\u003d Charts.newStringFilter()\\n  .setFilterColumnLabel(\\\"Col1\\\")\\n  .setRealtimeTrigger(true)\\n  .build();\\n```\\n@param realtimeTrigger If `true`, sets events to be triggered at real time (when a key is\\n    pressed).\\n@return This builder, useful for chaining.*/setRealtimeTrigger(realtimeTrigger:boolean):Charts.StringFilterBuilder;}interface ScatterChartBuilder{\\n/**Builds the chart.\\n@return A Chart object, which can be embedded into documents, UI elements, or used as a static\\n    image.*/build():Charts.Chart;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):Charts.ScatterChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):Charts.ScatterChartBuilder;\\n/**Sets the data source URL that is used to pull data in from an external source, such as Google\\nSheets. If a data source URL and a DataTable are provided, the data source URL is ignored.\\n\\nFor more information about querying data sources, check out the [Google Charts documentation](/chart/interactive/docs/queries).\\n@param url The data source URL, including any query parameters.\\n@return This builder, useful for chaining.*/setDataSourceUrl(url:string):Charts.ScatterChartBuilder;\\n/**Sets the data table to use for the chart using a DataTableBuilder. This is a convenience method\\nfor setting the data table without needing to call `build()`.\\n@param tableBuilder A data table builder. A new data table is created instantly as part of this\\n    call, so any further updates to the builder won't be reflected in the chart.\\n@return This builder, useful for chaining.*/setDataTable(tableBuilder:DataTableBuilder):Charts.ScatterChartBuilder;\\n/**Sets the data table which contains the lines for the chart, as well as the X-axis labels. The\\nfirst column should be a string, and contain the horizontal axis labels. Any number of columns\\ncan follow, all must be numeric. Each column is displayed as a separate line.\\n@param table The data table to use for the chart.\\n@return This builder, useful for chaining.*/setDataTable(table:DataTableSource):Charts.ScatterChartBuilder;\\n/**Sets the data view definition to use for the chart.\\n@param dataViewDefinition A data view definition object that defines the view that should be\\n    derived from the given data source for the chart drawing.\\n@return This builder, useful for chaining.*/setDataViewDefinition(dataViewDefinition:Charts.DataViewDefinition):Charts.ScatterChartBuilder;\\n/**Sets the dimensions for the chart.\\n@param width The width of the chart, in pixels.\\n@param height The height of the chart, in pixels.\\n@return This builder, useful for chaining.*/setDimensions(width:Integer,height:Integer):Charts.ScatterChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):Charts.ScatterChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):Charts.ScatterChartBuilder;\\n/**Sets advanced options for this chart. See [the available options for\\nthis chart](/chart/interactive/docs/gallery/scatterchart). This method has no effect if the given option is invalid.\\n\\n```\\n// Build a scatter chart with a 1-second animation duration.\\nvar builder \\u003d Charts.newScatterChart();\\nbuilder.setOption('animation.duration', 1000);\\nvar chart \\u003d builder.build();\\n```\\n@param option The option to set.\\n@param value The value to set.\\n@return This builder, useful for chaining.*/setOption(option:string,value:Object):Charts.ScatterChartBuilder;\\n/**Sets the style for points in the line. By default, points have no particular styles, and only\\nthe line is visible.\\n\\n```\\n// Creates a line chart builder and sets large point style.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setPointStyle(Charts.PointStyle.LARGE);\\n```\\n@param style The style to use for points in the line.\\n@return This builder, useful for chaining.*/setPointStyle(style:Charts.PointStyle):Charts.ScatterChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):Charts.ScatterChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):Charts.ScatterChartBuilder;\\n/**Makes the horizontal axis into a logarithmic scale (requires all values to be positive).\\n@return This builder, useful for chaining.*/setXAxisLogScale():Charts.ScatterChartBuilder;\\n/**Sets the range for the horizontal axis of the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n\\n```\\n// Creates a scatter chart builder and sets the X-axis range to be 0 to 100.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setXAxisRange(0, 100);\\n```\\n@param start The value for the lowest grid line of the horizontal axis.\\n@param end The value for the highest grid line of the horizontal axis.\\n@return This builder, useful for chaining.*/setXAxisRange(start:number,end:number):Charts.ScatterChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):Charts.ScatterChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):Charts.ScatterChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):Charts.ScatterChartBuilder;\\n/**Makes the vertical axis into a logarithmic scale (requires all values to be positive).\\n@return This builder, useful for chaining.*/setYAxisLogScale():Charts.ScatterChartBuilder;\\n/**Sets the range for the vertical axis of the chart. If any data points fall outside the range,\\nthe range is expanded to include those data points.\\n\\n```\\n// Creates a scatter chart builder and sets the Y-axis range to be 0 to 100.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setYAxisRange(0, 100);\\n```\\n@param start The value for the lowest grid line of the vertical axis.\\n@param end The value for the highest grid line of the vertical axis.\\n@return This builder, useful for chaining.*/setYAxisRange(start:number,end:number):Charts.ScatterChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):Charts.ScatterChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):Charts.ScatterChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):Charts.ScatterChartBuilder;}interface Position{}interface _Position{\\n/**Below the chart.*/BOTTOM:Position;\\n/**No legend is displayed.*/NONE:Position;\\n/**To the right of the chart.*/RIGHT:Position;\\n/**Above the chart.*/TOP:Position;}interface PointStyle{}interface _PointStyle{\\n/**Use largest sized line points.*/HUGE:PointStyle;\\n/**Use large sized line points.*/LARGE:PointStyle;\\n/**Use medium sized line points.*/MEDIUM:PointStyle;\\n/**Do not display line points.*/NONE:PointStyle;\\n/**Use tiny line points.*/TINY:PointStyle;}interface PieChartBuilder{\\n/**Builds the chart.\\n@return A Chart object, which can be embedded into documents, UI elements, or used as a static\\n    image.*/build():Charts.Chart;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():Charts.PieChartBuilder;\\n/**Sets the chart to be three-dimensional.\\n@return This builder, useful for chaining.*/set3D():Charts.PieChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):Charts.PieChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):Charts.PieChartBuilder;\\n/**Sets the data source URL that is used to pull data in from an external source, such as Google\\nSheets. If a data source URL and a DataTable are provided, the data source URL is ignored.\\n\\nFor more information about querying data sources, check out the [Google Charts documentation](/chart/interactive/docs/queries).\\n@param url The data source URL, including any query parameters.\\n@return This builder, useful for chaining.*/setDataSourceUrl(url:string):Charts.PieChartBuilder;\\n/**Sets the data table to use for the chart using a DataTableBuilder. This is a convenience method\\nfor setting the data table without needing to call `build()`.\\n@param tableBuilder A data table builder. A new data table is created instantly as part of this\\n    call, so any further updates to the builder won't be reflected in the chart.\\n@return This builder, useful for chaining.*/setDataTable(tableBuilder:DataTableBuilder):Charts.PieChartBuilder;\\n/**Sets the data table which contains the lines for the chart, as well as the X-axis labels. The\\nfirst column should be a string, and contain the horizontal axis labels. Any number of columns\\ncan follow, all must be numeric. Each column is displayed as a separate line.\\n@param table The data table to use for the chart.\\n@return This builder, useful for chaining.*/setDataTable(table:DataTableSource):Charts.PieChartBuilder;\\n/**Sets the data view definition to use for the chart.\\n@param dataViewDefinition A data view definition object that defines the view that should be\\n    derived from the given data source for the chart drawing.\\n@return This builder, useful for chaining.*/setDataViewDefinition(dataViewDefinition:Charts.DataViewDefinition):Charts.PieChartBuilder;\\n/**Sets the dimensions for the chart.\\n@param width The width of the chart, in pixels.\\n@param height The height of the chart, in pixels.\\n@return This builder, useful for chaining.*/setDimensions(width:Integer,height:Integer):Charts.PieChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):Charts.PieChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):Charts.PieChartBuilder;\\n/**Sets advanced options for this chart. See [the available options for\\nthis chart](/chart/interactive/docs/gallery/piechart). This method has no effect if the given option is invalid.\\n\\n```\\n// Build a pie chart with a pretty legend.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.setOption('legend', {textStyle: {color: 'blue', fontSize: 16}});\\nvar chart \\u003d builder.build();\\n```\\n@param option The option to set.\\n@param value The value to set.\\n@return This builder, useful for chaining.*/setOption(option:string,value:Object):Charts.PieChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):Charts.PieChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):Charts.PieChartBuilder;}interface PickerValuesLayout{}interface _PickerValuesLayout{\\n/**Selected values display in a single text line next to the value picker widget.*/ASIDE:PickerValuesLayout;\\n/**Selected values display in a single text line below the widget.*/BELOW:PickerValuesLayout;\\n/**Selected values display in a column below the widget.*/BELOW_STACKED:PickerValuesLayout;\\n/**Similar to below, but entries that cannot fit in the picker wrap to a new line.*/BELOW_WRAPPING:PickerValuesLayout;}interface Orientation{}interface _Orientation{\\n/**Horizontal orientation.*/HORIZONTAL:Orientation;\\n/**Vertical orientation.*/VERTICAL:Orientation;}interface NumberRangeFilterBuilder{\\n/**Sets the maximum allowed value for the range lower extent. If undefined, the value is inferred\\nfrom the contents of the DataTable managed by the control.\\n\\n```\\n// Builds a number range filter and sets the maximum value to 100.\\nvar numberRangeFilter \\u003d Charts.newNumberRangeFilter()\\n  .setFilterColumnLabel(\\\"Col2\\\")\\n  .setMaxValue(100)\\n  .build();\\n```\\n@param maxValue The maximum value of the slider.\\n@return This builder, useful for chaining.*/setMaxValue(maxValue:Integer):Charts.NumberRangeFilterBuilder;\\n/**Sets the minimum allowed value for the range lower extent. If undefined, the value is inferred\\nfrom the contents of the DataTable managed by the control.\\n\\n```\\n// Builds a number range filter and sets the minimum value to 10.\\nvar numberRangeFilter \\u003d Charts.newNumberRangeFilter()\\n  .setFilterColumnLabel(\\\"Col2\\\")\\n  .setMinValue(10)\\n  .build();\\n```\\n@param minValue The minimum value of the slider.\\n@return This builder, useful for chaining.*/setMinValue(minValue:Integer):Charts.NumberRangeFilterBuilder;\\n/**Sets the slider orientation.\\n\\n```\\n// Builds a number range filter and sets it to have a horizontal orientation.\\nvar numberRangeFilter \\u003d Charts.newNumberRangeFilter()\\n  .setFilterColumnLabel(\\\"Col2\\\")\\n  .setOrientation(Charts.Orientation.HORIZONTAL)\\n  .build();\\n```\\n@param orientation The slider orientation to set.\\n@return This builder, useful for chaining.*/setOrientation(orientation:Charts.Orientation):Charts.NumberRangeFilterBuilder;\\n/**Sets whether to have labels next to the slider displaying extents of the selected range.\\n\\n```\\n// Builds a number range filter and enables showing of the number range values.\\nvar numberRangeFilter \\u003d Charts.newNumberRangeFilter()\\n  .setFilterColumnLabel(\\\"Col2\\\")\\n  .setShowRangeValues(true)\\n  .build();\\n```\\n@param showRangeValues If `true`, enables showing of labels next to the slider.\\n@return This builder, useful for chaining.*/setShowRangeValues(showRangeValues:boolean):Charts.NumberRangeFilterBuilder;\\n/**Sets the number of ticks (fixed positions in a range bar) a number range filter slider thumbs\\ncan fall in.\\n\\n```\\n// Builds a number range filter and sets the number of ticks for the range to 10.\\nvar numberRangeFilter \\u003d Charts.newNumberRangeFilter()\\n  .setFilterColumnLabel(\\\"Col2\\\")\\n  .setTicks(10)\\n  .build();\\n```\\n@param ticks The number of ticks on the slider.\\n@return This builder, useful for chaining.*/setTicks(ticks:Integer):Charts.NumberRangeFilterBuilder;}interface MatchType{}interface _MatchType{\\n/**Match any substring*/ANY:MatchType;\\n/**Match exact values only*/EXACT:MatchType;\\n/**Match prefixes starting from the beginning of the value*/PREFIX:MatchType;}interface LineChartBuilder{\\n/**Builds the chart.\\n@return A Chart object, which can be embedded into documents, UI elements, or used as a static\\n    image.*/build():Charts.Chart;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():Charts.LineChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):Charts.LineChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):Charts.LineChartBuilder;\\n/**Sets the style to use for curves in the chart. See [`CurveStyle`](https://developers.google.com/apps-script/reference/charts/curve-style.html) for allowed curve\\nstyles.\\n\\n```\\n// Creates a line chart builder and curves the lines in the chart.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setCurveStyle(Charts.CurveStyle.SMOOTH)\\n```\\n@param style The style for curves in the chart.\\n@return This builder, useful for chaining.*/setCurveStyle(style:Charts.CurveStyle):Charts.LineChartBuilder;\\n/**Sets the data source URL that is used to pull data in from an external source, such as Google\\nSheets. If a data source URL and a DataTable are provided, the data source URL is ignored.\\n\\nFor more information about querying data sources, check out the [Google Charts documentation](/chart/interactive/docs/queries).\\n@param url The data source URL, including any query parameters.\\n@return This builder, useful for chaining.*/setDataSourceUrl(url:string):Charts.LineChartBuilder;\\n/**Sets the data table to use for the chart using a DataTableBuilder. This is a convenience method\\nfor setting the data table without needing to call `build()`.\\n@param tableBuilder A data table builder. A new data table is created instantly as part of this\\n    call, so any further updates to the builder won't be reflected in the chart.\\n@return This builder, useful for chaining.*/setDataTable(tableBuilder:DataTableBuilder):Charts.LineChartBuilder;\\n/**Sets the data table which contains the lines for the chart, as well as the X-axis labels. The\\nfirst column should be a string, and contain the horizontal axis labels. Any number of columns\\ncan follow, all must be numeric. Each column is displayed as a separate line.\\n@param table The data table to use for the chart.\\n@return This builder, useful for chaining.*/setDataTable(table:DataTableSource):Charts.LineChartBuilder;\\n/**Sets the data view definition to use for the chart.\\n@param dataViewDefinition A data view definition object that defines the view that should be\\n    derived from the given data source for the chart drawing.\\n@return This builder, useful for chaining.*/setDataViewDefinition(dataViewDefinition:Charts.DataViewDefinition):Charts.LineChartBuilder;\\n/**Sets the dimensions for the chart.\\n@param width The width of the chart, in pixels.\\n@param height The height of the chart, in pixels.\\n@return This builder, useful for chaining.*/setDimensions(width:Integer,height:Integer):Charts.LineChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):Charts.LineChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):Charts.LineChartBuilder;\\n/**Sets advanced options for this chart. See [the available options for\\nthis chart](/chart/interactive/docs/gallery/linechart). This method has no effect if the given option is invalid.\\n\\n```\\n// Build a line chart with a 1-second animation duration.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setOption('animation.duration', 1000);\\nvar chart \\u003d builder.build();\\n```\\n@param option The option to set.\\n@param value The value to set.\\n@return This builder, useful for chaining.*/setOption(option:string,value:Object):Charts.LineChartBuilder;\\n/**Sets the style for points in the line. By default, points have no particular styles, and only\\nthe line is visible.\\n\\n```\\n// Creates a line chart builder and sets large point style.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setPointStyle(Charts.PointStyle.LARGE);\\n```\\n@param style The style to use for points in the line.\\n@return This builder, useful for chaining.*/setPointStyle(style:Charts.PointStyle):Charts.LineChartBuilder;\\n/**Sets the range for the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n@param start The value for the lowest grid line of the range axis.\\n@param end The value for the highest grid line of the range axis.\\n@return This builder, useful for chaining.*/setRange(start:number,end:number):Charts.LineChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):Charts.LineChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):Charts.LineChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):Charts.LineChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):Charts.LineChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):Charts.LineChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):Charts.LineChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):Charts.LineChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):Charts.LineChartBuilder;\\n/**Makes the range axis into a logarithmic scale (requires all values to be positive). The range\\naxis are the vertical axis for vertical charts (such as line, area, or column) and the\\nhorizontal axis for horizontal charts (such as bar).\\n@return This builder, useful for chaining.*/useLogScale():Charts.LineChartBuilder;}interface DataViewDefinitionBuilder{\\n/**Builds and returns the data view definition object that was built using this builder.\\n@return A data view definition object that was built using this builder.*/build():Charts.DataViewDefinition;\\n/**Sets the indexes of the columns to include in the data view as well as specifying role-column\\ninformation. This subset of column indexes refer to the columns of the data source that the\\ndata view is derived from.\\n\\nA column role describes the purpose of the data in that column: for example, a column might\\nhold data describing tooltip text, data point annotations, or uncertainty indicators. For more\\ndetails, see [DataTable Roles](/chart/interactive/docs/roles) in the Google Charts\\ndocumentation.\\n\\nAssuming a spreadsheet with the following data in A1:C3:\\n\\n```\\n\\\"abc\\\", 20, \\\"blue\\\"\\n\\\"def\\\", 30, \\\"red\\\"\\n\\\"ghi\\\", 40, \\\"orange\\\"\\n```\\n\\nThe following code creates a bar chart where each bar is a different color. The colors are\\nassigned via a style \\\"role column\\\".\\n\\n```\\nvar COLUMN_SPEC \\u003d [\\n  0, // categories\\n  1, // counts\\n  {sourceColumn: 2, role: 'style'}\\n];\\n\\nfunction roleColumnChart() {\\n  var spreadsheet \\u003d SpreadsheetApp.getActiveSpreadsheet();\\n  var sheet \\u003d spreadsheet.getActiveSheet();\\n  var viewSpec \\u003d Charts.newDataViewDefinition()\\n      .setColumns(COLUMN_SPEC)\\n      .build();\\n  var chartBuilder \\u003d sheet.newChart()\\n      .setChartType(Charts.ChartType.BAR)\\n      .setDataViewDefinition(viewSpec)\\n      .setOption('useFirstColumnAsDomain', true)\\n      .setPosition(5, 1, 0, 0)\\n      .setOption('hAxis', { title: 'Counts' })\\n      .setOption('vAxis', { title: 'Categories' })\\n      .addRange(sheet.getRange('A1:C3'));\\n  sheet.insertChart(chartBuilder.build());\\n};\\n```\\n@param columns An array of column indexes, or column descriptions (an object), to include in\\n    the data view. The column descriptions define a column role. The data table and the\\n    enumeration for data view columns are zero-based.\\n@return This builder, useful for chaining.*/setColumns(columns:Object[]):Charts.DataViewDefinitionBuilder;}interface DataViewDefinition{}interface CurveStyle{}interface _CurveStyle{\\n/**Straight lines without curve.*/NORMAL:CurveStyle;\\n/**The angles of the line are smoothed.*/SMOOTH:CurveStyle;}interface ColumnChartBuilder{\\n/**Builds the chart.\\n@return A Chart object, which can be embedded into documents, UI elements, or used as a static\\n    image.*/build():Charts.Chart;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():Charts.ColumnChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):Charts.ColumnChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):Charts.ColumnChartBuilder;\\n/**Sets the data source URL that is used to pull data in from an external source, such as Google\\nSheets. If a data source URL and a DataTable are provided, the data source URL is ignored.\\n\\nFor more information about querying data sources, check out the [Google Charts documentation](/chart/interactive/docs/queries).\\n@param url The data source URL, including any query parameters.\\n@return This builder, useful for chaining.*/setDataSourceUrl(url:string):Charts.ColumnChartBuilder;\\n/**Sets the data table to use for the chart using a DataTableBuilder. This is a convenience method\\nfor setting the data table without needing to call `build()`.\\n@param tableBuilder A data table builder. A new data table is created instantly as part of this\\n    call, so any further updates to the builder won't be reflected in the chart.\\n@return This builder, useful for chaining.*/setDataTable(tableBuilder:DataTableBuilder):Charts.ColumnChartBuilder;\\n/**Sets the data table which contains the lines for the chart, as well as the X-axis labels. The\\nfirst column should be a string, and contain the horizontal axis labels. Any number of columns\\ncan follow, all must be numeric. Each column is displayed as a separate line.\\n@param table The data table to use for the chart.\\n@return This builder, useful for chaining.*/setDataTable(table:DataTableSource):Charts.ColumnChartBuilder;\\n/**Sets the data view definition to use for the chart.\\n@param dataViewDefinition A data view definition object that defines the view that should be\\n    derived from the given data source for the chart drawing.\\n@return This builder, useful for chaining.*/setDataViewDefinition(dataViewDefinition:Charts.DataViewDefinition):Charts.ColumnChartBuilder;\\n/**Sets the dimensions for the chart.\\n@param width The width of the chart, in pixels.\\n@param height The height of the chart, in pixels.\\n@return This builder, useful for chaining.*/setDimensions(width:Integer,height:Integer):Charts.ColumnChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):Charts.ColumnChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):Charts.ColumnChartBuilder;\\n/**Sets advanced options for this chart. See [the available options for\\nthis chart](/chart/interactive/docs/gallery/columnchart). This method has no effect if the given option is invalid.\\n\\n```\\n// Build a column chart with a 1-second animation duration.\\nvar builder \\u003d Charts.newColumnChart();\\nbuilder.setOption('animation.duration', 1000);\\nvar chart \\u003d builder.build();\\n```\\n@param option The option to set.\\n@param value The value to set.\\n@return This builder, useful for chaining.*/setOption(option:string,value:Object):Charts.ColumnChartBuilder;\\n/**Sets the range for the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n@param start The value for the lowest grid line of the range axis.\\n@param end The value for the highest grid line of the range axis.\\n@return This builder, useful for chaining.*/setRange(start:number,end:number):Charts.ColumnChartBuilder;\\n/**Uses stacked lines, meaning that line and bar values are stacked (accumulated). By default,\\nthere is no stacking.\\n@return This builder, useful for chaining.*/setStacked():Charts.ColumnChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):Charts.ColumnChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):Charts.ColumnChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):Charts.ColumnChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):Charts.ColumnChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):Charts.ColumnChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):Charts.ColumnChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):Charts.ColumnChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):Charts.ColumnChartBuilder;\\n/**Makes the range axis into a logarithmic scale (requires all values to be positive). The range\\naxis are the vertical axis for vertical charts (such as line, area, or column) and the\\nhorizontal axis for horizontal charts (such as bar).\\n@return This builder, useful for chaining.*/useLogScale():Charts.ColumnChartBuilder;}interface ChartType{}interface _ChartType{\\n/**Area chart*/AREA:ChartType;\\n/**Bar chart*/BAR:ChartType;\\n/**Bubble chart.*/BUBBLE:ChartType;\\n/**Candlestick chart.*/CANDLESTICK:ChartType;\\n/**Column chart*/COLUMN:ChartType;\\n/**Combo chart*/COMBO:ChartType;\\n/**Gauge chart.*/GAUGE:ChartType;\\n/**Geo chart.*/GEO:ChartType;\\n/**Histogram*/HISTOGRAM:ChartType;\\n/**Line chart*/LINE:ChartType;\\n/**Org chart.*/ORG:ChartType;\\n/**Pie chart*/PIE:ChartType;\\n/**Radar chart.*/RADAR:ChartType;\\n/**Scatter chart*/SCATTER:ChartType;\\n/**Sparkline chart.*/SPARKLINE:ChartType;\\n/**Stepped area chart.*/STEPPED_AREA:ChartType;\\n/**Table chart*/TABLE:ChartType;\\n/**Timeline chart.*/TIMELINE:ChartType;\\n/**Treemap chart.*/TREEMAP:ChartType;\\n/**Waterfall chart.*/WATERFALL:ChartType;}interface ChartOptions{\\n/**Returns a configured option for this chart.\\n@param option The string representing the desired option.\\n@return The value currently set for the specified option or `null` if the option was not\\n    set.*/get(option:string):Object;\\n/**Returns a configured option for this chart. If the chart option is not set, returns the default\\nvalue of this option if available, or returns `null` if the default value is not\\navailable.\\n@param option The string representing the desired option.\\n@return The value currently set for the specified option. If the option was not set and the\\n    default value is available, returns the default value.*/getOrDefault(option:string):Object;}interface ChartMergeStrategy{}interface _ChartMergeStrategy{\\n/**Default. Charts merges the columns of multiple ranges.*/MERGE_COLUMNS:ChartMergeStrategy;\\n/**Charts merges the rows of multiple ranges.*/MERGE_ROWS:ChartMergeStrategy;}interface ChartHiddenDimensionStrategy{}interface _ChartHiddenDimensionStrategy{\\n/**Default; charts skips any hidden columns and hidden rows.*/IGNORE_BOTH:ChartHiddenDimensionStrategy;\\n/**Charts skips hidden columns only.*/IGNORE_COLUMNS:ChartHiddenDimensionStrategy;\\n/**Charts skips hidden rows only.*/IGNORE_ROWS:ChartHiddenDimensionStrategy;\\n/**Charts does not skip hidden columns or hidden rows.*/SHOW_BOTH:ChartHiddenDimensionStrategy;}interface Chart{\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;\\n/**Returns the options for this chart, such as height, colors, and axes.\\n\\nThe returned options are immutable.\\n@return The options for this chart, such as height, colors, and axes.*/getOptions():Charts.ChartOptions;}interface BarChartBuilder{\\n/**Builds the chart.\\n@return A Chart object, which can be embedded into documents, UI elements, or used as a static\\n    image.*/build():Charts.Chart;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():Charts.BarChartBuilder;\\n/**Reverses the direction in which the bars grow along the horizontal axis. By default, values\\ngrow from left to right. Calling this method causes them to grow from right to left.\\n@return This builder, useful for chaining.*/reverseDirection():Charts.BarChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):Charts.BarChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):Charts.BarChartBuilder;\\n/**Sets the data source URL that is used to pull data in from an external source, such as Google\\nSheets. If a data source URL and a DataTable are provided, the data source URL is ignored.\\n\\nFor more information about querying data sources, check out the [Google Charts documentation](/chart/interactive/docs/queries).\\n@param url The data source URL, including any query parameters.\\n@return This builder, useful for chaining.*/setDataSourceUrl(url:string):Charts.BarChartBuilder;\\n/**Sets the data table to use for the chart using a DataTableBuilder. This is a convenience method\\nfor setting the data table without needing to call `build()`.\\n@param tableBuilder A data table builder. A new data table is created instantly as part of this\\n    call, so any further updates to the builder won't be reflected in the chart.\\n@return This builder, useful for chaining.*/setDataTable(tableBuilder:DataTableBuilder):Charts.BarChartBuilder;\\n/**Sets the data table which contains the lines for the chart, as well as the X-axis labels. The\\nfirst column should be a string, and contain the horizontal axis labels. Any number of columns\\ncan follow, all must be numeric. Each column is displayed as a separate line.\\n@param table The data table to use for the chart.\\n@return This builder, useful for chaining.*/setDataTable(table:DataTableSource):Charts.BarChartBuilder;\\n/**Sets the data view definition to use for the chart.\\n@param dataViewDefinition A data view definition object that defines the view that should be\\n    derived from the given data source for the chart drawing.\\n@return This builder, useful for chaining.*/setDataViewDefinition(dataViewDefinition:Charts.DataViewDefinition):Charts.BarChartBuilder;\\n/**Sets the dimensions for the chart.\\n@param width The width of the chart, in pixels.\\n@param height The height of the chart, in pixels.\\n@return This builder, useful for chaining.*/setDimensions(width:Integer,height:Integer):Charts.BarChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):Charts.BarChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):Charts.BarChartBuilder;\\n/**Sets advanced options for this chart. See [the available options for\\nthis chart](/chart/interactive/docs/gallery/barchart). This method has no effect if the given option is invalid.\\n\\n```\\n// Build a bar chart with a 1-second animation duration.\\nvar builder \\u003d Charts.newBarChart();\\nbuilder.setOption('animation.duration', 1000);\\nvar chart \\u003d builder.build();\\n```\\n@param option The option to set.\\n@param value The value to set.\\n@return This builder, useful for chaining.*/setOption(option:string,value:Object):Charts.BarChartBuilder;\\n/**Sets the range for the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n@param start The value for the lowest grid line of the range axis.\\n@param end The value for the highest grid line of the range axis.\\n@return This builder, useful for chaining.*/setRange(start:number,end:number):Charts.BarChartBuilder;\\n/**Uses stacked lines, meaning that line and bar values are stacked (accumulated). By default,\\nthere is no stacking.\\n@return This builder, useful for chaining.*/setStacked():Charts.BarChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):Charts.BarChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):Charts.BarChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):Charts.BarChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):Charts.BarChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):Charts.BarChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):Charts.BarChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):Charts.BarChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):Charts.BarChartBuilder;\\n/**Makes the range axis into a logarithmic scale (requires all values to be positive). The range\\naxis are the vertical axis for vertical charts (such as line, area, or column) and the\\nhorizontal axis for horizontal charts (such as bar).\\n@return This builder, useful for chaining.*/useLogScale():Charts.BarChartBuilder;}interface AreaChartBuilder{\\n/**Builds the chart.\\n@return A Chart object, which can be embedded into documents, UI elements, or used as a static\\n    image.*/build():Charts.Chart;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():Charts.AreaChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):Charts.AreaChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):Charts.AreaChartBuilder;\\n/**Sets the data source URL that is used to pull data in from an external source, such as Google\\nSheets. If a data source URL and a DataTable are provided, the data source URL is ignored.\\n\\nFor more information about querying data sources, check out the [Google Charts documentation](/chart/interactive/docs/queries).\\n@param url The data source URL, including any query parameters.\\n@return This builder, useful for chaining.*/setDataSourceUrl(url:string):Charts.AreaChartBuilder;\\n/**Sets the data table to use for the chart using a DataTableBuilder. This is a convenience method\\nfor setting the data table without needing to call `build()`.\\n@param tableBuilder A data table builder. A new data table is created instantly as part of this\\n    call, so any further updates to the builder won't be reflected in the chart.\\n@return This builder, useful for chaining.*/setDataTable(tableBuilder:DataTableBuilder):Charts.AreaChartBuilder;\\n/**Sets the data table which contains the lines for the chart, as well as the X-axis labels. The\\nfirst column should be a string, and contain the horizontal axis labels. Any number of columns\\ncan follow, all must be numeric. Each column is displayed as a separate line.\\n@param table The data table to use for the chart.\\n@return This builder, useful for chaining.*/setDataTable(table:DataTableSource):Charts.AreaChartBuilder;\\n/**Sets the data view definition to use for the chart.\\n@param dataViewDefinition A data view definition object that defines the view that should be\\n    derived from the given data source for the chart drawing.\\n@return This builder, useful for chaining.*/setDataViewDefinition(dataViewDefinition:Charts.DataViewDefinition):Charts.AreaChartBuilder;\\n/**Sets the dimensions for the chart.\\n@param width The width of the chart, in pixels.\\n@param height The height of the chart, in pixels.\\n@return This builder, useful for chaining.*/setDimensions(width:Integer,height:Integer):Charts.AreaChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):Charts.AreaChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):Charts.AreaChartBuilder;\\n/**Sets advanced options for this chart. See [the available options for\\nthis chart](/chart/interactive/docs/gallery/areachart). This method has no effect if the given option is invalid.\\n\\n```\\n// Build an area chart with a 1-second animation duration.\\nvar builder \\u003d Charts.newAreaChart();\\nbuilder.setOption('animation.duration', 1000);\\nvar chart \\u003d builder.build();\\n```\\n@param option The option to set.\\n@param value The value to set.\\n@return This builder, useful for chaining.*/setOption(option:string,value:Object):Charts.AreaChartBuilder;\\n/**Sets the style for points in the line. By default, points have no particular styles, and only\\nthe line is visible.\\n\\n```\\n// Creates a line chart builder and sets large point style.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setPointStyle(Charts.PointStyle.LARGE);\\n```\\n@param style The style to use for points in the line.\\n@return This builder, useful for chaining.*/setPointStyle(style:Charts.PointStyle):Charts.AreaChartBuilder;\\n/**Sets the range for the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n@param start The value for the lowest grid line of the range axis.\\n@param end The value for the highest grid line of the range axis.\\n@return This builder, useful for chaining.*/setRange(start:number,end:number):Charts.AreaChartBuilder;\\n/**Uses stacked lines, meaning that line and bar values are stacked (accumulated). By default,\\nthere is no stacking.\\n@return This builder, useful for chaining.*/setStacked():Charts.AreaChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):Charts.AreaChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):Charts.AreaChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):Charts.AreaChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):Charts.AreaChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):Charts.AreaChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):Charts.AreaChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):Charts.AreaChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):Charts.AreaChartBuilder;\\n/**Makes the range axis into a logarithmic scale (requires all values to be positive). The range\\naxis are the vertical axis for vertical charts (such as line, area, or column) and the\\nhorizontal axis for horizontal charts (such as bar).\\n@return This builder, useful for chaining.*/useLogScale():Charts.AreaChartBuilder;}}const Charts:Charts;\"],[\"content-service.d.ts\",\"interface ContentService{MimeType:ContentService._MimeType;\\n/**Create a new [`TextOutput`](https://developers.google.com/apps-script/reference/content/text-output.html) object.\\n\\n```\\nfunction doGet() {\\n  var output \\u003d ContentService.createTextOutput();\\n  output.append(\\\"Hello world!\\\");\\n  return output;\\n}\\n```\\n@return the new TextOutput object.*/createTextOutput():ContentService.TextOutput;\\n/**Create a new [`TextOutput`](https://developers.google.com/apps-script/reference/content/text-output.html) object that can serve the given content.\\n\\n```\\nfunction doGet() {\\n  var output \\u003d ContentService.createTextOutput(\\\"Hello world!\\\");\\n  return output;\\n}\\n```\\n@param content the content to serve.\\n@return the new TextOutput object.*/createTextOutput(content:string):ContentService.TextOutput;}module ContentService{interface TextOutput{\\n/**Appends new content to the content that will be served.\\n@param addedContent the content to append\\n@return this TextOutput itself, useful for chaining*/append(addedContent:string):ContentService.TextOutput;\\n/**Clears the current content.\\n@return this TextOutput itself, useful for chaining*/clear():ContentService.TextOutput;\\n/**Tells browsers to download rather than display this content.\\n\\nSome browsers will ignore this setting. Setting this to null will clear it back to the\\ndefault behavior of displaying rather than downloading.\\n@param filename the filename to tell the browser to use\\n@return the TextOutput object, useful for chaining*/downloadAsFile(filename:string):ContentService.TextOutput;\\n/**Gets the content that will be served.\\n@return the content that will be served*/getContent():string;\\n/**Returns the file name to download this file as, or null if it should be displayed rather than\\ndownloaded.\\n@return the file name*/getFileName():string;\\n/**Get the mime type this content will be served with.\\n@return the mime type this will be served with*/getMimeType():ContentService.MimeType;\\n/**Sets the content that will be served.\\n@param content the content to serve\\n@return this TextOutput itself, useful for chaining*/setContent(content:string):ContentService.TextOutput;\\n/**Sets the mime type for content that will be served. The default is plain text.\\n@param mimeType the mime type\\n@return this TextOutput itself, useful for chaining*/setMimeType(mimeType:ContentService.MimeType):ContentService.TextOutput;}interface MimeType{}interface _MimeType{\\n/**CSV Mime Type*/CSV:MimeType;\\n/**ICAL Mime Type*/ICAL:MimeType;\\n/**JAVASCRIPT Mime Type*/JAVASCRIPT:MimeType;\\n/**JSON Mime Type*/JSON:MimeType;\\n/**TEXT Mime Type*/TEXT:MimeType;\\n/**VCARD Mime Type*/VCARD:MimeType;}}const ContentService:ContentService;\"],[\"document-app.d.ts\",\"interface DocumentApp{\\n/**The [`Attribute`](https://developers.google.com/apps-script/reference/document/attribute.html) enumeration.*/Attribute:DocumentApp._Attribute;\\n/**The [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) enumeration.*/ElementType:DocumentApp._ElementType;\\n/**The ~~[`FontFamily`](https://developers.google.com/apps-script/reference/document/font-family.html)~~ enumeration.*/FontFamily:DocumentApp._FontFamily;\\n/**The [`GlyphType`](https://developers.google.com/apps-script/reference/document/glyph-type.html) enumeration.*/GlyphType:DocumentApp._GlyphType;\\n/**The [`HorizontalAlignment`](https://developers.google.com/apps-script/reference/document/horizontal-alignment.html) enumeration.*/HorizontalAlignment:DocumentApp._HorizontalAlignment;\\n/**The [`ParagraphHeading`](https://developers.google.com/apps-script/reference/document/paragraph-heading.html) enumeration.*/ParagraphHeading:DocumentApp._ParagraphHeading;\\n/**The [`PositionedLayout`](https://developers.google.com/apps-script/reference/document/positioned-layout.html) enumeration.*/PositionedLayout:DocumentApp._PositionedLayout;\\n/**The [`TextAlignment`](https://developers.google.com/apps-script/reference/document/text-alignment.html) enumeration.*/TextAlignment:DocumentApp._TextAlignment;\\n/**The [`VerticalAlignment`](https://developers.google.com/apps-script/reference/document/vertical-alignment.html) enumeration.*/VerticalAlignment:DocumentApp._VerticalAlignment;\\n/**The [`TabType`](https://developers.google.com/apps-script/reference/document/tab-type.html) enumeration.*/TabType:DocumentApp._TabType;\\n/**Creates and returns a new document.\\n\\n```\\n// Create and open a new document.\\nvar doc \\u003d DocumentApp.create('Document Name');\\n```\\n@param name The new document's name.\\n@return The new document instance.*/create(name:string):DocumentApp.Document;\\n/**Returns the document to which the script is [container-bound](/apps-script/scripts_containers). To interact with document to which\\nthe script is not container-bound, use [`openById(id)`](https://developers.google.com/apps-script/reference/document/document-app.html#openById(String)) or [`openByUrl(url)`](https://developers.google.com/apps-script/reference/document/document-app.html#openByUrl(String))\\ninstead.\\n\\n```\\n// Get the document to which this script is bound.\\nvar doc \\u003d DocumentApp.getActiveDocument();\\n```\\n@return the document instance*/getActiveDocument():DocumentApp.Document;\\n/**Returns an instance of the document's user-interface environment that allows the script to add\\nfeatures like menus, dialogs, and sidebars. A script can only interact with the UI for the\\ncurrent instance of an open document, and only if the script is [bound](/apps-script/scripts_containers) to the document. For more information, see the\\nguides to [menus](/apps-script/guides/menus) and [dialogs and sidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Add a custom menu to the active document, including a separator and a sub-menu.\\nfunction onOpen(e) {\\n  DocumentApp.getUi()\\n      .createMenu('My Menu')\\n      .addItem('My menu item', 'myFunction')\\n      .addSeparator()\\n      .addSubMenu(DocumentApp.getUi().createMenu('My sub-menu')\\n          .addItem('One sub-menu item', 'mySecondFunction')\\n          .addItem('Another sub-menu item', 'myThirdFunction'))\\n      .addToUi();\\n}\\n```\\n@return an instance of this document's user-interface environment*/getUi():Ui;\\n/**Returns the document with the specified ID. If the script is container-bound to the document,\\nuse [`getActiveDocument()`](https://developers.google.com/apps-script/reference/document/document-app.html#getActiveDocument()) instead.\\n\\n```\\n// Open a document by ID.\\n// TODO(developer): Replace the ID with your own.\\nvar doc \\u003d DocumentApp.openById('DOCUMENT_ID');\\n```\\n@param id The ID of the document to open.\\n@return The document instance.*/openById(id:string):DocumentApp.Document;\\n/**Opens and returns the document with the specified URL. If the script is container-bound to the\\ndocument, use [`getActiveDocument()`](https://developers.google.com/apps-script/reference/document/document-app.html#getActiveDocument()) instead.\\n\\n```\\n// Open a document by URL.\\nvar doc \\u003d DocumentApp.openByUrl(\\n    'https://docs.google.com/document/d/1234567890abcdefghijklmnopqrstuvwxyz_a1b2c3/edit');\\n```\\n@param url the URL of the document to open\\n@return the document instance*/openByUrl(url:string):DocumentApp.Document;}module DocumentApp{interface VerticalAlignment{}interface _VerticalAlignment{\\n/**The bottom-alignment option.*/BOTTOM:VerticalAlignment;\\n/**The center-alignment option.*/CENTER:VerticalAlignment;\\n/**The top-alignment option.*/TOP:VerticalAlignment;}interface UnsupportedElement{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.UnsupportedElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.UnsupportedElement;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.UnsupportedElement;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.UnsupportedElement;}interface TextAlignment{}interface _TextAlignment{\\n/**The normal text alignment.*/NORMAL:TextAlignment;\\n/**The subscript text alignment.*/SUBSCRIPT:TextAlignment;\\n/**The superscript text alignment.*/SUPERSCRIPT:TextAlignment;}interface Text{\\n/**Adds the specified text to the end of this text region.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Adds the text, 'Sample body text,' to the end of the tab body.\\nconst text \\u003d body.editAsText().appendText('Sample body text');\\n```\\n@param text The text to append.\\n@return The current element.*/appendText(text:string):DocumentApp.Text;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.Text;\\n/**Deletes a range of text.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Deletes the first 10 characters in the body.\\n const text \\u003d body.editAsText().deleteText(0, 9);\\n```\\n@param startOffset The character offset of the first character to delete.\\n@param endOffsetInclusive The character offset of the last character to delete.\\n@return The current element.*/deleteText(startOffset:Integer,endOffsetInclusive:Integer):DocumentApp.Text;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the attributes at the specified character offset.\\n\\nThe result is an object containing a property for each valid text attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Declares style attributes.\\nconst style \\u003d {}\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\nstyle[DocumentApp.Attribute.ITALIC] \\u003d true;\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 29;\\n\\n// Sets the style attributes to the tab's body.\\nconst text \\u003d body.editAsText();\\ntext.setAttributes(style);\\n\\n// Gets the style attributes applied to the eleventh character in the\\n// body and logs them to the console.\\nconst attributes \\u003d text.getAttributes(10);\\nconsole.log(attributes);\\n```\\n@param offset The character offset.\\n@return The element's attributes.*/getAttributes(offset:Integer):Object;\\n/**Retrieves the background color setting.\\n@return the background color, formatted in CSS notation (like `'#ffffff'`), or null\\n    if the element contains multiple values for this attribute*/getBackgroundColor():string;\\n/**Retrieves the background color at the specified character offset.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the background color of the first 3 characters in the body.\\nconst text \\u003d body.editAsText().setBackgroundColor(0, 2, '#FFC0CB');\\n\\n// Gets the background color of the first character in the body.\\nconst backgroundColor \\u003d text.getBackgroundColor(0);\\n\\n// Logs the background color to the console.\\nconsole.log(backgroundColor);\\n```\\n@param offset The character offset.\\n@return The background color, formatted in CSS notation (like `'#ffffff'`).*/getBackgroundColor(offset:Integer):string;\\n/**Retrieves the font family setting. The name can be any font from the Font menu in Docs or [Google Fonts](https://www.google.com/fonts), and is case-sensitive. The methods `getFontFamily()` and [`setFontFamily(fontFamilyName)`](https://developers.google.com/apps-script/reference/document/text.html#setFontFamily(String)) now use string names for fonts instead of\\nthe ~~[`FontFamily`](https://developers.google.com/apps-script/reference/document/font-family.html)~~ enum. Although this enum is\\ndeprecated, it will remain available for compatibility with older scripts.\\n@return the font family, or null if the element contains multiple values for this attribute*/getFontFamily():string;\\n/**Retrieves the font family at the specified character offset. The name can be any font from the\\nFont menu in Docs or [Google Fonts](https://www.google.com/fonts), and is\\ncase-sensitive. The methods `getFontFamily()` and `setFontFamily(fontFamilyName)`\\nnow use string names for fonts instead of the ~~[`FontFamily`](https://developers.google.com/apps-script/reference/document/font-family.html)~~ enum. Although this enum is\\ndeprecated, it will remain available for compatibility with older scripts.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the font of the first 16 characters to Impact.\\nconst text \\u003d body.editAsText().setFontFamily(0, 15, 'Impact');\\n\\n// Gets the font family of the 16th character in the tab body.\\nconst fontFamily \\u003d text.getFontFamily(15);\\n\\n// Logs the font family to the console.\\nconsole.log(fontFamily);\\n```\\n@param offset The character offset.\\n@return The font family.*/getFontFamily(offset:Integer):string;\\n/**Retrieves the font size setting.\\n@return the font size, or null if the element contains multiple values for this attribute*/getFontSize():number;\\n/**Retrieves the font size at the specified character offset.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the font size of the first 13 characters to 15.\\nconst text \\u003d body.editAsText().setFontSize(0, 12, 15);\\n\\n// Gets the font size of the first character.\\nconst fontSize \\u003d text.getFontSize(0);\\n\\n// Logs the font size to the console.\\nconsole.log(fontSize);\\n```\\n@param offset The character offset.\\n@return The font size.*/getFontSize(offset:Integer):number;\\n/**Retrieves the foreground color setting.\\n@return the foreground color, formatted in CSS notation (like `'#ffffff'`), or null\\n    if the element contains multiple values for this attribute*/getForegroundColor():string;\\n/**Retrieves the foreground color at the specified character offset.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the foreground color of the first 3 characters in the tab body.\\nconst text \\u003d body.editAsText().setForegroundColor(0, 2, '#0000FF');\\n\\n// Gets the foreground color of the first character in the tab body.\\nconst foregroundColor \\u003d text.getForegroundColor(0);\\n\\n// Logs the foreground color to the console.\\nconsole.log(foregroundcolor);\\n```\\n@param offset The character offset.\\n@return The foreground color, formatted in CSS notation (like `'#ffffff'`).*/getForegroundColor(offset:Integer):string;\\n/**Retrieves the link url.\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the link URL at the specified character offset.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Applies a link to the first 10 characters in the body.\\nconst text \\u003d body.editAsText().setLinkUrl(0, 9, 'https://www.example.com/');\\n\\n// Gets the URL of the link from the first character.\\nconst link \\u003d text.getLinkUrl(0);\\n\\n// Logs the link URL to the console.\\nconsole.log(link);\\n```\\n@param offset The character offset.\\n@return The link URL.*/getLinkUrl(offset:Integer):string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Gets the text alignment for a single character. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the text alignment of the tab's body to NORMAL.\\nconst text \\u003d body.editAsText().setTextAlignment(DocumentApp.TextAlignment.NORMAL);\\n\\n// Gets the text alignment of the ninth character.\\nconst alignment \\u003d text.getTextAlignment(8);\\n\\n// Logs the text alignment to the console.\\nconsole.log(alignment.toString());\\n```\\n@param offset The offset of the character.\\n@return The type of text alignment, or `null` if the text alignment has never been set.*/getTextAlignment(offset:Integer):DocumentApp.TextAlignment;\\n/**Retrieves the set of text indices that correspond to the start of distinct text formatting\\nruns.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the text indices at which text formatting changes.\\nconst indices \\u003d body.editAsText().getTextAttributeIndices();\\n\\n// Logs the indices to the console.\\nconsole.log(indices.toString());\\n```\\n@return The set of text indices at which text formatting changes.*/getTextAttributeIndices():Integer[];\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Inserts the specified text at the given character offset.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Inserts the text, 'Sample inserted text', at the start of the body content.\\nconst text \\u003d body.editAsText().insertText(0, 'Sample inserted text');\\n```\\n@param offset The character offset at which to insert the text.\\n@param text The text to insert.\\n@return The current element.*/insertText(offset:Integer,text:string):DocumentApp.Text;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Retrieves the bold setting.\\n@return whether the text is bold, or null if the element contains multiple values for this\\n    attribute*/isBold():boolean;\\n/**Retrieves the bold setting at the specified character offset.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Bolds the first 4 characters in the tab body.\\nconst text \\u003d body.editAsText().setBold(0, 3, true);\\n\\n// Gets whether or not the text is bold.\\nconst bold \\u003d text.editAsText().isBold(0);\\n\\n// Logs the text's bold setting to the console\\nconsole.log(bold);\\n```\\n@param offset The character offset.\\n@return The bold setting.*/isBold(offset:Integer):boolean;\\n/**Retrieves the italic setting.\\n@return whether the text is italic, or null if the element contains multiple values for this\\n    attribute*/isItalic():boolean;\\n/**Retrieves the italic setting at the specified character offset.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the first 13 characters of the tab body to italic.\\nconst text \\u003d body.editAsText().setItalic(0, 12, true);\\n\\n// Gets whether the fifth character in the tab body is set to\\n// italic and logs it to the console.\\nconst italic \\u003d text.isItalic(4);\\nconsole.log(italic);\\n```\\n@param offset The character offset.\\n@return The italic setting.*/isItalic(offset:Integer):boolean;\\n/**Retrieves the strikethrough setting.\\n@return whether the text is strikethrough, or null if the element contains multiple values for\\n    this attribute*/isStrikethrough():boolean;\\n/**Retrieves the strikethrough setting at the specified character offset.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the first 17 characters of the tab body to strikethrough.\\nconst text \\u003d body.editAsText().setStrikethrough(0, 16, true);\\n\\n// Gets whether the first character in the tab body is set to\\n// strikethrough and logs it to the console.\\nconst strikethrough \\u003d text.isStrikethrough(0);\\nconsole.log(strikethrough);\\n```\\n@param offset The character offset.\\n@return The strikethrough setting.*/isStrikethrough(offset:Integer):boolean;\\n/**Retrieves the underline setting.\\n@return whether the text is underlined, or null if the element contains multiple values for\\n    this attribute*/isUnderline():boolean;\\n/**Retrieves the underline setting at the specified character offset.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the first 13 characters of the tab body to underline.\\nconst text \\u003d body.editAsText().setUnderline(0, 12, false);\\n\\n// Gets whether the first character in the tab body is set to\\n// underline and logs it to the console\\nconst underline \\u003d text.editAsText().isUnderline(0);\\nconsole.log(underline);\\n```\\n@param offset The character offset.\\n@return The underline setting.*/isUnderline(offset:Integer):boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.Text;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.Text;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Applies the specified attributes to the given character range.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Declares style attributes for font size and font family.\\nconst style \\u003d {}\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 20 ;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Impact';\\n\\n// Sets the style attributes to the first 9 characters in the tab's body.\\nconst text \\u003d body.setAttributes(0, 8, style);\\n```\\n@param startOffset The text range's start offset.\\n@param endOffsetInclusive The text range's end offset.\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(startOffset:Integer,endOffsetInclusive:Integer,attributes:Object):DocumentApp.Text;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.Text;\\n/**Sets the background color for the specified character range.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the background color of the first 3 characters in the\\n// tab body to hex color #0000FF.\\nconst text \\u003d body.editAsText().setBackgroundColor(0, 2, '#0000FF');\\n```\\n@param startOffset The text range's start offset.\\n@param endOffsetInclusive The text range's end offset.\\n@param color The background color, formatted in CSS notation (like `'#ffffff'`).\\n@return The current element.*/setBackgroundColor(startOffset:Integer,endOffsetInclusive:Integer,color:string):DocumentApp.Text;\\n/**Sets the background color.\\n@param color the background color, formatted in CSS notation (like `'#ffffff'`)\\n@return the current element*/setBackgroundColor(color:string):DocumentApp.Text;\\n/**Sets the bold setting.\\n@param bold the bold setting\\n@return the current element*/setBold(bold:boolean):DocumentApp.Text;\\n/**Sets the bold setting for the specified character range.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the first 11 characters in the tab's body to bold.\\nconst text \\u003d body.editAsText().setBold(0, 10, true);\\n```\\n@param startOffset The text range's start offset.\\n@param endOffsetInclusive The text range's end offset.\\n@param bold The bold setting.\\n@return The current element.*/setBold(startOffset:Integer,endOffsetInclusive:Integer,bold:boolean):DocumentApp.Text;\\n/**Sets the font family for the specified character range. The name can be any font from the Font\\nmenu in Docs or [Google Fonts](https://www.google.com/fonts), and is case-sensitive.\\nUnrecognized font names will render as Arial. The methods [`getFontFamily(offset)`](https://developers.google.com/apps-script/reference/document/text.html#getFontFamily(Integer)) and\\n`setFontFamily(fontFamilyName)` now use string names for fonts instead of the ~~[`FontFamily`](https://developers.google.com/apps-script/reference/document/font-family.html)~~ enum. Although this enum is\\ndeprecated, it will remain available for compatibility with older scripts.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the font of the first 4 characters in the tab's body to Roboto.\\nconst text \\u003d body.editAsText().setFontFamily(0, 3, 'Roboto');\\n```\\n@param startOffset The text range's start offset.\\n@param endOffsetInclusive The text range's end offset.\\n@param fontFamilyName The name of the font family, from the Font menu in Docs or Google Fonts.\\n@return The current element.*/setFontFamily(startOffset:Integer,endOffsetInclusive:Integer,fontFamilyName:string):DocumentApp.Text;\\n/**Sets the font family. The name can be any font from the Font menu in Docs or [Google Fonts](https://www.google.com/fonts), and is case-sensitive. Unrecognized font\\nnames will render as Arial. The methods [`getFontFamily()`](https://developers.google.com/apps-script/reference/document/text.html#getFontFamily()) and `setFontFamily(fontFamilyName)` now use string names for fonts instead of the ~~[`FontFamily`](https://developers.google.com/apps-script/reference/document/font-family.html)~~ enum. Although this enum is\\ndeprecated, it will remain available for compatibility with older scripts.\\n@param fontFamilyName the name of the font family, from the Font menu in Docs or Google Fonts\\n@return the current element*/setFontFamily(fontFamilyName:string):DocumentApp.Text;\\n/**Sets the font size for the specified character range.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the size of the first 11 characters in the tab's body to 12.\\nconst text \\u003d body.editAsText().setFontSize(0, 10, 12);\\n```\\n@param startOffset The text range's start offset.\\n@param endOffsetInclusive The text range's end offset.\\n@param size The font size.\\n@return The current element.*/setFontSize(startOffset:Integer,endOffsetInclusive:Integer,size:number):DocumentApp.Text;\\n/**Sets the font size.\\n@param size the font size\\n@return the current element*/setFontSize(size:number):DocumentApp.Text;\\n/**Sets the foreground color for the specified character range.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the foreground color of the first 2 characters in the\\n// tab's body to hex color #FF0000.\\nconst text \\u003d body.editAsText().setForegroundColor(0, 1, '#FF0000');\\n\\n// Gets the foreground color for the second character in the tab's body.\\nconst foregroundColor \\u003d text.getForegroundColor(1);\\n\\n//  Logs the foreground color to the console.\\nconsole.log(foregroundColor);\\n```\\n@param startOffset The text range's start offset.\\n@param endOffsetInclusive The text range's end offset.\\n@param color The foreground color, formatted in CSS notation (like `'#ffffff'`).\\n@return The current element.*/setForegroundColor(startOffset:Integer,endOffsetInclusive:Integer,color:string):DocumentApp.Text;\\n/**Sets the foreground color.\\n@param color the foreground color, formatted in CSS notation (like `'#ffffff'`)\\n@return the current element*/setForegroundColor(color:string):DocumentApp.Text;\\n/**Sets the italic setting.\\n@param italic the italic setting\\n@return the current element*/setItalic(italic:boolean):DocumentApp.Text;\\n/**Sets the italic setting for the specified character range.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the first 11 characters in the tab's body to italic.\\nconst text \\u003d body.editAsText().setItalic(0, 10, true);\\n```\\n@param startOffset The text range's start offset.\\n@param endOffsetInclusive The text range's end offset.\\n@param italic The italic setting.\\n@return The current element.*/setItalic(startOffset:Integer,endOffsetInclusive:Integer,italic:boolean):DocumentApp.Text;\\n/**Sets the link URL for the specified character range.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Applies a link to the first 11 characters in the body.\\nconst text \\u003d body.editAsText().setLinkUrl(0, 10, 'https://example.com');\\n```\\n@param startOffset The text range's start offset.\\n@param endOffsetInclusive The text range's end offset.\\n@param url The link URL.\\n@return The current element.*/setLinkUrl(startOffset:Integer,endOffsetInclusive:Integer,url:string):DocumentApp.Text;\\n/**Sets the link url.\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.Text;\\n/**Sets the strikethrough setting.\\n@param strikethrough the strikethrough setting\\n@return the current element*/setStrikethrough(strikethrough:boolean):DocumentApp.Text;\\n/**Sets the strikethrough setting for the specified character range.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the first 11 characters in the tab's body to strikethrough.\\nconst text \\u003d body.editAsText().setStrikethrough(0, 10, true);\\n```\\n@param startOffset The text range's start offset.\\n@param endOffsetInclusive The text range's end offset.\\n@param strikethrough The strikethrough setting.\\n@return The current element.*/setStrikethrough(startOffset:Integer,endOffsetInclusive:Integer,strikethrough:boolean):DocumentApp.Text;\\n/**Sets the text contents.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Replaces the contents of the body with the text, 'New body text.'\\nconst text \\u003d body.editAsText().setText('New body text.');\\n```\\n@param text The new text contents.\\n@return The current element.*/setText(text:string):DocumentApp.Text;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.Text;\\n/**Sets the text alignment for a given character range. The available types of alignment are\\n`DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and\\n`DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the first character in the first paragraph of the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(0, 0, DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param startOffset The start offset of the character range.\\n@param endOffsetInclusive The end offset of the character range (inclusive).\\n@param textAlignment The type of text alignment to apply.\\n@return The current element.*/setTextAlignment(startOffset:Integer,endOffsetInclusive:Integer,textAlignment:DocumentApp.TextAlignment):DocumentApp.Text;\\n/**Sets the underline setting.\\n@param underline the underline setting\\n@return the current element*/setUnderline(underline:boolean):DocumentApp.Text;\\n/**Sets the underline setting for the specified character range.\\n\\n```\\n// Opens the Docs file by its URL. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst doc \\u003d DocumentApp.openByUrl('https://docs.google.com/document/d/DOCUMENT_ID/edit');\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Sets the first 11 characters in the tab's body to underline.\\nconst text \\u003d body.editAsText().setUnderline(0, 10, true);\\n```\\n@param startOffset The text range's start offset.\\n@param endOffsetInclusive The text range's end offset.\\n@param underline The underline setting.\\n@return The current element.*/setUnderline(startOffset:Integer,endOffsetInclusive:Integer,underline:boolean):DocumentApp.Text;}interface TableRow{\\n/**Creates and appends a new [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\n@return the new table cell*/appendTableCell():DocumentApp.TableCell;\\n/**Appends the given [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\n@param tableCell the table cell to append\\n@return the appended table cell*/appendTableCell(tableCell:DocumentApp.TableCell):DocumentApp.TableCell;\\n/**Appends the given [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) containing the specified text.\\n@param textContents the cell's text contents\\n@return the appended table cell element*/appendTableCell(textContents:string):DocumentApp.TableCell;\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.TableRow;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.TableRow;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) at the specified cell index.\\n@param cellIndex the index of the cell to retrieve\\n@return the table cell*/getCell(cellIndex:Integer):DocumentApp.TableCell;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves the link url.\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the minimum height, in points.\\n@return the minimum height, in points*/getMinimumHeight():number;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of cells in the row.\\n@return the number of cells*/getNumCells():Integer;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the [`Table`](https://developers.google.com/apps-script/reference/document/table.html) containing the current row.\\n@return the table containing the current row*/getParentTable():DocumentApp.Table;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Creates and inserts a new [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@return the new table cell*/insertTableCell(childIndex:Integer):DocumentApp.TableCell;\\n/**Inserts the given [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@param tableCell the table cell to insert\\n@return the inserted table cell*/insertTableCell(childIndex:Integer,tableCell:DocumentApp.TableCell):DocumentApp.TableCell;\\n/**Inserts the given [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) at the specified index, containing the given text.\\n@param childIndex the index at which to insert the element\\n@param textContents the cell's text contents\\n@return the inserted table cell*/insertTableCell(childIndex:Integer,textContents:string):DocumentApp.TableCell;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.TableRow;\\n/**Removes the [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) at the specified cell index.\\n@param cellIndex the index of the cell to remove\\n@return the removed cell*/removeCell(cellIndex:Integer):DocumentApp.TableCell;\\n/**Removes the specified child element.\\n@param child the child element to remove\\n@return the current element*/removeChild(child:DocumentApp.Element):DocumentApp.TableRow;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.TableRow;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.TableRow;\\n/**Sets the link url.\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.TableRow;\\n/**Sets the minimum height, in points.\\n@param minHeight the minimum height, in points\\n@return the current element*/setMinimumHeight(minHeight:number):DocumentApp.TableRow;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.TableRow;}interface TableOfContents{\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.TableOfContents;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.TableOfContents;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves the link url.\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.TableOfContents;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.TableOfContents;\\n/**Sets the link url.\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.TableOfContents;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.TableOfContents;}interface TableCell{\\n/**Creates and appends a new [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html).\\n\\nThe [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@return the new horizontal rule*/appendHorizontalRule():DocumentApp.HorizontalRule;\\n/**Creates and appends a new [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob.\\n\\nThe [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param image the image data\\n@return the new image*/appendImage(image:BlobSource):DocumentApp.InlineImage;\\n/**Appends the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html).\\n\\nThe [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param image the image data\\n@return the appended image*/appendImage(image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Appends the given [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html).\\n@param listItem the list item to append\\n@return the appended list item*/appendListItem(listItem:DocumentApp.ListItem):DocumentApp.ListItem;\\n/**Creates and appends a new [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html).\\n@param text the text contents\\n@return the new list item*/appendListItem(text:string):DocumentApp.ListItem;\\n/**Appends the given [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param paragraph the paragraph to append\\n@return the appended paragraph*/appendParagraph(paragraph:DocumentApp.Paragraph):DocumentApp.Paragraph;\\n/**Creates and appends a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param text the text contents\\n@return the new paragraph*/appendParagraph(text:string):DocumentApp.Paragraph;\\n/**Creates and appends a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\n@return the new table*/appendTable():DocumentApp.Table;\\n/**Appends the given [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\n@param table the table to append\\n@return the appended table*/appendTable(table:DocumentApp.Table):DocumentApp.Table;\\n/**Appends a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) containing the specified cells.\\n@param cells the text contents of the table cells to add to the new table\\n@return the appended table*/appendTable(cells:string[][]):DocumentApp.Table;\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.TableCell;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.TableCell;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the background color.\\n@return the background color, formatted in CSS notation (like `'#ffffff'`)*/getBackgroundColor():string;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves the column span, which is the number of columns of table cells this cell spans.\\nNon-merged cells have a col span of 1.\\n@return the column span or 0 for a cell which is merged over by another cell*/getColSpan():Integer;\\n/**Retrieves the link url.\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves the bottom padding, in points.\\n@return the bottom padding, in points*/getPaddingBottom():number;\\n/**Retrieves the left padding, in points.\\n@return the left padding, in points*/getPaddingLeft():number;\\n/**Retrieves the right padding, in points.\\n@return the right padding, in points*/getPaddingRight():number;\\n/**Retrieves the top padding, in points.\\n@return the top padding, in points*/getPaddingTop():number;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the [`TableRow`](https://developers.google.com/apps-script/reference/document/table-row.html) containing the current [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\n@return the table row containing the current cell*/getParentRow():DocumentApp.TableRow;\\n/**Retrieves the [`Table`](https://developers.google.com/apps-script/reference/document/table.html) containing the current [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\n@return the table containing the current cell*/getParentTable():DocumentApp.Table;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the row span, which is the number of rows of table cells this cell spans. Non-merged\\ncells have a row span of 1.\\n@return the row span or 0 for a cell which is merged over by another cell*/getRowSpan():Integer;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Retrieves the [`VerticalAlignment`](https://developers.google.com/apps-script/reference/document/vertical-alignment.html).\\n@return the vertical alignment*/getVerticalAlignment():DocumentApp.VerticalAlignment;\\n/**Retrieves the width of the column containing the cell, in points.\\n@return the column width, in points*/getWidth():number;\\n/**Creates and inserts a new [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) at the specified index.\\n\\nThe horizontal rule will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex the index at which to insert the element\\n@return the new horizontal rule*/insertHorizontalRule(childIndex:Integer):DocumentApp.HorizontalRule;\\n/**Creates and inserts an [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob, at the specified\\nindex.\\n\\nThe image will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex the index at which to insert the element\\n@param image the image data\\n@return the inserted inline image*/insertImage(childIndex:Integer,image:BlobSource):DocumentApp.InlineImage;\\n/**Inserts the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) at the specified index.\\n\\nThe image will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex the index at which to insert the element\\n@param image the image to insert\\n@return the inserted inline image*/insertImage(childIndex:Integer,image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Inserts the given [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@param listItem the list item to insert\\n@return inserted new list item*/insertListItem(childIndex:Integer,listItem:DocumentApp.ListItem):DocumentApp.ListItem;\\n/**Creates and inserts a new [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@param text the text contents\\n@return the new list item*/insertListItem(childIndex:Integer,text:string):DocumentApp.ListItem;\\n/**Inserts the given [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@param paragraph the paragraph to insert\\n@return the inserted paragraph*/insertParagraph(childIndex:Integer,paragraph:DocumentApp.Paragraph):DocumentApp.Paragraph;\\n/**Creates and inserts a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@param text the text contents\\n@return the new paragraph*/insertParagraph(childIndex:Integer,text:string):DocumentApp.Paragraph;\\n/**Creates and inserts a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@return the new table*/insertTable(childIndex:Integer):DocumentApp.Table;\\n/**Inserts the given [`Table`](https://developers.google.com/apps-script/reference/document/table.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@param table the table to insert\\n@return the inserted table*/insertTable(childIndex:Integer,table:DocumentApp.Table):DocumentApp.Table;\\n/**Creates and inserts a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) containing the specified cells, at the specified index.\\n@param childIndex the index at which to insert\\n@param cells the text contents of the table cells to add to the new table\\n@return the new table*/insertTable(childIndex:Integer,cells:string[][]):DocumentApp.Table;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.TableCell;\\n/**Removes the specified child element.\\n@param child the child element to remove\\n@return the current element*/removeChild(child:DocumentApp.Element):DocumentApp.TableCell;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.TableCell;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.TableCell;\\n/**Sets the background color.\\n@param color the background color, formatted in CSS notation (like `'#ffffff'`)\\n@return the current element*/setBackgroundColor(color:string):DocumentApp.TableCell;\\n/**Sets the link url.\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.TableCell;\\n/**Sets the bottom padding, in points.\\n@param paddingBottom the bottom padding, in points\\n@return the current element*/setPaddingBottom(paddingBottom:number):DocumentApp.TableCell;\\n/**Sets the left padding, in points.\\n@param paddingLeft the left padding, in points\\n@return the current element*/setPaddingLeft(paddingLeft:number):DocumentApp.TableCell;\\n/**Sets the right padding, in points.\\n@param paddingRight The right padding, in points.\\n@return The current element.*/setPaddingRight(paddingRight:number):DocumentApp.TableCell;\\n/**Sets the top padding, in points.\\n@param paddingTop the top padding, in points\\n@return the current element*/setPaddingTop(paddingTop:number):DocumentApp.TableCell;\\n/**Sets the contents as plain text.\\n\\nNote: existing contents are cleared.\\n@param text the new text contents\\n@return the current element*/setText(text:string):DocumentApp.TableCell;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.TableCell;\\n/**Sets the vertical alignment.\\n@param alignment the vertical alignment\\n@return the current element*/setVerticalAlignment(alignment:DocumentApp.VerticalAlignment):DocumentApp.TableCell;\\n/**Sets the width of the column containing the current cell, in points.\\n@param width the column width, in points\\n@return the current element*/setWidth(width:number):DocumentApp.TableCell;}interface Table{\\n/**Creates and appends a new [`TableRow`](https://developers.google.com/apps-script/reference/document/table-row.html).\\n@return the new table row element*/appendTableRow():DocumentApp.TableRow;\\n/**Appends the given [`TableRow`](https://developers.google.com/apps-script/reference/document/table-row.html).\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first table in the tab and copies the second row.\\nconst table \\u003d body.getTables()[0];\\nconst row \\u003d table.getChild(1).copy();\\n\\n// Adds the copied row to the bottom of the table.\\nconst tableRow \\u003d table.appendTableRow(row);\\n```\\n@param tableRow The table row to append.\\n@return The appended table row element.*/appendTableRow(tableRow:DocumentApp.TableRow):DocumentApp.TableRow;\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.Table;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.Table;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the border color.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first table.\\nconst table \\u003d body.getTables()[0];\\n\\n// Sets the border color of the first table.\\ntable.setBorderColor('#00FF00');\\n\\n// Logs the border color of the first table to the console.\\nconsole.log(table.getBorderColor());\\n```\\n@return The border color, formatted in CSS notation (like `'#ffffff'`).*/getBorderColor():string;\\n/**Retrieves the border width, in points.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first table.\\nconst table \\u003d body.getTables()[0];\\n\\n// Sets the border width of the first table.\\ntable.setBorderWidth(20);\\n\\n// Logs the border width of the first table.\\nconsole.log(table.getBorderWidth());\\n\\n```\\n@return The border width, in points.*/getBorderWidth():number;\\n/**Retrieves the [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) at the specified row and cell indices.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first table.\\nconst table \\u003d body.getTables()[0];\\n\\n// Gets the cell of the table's third row and second column.\\nconst cell \\u003d table.getCell(2, 1);\\n\\n// Logs the cell text to the console.\\nconsole.log(cell.getText());\\n```\\n@param rowIndex The index of the row containing the cell to retrieve.\\n@param cellIndex The index of the cell to retrieve.\\n@return The table cell.*/getCell(rowIndex:Integer,cellIndex:Integer):DocumentApp.TableCell;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves the width of the specified table column, in points.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first table.\\nconst table \\u003d body.getTables()[0];\\n\\n// Sets the width of the second column to 100 points.\\nconst columnWidth \\u003d table.setColumnWidth(1, 100);\\n\\n// Gets the width of the second column and logs it to the console.\\nconsole.log(columnWidth.getColumnWidth(1));\\n\\n```\\n@param columnIndex The column index.\\n@return The column width, in points.*/getColumnWidth(columnIndex:Integer):number;\\n/**Retrieves the link url.\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves the number of [`TableRows`](https://developers.google.com/apps-script/reference/document/table-row.html).\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first table.\\nconst table \\u003d body.getTables()[0];\\n\\n// Logs the number of rows of the first table to the console.\\nconsole.log(table.getNumRows());\\n```\\n@return The number of table rows.*/getNumRows():Integer;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the [`TableRow`](https://developers.google.com/apps-script/reference/document/table-row.html) at the specified row index.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first table and logs the text of first row to the console.\\nconst table \\u003d body.getTables()[0];\\nconsole.log(table.getRow(0).getText());\\n```\\n@param rowIndex The index of the row to retrieve.\\n@return The table row.*/getRow(rowIndex:Integer):DocumentApp.TableRow;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Creates and inserts a new [`TableRow`](https://developers.google.com/apps-script/reference/document/table-row.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@return the current element*/insertTableRow(childIndex:Integer):DocumentApp.TableRow;\\n/**Inserts the given [`TableRow`](https://developers.google.com/apps-script/reference/document/table-row.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@param tableRow the table row to insert\\n@return the inserted table row element*/insertTableRow(childIndex:Integer,tableRow:DocumentApp.TableRow):DocumentApp.TableRow;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Removes the specified child element.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first table.\\nconst table \\u003d body.getTables()[0];\\n\\n// Finds the first table row and removes it.\\nconst element \\u003d table.findElement(DocumentApp.ElementType.TABLE_ROW);\\ntable.removeChild(element.getElement());\\n```\\n@param child The child element to remove.\\n@return The current element.*/removeChild(child:DocumentApp.Element):DocumentApp.Table;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.Table;\\n/**Removes the [`TableRow`](https://developers.google.com/apps-script/reference/document/table-row.html) at the specified row index.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first table and removes its second row.\\nconst table \\u003d body.getTables()[0];\\ntable.removeRow(1);\\n```\\n@param rowIndex The index of the row to remove.\\n@return The removed row.*/removeRow(rowIndex:Integer):DocumentApp.TableRow;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.Table;\\n/**Sets the border color.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within a\\n// Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first table.\\nconst table \\u003d body.getTables()[0];\\n\\n// Sets the border color of the table to green.\\ntable.setBorderColor('#00FF00');\\n```\\n@param color The border color, formatted in CSS notation (like `'#ffffff'`).\\n@return The current element.*/setBorderColor(color:string):DocumentApp.Table;\\n/**Sets the border width, in points.\\n@param width the border width, in points\\n@return the current element*/setBorderWidth(width:number):DocumentApp.Table;\\n/**Sets the width of the specified column, in points.\\n@param columnIndex the column index\\n@param width the border width, in points\\n@return the current element*/setColumnWidth(columnIndex:Integer,width:number):DocumentApp.Table;\\n/**Sets the link url.\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.Table;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.Table;}interface TabType{}interface _TabType{\\n/**The type corresponding to [`DocumentTab`](https://developers.google.com/apps-script/reference/document/document-tab.html).*/DOCUMENT_TAB:TabType;}interface Tab{\\n/**Retrieves the tab contents as a [`DocumentTab`](https://developers.google.com/apps-script/reference/document/document-tab.html).\\n@return The tab as a [`DocumentTab`](https://developers.google.com/apps-script/reference/document/document-tab.html).*/asDocumentTab():DocumentApp.DocumentTab;\\n/**Retrieves the child tabs nested within this tab.\\n@return The child tabs nested within this tab.*/getChildTabs():DocumentApp.Tab[];\\n/**Retrieves the ID of the tab.\\n@return The ID of the tab.*/getId():string;\\n/**Retrieves the 0-based index of the tab within the parent.\\n@return The index of the tab within the parent.*/getIndex():Integer;\\n/**Retrieves the title of the tab.\\n@return The title of the tab.*/getTitle():string;\\n/**Retrieves the type of tab.\\n\\nUse this method to determine the content type of this [`Tab`](https://developers.google.com/apps-script/reference/document/tab.html) before casting to the more\\nspecific type using [`asDocumentTab()`](https://developers.google.com/apps-script/reference/document/tab.html#asDocumentTab()).\\n\\n```\\nvar tab \\u003d DocumentApp.getActiveDocument().getActiveTab();\\n// Use getType() to determine the tab's type before casting.\\nif (tab.getType() \\u003d\\u003d DocumentApp.TabType.DOCUMENT_TAB) {\\n  // It's a document tab, write some text to it.\\n  tab.asDocumentTab().setText('Hello World!');\\n} else {\\n // There are currently no types other than DOCUMENT_TAB.\\n}\\n```\\n@return The tab's type.*/getType():DocumentApp.TabType;}interface RichLink{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.RichLink;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Returns the [MIME type](https://developers.google.com/drive/api/v3/mime-types) of\\nthe link, which is available when the item is a link to a Drive file and `null`\\notherwise.\\n\\nFor example, if the link points to a Google Docs file, this returns the string \\n\\n```\\napplication/vnd.google-apps.document```\\n\\n.\\n@return The MIME type of the link, if available.*/getMimeType():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Returns the link's displayed title. This title matches the title of the linked resource at the\\ntime of the insertion or last update of the link. For example, if this link points to a Google\\nDocs document titled \\\"Analysis,\\\" this returns `Analysis`.\\n@return The display title of the link.*/getTitle():string;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Returns the URL of the resource.\\n@return The URL of the resource.*/getUrl():string;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.RichLink;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.RichLink;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.RichLink;}interface RangeElement{\\n/**Gets the [`Element`](https://developers.google.com/apps-script/reference/document/element.html) that corresponds to this `RangeElement`.\\n\\n```\\n// Log debug information about a range element.\\nLogger.log('Element type: ' + rangeElement.getElement().getType());\\nif (rangeElement.isPartial()) {\\n  Logger.log('The character range begins at ' + rangeElement.getStartOffset());\\n  Logger.log('The character range ends at ' + rangeElement.getEndOffsetInclusive());\\n} else {\\n  Logger.log('The entire range element is included.');\\n}\\n```\\n@return the element that corresponds to this `RangeElement`*/getElement():DocumentApp.Element;\\n/**Gets the position of the end of a partial range within the range element. If the element is a\\n[`Text`](https://developers.google.com/apps-script/reference/document/text.html) element and [`isPartial()`](https://developers.google.com/apps-script/reference/document/range-element.html#isPartial()) returns `true`, the offset is the number of characters before the last\\ncharacter in the range (that is, the index of the last character in the range); in any other\\ncase, this method returns `-1`.\\n@return for [`Text`](https://developers.google.com/apps-script/reference/document/text.html) elements, the\\n    number of character before the last character in the range; for other elements, `-1`*/getEndOffsetInclusive():Integer;\\n/**Gets the position of the start of a partial range within the range element. If the element is a\\n[`Text`](https://developers.google.com/apps-script/reference/document/text.html) element and [`isPartial()`](https://developers.google.com/apps-script/reference/document/range-element.html#isPartial()) returns `true`, the offset is the number of characters before the start of\\nthe range (that is, the index of the first character in the range); in any other case, this\\nmethod returns `-1`.\\n@return for [`Text`](https://developers.google.com/apps-script/reference/document/text.html) elements, the\\n    number of characters before the start of the range; for other elements, `-1`*/getStartOffset():Integer;\\n/**Determines whether this range element covers the entire element or a partial selection of the\\nelement's characters. The beginning and end of a partial range element's range can be\\ndetermined using [`getStartOffset()`](https://developers.google.com/apps-script/reference/document/range-element.html#getStartOffset()) and [`getEndOffsetInclusive()`](https://developers.google.com/apps-script/reference/document/range-element.html#getEndOffsetInclusive()), respectively.\\n@return `true` if the element is partially included; `false` if not*/isPartial():boolean;}interface RangeBuilder{\\n/**Adds an entire [`Element`](https://developers.google.com/apps-script/reference/document/element.html) to this `RangeBuilder`.\\n@param element the element to be added\\n@return this builder, for chaining*/addElement(element:DocumentApp.Element):DocumentApp.RangeBuilder;\\n/**Adds a partial [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element to this `RangeBuilder`.\\n@param textElement the text element to be partially added\\n@param startOffset the number of characters before the first character to be included (that is,\\n    the index of the first character in the range)\\n@param endOffsetInclusive the number of characters before the last character to be included\\n    (that is, the index of the last character in the range)\\n@return this builder, for chaining*/addElement(textElement:DocumentApp.Text,startOffset:Integer,endOffsetInclusive:Integer):DocumentApp.RangeBuilder;\\n/**Adds two entire elements, and all elements between them, to this `RangeBuilder`.\\n@param startElement the first element to be added\\n@param endElementInclusive the last element to be added\\n@return this builder, for chaining*/addElementsBetween(startElement:DocumentApp.Element,endElementInclusive:DocumentApp.Element):DocumentApp.RangeBuilder;\\n/**Adds two partial [`Text`](https://developers.google.com/apps-script/reference/document/text.html) elements, and all elements between them, to the `RangeBuilder`.\\n@param startTextElement the first text element to be partially added\\n@param startOffset the number of characters before the first character of `startTextElement` to be included (that is, the index of the first character in the range)\\n@param endTextElementInclusive the last text element to be partially added\\n@param endOffsetInclusive the number of characters before the last character of `endTextElementInclusive` to be included (that is, the index of the last character in the\\n    range)\\n@return this builder, for chaining*/addElementsBetween(startTextElement:DocumentApp.Text,startOffset:Integer,endTextElementInclusive:DocumentApp.Text,endOffsetInclusive:Integer):DocumentApp.RangeBuilder;\\n/**Adds the contents of another `Range` to this `RangeBuilder`.\\n@param range the range whose elements should be added\\n@return this builder, for chaining*/addRange(range:DocumentApp.Range):DocumentApp.RangeBuilder;\\n/**Constructs a `Range` from the settings applied to the builder.\\n@return the newly constructed range*/build():DocumentApp.Range;\\n/**Gets all elements in this `Range`, including any partial [`Text`](https://developers.google.com/apps-script/reference/document/text.html) elements (for example, in the case\\nof a selection that includes only part of a `Text` element). To determine whether a\\n`Text` element is only partially included in the range, see [`RangeElement.isPartial()`](https://developers.google.com/apps-script/reference/document/range-element.html#isPartial()).\\n@return an array of elements, in the order they appear in the document*/getRangeElements():DocumentApp.RangeElement[];\\n/**Gets all elements that the user has selected in the open instance of the document, including\\nany partially selected [`Text`](https://developers.google.com/apps-script/reference/document/text.html)\\nelements.\\n@deprecated\\n@return an array of selected or partially selected elements, in the order they appear in the\\n    document*/getSelectedElements():DocumentApp.RangeElement[];}interface Range{\\n/**Gets all elements in this `Range`, including any partial [`Text`](https://developers.google.com/apps-script/reference/document/text.html) elements (for example, in the case\\nof a selection that includes only part of a `Text` element). To determine whether a\\n`Text` element is only partially included in the range, see [`RangeElement.isPartial()`](https://developers.google.com/apps-script/reference/document/range-element.html#isPartial()).\\n@return an array of elements, in the order they appear in the document*/getRangeElements():DocumentApp.RangeElement[];\\n/**Gets all elements that the user has selected in the open instance of the document, including\\nany partially selected [`Text`](https://developers.google.com/apps-script/reference/document/text.html)\\nelements.\\n@deprecated\\n@return an array of selected or partially selected elements, in the order they appear in the\\n    document*/getSelectedElements():DocumentApp.RangeElement[];}interface PositionedLayout{}interface _PositionedLayout{\\n/**The image is positioned above the text.*/ABOVE_TEXT:PositionedLayout;\\n/**The image breaks the text on the left and right.*/BREAK_BOTH:PositionedLayout;\\n/**The image breaks the text on the left.*/BREAK_LEFT:PositionedLayout;\\n/**The image breaks the text on the right.*/BREAK_RIGHT:PositionedLayout;\\n/**The image is wrapped by text.*/WRAP_TEXT:PositionedLayout;}interface PositionedImage{\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;\\n/**Retrieves the image's height, in pixels.\\n@return the image's height, in pixels*/getHeight():Integer;\\n/**Gets the image's ID.\\n@return the image ID*/getId():string;\\n/**Gets an enum value that represents how the image is laid out.\\n@return the image layout*/getLayout():DocumentApp.PositionedLayout;\\n/**Gets the image's offset, in points, from the paragraph's left.\\n@return the image offset from the left paragraph's left*/getLeftOffset():number;\\n/**Gets the [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) the image is anchored to.\\n@return the parent paragraph*/getParagraph():DocumentApp.Paragraph;\\n/**Gets the image's offset, in points, from the paragraph's top.\\n@return the image offset from the left paragraph's top*/getTopOffset():number;\\n/**Retrieves the image's width, in pixels.\\n@return the image's width, in pixels*/getWidth():Integer;\\n/**Sets the image's height, in pixels.\\n@param height the image's height, in pixels\\n@return the current object*/setHeight(height:Integer):DocumentApp.PositionedImage;\\n/**Sets the definition of how the image is laid out.\\n@param layout an enum representing the layout mode\\n@return this object for chaining*/setLayout(layout:DocumentApp.PositionedLayout):DocumentApp.PositionedImage;\\n/**Sets the image's offset, in points, from the paragraph's left.\\n@param offset offset from the paragraph's left\\n@return this object for chaining*/setLeftOffset(offset:number):DocumentApp.PositionedImage;\\n/**Sets the image's offset, in points, from the paragraph's top.\\n@param offset offset from the paragraph's top\\n@return this object for chaining*/setTopOffset(offset:number):DocumentApp.PositionedImage;\\n/**Sets the image's width, in pixels.\\n@param width the image's width, in pixels\\n@return the current object*/setWidth(width:Integer):DocumentApp.PositionedImage;}interface Position{\\n/**Gets the element that contains this `Position`. This will be either a [`Text`](https://developers.google.com/apps-script/reference/document/text.html)\\nelement or a container element like [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html). In either case, the relative\\nposition within the element can be determined with [`getOffset()`](https://developers.google.com/apps-script/reference/document/position.html#getOffset()).\\n@return the container or [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element in which this `Position` object is located*/getElement():DocumentApp.Element;\\n/**Gets this `Position`'s relative location within the element that contains it. If the\\nelement is a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element, the offset is the number of characters before the `Position` (that is, the index of the character after this `Position`); for any other\\nelement, the offset is the number of child elements before this `Position` within the\\nsame container element (that is, the index of the child element after the `Position`).\\n@return for [`Text`](https://developers.google.com/apps-script/reference/document/text.html) elements, the number of characters before this `Position`; for\\n    other elements, the number of child elements before this `Position` within the same\\n    container element*/getOffset():Integer;\\n/**Creates an artificial [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element that represents the text and formatting of the\\n[`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) or [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) that contains the `Position`, either directly or through a chain of child elements. To determine the `Position`'s offset in the returned `Text` element, use [`getSurroundingTextOffset()`](https://developers.google.com/apps-script/reference/document/position.html#getSurroundingTextOffset()).\\n@return an element equivalent to the result of calling [`editAsText()`](https://developers.google.com/apps-script/reference/document/paragraph.html#editAsText())\\n    on the [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) or [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) that contains the `Position`, either directly or through a chain of child elements*/getSurroundingText():DocumentApp.Text;\\n/**Gets the offset of this `Position` within the [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element returned by [`getSurroundingText()`](https://developers.google.com/apps-script/reference/document/position.html#getSurroundingText()). The offset is the number of characters before the `Position`\\n(that is, the index of the character after this `Position`).\\n@return the number of characters before this `Position` in the [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) or [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) that contains the `Position`, either directly or through a chain of child elements*/getSurroundingTextOffset():Integer;\\n/**Creates and inserts a new [`Bookmark`](https://developers.google.com/apps-script/reference/document/bookmark.html) at this `Position`.\\n@return the new bookmark*/insertBookmark():DocumentApp.Bookmark;\\n/**Creates and inserts a new [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) at this `Position` from the specified image\\nblob.\\n@param image the image data to insert at this `Position`\\n@return the new image element, or `null` if the element in which this `Position` is\\n    located does not allow images to be inserted*/insertInlineImage(image:BlobSource):DocumentApp.InlineImage;\\n/**Inserts the specified text at this `Position`. This method creates a new [`Text`](https://developers.google.com/apps-script/reference/document/text.html)\\nelement, even if the string is inserted within an existing `Text` element, so that it is\\neasy to style the new element.\\n@param text the string to insert at this `Position`\\n@return the new text element, or `null` if the element in which this `Position` is\\n    located does not allow text to be inserted*/insertText(text:string):DocumentApp.Text;}interface Person{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.Person;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Returns the person's email address.\\n@return The email address of the person.*/getEmail():string;\\n/**Returns the person's display name, if set.\\n@return The display name of the person link, or `null` if the element displays the email\\n    address instead.*/getName():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.Person;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.Person;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.Person;}interface ParagraphHeading{}interface _ParagraphHeading{\\n/**The highest heading option.*/HEADING1:ParagraphHeading;\\n/**The second heading option.*/HEADING2:ParagraphHeading;\\n/**The third heading option*/HEADING3:ParagraphHeading;\\n/**The fourth heading option.*/HEADING4:ParagraphHeading;\\n/**The fifth heading option.*/HEADING5:ParagraphHeading;\\n/**The lowest heading option.*/HEADING6:ParagraphHeading;\\n/**The heading option for normal text.*/NORMAL:ParagraphHeading;\\n/**The subtitle heading option.*/SUBTITLE:ParagraphHeading;\\n/**The title heading option.*/TITLE:ParagraphHeading;}interface Paragraph{\\n/**Creates and inserts a new [`PositionedImage`](https://developers.google.com/apps-script/reference/document/positioned-image.html) from the specified image blob.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first paragraph from the body.\\nconst paragraph \\u003d body.getParagraphs()[0];\\n\\n// Fetches the specified image URL.\\nconst image \\u003d\\n  UrlFetchApp.fetch('https://fonts.gstatic.com/s/i/productlogos/apps_script/v10/web-24dp/logo_apps_script_color_1x_web_24dp.png');\\n\\n// Adds the image to the tab, anchored to the first paragraph.\\nparagraph.addPositionedImage(image);\\n```\\n@param image The image data.\\n@return The new positioned image.*/addPositionedImage(image:BlobSource):DocumentApp.PositionedImage;\\n/**Creates and appends a new [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html).\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first paragraph from the body.\\nconst paragraph \\u003d body.getParagraphs()[0];\\n\\n// Adds a horizontal line under the first paragraph.\\nparagraph.appendHorizontalRule();\\n```\\n@return The new horizontal rule.*/appendHorizontalRule():DocumentApp.HorizontalRule;\\n/**Creates and appends a new [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first paragraph from the body.\\nconst paragraph \\u003d body.getParagraphs()[0];\\n\\n// Fetches the image from the specified image URL.\\nconst image \\u003d UrlFetchApp\\n  .fetch('https://fonts.gstatic.com/s/i/productlogos/apps_script/v10/web-96dp/logo_apps_script_color_1x_web_96dp.png');\\n\\n// Adds the image to the first paragraph.\\nparagraph.appendInlineImage(image);\\n```\\n@param image The image data.\\n@return The appended image.*/appendInlineImage(image:BlobSource):DocumentApp.InlineImage;\\n/**Appends the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html).\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first paragraph from the body.\\nconst paragraph \\u003d body.getParagraphs()[0];\\n\\n// Makes a copy of the first image in the body.\\nconst image \\u003d body.getImages()[0].copy();;\\n\\n// Adds the image to the first paragraph.\\nparagraph.appendInlineImage(image);\\n```\\n@param image The image data.\\n@return The appended image.*/appendInlineImage(image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Creates and appends a new [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html).\\n\\nNote: [`PageBreaks`](https://developers.google.com/apps-script/reference/document/page-break.html) may not be contained within [`TableCells`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\nIf the current element is contained in a table cell, an exception will be thrown.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first paragraph from the body.\\nconst paragraph \\u003d body.getParagraphs()[0];\\n\\n// Adds a page break after the first paragraph.\\nparagraph.appendPageBreak();\\n```\\n@return The new page break element.*/appendPageBreak():DocumentApp.PageBreak;\\n/**Appends the given [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html).\\n\\nNote: [`PageBreaks`](https://developers.google.com/apps-script/reference/document/page-break.html) can't be contained within [`TableCells`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\nIf the current element exists in a table cell, the script throws an exception.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first paragraph from the body.\\nconst paragraph \\u003d body.getParagraphs()[0];\\n\\n// Adds a page break after the first paragraph.\\nconst pageBreak \\u003d paragraph.appendPageBreak();\\n\\n// Makes a copy of the page break.\\nconst newPageBreak \\u003d pageBreak.copy();\\n\\n// Adds the copied page break to the paragraph.\\nparagraph.appendPageBreak(newPageBreak);\\n```\\n@param pageBreak The page break to append.\\n@return The appended page break element.*/appendPageBreak(pageBreak:DocumentApp.PageBreak):DocumentApp.PageBreak;\\n/**Appends the given [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element.\\n\\n```\\n // Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the text from the first paragraph in the body.\\nconst paragraph1 \\u003d body.getParagraphs()[0];\\nconst text \\u003d paragraph1.getText();\\n\\n// Gets the third paragraph in the body.\\nconst paragraph3 \\u003d body.getParagraphs()[2];\\n\\n// Adds the text from the first paragraph to the third paragraph.\\nparagraph3.appendText(text);\\n```\\n@param text The text element to append.\\n@return The appended text element.*/appendText(text:DocumentApp.Text):DocumentApp.Text;\\n/**Creates and appends a new [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element with the specified contents.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first paragraph from the body.\\nconst paragraph \\u003d body.getParagraphs()[0];\\n\\n// Adds a string to the paragraph.\\nparagraph.appendText('This is a new sentence.');\\n```\\n@param text The text contents.\\n@return The new text element.*/appendText(text:string):DocumentApp.Text;\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.Paragraph;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.Paragraph;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the [`HorizontalAlignment`](https://developers.google.com/apps-script/reference/document/horizontal-alignment.html).\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Gets the first paragraph from the body.\\nconst paragraph \\u003d body.getParagraphs()[0];\\n\\n// Sets the horizontal alignment to left for the first paragraph.\\nparagraph.setAlignment(DocumentApp.HorizontalAlignment.LEFT);\\n\\n// Gets the horizontal alignment of the first paragraph and logs it to the console.\\nconsole.log(paragraph.getAlignment().toString());\\n```\\n@return The alignment.*/getAlignment():DocumentApp.HorizontalAlignment;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves the [`ParagraphHeading`](https://developers.google.com/apps-script/reference/document/paragraph-heading.html).\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the body contents of the tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst body \\u003d doc.getTab(TAB_ID).asDocumentTab().getBody();\\n\\n// Adds a paragraph to the body.\\nconst paragraph \\u003d body.appendParagraph('Title heading');\\n\\n// Sets the paragraph heading style to 'Title.'\\nparagraph.setHeading(DocumentApp.ParagraphHeading.TITLE);\\n\\n// Gets the heading style and logs it to the console.\\nconsole.log(paragraph.getHeading().toString());\\n```\\n@return The heading.*/getHeading():DocumentApp.ParagraphHeading;\\n/**Retrieves the end indentation, in points.\\n@return the end indentation, in points*/getIndentEnd():number;\\n/**Retrieves the first line indentation, in points.\\n@return the first line indentation, in points*/getIndentFirstLine():number;\\n/**Retrieves the start indentation.\\n@return the start indentation*/getIndentStart():number;\\n/**Retrieves the line spacing, in points.\\n@return the line spacing, in points*/getLineSpacing():number;\\n/**Retrieves the link url.\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Gets a [`PositionedImage`](https://developers.google.com/apps-script/reference/document/positioned-image.html) by the image's ID.\\n@param id the image id\\n@return the positioned image*/getPositionedImage(id:string):DocumentApp.PositionedImage;\\n/**Gets all [`PositionedImage`](https://developers.google.com/apps-script/reference/document/positioned-image.html) objects anchored to the paragraph.\\n@return a list of positioned images*/getPositionedImages():DocumentApp.PositionedImage[];\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the spacing after the element, in points.\\n@return the spacing after the element, in points*/getSpacingAfter():number;\\n/**Retrieves the spacing before the element, in points.\\n@return the spacing before the element, in points*/getSpacingBefore():number;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Creates and inserts a [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@return the new horizontal rule element*/insertHorizontalRule(childIndex:Integer):DocumentApp.HorizontalRule;\\n/**Creates and inserts a new [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob, at the specified\\nindex.\\n@param childIndex the index at which to insert the element\\n@param image the image data\\n@return the inserted inline image element*/insertInlineImage(childIndex:Integer,image:BlobSource):DocumentApp.InlineImage;\\n/**Inserts the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@param image the image data\\n@return the inserted inline image element*/insertInlineImage(childIndex:Integer,image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Creates and inserts a new [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) at the specified index.\\n\\nNote: [`PageBreaks`](https://developers.google.com/apps-script/reference/document/page-break.html) may not be contained within [`TableCells`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\nIf the current element is contained in a table cell, an exception will be thrown.\\n@param childIndex the index at which to insert the element\\n@return the new page break element*/insertPageBreak(childIndex:Integer):DocumentApp.PageBreak;\\n/**Inserts the given [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) at the specified index.\\n\\nNote: [`PageBreaks`](https://developers.google.com/apps-script/reference/document/page-break.html) may not be contained within [`TableCells`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\nIf the current element is contained in a table cell, an exception will be thrown.\\n@param childIndex the index at which to insert the element\\n@param pageBreak the p[age break to insert\\n@return the inserted page break element*/insertPageBreak(childIndex:Integer,pageBreak:DocumentApp.PageBreak):DocumentApp.PageBreak;\\n/**Inserts the given [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element at the specified index, with the specified text\\ncontents.\\n@param childIndex the index at which to insert the element\\n@param text the text element to insert\\n@return the inserted text element*/insertText(childIndex:Integer,text:DocumentApp.Text):DocumentApp.Text;\\n/**Creates and inserts a new text element at the specified index.\\n@param childIndex the index at which to insert the element\\n@param text the text contents\\n@return the new text element*/insertText(childIndex:Integer,text:string):DocumentApp.Text;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Retrieves the left-to-right setting.\\n@return the left-to-right setting*/isLeftToRight():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.Paragraph;\\n/**Removes the specified child element.\\n@param child the child element to remove\\n@return the current element*/removeChild(child:DocumentApp.Element):DocumentApp.Paragraph;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.Paragraph;\\n/**Removes a [`PositionedImage`](https://developers.google.com/apps-script/reference/document/positioned-image.html) by the image's ID.\\n@param id the image id\\n@return whether or not the specified image was removed*/removePositionedImage(id:string):boolean;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the [`HorizontalAlignment`](https://developers.google.com/apps-script/reference/document/horizontal-alignment.html).\\n@param alignment the horizontal alignment\\n@return the current element*/setAlignment(alignment:DocumentApp.HorizontalAlignment):DocumentApp.Paragraph;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.Paragraph;\\n/**Sets the [`ParagraphHeading`](https://developers.google.com/apps-script/reference/document/paragraph-heading.html).\\n@param heading the heading\\n@return the current element*/setHeading(heading:DocumentApp.ParagraphHeading):DocumentApp.Paragraph;\\n/**Sets the end indentation, in points.\\n@param indentEnd the end indentation, in points\\n@return the current element*/setIndentEnd(indentEnd:number):DocumentApp.Paragraph;\\n/**Sets the first line indentation, in points.\\n@param indentFirstLine the first line indentation, in points\\n@return the current element*/setIndentFirstLine(indentFirstLine:number):DocumentApp.Paragraph;\\n/**Sets the start indentation, in points.\\n@param indentStart the start indentation, in points\\n@return the current element*/setIndentStart(indentStart:number):DocumentApp.Paragraph;\\n/**Sets the left-to-right setting.\\n@param leftToRight the left-to-right setting\\n@return the current element*/setLeftToRight(leftToRight:boolean):DocumentApp.Paragraph;\\n/**Sets the line spacing, as a quantity indicating the number of lines to use for spacing.\\n@param multiplier the number of lines\\n@return the current element*/setLineSpacing(multiplier:number):DocumentApp.Paragraph;\\n/**Sets the link url.\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.Paragraph;\\n/**Sets the spacing after the element, in points.\\n@param spacingAfter the spacing after the element, in points\\n@return the current element*/setSpacingAfter(spacingAfter:number):DocumentApp.Paragraph;\\n/**Sets the spacing before the element, in points.\\n@param spacingBefore the spacing before the element, in points\\n@return the current element*/setSpacingBefore(spacingBefore:number):DocumentApp.Paragraph;\\n/**Sets the contents of the paragraph as text.\\n\\nNote: existing contents are cleared.\\n@param text the new text contents*/setText(text:string):void;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.Paragraph;}interface PageBreak{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.PageBreak;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.PageBreak;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.PageBreak;}interface NamedRange{\\n/**Gets the ID of this `NamedRange`. The ID is unique within the tab.\\n@return The range's ID, which is unique within the tab.*/getId():string;\\n/**Gets the name of this `NamedRange`. The name is not necessarily unique.\\n@return The range's name, which is not necessarily unique.*/getName():string;\\n/**Gets the range of elements associated with this `NamedRange`.\\n@return The range of elements associated with the name and ID.*/getRange():DocumentApp.Range;\\n/**Removes this `NamedRange` from the tab. This method doesn't delete the contents of the\\nrange; it merely the removes the reference. Calling this method on a `NamedRange` that\\nhas already been removed has no effect.*/remove():void;}interface ListItem{\\n/**Creates and inserts a new [`PositionedImage`](https://developers.google.com/apps-script/reference/document/positioned-image.html) from the specified image blob.\\n@param image the image data\\n@return the new positioned image*/addPositionedImage(image:BlobSource):DocumentApp.PositionedImage;\\n/**Creates and appends a new [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html).\\n@return the new horizontal rule*/appendHorizontalRule():DocumentApp.HorizontalRule;\\n/**Creates and appends a new [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob.\\n@param image the image data\\n@return the appended image*/appendInlineImage(image:BlobSource):DocumentApp.InlineImage;\\n/**Appends the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html).\\n@param image the image data\\n@return the appended image*/appendInlineImage(image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Creates and appends a new [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html).\\n\\nNote: [`PageBreaks`](https://developers.google.com/apps-script/reference/document/page-break.html) may not be contained within [`TableCells`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\nIf the current element is contained in a table cell, an exception will be thrown.\\n@return the new page break element*/appendPageBreak():DocumentApp.PageBreak;\\n/**Appends the given [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html).\\n\\nNote: [`PageBreaks`](https://developers.google.com/apps-script/reference/document/page-break.html) may not be contained within [`TableCells`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\nIf the current element is contained in a table cell, an exception will be thrown.\\n@param pageBreak the page break to append\\n@return the appended page break element*/appendPageBreak(pageBreak:DocumentApp.PageBreak):DocumentApp.PageBreak;\\n/**Appends the given [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element.\\n@param text the text element to append\\n@return the appended text element*/appendText(text:DocumentApp.Text):DocumentApp.Text;\\n/**Creates and appends a new [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element with the specified contents.\\n@param text the text contents\\n@return the new text element*/appendText(text:string):DocumentApp.Text;\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.ListItem;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.ListItem;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the [`HorizontalAlignment`](https://developers.google.com/apps-script/reference/document/horizontal-alignment.html).\\n@return the alignment*/getAlignment():DocumentApp.HorizontalAlignment;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves the list item's [`GlyphType`](https://developers.google.com/apps-script/reference/document/glyph-type.html).\\n@return the glyph type*/getGlyphType():DocumentApp.GlyphType;\\n/**Retrieves the [`ParagraphHeading`](https://developers.google.com/apps-script/reference/document/paragraph-heading.html).\\n@return the heading*/getHeading():DocumentApp.ParagraphHeading;\\n/**Retrieves the end indentation, in points.\\n@return the end indentation, in points*/getIndentEnd():number;\\n/**Retrieves the first line indentation, in points.\\n@return the first line indentation, in points*/getIndentFirstLine():number;\\n/**Retrieves the start indentation.\\n@return the start indentation*/getIndentStart():number;\\n/**Retrieves the line spacing, in points.\\n@return the line spacing, in points*/getLineSpacing():number;\\n/**Retrieves the link url.\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the list ID.\\n@return the list ID*/getListId():string;\\n/**Retrieves the list item's nesting level.\\n\\nBy default, list items have a nesting level of zero. The nesting level determines the glyph\\nthat is used by the list item.\\n@return the nesting level*/getNestingLevel():Integer;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Gets a [`PositionedImage`](https://developers.google.com/apps-script/reference/document/positioned-image.html) by the image's ID.\\n@param id the image id\\n@return the positioned image*/getPositionedImage(id:string):DocumentApp.PositionedImage;\\n/**Gets all [`PositionedImage`](https://developers.google.com/apps-script/reference/document/positioned-image.html) objects anchored to the paragraph.\\n@return a list of positioned images*/getPositionedImages():DocumentApp.PositionedImage[];\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the spacing after the element, in points.\\n@return the spacing after the element, in points*/getSpacingAfter():number;\\n/**Retrieves the spacing before the element, in points.\\n@return the spacing before the element, in points*/getSpacingBefore():number;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Creates and inserts a [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@return the new horizontal rule element*/insertHorizontalRule(childIndex:Integer):DocumentApp.HorizontalRule;\\n/**Creates and inserts a new [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob, at the specified\\nindex.\\n@param childIndex the index at which to insert the element\\n@param image the image data\\n@return the inserted inline image element*/insertInlineImage(childIndex:Integer,image:BlobSource):DocumentApp.InlineImage;\\n/**Inserts the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) at the specified index.\\n@param childIndex the index at which to insert the element\\n@param image the image data\\n@return the inserted inline image element*/insertInlineImage(childIndex:Integer,image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Creates and inserts a new [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) at the specified index.\\n\\nNote: [`PageBreaks`](https://developers.google.com/apps-script/reference/document/page-break.html) may not be contained within [`TableCells`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\nIf the current element is contained in a table cell, an exception will be thrown.\\n@param childIndex the index at which to insert the element\\n@return the new page break element*/insertPageBreak(childIndex:Integer):DocumentApp.PageBreak;\\n/**Inserts the given [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) at the specified index.\\n\\nNote: [`PageBreaks`](https://developers.google.com/apps-script/reference/document/page-break.html) may not be contained within [`TableCells`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\nIf the current element is contained in a table cell, an exception will be thrown.\\n@param childIndex the index at which to insert the element\\n@param pageBreak the p[age break to insert\\n@return the inserted page break element*/insertPageBreak(childIndex:Integer,pageBreak:DocumentApp.PageBreak):DocumentApp.PageBreak;\\n/**Inserts the given [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element at the specified index, with the specified text\\ncontents.\\n@param childIndex the index at which to insert the element\\n@param text the text element to insert\\n@return the inserted text element*/insertText(childIndex:Integer,text:DocumentApp.Text):DocumentApp.Text;\\n/**Creates and inserts a new text element at the specified index.\\n@param childIndex the index at which to insert the element\\n@param text the text contents\\n@return the new text element*/insertText(childIndex:Integer,text:string):DocumentApp.Text;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Retrieves the left-to-right setting.\\n@return the left-to-right setting*/isLeftToRight():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.ListItem;\\n/**Removes the specified child element.\\n@param child the child element to remove\\n@return the current element*/removeChild(child:DocumentApp.Element):DocumentApp.ListItem;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.ListItem;\\n/**Removes a [`PositionedImage`](https://developers.google.com/apps-script/reference/document/positioned-image.html) by the image's ID.\\n@return whether or not the specified image was removed*/removePositionedImage(id:string):boolean;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the [`HorizontalAlignment`](https://developers.google.com/apps-script/reference/document/horizontal-alignment.html).\\n@param alignment the horizontal alignment\\n@return the current element*/setAlignment(alignment:DocumentApp.HorizontalAlignment):DocumentApp.ListItem;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.ListItem;\\n/**Sets the list item's [`GlyphType`](https://developers.google.com/apps-script/reference/document/glyph-type.html).\\n@param glyphType the glyph type\\n@return the current element*/setGlyphType(glyphType:DocumentApp.GlyphType):DocumentApp.ListItem;\\n/**Sets the [`ParagraphHeading`](https://developers.google.com/apps-script/reference/document/paragraph-heading.html).\\n@param heading the heading\\n@return the current element*/setHeading(heading:DocumentApp.ParagraphHeading):DocumentApp.ListItem;\\n/**Sets the end indentation, in points.\\n@param indentEnd the end indentation, in points\\n@return the current element*/setIndentEnd(indentEnd:number):DocumentApp.ListItem;\\n/**Sets the first line indentation, in points.\\n@param indentFirstLine the first line indentation, in points\\n@return the current element*/setIndentFirstLine(indentFirstLine:number):DocumentApp.ListItem;\\n/**Sets the start indentation, in points.\\n@param indentStart the start indentation, in points\\n@return the current element*/setIndentStart(indentStart:number):DocumentApp.ListItem;\\n/**Sets the left-to-right setting.\\n@param leftToRight the left-to-right setting\\n@return the current element*/setLeftToRight(leftToRight:boolean):DocumentApp.ListItem;\\n/**Sets the line spacing, as a quantity indicating the number of lines to use for spacing.\\n@param multiplier the number of lines\\n@return the current element*/setLineSpacing(multiplier:number):DocumentApp.ListItem;\\n/**Sets the link url.\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.ListItem;\\n/**Sets the list ID.\\n\\nThe list ID is set to the same value for the specified [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html). The two [`ListItems`](https://developers.google.com/apps-script/reference/document/list-item.html) will be treated as members of the same list.\\n@param listItem the list item whose list ID to use\\n@return the current element*/setListId(listItem:DocumentApp.ListItem):DocumentApp.ListItem;\\n/**Sets the list item's nesting level.\\n\\nBy default, list items have a nesting level of zero. The nesting level determines the glyph\\nthat is used by the list item.\\n@param nestingLevel the nesting level\\n@return the current element*/setNestingLevel(nestingLevel:Integer):DocumentApp.ListItem;\\n/**Sets the spacing after the element, in points.\\n@param spacingAfter the spacing after the element, in points\\n@return the current element*/setSpacingAfter(spacingAfter:number):DocumentApp.ListItem;\\n/**Sets the spacing before the element, in points.\\n@param spacingBefore the spacing before the element, in points\\n@return the current element*/setSpacingBefore(spacingBefore:number):DocumentApp.ListItem;\\n/**Sets the contents of the list item as text.\\n\\nNote: existing contents are cleared.\\n@param text the new text contents*/setText(text:string):void;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.ListItem;}interface InlineImage{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.InlineImage;\\n/**Returns the image's alternate description.\\n@return the alternate title, or `null` if the element does not have an alternate title*/getAltDescription():string;\\n/**Returns the image's alternate title.\\n@return the alternate title, or `null` if the element does not have an alternate title*/getAltTitle():string;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;\\n/**Retrieves the image's height, in pixels.\\n@return the image's height, in pixels*/getHeight():Integer;\\n/**Retrieves the link URL.\\n@return the link URL, or `null` if the element contains multiple values for this\\n    attribute.*/getLinkUrl():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Retrieves the image's width, in pixels.\\n@return the image's width, in pixels*/getWidth():Integer;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.InlineImage;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.InlineImage;\\n/**Sets the image's alternate description. If the given title is `null`, sets the\\ndescription to the empty string.\\n@param description the alternate title\\n@return the current object*/setAltDescription(description:string):DocumentApp.InlineImage;\\n/**Sets the image's alternate title. If the given title is `null`, sets the title to the\\nempty string.\\n@param title the alternate title\\n@return the current object*/setAltTitle(title:string):DocumentApp.InlineImage;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.InlineImage;\\n/**Sets the image's height, in pixels.\\n@param height the image's height, in pixels\\n@return the current object*/setHeight(height:Integer):DocumentApp.InlineImage;\\n/**Sets the link URL. If the given URL is `null` or an empty string, this method will create\\na link with an empty URL that may display as \\\"Invalid link\\\" in Google Docs.\\n@param url the link URL\\n@return the current object*/setLinkUrl(url:string):DocumentApp.InlineImage;\\n/**Sets the image's width, in pixels.\\n@param width the image's width, in pixels\\n@return the current object*/setWidth(width:Integer):DocumentApp.InlineImage;}interface InlineDrawing{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.InlineDrawing;\\n/**Returns the drawing's alternate description.\\n@return the alternate title, or `null` if the element does not have an alternate title*/getAltDescription():string;\\n/**Returns the drawing's alternate title.\\n@return the alternate title, or `null` if the element does not have an alternate title*/getAltTitle():string;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.InlineDrawing;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.InlineDrawing;\\n/**Sets the drawing's alternate description. If the given title is `null`, sets the\\ndescription to the empty string.\\n@param description the alternate title\\n@return the current object*/setAltDescription(description:string):DocumentApp.InlineDrawing;\\n/**Sets the drawing's alternate title. If the given title is `null`, sets the title to the\\nempty string.\\n@param title the alternate title\\n@return the current object*/setAltTitle(title:string):DocumentApp.InlineDrawing;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.InlineDrawing;}interface HorizontalRule{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.HorizontalRule;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.HorizontalRule;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.HorizontalRule;}interface HorizontalAlignment{}interface _HorizontalAlignment{\\n/**The center-alignment option.*/CENTER:HorizontalAlignment;\\n/**The justify-alignment option.*/JUSTIFY:HorizontalAlignment;\\n/**The left-alignment option.*/LEFT:HorizontalAlignment;\\n/**The right-alignment option.*/RIGHT:HorizontalAlignment;}interface HeaderSection{\\n/**Creates and appends a new [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html).\\n\\nThe [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@return The new horizontal rule.*/appendHorizontalRule():DocumentApp.HorizontalRule;\\n/**Creates and appends a new [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob.\\n\\nThe image will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param image The image data.\\n@return The appended image.*/appendImage(image:BlobSource):DocumentApp.InlineImage;\\n/**Appends the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html).\\n\\nThe [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n\\nUse this version of `appendImage` when appending a copy of an existing [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html).\\n@param image The image data.\\n@return The appended image.*/appendImage(image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Appends the given [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html).\\n\\nUse this version of `appendListItem` when appending a copy of an existing [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html).\\n@param listItem The list item to append.\\n@return The appended list item.*/appendListItem(listItem:DocumentApp.ListItem):DocumentApp.ListItem;\\n/**Creates and appends a new [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) containing the specified text contents.\\n\\nConsecutive list items are added as part of the same list.\\n@param text The list item's text contents.\\n@return The new list item.*/appendListItem(text:string):DocumentApp.ListItem;\\n/**Appends the given [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n\\nUse this version of `appendParagraph` when appending a copy of an existing [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param paragraph The paragraph to append.\\n@return The appended paragraph.*/appendParagraph(paragraph:DocumentApp.Paragraph):DocumentApp.Paragraph;\\n/**Creates and appends a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) containing the specified text contents.\\n@param text The paragraph's text contents.\\n@return The new paragraph.*/appendParagraph(text:string):DocumentApp.Paragraph;\\n/**Creates and appends a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\n\\nThis method will also append an empty paragraph after the table, since Google Docs documents\\ncannot end with a table.\\n@return The new table.*/appendTable():DocumentApp.Table;\\n/**Appends the given [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\n\\nUse this version of `appendTable` when appending a copy of an existing [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\nThis method will also append an empty paragraph after the table, since Google Docs documents\\ncannot end with a table.\\n@param table The table to append.\\n@return The appended table.*/appendTable(table:DocumentApp.Table):DocumentApp.Table;\\n/**Appends a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) containing a [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) for each specified string value.\\n\\nThis method will also append an empty paragraph after the table, since Google Docs documents\\ncannot end with a table.\\n@param cells The text contents of the table cells to add to the new table.\\n@return The appended table.*/appendTable(cells:string[][]):DocumentApp.Table;\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.HeaderSection;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.HeaderSection;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves all the [`Footnotes`](https://developers.google.com/apps-script/reference/document/footnote.html) contained in the section.\\n@deprecated\\n@return The section footnotes.*/getFootnotes():DocumentApp.Footnote[];\\n/**Retrieves all the [`InlineImages`](https://developers.google.com/apps-script/reference/document/inline-image.html) contained in the section.\\n@return The section images.*/getImages():DocumentApp.InlineImage[];\\n/**Retrieves the link url.\\n@deprecated\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves all the [`ListItems`](https://developers.google.com/apps-script/reference/document/list-item.html) contained in the section.\\n@return The section list items.*/getListItems():DocumentApp.ListItem[];\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@deprecated\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves all the [`Paragraphs`](https://developers.google.com/apps-script/reference/document/paragraph.html) contained in the section (including [`ListItems`](https://developers.google.com/apps-script/reference/document/list-item.html)).\\n@return The section paragraphs.*/getParagraphs():DocumentApp.Paragraph[];\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@deprecated\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves all the [`Tables`](https://developers.google.com/apps-script/reference/document/table.html) contained in the section.\\n@return The section tables.*/getTables():DocumentApp.Table[];\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Creates and inserts a new [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) at the specified index.\\n\\nThe [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex The index at which to insert the element.\\n@return The new horizontal rule.*/insertHorizontalRule(childIndex:Integer):DocumentApp.HorizontalRule;\\n/**Creates and inserts an [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob, at the specified\\nindex.\\n@param childIndex The index at which to insert the element.\\n@param image The image data.\\n@return The inserted inline image.*/insertImage(childIndex:Integer,image:BlobSource):DocumentApp.InlineImage;\\n/**Inserts the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) at the specified index.\\n\\nThe image will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex The index at which to insert the element.\\n@param image The image to insert.\\n@return The inserted inline image.*/insertImage(childIndex:Integer,image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Inserts the given [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@param listItem The list item to insert.\\n@return The inserted list item.*/insertListItem(childIndex:Integer,listItem:DocumentApp.ListItem):DocumentApp.ListItem;\\n/**Creates and inserts a new [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) at the specified index, containing the specified\\ntext contents.\\n@param childIndex The index at which to insert.\\n@param text The list item's text contents.\\n@return The new list item.*/insertListItem(childIndex:Integer,text:string):DocumentApp.ListItem;\\n/**Inserts the given [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@param paragraph The paragraph to insert.\\n@return The inserted paragraph.*/insertParagraph(childIndex:Integer,paragraph:DocumentApp.Paragraph):DocumentApp.Paragraph;\\n/**Creates and inserts a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) at the specified index, containing the specified\\ntext contents.\\n@param childIndex The index at which to insert.\\n@param text The paragraph's text contents.\\n@return The new paragraph.*/insertParagraph(childIndex:Integer,text:string):DocumentApp.Paragraph;\\n/**Creates and inserts a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@return The new table.*/insertTable(childIndex:Integer):DocumentApp.Table;\\n/**Inserts the given [`Table`](https://developers.google.com/apps-script/reference/document/table.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@param table The table to insert.\\n@return The inserted table.*/insertTable(childIndex:Integer,table:DocumentApp.Table):DocumentApp.Table;\\n/**Creates and inserts a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) containing the specified cells, at the specified index.\\n@param childIndex The index at which to insert.\\n@param cells The text contents of the table cells to add to the new table.\\n@return The new table.*/insertTable(childIndex:Integer,cells:string[][]):DocumentApp.Table;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@deprecated\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Removes the specified child element.\\n@param child The child element to remove.\\n@return The current element.*/removeChild(child:DocumentApp.Element):DocumentApp.HeaderSection;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.HeaderSection;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.HeaderSection;\\n/**Sets the link url.\\n@deprecated\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.HeaderSection;\\n/**Sets the contents as plain text.\\n\\nNote: existing contents are cleared.\\n@param text The new text contents.\\n@return The current element.*/setText(text:string):DocumentApp.HeaderSection;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.HeaderSection;}interface GlyphType{}interface _GlyphType{\\n/**The default bullet, circular and filled.*/BULLET:GlyphType;\\n/**A hollow bullet.*/HOLLOW_BULLET:GlyphType;\\n/**A latin, lowercase bullet.*/LATIN_LOWER:GlyphType;\\n/**A latin, uppercase bullet.*/LATIN_UPPER:GlyphType;\\n/**A number based bullet.*/NUMBER:GlyphType;\\n/**A roman numeral, lowercase bullet.*/ROMAN_LOWER:GlyphType;\\n/**A roman numeral, uppercase bullet.*/ROMAN_UPPER:GlyphType;\\n/**A square bullet.*/SQUARE_BULLET:GlyphType;}interface FootnoteSection{\\n/**Appends the given [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n\\nUse this version of `appendParagraph` when appending a copy of an existing [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param paragraph The paragraph to append.\\n@return The appended paragraph.*/appendParagraph(paragraph:DocumentApp.Paragraph):DocumentApp.Paragraph;\\n/**Creates and appends a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) containing the specified text contents.\\n@param text The paragraph's text contents.\\n@return The new paragraph.*/appendParagraph(text:string):DocumentApp.Paragraph;\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.FootnoteSection;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.FootnoteSection;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves all the [`Footnotes`](https://developers.google.com/apps-script/reference/document/footnote.html) contained in the section.\\n@deprecated\\n@return The section footnotes.*/getFootnotes():DocumentApp.Footnote[];\\n/**Retrieves the link url.\\n@deprecated\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves all the [`Paragraphs`](https://developers.google.com/apps-script/reference/document/paragraph.html) contained in the section (including [`ListItems`](https://developers.google.com/apps-script/reference/document/list-item.html)).\\n@return The section paragraphs.*/getParagraphs():DocumentApp.Paragraph[];\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Inserts the given [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@param paragraph The paragraph to insert.\\n@return The inserted paragraph.*/insertParagraph(childIndex:Integer,paragraph:DocumentApp.Paragraph):DocumentApp.Paragraph;\\n/**Creates and inserts a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) at the specified index, containing the specified\\ntext contents.\\n@param childIndex The index at which to insert.\\n@param text The paragraph's text contents.\\n@return The new paragraph.*/insertParagraph(childIndex:Integer,text:string):DocumentApp.Paragraph;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@deprecated\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Removes the specified child element.\\n@param child The child element to remove.\\n@return The current element.*/removeChild(child:DocumentApp.Element):DocumentApp.FootnoteSection;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.FootnoteSection;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.FootnoteSection;\\n/**Sets the link url.\\n@deprecated\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.FootnoteSection;\\n/**Sets the contents as plain text.\\n\\nNote: existing contents are cleared.\\n@param text The new text contents.\\n@return The current element.*/setText(text:string):DocumentApp.FootnoteSection;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.FootnoteSection;}interface Footnote{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.Footnote;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the contents of the footnote element.\\n@return the footnote section*/getFootnoteContents():DocumentApp.FootnoteSection;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.Footnote;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.Footnote;}interface FooterSection{\\n/**Creates and appends a new [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html).\\n\\nThe [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@return The new horizontal rule.*/appendHorizontalRule():DocumentApp.HorizontalRule;\\n/**Creates and appends a new [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob.\\n\\nThe image will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param image The image data.\\n@return The appended image.*/appendImage(image:BlobSource):DocumentApp.InlineImage;\\n/**Appends the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html).\\n\\nThe [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n\\nUse this version of `appendImage` when appending a copy of an existing [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html).\\n@param image The image data.\\n@return The appended image.*/appendImage(image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Appends the given [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html).\\n\\nUse this version of `appendListItem` when appending a copy of an existing [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html).\\n@param listItem The list item to append.\\n@return The appended list item.*/appendListItem(listItem:DocumentApp.ListItem):DocumentApp.ListItem;\\n/**Creates and appends a new [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) containing the specified text contents.\\n\\nConsecutive list items are added as part of the same list.\\n@param text The list item's text contents.\\n@return The new list item.*/appendListItem(text:string):DocumentApp.ListItem;\\n/**Appends the given [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n\\nUse this version of `appendParagraph` when appending a copy of an existing [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param paragraph The paragraph to append.\\n@return The appended paragraph.*/appendParagraph(paragraph:DocumentApp.Paragraph):DocumentApp.Paragraph;\\n/**Creates and appends a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) containing the specified text contents.\\n@param text The paragraph's text contents.\\n@return The new paragraph.*/appendParagraph(text:string):DocumentApp.Paragraph;\\n/**Creates and appends a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\n\\nThis method will also append an empty paragraph after the table, since Google Docs documents\\ncannot end with a table.\\n@return The new table.*/appendTable():DocumentApp.Table;\\n/**Appends the given [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\n\\nUse this version of `appendTable` when appending a copy of an existing [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\nThis method will also append an empty paragraph after the table, since Google Docs documents\\ncannot end with a table.\\n@param table The table to append.\\n@return The appended table.*/appendTable(table:DocumentApp.Table):DocumentApp.Table;\\n/**Appends a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) containing a [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) for each specified string value.\\n\\nThis method will also append an empty paragraph after the table, since Google Docs documents\\ncannot end with a table.\\n@param cells The text contents of the table cells to add to the new table.\\n@return The appended table.*/appendTable(cells:string[][]):DocumentApp.Table;\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.FooterSection;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.FooterSection;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves all the [`Footnotes`](https://developers.google.com/apps-script/reference/document/footnote.html) contained in the section.\\n@deprecated\\n@return The section footnotes.*/getFootnotes():DocumentApp.Footnote[];\\n/**Retrieves all the [`InlineImages`](https://developers.google.com/apps-script/reference/document/inline-image.html) contained in the section.\\n@return The section images.*/getImages():DocumentApp.InlineImage[];\\n/**Retrieves the link url.\\n@deprecated\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves all the [`ListItems`](https://developers.google.com/apps-script/reference/document/list-item.html) contained in the section.\\n@return The section list items.*/getListItems():DocumentApp.ListItem[];\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@deprecated\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves all the [`Paragraphs`](https://developers.google.com/apps-script/reference/document/paragraph.html) contained in the section (including [`ListItems`](https://developers.google.com/apps-script/reference/document/list-item.html)).\\n@return The section paragraphs.*/getParagraphs():DocumentApp.Paragraph[];\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@deprecated\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves all the [`Tables`](https://developers.google.com/apps-script/reference/document/table.html) contained in the section.\\n@return The section tables.*/getTables():DocumentApp.Table[];\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Creates and inserts a new [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) at the specified index.\\n\\nThe [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex The index at which to insert the element.\\n@return The new horizontal rule.*/insertHorizontalRule(childIndex:Integer):DocumentApp.HorizontalRule;\\n/**Creates and inserts an [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob, at the specified\\nindex.\\n@param childIndex The index at which to insert the element.\\n@param image The image data.\\n@return The inserted inline image.*/insertImage(childIndex:Integer,image:BlobSource):DocumentApp.InlineImage;\\n/**Inserts the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) at the specified index.\\n\\nThe image will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex The index at which to insert the element.\\n@param image The image to insert.\\n@return The inserted inline image.*/insertImage(childIndex:Integer,image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Inserts the given [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@param listItem The list item to insert.\\n@return The inserted list item.*/insertListItem(childIndex:Integer,listItem:DocumentApp.ListItem):DocumentApp.ListItem;\\n/**Creates and inserts a new [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) at the specified index, containing the specified\\ntext contents.\\n@param childIndex The index at which to insert.\\n@param text The list item's text contents.\\n@return The new list item.*/insertListItem(childIndex:Integer,text:string):DocumentApp.ListItem;\\n/**Inserts the given [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@param paragraph The paragraph to insert.\\n@return The inserted paragraph.*/insertParagraph(childIndex:Integer,paragraph:DocumentApp.Paragraph):DocumentApp.Paragraph;\\n/**Creates and inserts a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) at the specified index, containing the specified\\ntext contents.\\n@param childIndex The index at which to insert.\\n@param text The paragraph's text contents.\\n@return The new paragraph.*/insertParagraph(childIndex:Integer,text:string):DocumentApp.Paragraph;\\n/**Creates and inserts a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@return The new table.*/insertTable(childIndex:Integer):DocumentApp.Table;\\n/**Inserts the given [`Table`](https://developers.google.com/apps-script/reference/document/table.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@param table The table to insert.\\n@return The inserted table.*/insertTable(childIndex:Integer,table:DocumentApp.Table):DocumentApp.Table;\\n/**Creates and inserts a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) containing the specified cells, at the specified index.\\n@param childIndex The index at which to insert.\\n@param cells The text contents of the table cells to add to the new table.\\n@return The new table.*/insertTable(childIndex:Integer,cells:string[][]):DocumentApp.Table;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@deprecated\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Removes the specified child element.\\n@param child The child element to remove.\\n@return The current element.*/removeChild(child:DocumentApp.Element):DocumentApp.FooterSection;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.FooterSection;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.FooterSection;\\n/**Sets the link url.\\n@deprecated\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.FooterSection;\\n/**Sets the contents as plain text.\\n\\nNote: existing contents are cleared.\\n@param text The new text contents.\\n@return The current element.*/setText(text:string):DocumentApp.FooterSection;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.FooterSection;}interface FontFamily{}interface _FontFamily{\\n/**The Amaranth font family.\\n@deprecated*/AMARANTH:FontFamily;\\n/**The Arial font family.\\n@deprecated*/ARIAL:FontFamily;\\n/**The Arial Black font family.\\n@deprecated*/ARIAL_BLACK:FontFamily;\\n/**The Arial Narrow font family.\\n@deprecated*/ARIAL_NARROW:FontFamily;\\n/**The Arvo font family.\\n@deprecated*/ARVO:FontFamily;\\n/**The Calibri font family.\\n@deprecated*/CALIBRI:FontFamily;\\n/**The Cambria font family.\\n@deprecated*/CAMBRIA:FontFamily;\\n/**The Comic Sans MS font family.\\n@deprecated*/COMIC_SANS_MS:FontFamily;\\n/**The Consolas font family.\\n@deprecated*/CONSOLAS:FontFamily;\\n/**The Corsiva font family.\\n@deprecated*/CORSIVA:FontFamily;\\n/**The Courier New font family.\\n@deprecated*/COURIER_NEW:FontFamily;\\n/**The Dancing Script font family.\\n@deprecated*/DANCING_SCRIPT:FontFamily;\\n/**The Droid Sans font family.\\n@deprecated*/DROID_SANS:FontFamily;\\n/**The Droid Serif font family.\\n@deprecated*/DROID_SERIF:FontFamily;\\n/**The Garamond font family.\\n@deprecated*/GARAMOND:FontFamily;\\n/**The Georgia font family.\\n@deprecated*/GEORGIA:FontFamily;\\n/**The Gloria Hallelujah font family.\\n@deprecated*/GLORIA_HALLELUJAH:FontFamily;\\n/**The Great Vibes font family.\\n@deprecated*/GREAT_VIBES:FontFamily;\\n/**The Lobster font family.\\n@deprecated*/LOBSTER:FontFamily;\\n/**The Merriweather font family.\\n@deprecated*/MERRIWEATHER:FontFamily;\\n/**The Pacifico font family.\\n@deprecated*/PACIFICO:FontFamily;\\n/**The Philosopher font family.\\n@deprecated*/PHILOSOPHER:FontFamily;\\n/**The Poiret One font family\\n@deprecated*/POIRET_ONE:FontFamily;\\n/**The Quattrocento font family.\\n@deprecated*/QUATTROCENTO:FontFamily;\\n/**The Roboto font family\\n@deprecated*/ROBOTO:FontFamily;\\n/**The Shadows Into Light font family.\\n@deprecated*/SHADOWS_INTO_LIGHT:FontFamily;\\n/**The Syncopate font family.\\n@deprecated*/SYNCOPATE:FontFamily;\\n/**The Tahoma font family.\\n@deprecated*/TAHOMA:FontFamily;\\n/**The Times New Roman font family.\\n@deprecated*/TIMES_NEW_ROMAN:FontFamily;\\n/**The Trebuchet MS font family.\\n@deprecated*/TREBUCHET_MS:FontFamily;\\n/**The Ubuntu font family.\\n@deprecated*/UBUNTU:FontFamily;\\n/**The Verdana font family.\\n@deprecated*/VERDANA:FontFamily;}interface EquationSymbol{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.EquationSymbol;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the code corresponding to the equation symbol.\\n@return the symbol code*/getCode():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.EquationSymbol;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.EquationSymbol;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.EquationSymbol;}interface EquationFunctionArgumentSeparator{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.EquationFunctionArgumentSeparator;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.EquationFunctionArgumentSeparator;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.EquationFunctionArgumentSeparator;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.EquationFunctionArgumentSeparator;}interface EquationFunction{\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.EquationFunction;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.EquationFunction;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves the code corresponding to the equation function.\\n@return the function code*/getCode():string;\\n/**Retrieves the link url.\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.EquationFunction;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.EquationFunction;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.EquationFunction;\\n/**Sets the link url.\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.EquationFunction;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.EquationFunction;}interface Equation{\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.Equation;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.Equation;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves the link url.\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.Equation;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.Equation;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.Equation;\\n/**Sets the link url.\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.Equation;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.Equation;}interface ElementType{}interface _ElementType{\\n/**The type corresponding to the [`Body`](https://developers.google.com/apps-script/reference/document/body.html) element.*/BODY_SECTION:ElementType;\\n/**The type corresponding to the `~~CommentSection~~` element.*/COMMENT_SECTION:ElementType;\\n/**The type corresponding to the [`Date`](https://developers.google.com/apps-script/reference/document/date.html)\\nelement.*/DATE:ElementType;\\n/**The type corresponding to the [`Equation`](https://developers.google.com/apps-script/reference/document/equation.html) element.*/EQUATION:ElementType;\\n/**The type corresponding to the [`EquationFunction`](https://developers.google.com/apps-script/reference/document/equation-function.html) element.*/EQUATION_FUNCTION:ElementType;\\n/**The type corresponding to the [`EquationFunctionArgumentSeparator`](https://developers.google.com/apps-script/reference/document/equation-function-argument-separator.html)\\nelement.*/EQUATION_FUNCTION_ARGUMENT_SEPARATOR:ElementType;\\n/**The type corresponding to the [`EquationSymbol`](https://developers.google.com/apps-script/reference/document/equation-symbol.html) element.*/EQUATION_SYMBOL:ElementType;\\n/**The type corresponding to the [`FooterSection`](https://developers.google.com/apps-script/reference/document/footer-section.html) element.*/FOOTER_SECTION:ElementType;\\n/**The type corresponding to the [`Footnote`](https://developers.google.com/apps-script/reference/document/footnote.html) element.*/FOOTNOTE:ElementType;\\n/**The type corresponding to the [`FootnoteSection`](https://developers.google.com/apps-script/reference/document/footnote-section.html) element.*/FOOTNOTE_SECTION:ElementType;\\n/**The type corresponding to the [`HeaderSection`](https://developers.google.com/apps-script/reference/document/header-section.html) element.*/HEADER_SECTION:ElementType;\\n/**The type corresponding to the [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) element.*/HORIZONTAL_RULE:ElementType;\\n/**The type corresponding to the [`InlineDrawing`](https://developers.google.com/apps-script/reference/document/inline-drawing.html) element.*/INLINE_DRAWING:ElementType;\\n/**The type corresponding to the [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) element.*/INLINE_IMAGE:ElementType;\\n/**The type corresponding to the [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) element.*/LIST_ITEM:ElementType;\\n/**The type corresponding to the [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) element.*/PAGE_BREAK:ElementType;\\n/**The type corresponding to the [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) element.*/PARAGRAPH:ElementType;\\n/**The type corresponding to the [`Person`](https://developers.google.com/apps-script/reference/document/person.html) element.*/PERSON:ElementType;\\n/**The type corresponding to the [`RichLink`](https://developers.google.com/apps-script/reference/document/rich-link.html) element.*/RICH_LINK:ElementType;\\n/**The type corresponding to the [`Table`](https://developers.google.com/apps-script/reference/document/table.html) element.*/TABLE:ElementType;\\n/**The type corresponding to the [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) element.*/TABLE_CELL:ElementType;\\n/**The type corresponding to the [`TableOfContents`](https://developers.google.com/apps-script/reference/document/table-of-contents.html) element.*/TABLE_OF_CONTENTS:ElementType;\\n/**The type corresponding to the [`TableRow`](https://developers.google.com/apps-script/reference/document/table-row.html) element.*/TABLE_ROW:ElementType;\\n/**The type corresponding to the [`Text`](https://developers.google.com/apps-script/reference/document/text.html)\\nelement.*/TEXT:ElementType;\\n/**The type corresponding to [`UnsupportedElement`](https://developers.google.com/apps-script/reference/document/unsupported-element.html). Unsupported elements\\nrepresent document portions that do not support scripting.*/UNSUPPORTED:ElementType;}interface Element{\\n/**Returns the current element as a [`Body`](https://developers.google.com/apps-script/reference/document/body.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asBody():DocumentApp.Body;\\n/**Returns the current element as a [`Date`](https://developers.google.com/apps-script/reference/document/date.html).\\n\\nWhen you know an element is a [`Date`](https://developers.google.com/apps-script/reference/document/date.html), use this method to set its type as a [`Date`](https://developers.google.com/apps-script/reference/document/date.html). Doing so lets autocomplete in the Apps Script editor show you the methods you can use\\nwith a [`Date`](https://developers.google.com/apps-script/reference/document/date.html).\\n@return The current element with its type set as [`Date`](https://developers.google.com/apps-script/reference/document/date.html).*/asDate():DocumentApp.Date;\\n/**Returns the current element as an [`Equation`](https://developers.google.com/apps-script/reference/document/equation.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asEquation():DocumentApp.Equation;\\n/**Returns the current element as a [`EquationFunction`](https://developers.google.com/apps-script/reference/document/equation-function.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asEquationFunction():DocumentApp.EquationFunction;\\n/**Returns the current element as a [`EquationFunctionArgumentSeparator`](https://developers.google.com/apps-script/reference/document/equation-function-argument-separator.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asEquationFunctionArgumentSeparator():DocumentApp.EquationFunctionArgumentSeparator;\\n/**Returns the current element as a [`EquationSymbol`](https://developers.google.com/apps-script/reference/document/equation-symbol.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asEquationSymbol():DocumentApp.EquationSymbol;\\n/**Returns the current element as a [`FooterSection`](https://developers.google.com/apps-script/reference/document/footer-section.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asFooterSection():DocumentApp.FooterSection;\\n/**Returns the current element as a [`Footnote`](https://developers.google.com/apps-script/reference/document/footnote.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asFootnote():DocumentApp.Footnote;\\n/**Returns the current element as a [`FootnoteSection`](https://developers.google.com/apps-script/reference/document/footnote-section.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asFootnoteSection():DocumentApp.FootnoteSection;\\n/**Returns the current element as a [`HeaderSection`](https://developers.google.com/apps-script/reference/document/header-section.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asHeaderSection():DocumentApp.HeaderSection;\\n/**Returns the current element as a [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asHorizontalRule():DocumentApp.HorizontalRule;\\n/**Returns the current element as a [`InlineDrawing`](https://developers.google.com/apps-script/reference/document/inline-drawing.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asInlineDrawing():DocumentApp.InlineDrawing;\\n/**Returns the current element as a [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asInlineImage():DocumentApp.InlineImage;\\n/**Returns the current element as a [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asListItem():DocumentApp.ListItem;\\n/**Returns the current element as a [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asPageBreak():DocumentApp.PageBreak;\\n/**Returns the current element as a [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asParagraph():DocumentApp.Paragraph;\\n/**Returns the current element as a [`Person`](https://developers.google.com/apps-script/reference/document/person.html).\\n\\nWhen you know an element is a [`Person`](https://developers.google.com/apps-script/reference/document/person.html), use this method to set its type as a person.\\nDoing so lets autocomplete in the Apps Script editor show you the methods you can use with a\\nperson element.\\n@return The current element with its type set as [`Person`](https://developers.google.com/apps-script/reference/document/person.html).*/asPerson():DocumentApp.Person;\\n/**Returns the current element as a [`RichLink`](https://developers.google.com/apps-script/reference/document/rich-link.html), for example, a link to a Google Sheets file.\\n\\nWhen you know an element is a [`RichLink`](https://developers.google.com/apps-script/reference/document/rich-link.html), use this method to set its type as a [`RichLink`](https://developers.google.com/apps-script/reference/document/rich-link.html). Doing so lets autocomplete in the Apps Script editor show you the methods you can\\nuse with a [`RichLink`](https://developers.google.com/apps-script/reference/document/rich-link.html).\\n@return The current element with its type set as [`RichLink`](https://developers.google.com/apps-script/reference/document/rich-link.html).*/asRichLink():DocumentApp.RichLink;\\n/**Returns the current element as a [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asTable():DocumentApp.Table;\\n/**Returns the current element as a [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asTableCell():DocumentApp.TableCell;\\n/**Returns the current element as a [`TableOfContents`](https://developers.google.com/apps-script/reference/document/table-of-contents.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asTableOfContents():DocumentApp.TableOfContents;\\n/**Returns the current element as a [`TableRow`](https://developers.google.com/apps-script/reference/document/table-row.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asTableRow():DocumentApp.TableRow;\\n/**Returns the current element as a [`Text`](https://developers.google.com/apps-script/reference/document/text.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asText():DocumentApp.Text;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.Element;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.Element;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.Element;}interface DocumentTab{\\n/**Adds a [`Bookmark`](https://developers.google.com/apps-script/reference/document/bookmark.html) at the given [`Position`](https://developers.google.com/apps-script/reference/document/position.html).\\n\\n```\\n// Opens the Docs file and retrieves the tab by its IDs. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument().getActiveTab() instead.\\n// TODO(developer): Replace the IDs with your own.\\nconst documentTab \\u003d DocumentApp.openById(DOCUMENT_ID).getTab(TAB_ID).asDocumentTab();\\n\\n// Gets the tab body and adds a paragraph.\\nconst paragraph \\u003d documentTab.getBody().appendParagraph('My new paragraph.');\\n\\n// Creates a position at the first character of the paragraph text.\\nconst position \\u003d documentTab.newPosition(paragraph.getChild(0), 0);\\n\\n// Adds a bookmark at the first character of the paragraph text.\\nconst bookmark \\u003d documentTab.addBookmark(position);\\n\\n// Logs the bookmark ID to the console.\\nconsole.log(bookmark.getId());\\n```\\n@param position The position of the new bookmark.\\n@return The new bookmark.*/addBookmark(position:DocumentApp.Position):DocumentApp.Bookmark;\\n/**Adds a tab footer section, if none exists.\\n\\n```\\n// Opens the Docs file and retrieves the tab by its IDs. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument().getActiveTab() instead.\\n// TODO(developer): Replace the IDs with your own.\\nconst documentTab \\u003d DocumentApp.openById(DOCUMENT_ID).getTab(TAB_ID).asDocumentTab();\\n\\n// Adds a footer to the tab.\\nconst footer \\u003d documentTab.addFooter();\\n\\n// Sets the footer text to 'This is a footer.'\\nfooter.setText('This is a footer');\\n```\\n@return The tab footer.*/addFooter():DocumentApp.FooterSection;\\n/**Adds a tab header section, if none exists.\\n\\n```\\n// Opens the Docs file and retrieves the tab by its IDs. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument().getActiveTab() instead.\\n// TODO(developer): Replace the IDs with your own.\\nconst documentTab \\u003d DocumentApp.openById(DOCUMENT_ID).getTab(TAB_ID).asDocumentTab();\\n\\n// Adds a header to the tab.\\nconst header \\u003d documentTab.addHeader();\\n\\n// Sets the header text to 'This is a header.'\\nheader.setText('This is a header');\\n```\\n@return The tab header.*/addHeader():DocumentApp.HeaderSection;\\n/**Adds a [`NamedRange`](https://developers.google.com/apps-script/reference/document/named-range.html), which is a [`Range`](https://developers.google.com/apps-script/reference/document/range.html) that has a name and ID to use for\\nlater retrieval. Names aren't necessarily unique, even across tabs; several different ranges in\\nthe same document can share the same name, much like a class in HTML. By contrast, IDs are\\nunique within the document, like an ID in HTML. After you add a `NamedRange` you can't\\nmodify it, you can only remove it.\\n\\nAny script that accesses the tab can access a `NamedRange`. To avoid unintended\\nconflicts between scripts, consider prefixing range names with a unique string.\\n\\n```\\n// Creates a named range that includes every table in a tab by its ID.\\n// TODO(developer): Replace the IDs with your own.\\nvar documentTab \\u003d DocumentApp.openById(DOCUMENT_ID).getTab(TAB_ID).asDocumentTab();\\nvar rangeBuilder \\u003d documentTab.newRange();\\nvar tables \\u003d documentTab.getBody().getTables();\\nfor (var i \\u003d 0; i \\u003c tables.length; i++) {\\n  rangeBuilder.addElement(tables[i]);\\n}\\ndocumentTab.addNamedRange('Tab t.0 tables', rangeBuilder.build());\\n```\\n@param name The name for the range, which doesn't need to be unique; range names must be\\n    between 1-256 characters.\\n@param range The range of elements to associate with the name; the range can be a [search result](https://developers.google.com/apps-script/reference/document/body.html#findText(String)) or manually constructed with [`newRange()`](https://developers.google.com/apps-script/reference/document/document-tab.html#newRange()).\\n@return The `NamedRange`.*/addNamedRange(name:string,range:DocumentApp.Range):DocumentApp.NamedRange;\\n/**Retrieves the tab's [`Body`](https://developers.google.com/apps-script/reference/document/body.html).\\n\\nTabs may contain different types of sections (for example, [`HeaderSection`](https://developers.google.com/apps-script/reference/document/header-section.html), [`FooterSection`](https://developers.google.com/apps-script/reference/document/footer-section.html)). The active section for a tab is the [`Body`](https://developers.google.com/apps-script/reference/document/body.html).\\n\\nElement methods in `DocumentTab` delegate to the [`Body`](https://developers.google.com/apps-script/reference/document/body.html).\\n\\n```\\n// Opens the Docs file and retrieves the tab by its IDs. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument().getActiveTab() instead.\\n// TODO(developer): Replace the IDs with your own.\\nconst documentTab \\u003d DocumentApp.openById(DOCUMENT_ID).getTab(TAB_ID).asDocumentTab();\\n\\n// Gets the tab body.\\nconst body \\u003d documentTab.getBody();\\n\\n// Gets the body text and logs it to the console.\\nconsole.log(body.getText());\\n```\\n@return The tab's body section.*/getBody():DocumentApp.Body;\\n/**Gets the [`Bookmark`](https://developers.google.com/apps-script/reference/document/bookmark.html) with the given ID. This method returns `null` if no such `Bookmark` exists within this tab.\\n\\n```\\n// Opens the Docs file and retrieves the tab by its IDs. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument().getActiveTab() instead.\\n// TODO(developer): Replace the IDs with your own.\\nconst documentTab \\u003d DocumentApp.openById(DOCUMENT_ID).getTab(TAB_ID).asDocumentTab();\\n\\n// Gets the bookmark by its ID.\\nconst bookmark \\u003d documentTab.getBookmark('id.xyz654321');\\n\\n// If the bookmark exists within the tab, logs the character offset of its position to the\\n// console. Otherwise, logs 'No bookmark exists with the given ID.' to the console.\\nif (bookmark) {\\n  console.log(bookmark.getPosition().getOffset());\\n} else {\\n  console.log('No bookmark exists with the given ID.');\\n}\\n```\\n@param id The ID for the `Bookmark`.\\n@return The `Bookmark` with the given ID, or `null` if no such `Bookmark`\\n    exists within the tab.*/getBookmark(id:string):DocumentApp.Bookmark;\\n/**Gets all [`Bookmark`](https://developers.google.com/apps-script/reference/document/bookmark.html) objects in the tab.\\n\\n```\\n// Opens the Docs file and retrieves the tab by its IDs. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument().getActiveTab() instead.\\n// TODO(developer): Replace the IDs with your own.\\nconst documentTab \\u003d DocumentApp.openById(DOCUMENT_ID).getTab(TAB_ID).asDocumentTab();\\n\\n// Gets all of the bookmarks in the tab.\\nconst bookmarks \\u003d documentTab.getBookmarks();\\n\\n// Logs the number of bookmarks in the tab to the console.\\nconsole.log(bookmarks.length);\\n```\\n@return An array of the `Bookmark` objects in the tab.*/getBookmarks():DocumentApp.Bookmark[];\\n/**Retrieves the tab's footer section, if one exists.\\n\\n```\\n// Opens the Docs file and retrieves the tab by its IDs. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument().getActiveTab() instead.\\n// TODO(developer): Replace the IDs with your own.\\nconst documentTab \\u003d DocumentApp.openById(DOCUMENT_ID).getTab(TAB_ID).asDocumentTab();\\n\\n// Gets the text of the tab's footer and logs it to the console.\\nconsole.log(documentTab.getFooter().getText());\\n```\\n@return The tab's footer.*/getFooter():DocumentApp.FooterSection;\\n/**Retrieves all the [`Footnote`](https://developers.google.com/apps-script/reference/document/footnote.html) elements in the tab's body.\\n\\nCalls to `getFootnotes` cause an iteration over the tab's elements. For large tabs,\\navoid unnecessary calls to this method.\\n\\n```\\n// Opens the Docs file and retrieves the tab by its IDs. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument().getActiveTab() instead.\\n// TODO(developer): Replace the IDs with your own.\\nconst documentTab \\u003d DocumentApp.openById(DOCUMENT_ID).getTab(TAB_ID).asDocumentTab();\\n\\n// Gets the first footnote.\\nconst footnote \\u003d documentTab.getFootnotes()[0];\\n\\n// Logs footnote contents to the console.\\nconsole.log(footnote.getFootnoteContents().getText());\\n```\\n@return The tab's footnotes.*/getFootnotes():DocumentApp.Footnote[];\\n/**Retrieves the tab's header section, if one exists.\\n\\n```\\n// Opens the Docs file and retrieves the tab by its IDs. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument().getActiveTab() instead.\\n// TODO(developer): Replace the IDs with your own.\\nconst documentTab \\u003d DocumentApp.openById(DOCUMENT_ID).getTab(TAB_ID).asDocumentTab();\\n\\n// Gets the text of the tab's header and logs it to the console.\\nconsole.log(documentTab.getHeader().getText());\\n```\\n@return The tab's header.*/getHeader():DocumentApp.HeaderSection;\\n/**Gets the [`NamedRange`](https://developers.google.com/apps-script/reference/document/named-range.html) with the given ID. This method returns `null` if no such\\n`NamedRange` exists in the tab. Names are not necessarily unique, even across tabs;\\nseveral different ranges in the same document may share the same name, much like a class in\\nHTML. By contrast, IDs are unique within the tab, like an ID in HTML.\\n@param id The range's ID, which is unique within the tab.\\n@return The `NamedRange` with the given ID, or `null` if no such range exists in\\n    the tab.*/getNamedRangeById(id:string):DocumentApp.NamedRange;\\n/**Gets all [`NamedRange`](https://developers.google.com/apps-script/reference/document/named-range.html) objects in the tab.\\n\\nA `NamedRange` can be accessed by any script that accesses the tab. To avoid\\nunintended conflicts between scripts, consider prefixing range names with a unique string.\\n@return An array of the `NamedRange` objects in the tab, possibly including multiple\\n    ranges with the same name.*/getNamedRanges():DocumentApp.NamedRange[];\\n/**Gets all [`NamedRange`](https://developers.google.com/apps-script/reference/document/named-range.html) objects in the tab with the given name. Names are not necessarily\\nunique, even across tabs; several different ranges in the same document may share the same\\nname, much like a class in HTML. By contrast, IDs are unique within the tab, like an ID in\\nHTML.\\n\\nA `NamedRange` can be accessed by any script that accesses the tab. To avoid\\nunintended conflicts between scripts, consider prefixing range names with a unique string.\\n@param name The range's name, which is not necessarily unique.\\n@return An array of the `NamedRange` objects in the tab with the given name.*/getNamedRanges(name:string):DocumentApp.NamedRange[];\\n/**Creates a new [`Position`](https://developers.google.com/apps-script/reference/document/position.html), which is a reference to a location in the tab, relative to a\\nspecific element. The user's cursor is represented as a `Position`, among other uses.\\n\\n```\\n// Append a paragraph, then place the user's cursor after the first word of the new paragraph.\\n// TODO(developer): Replace the IDs with your own.\\nvar doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\nvar documentTab \\u003d doc.getTab(TAB_ID).asDocumentTab();\\nvar paragraph \\u003d documentTab.getBody().appendParagraph('My new paragraph.');\\nvar position \\u003d documentTab.newPosition(paragraph.getChild(0), 2);\\ndoc.setCursor(position);\\n```\\n@param element The element that contains the newly created `Position` to; this must be\\n    either a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element or a container element like [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param offset For [`Text`](https://developers.google.com/apps-script/reference/document/text.html) elements, the number of characters before the `Position`;\\n    for other elements, the number of child elements before the `Position` within the\\n    same container element.\\n@return The new `Position`.*/newPosition(element:DocumentApp.Element,offset:Integer):DocumentApp.Position;\\n/**Creates a builder used to construct [`Range`](https://developers.google.com/apps-script/reference/document/range.html) objects from tab elements.\\n\\n```\\n// Change the user's selection to a range that includes every table in the tab.\\n// TODO(developer): Replace the IDs with your own.\\nvar doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\nvar documentTab \\u003d doc.getTab(TAB_ID).asDocumentTab();\\nvar rangeBuilder \\u003d documentTab.newRange();\\nvar tables \\u003d documentTab.getBody().getTables();\\nfor (var i \\u003d 0; i \\u003c tables.length; i++) {\\n  rangeBuilder.addElement(tables[i]);\\n}\\ndoc.setSelection(rangeBuilder.build());\\n```\\n@return The new builder.*/newRange():DocumentApp.RangeBuilder;}interface Document{\\n/**Adds a [`Bookmark`](https://developers.google.com/apps-script/reference/document/bookmark.html) at the given [`Position`](https://developers.google.com/apps-script/reference/document/position.html) to the first tab or, for scripts that are\\n[bound](/apps-script/scripts_containers) to a document, the active tab. To add a\\nbookmark to any tab, use the [`DocumentTab.addBookmark(position)`](https://developers.google.com/apps-script/reference/document/document-tab.html#addBookmark(Position)) method.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the active or first tab's body and adds a paragraph.\\nconst paragraph \\u003d doc.getBody().appendParagraph('My new paragraph.');\\n\\n// Creates a position at the first character of the paragraph text.\\nconst position \\u003d doc.newPosition(paragraph.getChild(0), 0);\\n\\n// Adds a bookmark at the first character of the paragraph text.\\nconst bookmark \\u003d doc.addBookmark(position);\\n\\n// Logs the bookmark ID to the console.\\nconsole.log(bookmark.getId());\\n```\\n\\n}\\n@param position The position of the new bookmark.\\n@return The new bookmark.*/addBookmark(position:DocumentApp.Position):DocumentApp.Bookmark;\\n/**Adds the given user to the list of editors for the [`Document`](https://developers.google.com/apps-script/reference/document/document.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param emailAddress The email address of the user to add.\\n@return This [`Document`](https://developers.google.com/apps-script/reference/document/document.html), for chaining.*/addEditor(emailAddress:string):DocumentApp.Document;\\n/**Adds the given user to the list of editors for the [`Document`](https://developers.google.com/apps-script/reference/document/document.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param user A representation of the user to add.\\n@return This [`Document`](https://developers.google.com/apps-script/reference/document/document.html), for chaining.*/addEditor(user:User):DocumentApp.Document;\\n/**Adds the given array of users to the list of editors for the [`Document`](https://developers.google.com/apps-script/reference/document/document.html). If any of the\\nusers were already on the list of viewers, this method promotes them out of the list of\\nviewers.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`Document`](https://developers.google.com/apps-script/reference/document/document.html), for chaining.*/addEditors(emailAddresses:string[]):DocumentApp.Document;\\n/**Adds a footer section, if none exists, to the first tab or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab. To add a footer\\nsection to any tab, use the [`DocumentTab.addFooter()`](https://developers.google.com/apps-script/reference/document/document-tab.html#addFooter()) method.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Adds a footer to the document's active or first tab.\\nconst footer \\u003d doc.addFooter();\\n\\n// Sets the footer text to 'This is a footer.'\\nfooter.setText('This is a footer');\\n```\\n@return The tab footer.*/addFooter():DocumentApp.FooterSection;\\n/**Adds a header section, if none exists, to the first tab or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab. To add a header\\nsection to any tab, use the [`DocumentTab.addHeader()`](https://developers.google.com/apps-script/reference/document/document-tab.html#addHeader()) method.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Adds a header to the document's active or first tab.\\nconst header \\u003d doc.addHeader();\\n\\n// Sets the header text to 'This is a header.'\\nheader.setText('This is a header');\\n```\\n@return The tab header.*/addHeader():DocumentApp.HeaderSection;\\n/**Adds a [`NamedRange`](https://developers.google.com/apps-script/reference/document/named-range.html), which is a [`Range`](https://developers.google.com/apps-script/reference/document/range.html) that has a name and ID to use for\\nlater retrieval, in the first tab or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab. To add a `NamedRange` in any tab, use the [`DocumentTab.addNamedRange(name, range)`](https://developers.google.com/apps-script/reference/document/document-tab.html#addNamedRange(String,Range)) method. Names aren't\\nnecessarily unique; several different ranges in the same document can share the same name, much\\nlike a class in HTML. By contrast, IDs are unique within the document, like an ID in HTML.\\nAfter you add a `NamedRange` to a document, you can't modify it, you can only remove it.\\n\\nAny script that accesses the document can access a `NamedRange`. To avoid unintended\\nconflicts between scripts, consider prefixing range names with a unique string.\\n\\n```\\n// Creates a named range that includes every table in the active tab.\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar rangeBuilder \\u003d doc.newRange();\\nvar tables \\u003d doc.getBody().getTables();\\nfor (var i \\u003d 0; i \\u003c tables.length; i++) {\\n  rangeBuilder.addElement(tables[i]);\\n}\\n// Adds the named range to the document's active tab.\\ndoc.addNamedRange('Document tables', rangeBuilder.build());\\n```\\n@param name The name for the range, which doesn't need to be unique; range names must be\\n    between 1-256 characters.\\n@param range The range of elements to associate with the name; the range can be [the active selection](https://developers.google.com/apps-script/reference/document/document.html#getSelection()), a [search result](https://developers.google.com/apps-script/reference/document/body.html#findText(String)), or manually constructed with [`newRange()`](https://developers.google.com/apps-script/reference/document/document.html#newRange()).\\n@return The `NamedRange`.*/addNamedRange(name:string,range:DocumentApp.Range):DocumentApp.NamedRange;\\n/**Adds the given user to the list of viewers for the [`Document`](https://developers.google.com/apps-script/reference/document/document.html). If the user was already\\non the list of editors, this method has no effect.\\n@param emailAddress The email address of the user to add.\\n@return This [`Document`](https://developers.google.com/apps-script/reference/document/document.html), for chaining.*/addViewer(emailAddress:string):DocumentApp.Document;\\n/**Adds the given user to the list of viewers for the [`Document`](https://developers.google.com/apps-script/reference/document/document.html). If the user was already\\non the list of editors, this method has no effect.\\n@param user A representation of the user to add.\\n@return This [`Document`](https://developers.google.com/apps-script/reference/document/document.html), for chaining.*/addViewer(user:User):DocumentApp.Document;\\n/**Adds the given array of users to the list of viewers for the [`Document`](https://developers.google.com/apps-script/reference/document/document.html). If any of the\\nusers were already on the list of editors, this method has no effect for them.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`Document`](https://developers.google.com/apps-script/reference/document/document.html), for chaining.*/addViewers(emailAddresses:string[]):DocumentApp.Document;\\n/**Gets the user's currently active [`Tab`](https://developers.google.com/apps-script/reference/document/tab.html) in the document. A script can only access the\\nactive tab of the user who is running the script, and only if the script is [bound](/apps-script/scripts_containers) to the document.\\n\\n```\\n// Display a dialog box that shows the title of the tab that the\\n// user is currently viewing.\\nconst tab \\u003d DocumentApp.getActiveDocument().getActiveTab();\\nDocumentApp.getUi().alert('ID of selected tab: ' + tab.getTitle());\\n```\\n@return The user's currently active [`Tab`](https://developers.google.com/apps-script/reference/document/tab.html), or `null` if the script is not bound to\\n    the document.*/getActiveTab():DocumentApp.Tab;\\n/**Retrieves the current `Document` contents as a blob of the specified type.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the document as a PDF.\\nconst pdf \\u003d doc.getAs('application/pdf');\\n\\n// Logs the name of the PDF to the console.\\nconsole.log(pdf.getName());\\n```\\n@param contentType The MIME type to convert to; `'application/pdf'` and `'text/markdown'` are supported.\\n@return The current document as a blob.*/getAs(contentType:string):Blob;\\n/**Retrieves the current `Document` contents as a blob.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Retrieves the current document's contents as a blob and logs it to the console.\\nconsole.log(doc.getBlob().getContentType());\\n```\\n@return The current document as a blob.*/getBlob():Blob;\\n/**Retrieves the first tab's [`Body`](https://developers.google.com/apps-script/reference/document/body.html) or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab's `DocumentBodySection`. To get the `DocumentBodySection` of any tab, use the [`DocumentTab.getBody()`](https://developers.google.com/apps-script/reference/document/document-tab.html#getBody()) method.\\n\\nTabs may contain different types of sections (for example, [`HeaderSection`](https://developers.google.com/apps-script/reference/document/header-section.html), [`FooterSection`](https://developers.google.com/apps-script/reference/document/footer-section.html)). The active section for a tab is the [`Body`](https://developers.google.com/apps-script/reference/document/body.html).\\n\\nElement methods in `Document` delegate to the active [`Body`](https://developers.google.com/apps-script/reference/document/body.html).\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the active or first tab's body.\\nconst body \\u003d doc.getBody();\\n\\n// Gets the body text and logs it to the console.\\nconsole.log(body.getText());\\n```\\n@return The tab body section.*/getBody():DocumentApp.Body;\\n/**Gets the [`Bookmark`](https://developers.google.com/apps-script/reference/document/bookmark.html) with the given ID in the first tab or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab. To get a\\nbookmark in any tab, use the [`DocumentTab.getBookmark(id)`](https://developers.google.com/apps-script/reference/document/document-tab.html#getBookmark(String)) method. This method returns `null` if no such `Bookmark` exists within the tab.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the bookmark by its ID in the document's active or first tab.\\nconst bookmark \\u003d doc.getBookmark('id.xyz654321');\\n\\n// If the bookmark exists, logs the character offset of its position to the console.\\n// otherwise, logs 'No bookmark exists with the given ID.' to the console.\\nif (bookmark) {\\n  console.log(bookmark.getPosition().getOffset());\\n} else {\\n  console.log('No bookmark exists with the given ID.');\\n}\\n```\\n@param id The ID for the `Bookmark`.\\n@return The `Bookmark` with the given ID, or `null` if no such `Bookmark`\\n    exists within the tab.*/getBookmark(id:string):DocumentApp.Bookmark;\\n/**Gets all [`Bookmark`](https://developers.google.com/apps-script/reference/document/bookmark.html) objects in the first tab or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab. To get all\\nbookmarks in any tab, use the [`DocumentTab.getBookmarks()`](https://developers.google.com/apps-script/reference/document/document-tab.html#getBookmarks()) method.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets all of the bookmarks in the document's active or first tab.\\nconst bookmarks \\u003d doc.getBookmarks();\\n\\n// Logs the number of bookmarks in the tab to the console.\\nconsole.log(bookmarks.length);\\n```\\n@return An array of the `Bookmark` objects in the tab.*/getBookmarks():DocumentApp.Bookmark[];\\n/**Gets the user's cursor in the active tab. A script can only access the cursor of the user who\\nis running the script, and only if the script is [bound](/apps-script/scripts_containers) to the document.\\n\\n```\\n// Insert some text at the cursor position and make it bold.\\nvar cursor \\u003d DocumentApp.getActiveDocument().getCursor();\\nif (cursor) {\\n  // Attempt to insert text at the cursor position. If the insertion returns null, the cursor's\\n  // containing element doesn't allow insertions, so show the user an error message.\\n  var element \\u003d cursor.insertText('ಠ‿ಠ');\\n  if (element) {\\n    element.setBold(true);\\n  } else {\\n    DocumentApp.getUi().alert('Cannot insert text here.');\\n  }\\n} else {\\n  DocumentApp.getUi().alert('Cannot find a cursor.');\\n}\\n```\\n@return A representation of the user's cursor, or `null` if the user does not have a\\n    cursor placed in the tab or if the script is not bound to the document.*/getCursor():DocumentApp.Position;\\n/**Gets the list of editors for this [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return An array of users with edit permission.*/getEditors():User[];\\n/**Retrieves the first tab's footer section or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab's footer\\nsection. To get the footer section of any tab, use the [`DocumentTab.getFooter()`](https://developers.google.com/apps-script/reference/document/document-tab.html#getFooter()) method.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the text of the active or first tab's footer and logs it to the console.\\nconsole.log(doc.getFooter().getText());\\n```\\n@return The tab's footer.*/getFooter():DocumentApp.FooterSection;\\n/**Retrieves all the [`Footnote`](https://developers.google.com/apps-script/reference/document/footnote.html) elements in the first tab's body or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab's body. To get\\nall the footnotes in any tab, use the [`DocumentTab.getFootnotes()`](https://developers.google.com/apps-script/reference/document/document-tab.html#getFootnotes()) method.\\n\\nCalls to `getFootnotes` cause an iteration over the tab's elements. For large tabs,\\navoid unnecessary calls to this method.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the first footnote in the active or first tab's body.\\nconst footnote \\u003d doc.getFootnotes()[0];\\n\\n// Logs footnote contents to the console.\\nconsole.log(footnote.getFootnoteContents().getText());\\n```\\n@return The tab's footnotes.*/getFootnotes():DocumentApp.Footnote[];\\n/**Retrieves the first tab's header section or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab's header\\nsection. To get the header section of any tab, use the [`DocumentTab.getHeader()`](https://developers.google.com/apps-script/reference/document/document-tab.html#getHeader()) method.\\n\\n```\\n// Opens the Docs file by its ID. If you created your script from within\\n// a Google Docs file, you can use DocumentApp.getActiveDocument() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst doc \\u003d DocumentApp.openById(DOCUMENT_ID);\\n\\n// Gets the text of the active or first tab's header and logs it to the console.\\nconsole.log(doc.getHeader().getText());\\n```\\n@return The tab's header.*/getHeader():DocumentApp.HeaderSection;\\n/**Retrieves the document's unique identifier. The document ID is used with `DocumentApp.openById()` to open a specific document instance.\\n@return The document's ID.*/getId():string;\\n/**Gets the document's language code. This is the language shown in the document editor's __File\\n\\u003e Language__, which may not be the actual language that the document contains.\\n@return The document language, or `null` if not defined.*/getLanguage():string;\\n/**Retrieves the title of the document.\\n@return The document title.*/getName():string;\\n/**Gets the [`NamedRange`](https://developers.google.com/apps-script/reference/document/named-range.html) with the given ID in the first tab or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab. To get the\\n`NamedRange` with the given ID in any tab, use the [`DocumentTab.getNamedRangeById(id)`](https://developers.google.com/apps-script/reference/document/document-tab.html#getNamedRangeById(String))\\nmethod. This method returns `null` if no such `NamedRange` exists in the tab. Names\\nare not necessarily unique, even across tabs; several different ranges in the same tab may\\nshare the same name, much like a class in HTML. By contrast, IDs are unique within the tab,\\nlike an ID in HTML.\\n@param id The range's ID, which is unique within the tab.\\n@return The `NamedRange` with the given ID, or `null` if no such range exists in\\n    the tab.*/getNamedRangeById(id:string):DocumentApp.NamedRange;\\n/**Gets all [`NamedRange`](https://developers.google.com/apps-script/reference/document/named-range.html) objects in the first tab or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab. To get all\\n`NamedRange` objects in any tab, use the [`DocumentTab.getNamedRanges()`](https://developers.google.com/apps-script/reference/document/document-tab.html#getNamedRanges()) method.\\n\\nA `NamedRange` can be accessed by any script that accesses the tab. To avoid\\nunintended conflicts between scripts, consider prefixing range names with a unique string.\\n@return An array of the `NamedRange` objects in the tab, possibly including multiple\\n    ranges with the same name.*/getNamedRanges():DocumentApp.NamedRange[];\\n/**Gets all [`NamedRange`](https://developers.google.com/apps-script/reference/document/named-range.html) objects with the given name in the first tab or, for scripts that\\nare [bound](/apps-script/scripts_containers) to a document, the active tab. To get\\nall `NamedRange` objects in any tab, use the [`DocumentTab.getNamedRanges(name)`](https://developers.google.com/apps-script/reference/document/document-tab.html#getNamedRanges(String)) method. Names are not necessarily unique, even across tabs; several different ranges in\\nthe same tab may share the same name, much like a class in HTML. By contrast, IDs are unique\\nwithin the tab, like an ID in HTML.\\n\\nA `NamedRange` can be accessed by any script that accesses the document. To avoid\\nunintended conflicts between scripts, consider prefixing range names with a unique string.\\n@param name The range's name, which is not necessarily unique.\\n@return An array of the `NamedRange` objects in the tab with the given name.*/getNamedRanges(name:string):DocumentApp.NamedRange[];\\n/**Gets the user's selection in the active tab. A script can only access the selection of the user\\nwho is running the script, and only if the script is [bound](/apps-script/scripts_containers) to the document.\\n\\n```\\n// Display a dialog box that tells the user how many elements are included in the selection.\\nvar selection \\u003d DocumentApp.getActiveDocument().getSelection();\\nif (selection) {\\n  var elements \\u003d selection.getRangeElements();\\n  DocumentApp.getUi().alert('Number of selected elements: ' + elements.length);\\n} else {\\n  DocumentApp.getUi().alert('Nothing is selected.');\\n}\\n```\\n@return A representation of the user's selection, or `null` if the user does not have\\n    anything selected in the tab, if only the end of a paragraph is selected, if only the end\\n    of a paragraph and a new line are selected, or if the script is not bound to the document.*/getSelection():DocumentApp.Range;\\n/**Gets all language codes that are supported in Google Docs files.\\n@return An array of language codes.*/getSupportedLanguageCodes():string[];\\n/**Gets the [`Tab`](https://developers.google.com/apps-script/reference/document/tab.html) with the specified ID. This method returns `null` if no such `Tab` exists. Can access tabs at any nesting level.\\n@param tabId The ID of the tab to get.\\n@return The `Tab` with the specified ID, or `null` if no such `Tab` exists.*/getTab(tabId:string):DocumentApp.Tab;\\n/**Gets all unnested [`Tab`](https://developers.google.com/apps-script/reference/document/tab.html)s that are part of the document.\\n\\nTabs can contain child tabs, a tab nested within another tab. Child tabs are accessible\\nusing [`Tab.getChildTabs()`](https://developers.google.com/apps-script/reference/document/tab.html#getChildTabs()).\\n@return The list of all `Tab`s that are part of the document.*/getTabs():DocumentApp.Tab[];\\n/**Retrieves the URL to access the current document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\n\\n// Send out the link to open the document.\\nMailApp.sendEmail(\\\"\\u003cemail-address\\u003e\\\", doc.getName(), doc.getUrl());\\n```\\n@return The URL to access the current document.*/getUrl():string;\\n/**Gets the list of viewers and commenters for this [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return An array of users with view or comment permission.*/getViewers():User[];\\n/**Creates a new [`Position`](https://developers.google.com/apps-script/reference/document/position.html), which is a reference to a location in the tab, relative to a\\nspecific element in the first tab or, for scripts that are [bound](/apps-script/scripts_containers) to a document, the active tab. To create a\\n`Position` relative to a location in any tab, use the [`DocumentTab.newPosition(element, offset)`](https://developers.google.com/apps-script/reference/document/document-tab.html#newPosition(Element,Integer))\\nmethod. The user's cursor is represented as a `Position`, among other uses.\\n\\n```\\n// Append a paragraph to the active tab, then place the user's cursor after the first word of\\n// the new paragraph.\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar paragraph \\u003d doc.getBody().appendParagraph('My new paragraph.');\\nvar position \\u003d doc.newPosition(paragraph.getChild(0), 2);\\ndoc.setCursor(position);\\n```\\n@param element The element that should contain the new `Position`; this must be either a\\n    [`Text`](https://developers.google.com/apps-script/reference/document/text.html) element or a container element like [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param offset For [`Text`](https://developers.google.com/apps-script/reference/document/text.html) elements, the number of characters before the `Position`;\\n    for other elements, the number of child elements before the `Position` within the\\n    same container element.\\n@return The new `Position`.*/newPosition(element:DocumentApp.Element,offset:Integer):DocumentApp.Position;\\n/**Creates a builder used to construct [`Range`](https://developers.google.com/apps-script/reference/document/range.html) objects from tab elements in the\\nfirst tab or, for scripts that are [bound](/apps-script/scripts_containers) to a\\ndocument, the active tab. To create a builder used to construct `DocumentRange` objects\\nfrom tab elements in any tab, use the [`DocumentTab.newRange()`](https://developers.google.com/apps-script/reference/document/document-tab.html#newRange()) method.\\n\\n```\\n// Change the user's selection to a range that includes every table in the active tab.\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar rangeBuilder \\u003d doc.newRange();\\nvar tables \\u003d doc.getBody().getTables();\\nfor (var i \\u003d 0; i \\u003c tables.length; i++) {\\n  rangeBuilder.addElement(tables[i]);\\n}\\ndoc.setSelection(rangeBuilder.build());\\n```\\n@return The new builder.*/newRange():DocumentApp.RangeBuilder;\\n/**Removes the given user from the list of editors for the [`Document`](https://developers.google.com/apps-script/reference/document/document.html). This method doesn't\\nblock users from accessing the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) is shared with the user's entire\\ndomain, or if the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param emailAddress The email address of the user to remove.\\n@return This [`Document`](https://developers.google.com/apps-script/reference/document/document.html), for chaining.*/removeEditor(emailAddress:string):DocumentApp.Document;\\n/**Removes the given user from the list of editors for the [`Document`](https://developers.google.com/apps-script/reference/document/document.html). This method doesn't\\nblock users from accessing the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) is shared with the user's entire\\ndomain, or if the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param user A representation of the user to remove.\\n@return This [`Document`](https://developers.google.com/apps-script/reference/document/document.html), for chaining.*/removeEditor(user:User):DocumentApp.Document;\\n/**Removes the given user from the list of viewers and commenters for the [`Document`](https://developers.google.com/apps-script/reference/document/document.html). This\\nmethod has no effect if the user is an editor, not a viewer or commenter. This method also\\ndoesn't block users from accessing the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) if they belong to a class of users who\\nhave general access—for example, if the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) is shared with the user's\\nentire domain, or if the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param emailAddress The email address of the user to remove.\\n@return This [`Document`](https://developers.google.com/apps-script/reference/document/document.html) for chaining.*/removeViewer(emailAddress:string):DocumentApp.Document;\\n/**Removes the given user from the list of viewers and commenters for the [`Document`](https://developers.google.com/apps-script/reference/document/document.html). This\\nmethod has no effect if the user is an editor, not a viewer. This method also doesn't block\\nusers from accessing the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) if they belong to a class of users who have general\\naccess—for example, if the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) is shared with the user's entire domain, or\\nif the [`Document`](https://developers.google.com/apps-script/reference/document/document.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param user A representation of the user to remove.\\n@return This [`Document`](https://developers.google.com/apps-script/reference/document/document.html) for chaining.*/removeViewer(user:User):DocumentApp.Document;\\n/**Saves the current `Document`. Causes pending updates to be flushed and applied.\\n\\nThe `saveAndClose()` method is automatically invoked at the end of script execution\\nfor each open editable `Document`.\\n\\nA closed `Document` can't be edited. Use `DocumentApp.openById()` to reopen a\\ngiven document for editing.*/saveAndClose():void;\\n/**Sets the user's selected [`Tab`](https://developers.google.com/apps-script/reference/document/tab.html) in the current document to the tab with the specified ID.\\n\\n```\\nconst doc \\u003d DocumentApp.getActiveDocument()\\n\\n// Sets the user's selected tab by its ID.\\n// TODO(developer): Replace the ID with your own.\\nconst tab \\u003d doc.setActiveTab(TAB_ID);\\n```\\n@param tabId The ID of the tab to set as active.*/setActiveTab(tabId:string):void;\\n/**Sets the user's cursor, given a [`Position`](https://developers.google.com/apps-script/reference/document/position.html). A script can only access the cursor of the\\nuser who is running the script, and only if the script is [bound](/apps-script/scripts_containers) to the document.\\n\\nProviding a [`Position`](https://developers.google.com/apps-script/reference/document/position.html) from an inactive [`Tab`](https://developers.google.com/apps-script/reference/document/tab.html) switches the user's active tab.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\n\\n// Append a paragraph, then place the user's cursor after the first word of the new paragraph.\\nvar paragraph \\u003d documentTab.getBody().appendParagraph('My new paragraph.');\\nvar position \\u003d documentTab.newPosition(paragraph.getChild(0), 2);\\ndoc.setCursor(position);\\n```\\n@param position The new cursor location.\\n@return This `Document`, for chaining.*/setCursor(position:DocumentApp.Position):DocumentApp.Document;\\n/**Sets the document's language code. This is the language shown in the document editor's __File\\n\\u003e Language__, which may not be the actual language that the document contains. Use [`getSupportedLanguageCodes()`](https://developers.google.com/apps-script/reference/document/document.html#getSupportedLanguageCodes()) to get all the valid language codes.\\n@param languageCode The language code.\\n@return This `Document`, for chaining.*/setLanguage(languageCode:string):DocumentApp.Document;\\n/**Sets the document title.\\n@param name The new document title.\\n@return The current document.*/setName(name:string):DocumentApp.Document;\\n/**Sets the user's selection in the active tab, given a [`Range`](https://developers.google.com/apps-script/reference/document/range.html). A script can only\\naccess the selection of the user who is running the script, and only if the script is [bound](/apps-script/scripts_containers) to the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\n\\n// Change the user's selection to a range that includes every table in the document.\\nvar rangeBuilder \\u003d documentTab.newRange();\\nvar tables \\u003d documentTab.getBody().getTables();\\nfor (var i \\u003d 0; i \\u003c tables.length; i++) {\\n  rangeBuilder.addElement(tables[i]);\\n}\\ndoc.setSelection(rangeBuilder.build());\\n```\\n@param range The new range of elements to select.\\n@return This `Document`, for chaining.*/setSelection(range:DocumentApp.Range):DocumentApp.Document;}interface Date{\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.Date;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Returns the display value that's rendered in the document. The display value uses the UTC\\ntimezone and the date's locale. For example, `Jul 16, 2021`.\\n@return The display value.*/getDisplayText():string;\\n/**Returns the date's locale used for the display value. For example, `en`.\\n@return The locale of the date.*/getLocale():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Returns the timestamp associated with the date.\\n@return The timestamp.*/getTimestamp():Date;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.Date;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.Date;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.Date;}interface ContainerElement{\\n/**Returns the current element as a [`Body`](https://developers.google.com/apps-script/reference/document/body.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asBody():DocumentApp.Body;\\n/**Returns the current element as an [`Equation`](https://developers.google.com/apps-script/reference/document/equation.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asEquation():DocumentApp.Equation;\\n/**Returns the current element as a [`FooterSection`](https://developers.google.com/apps-script/reference/document/footer-section.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asFooterSection():DocumentApp.FooterSection;\\n/**Returns the current element as a [`FootnoteSection`](https://developers.google.com/apps-script/reference/document/footnote-section.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asFootnoteSection():DocumentApp.FootnoteSection;\\n/**Returns the current element as a [`HeaderSection`](https://developers.google.com/apps-script/reference/document/header-section.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asHeaderSection():DocumentApp.HeaderSection;\\n/**Returns the current element as a [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asListItem():DocumentApp.ListItem;\\n/**Returns the current element as a [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asParagraph():DocumentApp.Paragraph;\\n/**Returns the current element as a [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asTable():DocumentApp.Table;\\n/**Returns the current element as a [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asTableCell():DocumentApp.TableCell;\\n/**Returns the current element as a [`TableOfContents`](https://developers.google.com/apps-script/reference/document/table-of-contents.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asTableOfContents():DocumentApp.TableOfContents;\\n/**Returns the current element as a [`TableRow`](https://developers.google.com/apps-script/reference/document/table-row.html).\\n\\nUse this method to aid auto-complete whenever a given element is known to be of a specific\\ntype.\\n@return The current element.*/asTableRow():DocumentApp.TableRow;\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.ContainerElement;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.ContainerElement;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves the link url.\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Merges the element with the preceding sibling of the same type.\\n\\nOnly elements of the same [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html) can be merged. Any child elements contained in\\nthe current element are moved to the preceding sibling element.\\n\\nThe current element is removed from the document.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Example 1: Merge paragraphs\\n// Append two paragraphs to the document's active tab.\\nvar par1 \\u003d body.appendParagraph('Paragraph 1.');\\nvar par2 \\u003d body.appendParagraph('Paragraph 2.');\\n// Merge the newly added paragraphs into a single paragraph.\\npar2.merge();\\n\\n// Example 2: Merge table cells\\n// Create a two-dimensional array containing the table's cell contents.\\nvar cells \\u003d [\\n['Row 1, Cell 1', 'Row 1, Cell 2'],\\n['Row 2, Cell 1', 'Row 2, Cell 2']\\n];\\n// Build a table from the array.\\nvar table \\u003d body.appendTable(cells);\\n// Get the first row in the table.\\n var row \\u003d table.getRow(0);\\n// Get the two cells in this row.\\nvar cell1 \\u003d row.getCell(0);\\nvar cell2 \\u003d row.getCell(1);\\n// Merge the current cell into its preceding sibling element.\\nvar merged \\u003d cell2.merge();\\n```\\n@return The merged element.*/merge():DocumentApp.ContainerElement;\\n/**Removes the element from its parent.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab()\\nvar body \\u003d documentTab.getBody();\\n\\n// Remove all images in the active tab's body.\\nvar imgs \\u003d body.getImages();\\nfor (var i \\u003d 0; i \\u003c imgs.length; i++) {\\n  imgs[i].removeFromParent();\\n}\\n```\\n@return The removed element.*/removeFromParent():DocumentApp.ContainerElement;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.ContainerElement;\\n/**Sets the link url.\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.ContainerElement;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.ContainerElement;}interface Bookmark{\\n/**Gets the ID of the `Bookmark`. The ID is unique within the [`DocumentTab`](https://developers.google.com/apps-script/reference/document/document-tab.html).\\n@return The `Bookmark`'s ID, which is unique within the `DocumentTab`.*/getId():string;\\n/**Gets the [`Position`](https://developers.google.com/apps-script/reference/document/position.html) of the `Bookmark` within the [`DocumentTab`](https://developers.google.com/apps-script/reference/document/document-tab.html). The `Position` remains accurate so long as the `Bookmark` is not deleted, even if the script\\nchanges the document structure.\\n@return The position of the `Bookmark`.*/getPosition():DocumentApp.Position;\\n/**Deletes the `Bookmark`. Calling this method on a `Bookmark` that has already been\\ndeleted has no effect.*/remove():void;}interface Body{\\n/**Creates and appends a new [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html).\\n\\nThe [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@return The new horizontal rule.*/appendHorizontalRule():DocumentApp.HorizontalRule;\\n/**Creates and appends a new [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob.\\n\\nThe image will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param image The image data.\\n@return The appended image.*/appendImage(image:BlobSource):DocumentApp.InlineImage;\\n/**Appends the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html).\\n\\nThe [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n\\nUse this version of `appendImage` when appending a copy of an existing [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html).\\n@param image The image data.\\n@return The appended image.*/appendImage(image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Appends the given [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html).\\n\\nUse this version of `appendListItem` when appending a copy of an existing [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html).\\n@param listItem The list item to append.\\n@return The appended list item.*/appendListItem(listItem:DocumentApp.ListItem):DocumentApp.ListItem;\\n/**Creates and appends a new [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) containing the specified text contents.\\n\\nConsecutive list items are added as part of the same list.\\n@param text The list item's text contents.\\n@return The new list item.*/appendListItem(text:string):DocumentApp.ListItem;\\n/**Creates and appends a new [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html).\\n\\nThe [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@return The new page break.*/appendPageBreak():DocumentApp.PageBreak;\\n/**Appends the given [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html).\\n\\nThe [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n\\nUse this version of `appendPageBreak` when appending a copy of an existing [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html).\\n@param pageBreak The page break to append.\\n@return The appended page break.*/appendPageBreak(pageBreak:DocumentApp.PageBreak):DocumentApp.PageBreak;\\n/**Appends the given [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n\\nUse this version of `appendParagraph` when appending a copy of an existing [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param paragraph The paragraph to append.\\n@return The appended paragraph.*/appendParagraph(paragraph:DocumentApp.Paragraph):DocumentApp.Paragraph;\\n/**Creates and appends a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) containing the specified text contents.\\n@param text The paragraph's text contents.\\n@return The new paragraph.*/appendParagraph(text:string):DocumentApp.Paragraph;\\n/**Creates and appends a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\n\\nThis method will also append an empty paragraph after the table, since Google Docs documents\\ncannot end with a table.\\n@return The new table.*/appendTable():DocumentApp.Table;\\n/**Appends the given [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\n\\nUse this version of `appendTable` when appending a copy of an existing [`Table`](https://developers.google.com/apps-script/reference/document/table.html).\\nThis method will also append an empty paragraph after the table, since Google Docs documents\\ncannot end with a table.\\n@param table The table to append.\\n@return The appended table.*/appendTable(table:DocumentApp.Table):DocumentApp.Table;\\n/**Appends a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) containing a [`TableCell`](https://developers.google.com/apps-script/reference/document/table-cell.html) for each specified string value.\\n\\nThis method will also append an empty paragraph after the table, since Google Docs documents\\ncannot end with a table.\\n@param cells The text contents of the table cells to add to the new table.\\n@return The appended table.*/appendTable(cells:string[][]):DocumentApp.Table;\\n/**Clears the contents of the element.\\n@return The current element.*/clear():DocumentApp.Body;\\n/**Returns a detached, deep copy of the current element.\\n\\nAny child elements present in the element are also copied. The new element doesn't have a\\nparent.\\n@return The new copy.*/copy():DocumentApp.Body;\\n/**Obtains a [`Text`](https://developers.google.com/apps-script/reference/document/text.html) version of the current element, for editing.\\n\\nUse `editAsText` for manipulating the elements contents as rich text. The `editAsText` mode ignores non-text elements (such as [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) and [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html)).\\n\\nChild elements fully contained within a deleted text range are removed from the element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Insert two paragraphs separated by a paragraph containing an\\n// horizontal rule.\\nbody.insertParagraph(0, \\\"An editAsText sample.\\\");\\nbody.insertHorizontalRule(0);\\nbody.insertParagraph(0, \\\"An example.\\\");\\n\\n// Delete \\\" sample.\\\\n\\\\n An\\\" removing the horizontal rule in the process.\\nbody.editAsText().deleteText(14, 25);\\n```\\n@return a text version of the current element*/editAsText():DocumentApp.Text;\\n/**Searches the contents of the element for a descendant of the specified type.\\n@param elementType The type of element to search for.\\n@return A search result indicating the position of the search element.*/findElement(elementType:DocumentApp.ElementType):DocumentApp.RangeElement;\\n/**Searches the contents of the element for a descendant of the specified type, starting from the\\nspecified [`RangeElement`](https://developers.google.com/apps-script/reference/document/range-element.html).\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Define the search parameters.\\nvar searchType \\u003d DocumentApp.ElementType.PARAGRAPH;\\nvar searchHeading \\u003d DocumentApp.ParagraphHeading.HEADING1;\\nvar searchResult \\u003d null;\\n\\n// Search until the paragraph is found.\\nwhile (searchResult \\u003d body.findElement(searchType, searchResult)) {\\n  var par \\u003d searchResult.getElement().asParagraph();\\n  if (par.getHeading() \\u003d\\u003d searchHeading) {\\n    // Found one, update and stop.\\n    par.setText('This is the first header.');\\n    return;\\n  }\\n}\\n```\\n@param elementType The type of element to search for.\\n@param from The search result to search from.\\n@return A search result indicating the next position of the search element.*/findElement(elementType:DocumentApp.ElementType,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern using regular expressions.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@return a search result indicating the position of the search text, or null if there is no\\n    match*/findText(searchPattern:string):DocumentApp.RangeElement;\\n/**Searches the contents of the element for the specified text pattern, starting from a given\\nsearch result.\\n\\nA subset of the JavaScript regular expression features are not fully supported, such as\\ncapture groups and mode modifiers.\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n@param searchPattern the pattern to search for\\n@param from the search result to search from\\n@return a search result indicating the next position of the search text, or null if there is no\\n    match*/findText(searchPattern:string,from:DocumentApp.RangeElement):DocumentApp.RangeElement;\\n/**Retrieves the element's attributes.\\n\\nThe result is an object containing a property for each valid element attribute where each\\nproperty name corresponds to an item in the `DocumentApp.Attribute` enumeration.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Append a styled paragraph.\\nvar par \\u003d body.appendParagraph('A bold, italicized paragraph.');\\npar.setBold(true);\\npar.setItalic(true);\\n\\n// Retrieve the paragraph's attributes.\\nvar atts \\u003d par.getAttributes();\\n\\n// Log the paragraph attributes.\\nfor (var att in atts) {\\n  Logger.log(att + \\\":\\\" + atts[att]);\\n}\\n```\\n@return The element's attributes.*/getAttributes():Object;\\n/**Retrieves the child element at the specified child index.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Obtain the first element in the tab.\\nvar firstChild \\u003d body.getChild(0);\\n\\n// If it's a paragraph, set its contents.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  firstChild.asParagraph().setText(\\\"This is the first paragraph.\\\");\\n}\\n```\\n@param childIndex The index of the child element to retrieve.\\n@return The child element at the specified index.*/getChild(childIndex:Integer):DocumentApp.Element;\\n/**Retrieves the child index for the specified child element.\\n@param child The child element for which to retrieve the index.\\n@return The child index.*/getChildIndex(child:DocumentApp.Element):Integer;\\n/**Retrieves all the [`Footnotes`](https://developers.google.com/apps-script/reference/document/footnote.html) contained in the section.\\n@deprecated\\n@return The section footnotes.*/getFootnotes():DocumentApp.Footnote[];\\n/**Retrieves the set of attributes for the provided `ParagraphHeading`.\\n@param paragraphHeading The heading whose attributes should be retrieved.\\n@return A map of the attributes and their current values.*/getHeadingAttributes(paragraphHeading:DocumentApp.ParagraphHeading):Object;\\n/**Retrieves all the [`InlineImages`](https://developers.google.com/apps-script/reference/document/inline-image.html) contained in the section.\\n@return The section images.*/getImages():DocumentApp.InlineImage[];\\n/**Retrieves the link url.\\n@deprecated\\n@return the link url, or null if the element contains multiple values for this attribute*/getLinkUrl():string;\\n/**Retrieves all the [`ListItems`](https://developers.google.com/apps-script/reference/document/list-item.html) contained in the section.\\n@return The section list items.*/getListItems():DocumentApp.ListItem[];\\n/**Retrieves the bottom margin, in points.\\n@return The bottom margin, in points.*/getMarginBottom():number;\\n/**Retrieves the left margin, in points.\\n@return The left margin, in points.*/getMarginLeft():number;\\n/**Retrieves the right margin.\\n@return The right margin, in points.*/getMarginRight():number;\\n/**Retrieves the top margin.\\n@return The top margin, in points.*/getMarginTop():number;\\n/**Retrieves the element's next sibling element.\\n\\nThe next sibling has the same parent and follows the current element.\\n@deprecated\\n@return The next sibling element.*/getNextSibling():DocumentApp.Element;\\n/**Retrieves the number of children.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Log the number of elements in the tab.\\nLogger.log(\\\"There are \\\" + body.getNumChildren() +\\n    \\\" elements in the tab's body.\\\");\\n```\\n@return The number of children.*/getNumChildren():Integer;\\n/**Retrieves the page height, in points.\\n@return The page height, in points.*/getPageHeight():number;\\n/**Retrieves the page width, in points.\\n@return The page width, in points.*/getPageWidth():number;\\n/**Retrieves all the [`Paragraphs`](https://developers.google.com/apps-script/reference/document/paragraph.html) contained in the section (including [`ListItems`](https://developers.google.com/apps-script/reference/document/list-item.html)).\\n@return The section paragraphs.*/getParagraphs():DocumentApp.Paragraph[];\\n/**Retrieves the element's parent element.\\n\\nThe parent element contains the current element.\\n@return The parent element.*/getParent():DocumentApp.ContainerElement;\\n/**Retrieves the element's previous sibling element.\\n\\nThe previous sibling has the same parent and precedes the current element.\\n@deprecated\\n@return The previous sibling element.*/getPreviousSibling():DocumentApp.Element;\\n/**Retrieves all the [`Tables`](https://developers.google.com/apps-script/reference/document/table.html) contained in the section.\\n@return The section tables.*/getTables():DocumentApp.Table[];\\n/**Retrieves the contents of the element as a text string.\\n@return the contents of the element as text string*/getText():string;\\n/**Gets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n@return the type of text alignment, or `null` if the text contains multiple types of text\\n    alignments or if the text alignment has never been set*/getTextAlignment():DocumentApp.TextAlignment;\\n/**Retrieves the element's [`ElementType`](https://developers.google.com/apps-script/reference/document/element-type.html).\\n\\nUse `getType()` to determine the exact type of a given element.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Obtain the first element in the active tab's body.\\n\\nvar firstChild \\u003d body.getChild(0);\\n\\n// Use getType() to determine the element's type.\\nif (firstChild.getType() \\u003d\\u003d DocumentApp.ElementType.PARAGRAPH) {\\n  Logger.log('The first element is a paragraph.');\\n} else {\\n  Logger.log('The first element is not a paragraph.');\\n}\\n```\\n@return The element type.*/getType():DocumentApp.ElementType;\\n/**Creates and inserts a new [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) at the specified index.\\n\\nThe [`HorizontalRule`](https://developers.google.com/apps-script/reference/document/horizontal-rule.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex The index at which to insert the element.\\n@return The new horizontal rule.*/insertHorizontalRule(childIndex:Integer):DocumentApp.HorizontalRule;\\n/**Creates and inserts an [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) from the specified image blob, at the specified\\nindex.\\n@param childIndex The index at which to insert the element.\\n@param image The image data.\\n@return The inserted inline image.*/insertImage(childIndex:Integer,image:BlobSource):DocumentApp.InlineImage;\\n/**Inserts the given [`InlineImage`](https://developers.google.com/apps-script/reference/document/inline-image.html) at the specified index.\\n\\nThe image will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex The index at which to insert the element.\\n@param image The image to insert.\\n@return The inserted inline image.*/insertImage(childIndex:Integer,image:DocumentApp.InlineImage):DocumentApp.InlineImage;\\n/**Inserts the given [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@param listItem The list item to insert.\\n@return The inserted list item.*/insertListItem(childIndex:Integer,listItem:DocumentApp.ListItem):DocumentApp.ListItem;\\n/**Creates and inserts a new [`ListItem`](https://developers.google.com/apps-script/reference/document/list-item.html) at the specified index, containing the specified\\ntext contents.\\n@param childIndex The index at which to insert.\\n@param text The list item's text contents.\\n@return The new list item.*/insertListItem(childIndex:Integer,text:string):DocumentApp.ListItem;\\n/**Creates and inserts a new [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) at the specified index.\\n\\nThe [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex The index at which to insert the element.\\n@return The new page break.*/insertPageBreak(childIndex:Integer):DocumentApp.PageBreak;\\n/**Inserts the given [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) at the specified index.\\n\\nThe [`PageBreak`](https://developers.google.com/apps-script/reference/document/page-break.html) will be contained in a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html).\\n@param childIndex The index at which to insert the element.\\n@param pageBreak The page break to insert.\\n@return The inserted page break.*/insertPageBreak(childIndex:Integer,pageBreak:DocumentApp.PageBreak):DocumentApp.PageBreak;\\n/**Inserts the given [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@param paragraph The paragraph to insert.\\n@return The inserted paragraph.*/insertParagraph(childIndex:Integer,paragraph:DocumentApp.Paragraph):DocumentApp.Paragraph;\\n/**Creates and inserts a new [`Paragraph`](https://developers.google.com/apps-script/reference/document/paragraph.html) at the specified index, containing the specified\\ntext contents.\\n@param childIndex The index at which to insert.\\n@param text The paragraph's text contents.\\n@return The new paragraph.*/insertParagraph(childIndex:Integer,text:string):DocumentApp.Paragraph;\\n/**Creates and inserts a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@return The new table.*/insertTable(childIndex:Integer):DocumentApp.Table;\\n/**Inserts the given [`Table`](https://developers.google.com/apps-script/reference/document/table.html) at the specified index.\\n@param childIndex The index at which to insert.\\n@param table The table to insert.\\n@return The inserted table.*/insertTable(childIndex:Integer,table:DocumentApp.Table):DocumentApp.Table;\\n/**Creates and inserts a new [`Table`](https://developers.google.com/apps-script/reference/document/table.html) containing the specified cells, at the specified index.\\n@param childIndex The index at which to insert.\\n@param cells The text contents of the table cells to add to the new table.\\n@return The new table.*/insertTable(childIndex:Integer,cells:string[][]):DocumentApp.Table;\\n/**Determines whether the element is at the end of the [`Document`](https://developers.google.com/apps-script/reference/document/document.html).\\n@deprecated\\n@return Whether the element is at the end of the tab.*/isAtDocumentEnd():boolean;\\n/**Removes the specified child element.\\n@param child The child element to remove.\\n@return The current element.*/removeChild(child:DocumentApp.Element):DocumentApp.Body;\\n/**Replaces all occurrences of a given text pattern with a given replacement string, using regular\\nexpressions.\\n\\nThe search pattern is passed as a string, not a JavaScript regular expression object.\\nBecause of this you'll need to escape any backslashes in the pattern.\\n\\nThis methods uses Google's [RE2](https://github.com/google/re2) regular\\nexpression library, which limits the [supported syntax](https://github.com/google/re2/wiki/Syntax).\\n\\nThe provided regular expression pattern is independently matched against each text block\\ncontained in the current element.\\n\\n```\\nvar body \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab().getBody();\\n\\n// Clear the text surrounding \\\"Apps Script\\\", with or without text.\\nbody.replaceText(\\\"^.*Apps ?Script.*$\\\", \\\"Apps Script\\\");\\n```\\n@param searchPattern the regex pattern to search for\\n@param replacement the text to use as replacement\\n@return the current element*/replaceText(searchPattern:string,replacement:string):DocumentApp.Element;\\n/**Sets the element's attributes.\\n\\nThe specified attributes parameter must be an object where each property name is an item in\\nthe `DocumentApp.Attribute` enumeration and each property value is the new value to be\\napplied.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar documentTab \\u003d doc.getActiveTab().asDocumentTab();\\nvar body \\u003d documentTab.getBody();\\n\\n// Define a custom paragraph style.\\nvar style \\u003d {};\\nstyle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] \\u003d\\n    DocumentApp.HorizontalAlignment.RIGHT;\\nstyle[DocumentApp.Attribute.FONT_FAMILY] \\u003d 'Calibri';\\nstyle[DocumentApp.Attribute.FONT_SIZE] \\u003d 18;\\nstyle[DocumentApp.Attribute.BOLD] \\u003d true;\\n\\n// Append a plain paragraph.\\nvar par \\u003d body.appendParagraph('A paragraph with custom style.');\\n\\n// Apply the custom style.\\npar.setAttributes(style);\\n```\\n@param attributes The element's attributes.\\n@return The current element.*/setAttributes(attributes:Object):DocumentApp.Body;\\n/**Sets the attributes for the provided `ParagraphHeading`.\\n@param paragraphHeading The heading whose attributes should be set.\\n@param attributes A map of attributes and the values to set them to.\\n@return The current element.*/setHeadingAttributes(paragraphHeading:DocumentApp.ParagraphHeading,attributes:Object):DocumentApp.Body;\\n/**Sets the link url.\\n@deprecated\\n@param url the link url\\n@return the current element*/setLinkUrl(url:string):DocumentApp.Body;\\n/**Sets the bottom margin, in points.\\n@param marginBottom The bottom margin, in points.\\n@return The current element.*/setMarginBottom(marginBottom:number):DocumentApp.Body;\\n/**Sets the left margin, in points.\\n@param marginLeft The left margin, in points.\\n@return The current element.*/setMarginLeft(marginLeft:number):DocumentApp.Body;\\n/**Sets the right margin, in points.\\n@param marginRight The right margin.\\n@return The current element.*/setMarginRight(marginRight:number):DocumentApp.Body;\\n/**Sets the top margin.\\n@param marginTop The top margin, in points.\\n@return The current element.*/setMarginTop(marginTop:number):DocumentApp.Body;\\n/**Sets the page height, in points.\\n@param pageHeight The page height, in points.\\n@return The current element.*/setPageHeight(pageHeight:number):DocumentApp.Body;\\n/**Sets the page width, in points.\\n@param pageWidth The page width, in points.\\n@return The current element.*/setPageWidth(pageWidth:number):DocumentApp.Body;\\n/**Sets the contents as plain text.\\n\\nNote: existing contents are cleared.\\n@param text The new text contents.\\n@return The current element.*/setText(text:string):DocumentApp.Body;\\n/**Sets the text alignment. The available types of alignment are `DocumentApp.TextAlignment.NORMAL`, `DocumentApp.TextAlignment.SUBSCRIPT`, and `DocumentApp.TextAlignment.SUPERSCRIPT`.\\n\\n```\\n// Make the entire first paragraph in the active tab be superscript.\\nvar documentTab \\u003d DocumentApp.getActiveDocument().getActiveTab().asDocumentTab();\\nvar text \\u003d documentTab.getBody().getParagraphs()[0].editAsText();\\ntext.setTextAlignment(DocumentApp.TextAlignment.SUPERSCRIPT);\\n```\\n@param textAlignment the type of text alignment to apply\\n@return the current element*/setTextAlignment(textAlignment:DocumentApp.TextAlignment):DocumentApp.Body;}interface Attribute{}interface _Attribute{\\n/**The background color of an element (Paragraph, Table, etc) or document.*/BACKGROUND_COLOR:Attribute;\\n/**The font weight setting, for rich text.*/BOLD:Attribute;\\n/**The border color, for table elements.*/BORDER_COLOR:Attribute;\\n/**The border width in points, for table elements.*/BORDER_WIDTH:Attribute;\\n/**The code contents, for equation elements.*/CODE:Attribute;\\n/**The font family setting, for rich text.*/FONT_FAMILY:Attribute;\\n/**The font size setting in points, for rich text.*/FONT_SIZE:Attribute;\\n/**The foreground color setting, for rich text.*/FOREGROUND_COLOR:Attribute;\\n/**The glyph type, for list item elements.*/GLYPH_TYPE:Attribute;\\n/**The heading type, for paragraph elements (for example, `DocumentApp.ParagraphHeading.HEADING1`).*/HEADING:Attribute;\\n/**The height setting, for image elements.*/HEIGHT:Attribute;\\n/**The horizontal alignment, for paragraph elements (for example, `DocumentApp.HorizontalAlignment.CENTER`).*/HORIZONTAL_ALIGNMENT:Attribute;\\n/**The end indentation setting in points, for paragraph elements.*/INDENT_END:Attribute;\\n/**The first line indentation setting in points, for paragraph elements.*/INDENT_FIRST_LINE:Attribute;\\n/**The start indentation setting in points, for paragraph elements.*/INDENT_START:Attribute;\\n/**The font style setting, for rich text.*/ITALIC:Attribute;\\n/**The text direction setting, for rich text.*/LEFT_TO_RIGHT:Attribute;\\n/**The line spacing setting as a multiplier, for paragraph elements.*/LINE_SPACING:Attribute;\\n/**The link URL, for rich text. The default link style (foreground color, underline) is\\nautomatically applied.*/LINK_URL:Attribute;\\n/**The ID of the encompassing list, for list item elements.*/LIST_ID:Attribute;\\n/**The bottom margin setting in points, for paragraph elements.*/MARGIN_BOTTOM:Attribute;\\n/**The left margin setting in points, for paragraph elements.*/MARGIN_LEFT:Attribute;\\n/**The right margin setting in points, for paragraph elements.*/MARGIN_RIGHT:Attribute;\\n/**The top margin setting in points, for paragraph elements.*/MARGIN_TOP:Attribute;\\n/**The minimum height setting in points, for table row elements.*/MINIMUM_HEIGHT:Attribute;\\n/**The item nesting level, for list item elements.*/NESTING_LEVEL:Attribute;\\n/**The bottom padding setting in points, for table cell elements.*/PADDING_BOTTOM:Attribute;\\n/**The left padding setting in points, for table cell elements.*/PADDING_LEFT:Attribute;\\n/**The right padding setting in points, for table cell elements.*/PADDING_RIGHT:Attribute;\\n/**The top padding setting in points, for table cell elements.*/PADDING_TOP:Attribute;\\n/**The page height setting in points, for documents.*/PAGE_HEIGHT:Attribute;\\n/**The page width setting in points, for documents.*/PAGE_WIDTH:Attribute;\\n/**The bottom spacing setting in points, for paragraph elements.*/SPACING_AFTER:Attribute;\\n/**The top spacing setting in points, for paragraph elements.*/SPACING_BEFORE:Attribute;\\n/**The strike-through setting, for rich text.*/STRIKETHROUGH:Attribute;\\n/**The underline setting, for rich text.*/UNDERLINE:Attribute;\\n/**The vertical alignment setting, for table cell elements.*/VERTICAL_ALIGNMENT:Attribute;\\n/**The width setting, for table cell and image elements.*/WIDTH:Attribute;}}const DocumentApp:DocumentApp;\"],[\"drive-app.d.ts\",\"interface DriveApp{\\n/**An enum representing classes of users who can access a file or folder, besides any individual\\nusers who have been explicitly given access.*/Access:DriveApp._Access;\\n/**An enum representing the permissions granted to users who can access a file or folder, besides\\nany individual users who have been explicitly given access.*/Permission:DriveApp._Permission;\\n/**Adds the given file to the root of the user's Drive. This method does not move the file out of its\\nexisting parent folder; a file can have more than one parent simultaneously.\\n@deprecated\\n@param child The child file to add.\\n@return The new parent of the file added as a child.*/addFile(child:DriveApp.File):DriveApp.Folder;\\n/**Adds the given folder to the root of the user's Drive. This method does not move the folder out of\\nits existing parent folder; a folder can have more than one parent simultaneously.\\n@deprecated\\n@param child The child folder to add.\\n@return The new parent of the folder added as a child.*/addFolder(child:DriveApp.Folder):DriveApp.Folder;\\n/**Resumes a file iteration using a continuation token from a previous iterator. This method is\\nuseful if processing an iterator in one execution exceeds the maximum execution time.\\nContinuation tokens are generally valid for one week.\\n\\n```\\n// Continues getting a list of all 'Untitled document' files in the user's Drive.\\n// Creates a file iterator named 'previousIterator'.\\nconst previousIterator \\u003d DriveApp.getFilesByName('Untitled document');\\n\\n// Gets continuation token from the previous file iterator.\\nconst continuationToken \\u003d previousIterator.getContinuationToken();\\n\\n// Creates a new iterator using the continuation token from the previous file iterator.\\nconst newIterator \\u003d DriveApp.continueFileIterator(continuationToken);\\n\\n// Resumes the file iteration using a continuation token from 'firstIterator' and\\n// logs the file name.\\nif (newIterator.hasNext()) {\\n  const file \\u003d newIterator.next();\\n  console.log(file.getName());\\n}\\n```\\n@param continuationToken A continuation token from a previous file iterator.\\n@return A collection of files that remained in a previous iterator when the continuation token\\n    was generated.*/continueFileIterator(continuationToken:string):DriveApp.FileIterator;\\n/**Resumes a folder iteration using a continuation token from a previous iterator. This method is\\nuseful if processing an iterator in one execution exceeds the maximum execution time.\\nContinuation tokens are generally valid for one week.\\n\\n```\\n// Continues getting a list of all folders in user's Drive.\\n// Creates a folder iterator named 'previousIterator'.\\nconst previousIterator \\u003d DriveApp.getFolders();\\n\\n// Gets continuation token from the previous folder iterator.\\nconst continuationToken \\u003d previousIterator.getContinuationToken();\\n\\n// Creates a new iterator using the continuation token from the previous folder iterator.\\nconst newIterator \\u003d DriveApp.continueFolderIterator(continuationToken);\\n\\n// Resumes the folder iteration using a continuation token from the previous iterator and logs\\n// the folder name.\\nif (newIterator.hasNext()) {\\n  const folder \\u003d newIterator.next();\\n  console.log(folder.getName());\\n}\\n```\\n@param continuationToken A continuation token from a previous folder iterator.\\n@return A collection of folders that remained in a previous iterator when the continuation\\n    token was generated.*/continueFolderIterator(continuationToken:string):DriveApp.FolderIterator;\\n/**Creates a file in the root of the user's Drive from a given `Blob` of arbitrary data.\\n\\n```\\n// Create an image file in Google Drive using the Maps service.\\nvar blob \\u003d Maps.newStaticMap().setCenter('76 9th Avenue, New York NY').getBlob();\\nDriveApp.createFile(blob);\\n```\\n@param blob The data for the new file.\\n@return The new file.*/createFile(blob:BlobSource):DriveApp.File;\\n/**Creates a text file in the root of the user's Drive with the given name and contents. Throws an\\nexception if `content` is larger than 50 MB.\\n\\n```\\n// Create a text file with the content \\\"Hello, world!\\\"\\nDriveApp.createFile('New Text File', 'Hello, world!');\\n```\\n@param name The name of the new file.\\n@param content The content for the new file.\\n@return The new file.*/createFile(name:string,content:string):DriveApp.File;\\n/**Creates a file in the root of the user's Drive with the given name, contents, and MIME type. Throws\\nan exception if `content` is larger than 10MB.\\n\\n```\\n// Create an HTML file with the content \\\"Hello, world!\\\"\\nDriveApp.createFile('New HTML File', '\\u003cb\\u003eHello, world!\\u003c/b\\u003e', MimeType.HTML);\\n```\\n@param name The name of the new file.\\n@param content The content for the new file.\\n@param mimeType The MIME type of the new file.\\n@return The new file.*/createFile(name:string,content:string,mimeType:string):DriveApp.File;\\n/**Creates a folder in the root of the user's Drive with the given name.\\n@param name The name of the new folder.\\n@return The new folder.*/createFolder(name:string):DriveApp.Folder;\\n/**Creates a shortcut to the provided Drive item ID, and returns it.\\n@param targetId The file ID of the target file or folder.\\n@return The new shortcut.*/createShortcut(targetId:string):DriveApp.File;\\n/**Creates a shortcut to the provided Drive item ID and resource key, and returns it. A resource\\nkey is an additional parameter that needs to be passed to access the target file or folder that\\nhas been shared using a link.\\n\\n```\\n// Creates shortcuts for all folders in the user's drive that have a specific name.\\n// TODO(developer): Replace 'Test-Folder' with a valid folder name in your drive.\\nconst folders \\u003d DriveApp.getFoldersByName('Test-Folder');\\n\\n// Iterates through all folders named 'Test-Folder'.\\nwhile (folders.hasNext()) {\\n  const folder \\u003d folders.next();\\n\\n  // Creates a shortcut to the provided Drive item ID and resource key, and returns it.\\n  DriveApp.createShortcutForTargetIdAndResourceKey(folder.getId(), folder.getResourceKey());\\n}\\n```\\n@param targetId The ID of the target file or folder.\\n@param targetResourceKey The resource key of the target file or folder.\\n@return The new shortcut.*/createShortcutForTargetIdAndResourceKey(targetId:string,targetResourceKey:string):DriveApp.File;\\n/**Enables or disables enforceSingleParent behavior for all calls affecting item parents.\\n\\nSee the [ Simplifying Google Drive’s folder structure and sharing models](https://cloud.google.com/blog/products/g-suite/simplifying-google-drives-folder-structure-and-sharing-models) blog for\\nmore details.\\n\\n```\\n// Enables enforceSingleParent behavior for all calls affecting item parents.\\nDriveApp.enforceSingleParent(true);\\n```\\n@param value The new state of the enforceSingleParent flag.*/enforceSingleParent(value:boolean):void;\\n/**Gets the file with the given ID. Throws a scripting exception if the file does not exist or the\\nuser does not have permission to access it.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace 'Test' with your file name.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\nif (files.hasNext()) {\\n  // Gets the ID of each file in the list.\\n  const fileId \\u003d files.next().getId();\\n\\n  // Gets the file name using its ID and logs it to the console.\\n  console.log(DriveApp.getFileById(fileId).getName());\\n}\\n```\\n@param id The ID of the file.\\n@return The file with the given ID.*/getFileById(id:string):DriveApp.File;\\n/**Gets the file with the given ID and resource key. Resource keys are an additional parameter\\nwhich need to be passed to access files that have been shared using a link.\\n\\nThrows a scripting exception if the file doesn't exist or the user doesn't have permission\\nto access it.\\n\\n```\\n// Gets a list of all files in Drive with the given name.\\n// TODO(developer): Replace 'Test' with your file name.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\nif (files.hasNext()) {\\n\\n  // Gets the first file in the list.\\n  const file \\u003d files.next();\\n\\n  // Gets the ID and resource key.\\n  const key \\u003d file.getResourceKey();\\n  const id \\u003d file.getId();\\n\\n  // Logs the file name to the console using its ID and resource key.\\n  console.log(DriveApp.getFileByIdAndResourceKey(id, key).getName());\\n}\\n```\\n@param id The ID of the file.\\n@param resourceKey The resource key of the folder.\\n@return The file with the given ID.*/getFileByIdAndResourceKey(id:string,resourceKey:string):DriveApp.File;\\n/**Gets a collection of all files in the user's Drive.\\n@return A collection of all files in the user's Drive.*/getFiles():DriveApp.FileIterator;\\n/**Gets a collection of all files in the user's Drive that have the given name.\\n@param name The name of the files to find.\\n@return A collection of all files in the user's Drive that have the given name.*/getFilesByName(name:string):DriveApp.FileIterator;\\n/**Gets a collection of all files in the user's Drive that have the given MIME type.\\n@param mimeType The MIME type of the files to find.\\n@return A collection of all files in the user's Drive that have the given MIME\\n    type.*/getFilesByType(mimeType:string):DriveApp.FileIterator;\\n/**Gets the folder with the given ID. Throws a scripting exception if the folder does not exist or\\nthe user does not have permission to access it.\\n@param id The ID of the folder.\\n@return The folder with the given ID.*/getFolderById(id:string):DriveApp.Folder;\\n/**Gets the folder with the given ID and resource key. Resource keys are an additional parameter\\nwhich need to be passed to access folders that have been shared using a link.\\n\\nThrows a scripting exception if the folder doesn't exist or the user doesn't have permission\\nto access it.\\n@param id The ID of the folder.\\n@param resourceKey The resource key of the folder.\\n@return The folder with the given ID.*/getFolderByIdAndResourceKey(id:string,resourceKey:string):DriveApp.Folder;\\n/**Gets a collection of all folders in the user's Drive.\\n@return A collection of all folders in the user's Drive.*/getFolders():DriveApp.FolderIterator;\\n/**Gets a collection of all folders in the user's Drive that have the given name.\\n@param name The name of the folders to find.\\n@return A collection of all folders in the user's Drive that have the given name.*/getFoldersByName(name:string):DriveApp.FolderIterator;\\n/**Gets the folder at the root of the user's Drive.\\n\\n```\\n// Gets the user's My Drive folder and logs its name to the console.\\nconsole.log(DriveApp.getRootFolder().getName());\\n\\n// Logs the Drive owner's name to the console.\\nconsole.log(DriveApp.getRootFolder().getOwner().getName());\\n```\\n@return The root folder of the user's Drive.*/getRootFolder():DriveApp.Folder;\\n/**Gets the number of bytes the user is allowed to store in Drive.\\n\\n```\\n// Gets the number of bytes the user can store in Drive and logs it to the console.\\nconsole.log(DriveApp.getStorageLimit());\\n```\\n@return The number of bytes the user is allowed to store in Drive.*/getStorageLimit():Integer;\\n/**Gets the number of bytes the user is currently storing in Drive.\\n\\n```\\n// Gets the number of bytes the user is currently storing in Drive and logs it to the console.\\nconsole.log(DriveApp.getStorageUsed());\\n```\\n@return The number of bytes the user is currently storing in Drive.*/getStorageUsed():Integer;\\n/**Gets a collection of all the files in the trash of the user's Drive.\\n\\n```\\n// Gets a list of all the files in the trash of the user's Drive.\\nconst trashFiles \\u003d DriveApp.getTrashedFiles();\\n\\n// Logs the trash file names to the console.\\nwhile (trashFiles.hasNext()) {\\n  const file \\u003d trashFiles.next();\\n  console.log(file.getName());\\n}\\n```\\n@return A collection of files in the trash.*/getTrashedFiles():DriveApp.FileIterator;\\n/**Gets a collection of all the folders in the trash of the user's Drive.\\n\\n```\\n// Gets a collection of all the folders in the trash of the user's Drive.\\nconst trashFolders \\u003d DriveApp.getTrashedFolders();\\n\\n// Logs the trash folder names to the console.\\nwhile (trashFolders.hasNext()) {\\n  const folder \\u003d trashFolders.next();\\n  console.log(folder.getName());\\n}\\n```\\n@return A collection of folders in the trash.*/getTrashedFolders():DriveApp.FolderIterator;\\n/**Removes the given file from the root of the user's Drive. This method does not delete the file, but\\nif a file is removed from all of its parents, it cannot be seen in Drive except by searching\\nfor it or using the \\\"All items\\\" view.\\n@deprecated\\n@param child The child file to remove.\\n@return The previous parent of the child.*/removeFile(child:DriveApp.File):DriveApp.Folder;\\n/**Removes the given folder from the root of the user's Drive. This method does not delete the folder\\nor its contents, but if a folder is removed from all of its parents, it cannot be seen in Drive\\nexcept by searching for it or using the \\\"All items\\\" view.\\n@deprecated\\n@param child The child folder to remove.\\n@return The previous parent of the child.*/removeFolder(child:DriveApp.Folder):DriveApp.Folder;\\n/**Gets a collection of all files in the user's Drive that match the given search\\ncriteria. The search criteria are detailed in the [Google Drive SDK documentation](/drive/api/v2/ref-search-terms). Note that the Drive\\nservice uses v2 of the Drive API and some query fields differ from v3. Review the [field\\ndifferences between v2 and v3](/drive/api/guides/v2-to-v3-reference#resource_field_differences_between_v2_and_v3).\\n\\nThe `params` argument is a query string that can contain string values, so take care\\nto escape quotation marks correctly (for example `\\\"title contains 'Gulliver\\\\\\\\'s\\nTravels'\\\"` or `'title contains \\\"Gulliver\\\\'s Travels\\\"'`).\\n\\n```\\n// Logs the name of every file in the user's Drive that modified after February 28,\\n// 2022 whose name contains \\\"untitled.\\\"\\\"\\nvar files \\u003d DriveApp.searchFiles(\\n    'modifiedDate \\u003e \\\"2022-02-28\\\" and title contains \\\"untitled\\\"');\\nwhile (files.hasNext()) {\\n  var file \\u003d files.next();\\n  console.log(file.getName());\\n}\\n```\\n@param params The search criteria, as detailed in the [Google Drive SDK documentation](/drive/api/v2/ref-search-terms).\\n@return A collection of all files in the user's Drive that match the search\\n    criteria.*/searchFiles(params:string):DriveApp.FileIterator;\\n/**Gets a collection of all folders in the user's Drive that match the given search\\ncriteria. The search criteria are detailed in the [Google Drive SDK documentation](/drive/api/v2/ref-search-terms). Note that the Drive\\nservice uses v2 of the Drive API and some query fields differ from v3. Review the [field\\ndifferences between v2 and v3](/drive/api/guides/v2-to-v3-reference#resource_field_differences_between_v2_and_v3).\\n\\nThe `params` argument is a query string that can contain string values, so take care\\nto escape quotation marks correctly (for example `\\\"title contains 'Gulliver\\\\\\\\'s\\nTravels'\\\"` or `'title contains \\\"Gulliver\\\\'s Travels\\\"'`).\\n\\n```\\n// Logs the name of every folder in the user's Drive that you own and is starred.\\nvar folders \\u003d DriveApp.searchFolders('starred \\u003d true and \\\"me\\\" in owners');\\nwhile (folders.hasNext()) {\\n  var folder \\u003d folders.next();\\n  console.log(folder.getName());\\n}\\n```\\n@param params The search criteria, as detailed in the [Google Drive SDK documentation](/drive/api/v2/ref-search-terms).\\n@return A collection of all folders in the user's Drive that match the search\\n    criteria.*/searchFolders(params:string):DriveApp.FolderIterator;}module DriveApp{interface User{\\n/**Gets the domain name associated with the user's account.\\n\\n```\\n// Log the domain names associated with all users who have edit access to a file.\\nvar file \\u003d DriveApp.getFileById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar editors \\u003d file.getEditors();\\nfor (var i \\u003d 0; i \\u003c editors.length; i++) {\\n  Logger.log(editors[i].getDomain());\\n}\\n```\\n@return the domain name associated with the user's account*/getDomain():string;\\n/**Gets the user's email address. The user's email address is only available if the user has\\nchosen to share the address from the Google+ account settings page, or if the user belongs to\\nthe same domain as the user running the script and the domain administrator has allowed all\\nusers within the domain to see other users' email addresses.\\n\\n```\\n// Log the email address of all users who have edit access to a file.\\nvar file \\u003d DriveApp.getFileById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar editors \\u003d file.getEditors();\\nfor (var i \\u003d 0; i \\u003c editors.length; i++) {\\n  Logger.log(editors[i].getEmail());\\n}\\n```\\n@return the user's email's address, or a blank string if the email address is not available*/getEmail():string;\\n/**Gets the user's name. This method returns `null` if the user's name is not available.\\n\\n```\\n// Log the names of all users who have edit access to a file.\\nvar file \\u003d DriveApp.getFileById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar editors \\u003d file.getEditors();\\nfor (var i \\u003d 0; i \\u003c editors.length; i++) {\\n  Logger.log(editors[i].getName());\\n}\\n```\\n@return the user's name, or `null` if the name is not available*/getName():string;\\n/**Gets the URL for the user's photo. This method returns `null` if the user's photo is not\\navailable.\\n\\n```\\n// Log the URLs for the photos of all users who have edit access to a file.\\nvar file \\u003d DriveApp.getFileById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar editors \\u003d file.getEditors();\\nfor (var i \\u003d 0; i \\u003c editors.length; i++) {\\n  Logger.log(editors[i].getPhotoUrl());\\n}\\n```\\n@return the URL for the user's photo, or `null` if the photo is not available*/getPhotoUrl():string;\\n/**Gets the user's email address.\\n\\n```\\n// Log the email address of the person running the script.\\nLogger.log(Session.getActiveUser().getUserLoginId());\\n```\\n@deprecated\\n@return The user's email's address.*/getUserLoginId():string;}interface Permission{}interface _Permission{\\n/**Users who can access the file or folder are able only to view it, copy it, or comment on it.\\nPassing this value to [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws an exception if\\nthe type of file does not support it.*/COMMENT:Permission;\\n/**Users who can access the file or folder are able to edit it. Unless [`File.setShareableByEditors(shareable)`](https://developers.google.com/apps-script/reference/drive/file.html#setShareableByEditors(Boolean)) is set to `false`, users can also change the sharing\\nsettings. Passing this value to [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws an\\nexception if the type of file does not support it.*/EDIT:Permission;\\n/**Users who can edit, trash, and move content within a shared drive. This value can be returned,\\nbut passing it to [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws an exception.*/FILE_ORGANIZER:Permission;\\n/**The user does not have any permissions for the file or folder. This value can be returned, but\\npassing it to [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws an exception unless it\\nis set in combination with [`Access.ANYONE`](https://developers.google.com/apps-script/reference/drive/access.html#ANYONE).*/NONE:Permission;\\n/**Users who can organize files and folders within a shared drive. This value can be returned, but\\npassing it to [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws an exception.*/ORGANIZER:Permission;\\n/**The user owns the file or folder. This value can be returned, but passing it to [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws an exception.*/OWNER:Permission;\\n/**Users who can access the file or folder are able only to view it or copy it. Passing this value\\nto [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws an exception if the type of file\\ndoes not support it.*/VIEW:Permission;}interface FolderIterator{\\n/**Gets a token that can be used to resume this iteration at a later time. This method is useful\\nif processing an iterator in one execution would exceed the maximum execution time.\\nContinuation tokens are generally valid for one week.\\n@return a continuation token that can be used to resume this iteration with the items that\\n    remained in the iterator when the token was generated*/getContinuationToken():string;\\n/**Determines whether calling [`next()`](https://developers.google.com/apps-script/reference/drive/folder-iterator.html#next()) will return an item.\\n@return `true` if [`next()`](https://developers.google.com/apps-script/reference/drive/folder-iterator.html#next()) will return an item; `false` if not*/hasNext():boolean;\\n/**Gets the next item in the collection of files or folders. Throws an exception if no items\\nremain.\\n@return the next item in the collection*/next():DriveApp.Folder;}interface Folder{\\n/**Adds the given user to the list of editors for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param emailAddress The email address of the user to add.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/addEditor(emailAddress:string):DriveApp.Folder;\\n/**Adds the given user to the list of editors for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param user A representation of the user to add.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/addEditor(user:User):DriveApp.Folder;\\n/**Adds the given array of users to the list of editors for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). If any of the\\nusers were already on the list of viewers, this method promotes them out of the list of\\nviewers.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/addEditors(emailAddresses:string[]):DriveApp.Folder;\\n/**Adds the given file to the current folder. This method does not move the file out of its\\nexisting parent folder; a file can have more than one parent simultaneously.\\n@deprecated\\n@param child The child file to add.\\n@return The new parent of the file added as a child.*/addFile(child:DriveApp.File):DriveApp.Folder;\\n/**Adds the given folder to the current folder. This method does not move the folder out of\\nits existing parent folder; a folder can have more than one parent simultaneously.\\n@deprecated\\n@param child The child folder to add.\\n@return The new parent of the folder added as a child.*/addFolder(child:DriveApp.Folder):DriveApp.Folder;\\n/**Adds the given user to the list of viewers for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). If the user was already\\non the list of editors, this method has no effect.\\n@param emailAddress The email address of the user to add.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/addViewer(emailAddress:string):DriveApp.Folder;\\n/**Adds the given user to the list of viewers for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). If the user was already\\non the list of editors, this method has no effect.\\n@param user A representation of the user to add.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/addViewer(user:User):DriveApp.Folder;\\n/**Adds the given array of users to the list of viewers for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). If any of the\\nusers were already on the list of editors, this method has no effect for them.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/addViewers(emailAddresses:string[]):DriveApp.Folder;\\n/**Creates a file in the current folder from a given `Blob` of arbitrary data.\\n\\n```\\n// Create an image file in Google Drive using the Maps service.\\nvar blob \\u003d Maps.newStaticMap().setCenter('76 9th Avenue, New York NY').getBlob();\\nDriveApp.getRootFolder().createFile(blob);\\n```\\n@param blob The data for the new file.\\n@return The new file.*/createFile(blob:BlobSource):DriveApp.File;\\n/**Creates a text file in the current folder with the given name and contents. Throws an\\nexception if `content` is larger than 50 MB.\\n\\n```\\n// Create a text file with the content \\\"Hello, world!\\\"\\nDriveApp.getRootFolder().createFile('New Text File', 'Hello, world!');\\n```\\n@param name The name of the new file.\\n@param content The content for the new file.\\n@return The new file.*/createFile(name:string,content:string):DriveApp.File;\\n/**Creates a file in the current folder with the given name, contents, and MIME type. Throws\\nan exception if `content` is larger than 10MB.\\n\\n```\\n// Create an HTML file with the content \\\"Hello, world!\\\"\\nDriveApp.getRootFolder().createFile('New HTML File', '\\u003cb\\u003eHello, world!\\u003c/b\\u003e', MimeType.HTML);\\n```\\n@param name The name of the new file.\\n@param content The content for the new file.\\n@param mimeType The MIME type of the new file.\\n@return The new file.*/createFile(name:string,content:string,mimeType:string):DriveApp.File;\\n/**Creates a folder in the current folder with the given name.\\n@param name The name of the new folder.\\n@return The new folder.*/createFolder(name:string):DriveApp.Folder;\\n/**Creates a shortcut to the provided Drive item ID, and returns it.\\n@param targetId The file ID of the target file or folder.\\n@return The new shortcut.*/createShortcut(targetId:string):DriveApp.File;\\n/**Creates a shortcut to the provided Drive item ID and resource key, and returns it. A resource\\nkey is an additional parameter that needs to be passed to access the target file or folder that\\nhas been shared using a link.\\n\\n```\\n// Creates shortcuts for all folders in the user's drive that have a specific name.\\n// TODO(developer): Replace 'Test-Folder' with a valid folder name in your drive.\\nconst folders \\u003d DriveApp.getFoldersByName('Test-Folder');\\n\\n// Iterates through all folders named 'Test-Folder'.\\nwhile (folders.hasNext()) {\\n  const folder \\u003d folders.next();\\n\\n  // Creates a shortcut to the provided Drive item ID and resource key, and returns it.\\n  DriveApp.createShortcutForTargetIdAndResourceKey(folder.getId(), folder.getResourceKey());\\n}\\n```\\n@param targetId The ID of the target file or folder.\\n@param targetResourceKey The resource key of the target file or folder.\\n@return The new shortcut.*/createShortcutForTargetIdAndResourceKey(targetId:string,targetResourceKey:string):DriveApp.File;\\n/**Gets the permission granted to the given user.\\n@param email the email address of the user whose permissions should be checked\\n@return the permissions granted to the user*/getAccess(email:string):DriveApp.Permission;\\n/**Gets the permission granted to the given user.\\n@param user a representation of the user whose permissions should be checked\\n@return the permissions granted to the user*/getAccess(user:User):DriveApp.Permission;\\n/**Gets the date the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) was created.\\n@return the date the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) was created*/getDateCreated():Date;\\n/**Gets the description for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).\\n@return the description for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)*/getDescription():string;\\n/**Gets the list of editors for this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). If the user who executes the script\\ndoes not have edit access to the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), this method returns an empty array.\\n\\n```\\n// Gets a folder by its ID.\\n// TODO(developer): Replace the folder ID with your own.\\nconst folder \\u003d DriveApp.getFolderById('1234567890abcdefghijklmnopqrstuvwxyz');\\n\\n// Gets the list of editors and logs their names to the console.\\nconst editors \\u003d folder.getEditors();\\nfor (editor of editors) {\\n  console.log(editor.getName());\\n}\\n```\\n@return The list of editors for this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) if the user has edit access or an\\n    empty array otherwise.*/getEditors():DriveApp.User[];\\n/**Gets a collection of all files that are children of the current folder.\\n@return A collection of all files that are children of the current folder.*/getFiles():DriveApp.FileIterator;\\n/**Gets a collection of all files that are children of the current folder and have the given name.\\n@param name The name of the files to find.\\n@return A collection of all files that are children of the current folder and have the given name.*/getFilesByName(name:string):DriveApp.FileIterator;\\n/**Gets a collection of all files that are children of the current folder and have the given MIME type.\\n@param mimeType The MIME type of the files to find.\\n@return A collection of all files that are children of the current folder and have the given MIME\\n    type.*/getFilesByType(mimeType:string):DriveApp.FileIterator;\\n/**Gets a collection of all folders that are children of the current folder.\\n@return A collection of all folders that are children of the current folder.*/getFolders():DriveApp.FolderIterator;\\n/**Gets a collection of all folders that are children of the current folder and have the given name.\\n@param name The name of the folders to find.\\n@return A collection of all folders that are children of the current folder and have the given name.*/getFoldersByName(name:string):DriveApp.FolderIterator;\\n/**Gets the ID of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).\\n@return the ID of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)*/getId():string;\\n/**Gets the date the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) was last updated.\\n@return the date the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) was last updated*/getLastUpdated():Date;\\n/**Gets the name of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).\\n@return the name of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)*/getName():string;\\n/**Gets the owner of this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).\\n\\n```\\n// Gets a folder by its ID.\\n// TODO(developer): Replace the folder ID with your own.\\nconst folder \\u003d DriveApp.getFolderById('1234567890abcdefghijklmnopqrstuvwxyz');\\n\\n// Gets the owner of the folder and logs the name to the console.\\nconst folderOwner \\u003d folder.getOwner();\\nconsole.log(folderOwner.getName());\\n```\\n@return The owner of this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).*/getOwner():DriveApp.User;\\n/**Gets a collection of folders that are immediate parents of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).\\n@return a collection of folders that are immediate parents of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)*/getParents():DriveApp.FolderIterator;\\n/**Gets the resource key of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) that is required to access items that\\nhave been shared using a link.\\n@return The resource key of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).*/getResourceKey():string;\\n/**Gets whether this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is eligible to apply the security update that\\nrequires a resource key for access when it's shared using a link.\\n\\nDrive requires a resource key to access some files or folders that have been shared using a\\nlink. This change is part of a security update. The update is turned on by default for eligible\\nfiles and folders. To turn the resource key requirement on or off for eligible files, use\\n`setSecurityUpdateEnabled`.\\n\\nLearn more about the [Security update for Google Drive](https://support.google.com/a/answer/10685032).\\n@return Whether the resource key requirement can be applied for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).*/getSecurityUpdateEligible():boolean;\\n/**Gets whether this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) requires a resource key for access when it's\\nshared using a link. This requirement is turned on by default for eligible files and folders.\\nTo turn the resource key requirement on or off for eligible files, use \\n\\n```\\nsetSecurityUpdateEnabled```\\n\\n.\\n\\nLearn more about the [Security update for Google Drive](https://support.google.com/a/answer/10685032).\\n@return Whether the resource key requirement is enabled for this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).*/getSecurityUpdateEnabled():boolean;\\n/**Gets which class of users can access the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), besides any individual\\nusers who have been explicitly given access.\\n@return which class of users can access the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)*/getSharingAccess():DriveApp.Access;\\n/**Gets the permission granted to those users who can access the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html),\\nbesides any individual users who have been explicitly given access.\\n@return the permissions granted to users who can access the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)*/getSharingPermission():DriveApp.Permission;\\n/**Gets the number of bytes used to store the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) in Drive. Note that\\nGoogle Workspace application files do not count toward Drive storage limits and thus return\\n`0` bytes.\\n@return the number of bytes used to store the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) in Drive*/getSize():Integer;\\n/**Gets the URL that can be used to open the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) in a Google App like\\nDrive or Docs.\\n@return the URL that can be used to view this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) in a Google App like\\n    Drive or Docs*/getUrl():string;\\n/**Gets the list of viewers and commenters for this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). If the user who\\nexecutes the script does not have edit access to the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), this method\\nreturns an empty array.\\n\\n```\\n// Gets a folder by its ID.\\n// TODO(developer): Replace the folder ID with your own.\\nconst folder \\u003d DriveApp.getFolderById('1234567890abcdefghijklmnopqrstuvwxyz');\\n\\n// Gets the list of viewers and logs their names to the console.\\nconst viewers \\u003d folder.getViewers();\\nfor (viewer of viewers) {\\n  console.log(viewer.getName());\\n}\\n```\\n@return The list of viewers and commenters for this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) if the user has edit\\n    access or an empty array otherwise.*/getViewers():DriveApp.User[];\\n/**Determines whether users with edit permissions to the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) are allowed to\\nshare with other users or change the permissions.\\n@return `true` if users with edit permissions are allowed to share with other users or\\n    change the permissions; `false` if not*/isShareableByEditors():boolean;\\n/**Determines whether the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) has been starred in the user's Drive.\\n@return `true` if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is starred in the user's Drive; `false` if not*/isStarred():boolean;\\n/**Determines whether the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is in the trash of the user's Drive.\\n@return `true` if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is in the trash of the user's Drive;\\n    `false` if not*/isTrashed():boolean;\\n/**Moves this item to the provided destination folder.\\n\\nThe current user must be the owner of the file or have at least edit access to the item's\\ncurrent parent folder in order to move the item to the destination folder.\\n@param destination The folder that becomes the new parent.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/moveTo(destination:DriveApp.Folder):DriveApp.Folder;\\n/**Removes the given user from the list of editors for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). This method doesn't\\nblock users from accessing the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is shared with the user's entire\\ndomain, or if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param emailAddress The email address of the user to remove.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/removeEditor(emailAddress:string):DriveApp.Folder;\\n/**Removes the given user from the list of editors for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). This method doesn't\\nblock users from accessing the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is shared with the user's entire\\ndomain, or if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param user A representation of the user to remove.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/removeEditor(user:User):DriveApp.Folder;\\n/**Removes the given file from the current folder. This method does not delete the file, but\\nif a file is removed from all of its parents, it cannot be seen in Drive except by searching\\nfor it or using the \\\"All items\\\" view.\\n@deprecated\\n@param child The child file to remove.\\n@return The previous parent of the child.*/removeFile(child:DriveApp.File):DriveApp.Folder;\\n/**Removes the given folder from the current folder. This method does not delete the folder\\nor its contents, but if a folder is removed from all of its parents, it cannot be seen in Drive\\nexcept by searching for it or using the \\\"All items\\\" view.\\n@deprecated\\n@param child The child folder to remove.\\n@return The previous parent of the child.*/removeFolder(child:DriveApp.Folder):DriveApp.Folder;\\n/**Removes the given user from the list of viewers and commenters for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). This\\nmethod has no effect if the user is an editor, not a viewer or commenter. This method also\\ndoesn't block users from accessing the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) if they belong to a class of users who\\nhave general access—for example, if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is shared with the user's\\nentire domain, or if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param emailAddress The email address of the user to remove.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) for chaining.*/removeViewer(emailAddress:string):DriveApp.Folder;\\n/**Removes the given user from the list of viewers and commenters for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). This\\nmethod has no effect if the user is an editor, not a viewer. This method also doesn't block\\nusers from accessing the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) if they belong to a class of users who have general\\naccess—for example, if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is shared with the user's entire domain, or\\nif the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param user A representation of the user to remove.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) for chaining.*/removeViewer(user:User):DriveApp.Folder;\\n/**Revokes the access to the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) granted to the given user. This method doesn't\\nblock users from accessing the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) if they belong to a class of users who\\nhave general access — for example, if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is shared with the user's\\nentire domain.\\n@param emailAddress The email address of the user whose access should be revoked.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/revokePermissions(emailAddress:string):DriveApp.Folder;\\n/**Revokes the access to the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) granted to the given user. This method doesn't\\nblock users from accessing the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) if they belong to a class of users who\\nhave general access — for example, if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is shared with the user's\\nentire domain.\\n@param user A representation of the user whose access should be revoked.\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/revokePermissions(user:User):DriveApp.Folder;\\n/**Gets a collection of all files that are children of the current folder and match the given search\\ncriteria. The search criteria are detailed in the [Google Drive SDK documentation](/drive/api/v2/ref-search-terms). Note that the Drive\\nservice uses v2 of the Drive API and some query fields differ from v3. Review the [field\\ndifferences between v2 and v3](/drive/api/guides/v2-to-v3-reference#resource_field_differences_between_v2_and_v3).\\n\\nThe `params` argument is a query string that can contain string values, so take care\\nto escape quotation marks correctly (for example `\\\"title contains 'Gulliver\\\\\\\\'s\\nTravels'\\\"` or `'title contains \\\"Gulliver\\\\'s Travels\\\"'`).\\n\\n```\\n// Logs the name of every file that are children of the current folder and modified after February 28,\\n// 2022 whose name contains \\\"untitled.\\\"\\\"\\nvar files \\u003d DriveApp.getRootFolder().searchFiles(\\n    'modifiedDate \\u003e \\\"2022-02-28\\\" and title contains \\\"untitled\\\"');\\nwhile (files.hasNext()) {\\n  var file \\u003d files.next();\\n  console.log(file.getName());\\n}\\n```\\n@param params The search criteria, as detailed in the [Google Drive SDK documentation](/drive/api/v2/ref-search-terms).\\n@return A collection of all files that are children of the current folder and match the search\\n    criteria.*/searchFiles(params:string):DriveApp.FileIterator;\\n/**Gets a collection of all folders that are children of the current folder and match the given search\\ncriteria. The search criteria are detailed in the [Google Drive SDK documentation](/drive/api/v2/ref-search-terms). Note that the Drive\\nservice uses v2 of the Drive API and some query fields differ from v3. Review the [field\\ndifferences between v2 and v3](/drive/api/guides/v2-to-v3-reference#resource_field_differences_between_v2_and_v3).\\n\\nThe `params` argument is a query string that can contain string values, so take care\\nto escape quotation marks correctly (for example `\\\"title contains 'Gulliver\\\\\\\\'s\\nTravels'\\\"` or `'title contains \\\"Gulliver\\\\'s Travels\\\"'`).\\n\\n```\\n// Logs the name of every folder that are children of the current folder and you own and is starred.\\nvar folders \\u003d DriveApp.getRootFolder().searchFolders('starred \\u003d true and \\\"me\\\" in owners');\\nwhile (folders.hasNext()) {\\n  var folder \\u003d folders.next();\\n  console.log(folder.getName());\\n}\\n```\\n@param params The search criteria, as detailed in the [Google Drive SDK documentation](/drive/api/v2/ref-search-terms).\\n@return A collection of all folders that are children of the current folder and match the search\\n    criteria.*/searchFolders(params:string):DriveApp.FolderIterator;\\n/**Sets the description for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).\\n@param description the new description for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)\\n@return this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining*/setDescription(description:string):DriveApp.Folder;\\n/**Sets the name of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).\\n@param name the new name of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)\\n@return this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining*/setName(name:string):DriveApp.Folder;\\n/**Changes the owner of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). This method also gives the previous owner\\nexplicit edit access to the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).\\n@param emailAddress the email address of the user who should become the new owner\\n@return this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining*/setOwner(emailAddress:string):DriveApp.Folder;\\n/**Changes the owner of the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). This method also gives the previous owner\\nexplicit edit access to the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).\\n@param user a representation of the user who should become the new owner\\n@return this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining*/setOwner(user:User):DriveApp.Folder;\\n/**Sets whether the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) requires a resource key for access when it's\\nshared using a link. Eligible files and folders are enabled by default.\\n\\nLearn more about the [Security update for Google Drive](https://support.google.com/a/answer/10685032).\\n@param enabled Whether to enable the resource key requirement for the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html).\\n@return This [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining.*/setSecurityUpdateEnabled(enabled:boolean):DriveApp.Folder;\\n/**Sets whether users with edit permissions to the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) are allowed to share\\nwith other users or change the permissions. The default for a new [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is\\n`true`.\\n@param shareable `true` if users with edit permissions should be allowed to share with\\n    other users or change the permissions; `false` if not\\n@return this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining*/setShareableByEditors(shareable:boolean):DriveApp.Folder;\\n/**Sets which class of users can access the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) and what permissions\\nthose users are granted, besides any individual users who have been explicitly given access.\\n\\n```\\n// Creates a folder that anyone on the Internet can read from and write to. (Domain\\n// administrators can prohibit this setting for users of a Google Workspace domain.)\\nvar folder \\u003d DriveApp.createFolder('Shared Folder');\\nfolder.setSharing(DriveApp.Access.ANYONE, DriveApp.Permission.EDIT);\\n```\\n@param accessType which class of users should be able to access the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)\\n@param permissionType the permissions that should be granted to users who can access the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)\\n@return this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining*/setSharing(accessType:DriveApp.Access,permissionType:DriveApp.Permission):DriveApp.Folder;\\n/**Sets whether the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is starred in the user's Drive. The default for\\nnew [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)s is `false`.\\n@param starred `true` if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) should be starred in the user's\\n    Drive; `false` if not\\n@return this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining*/setStarred(starred:boolean):DriveApp.Folder;\\n/**Sets whether the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) is in the trash of the user's Drive. Only the\\nowner may trash the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html). The default for new [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html)s is `false`.\\n@param trashed `true` if the [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html) should be moved to the trash of\\n    the user's Drive; `false` if not\\n@return this [`Folder`](https://developers.google.com/apps-script/reference/drive/folder.html), for chaining*/setTrashed(trashed:boolean):DriveApp.Folder;}interface FileIterator{\\n/**Gets a token that can be used to resume this iteration at a later time. This method is useful\\nif processing an iterator in one execution would exceed the maximum execution time.\\nContinuation tokens are generally valid for one week.\\n@return a continuation token that can be used to resume this iteration with the items that\\n    remained in the iterator when the token was generated*/getContinuationToken():string;\\n/**Determines whether calling [`next()`](https://developers.google.com/apps-script/reference/drive/file-iterator.html#next()) will return an item.\\n@return `true` if [`next()`](https://developers.google.com/apps-script/reference/drive/file-iterator.html#next()) will return an item; `false` if not*/hasNext():boolean;\\n/**Gets the next item in the collection of files or folders. Throws an exception if no items\\nremain.\\n@return the next item in the collection*/next():DriveApp.File;}interface File{\\n/**Add the given user to the list of commenters for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If the user was\\nalready on the list of viewers, this method promotes the user out of the list of viewers.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace 'cloudysanfrancisco@gmail.com' with the email address that you\\n// want to add as a commenter.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n  email \\u003d 'cloudysanfrancisco@gmail.com';\\n  console.log(file.addCommenter(email));\\n}\\n```\\n@param emailAddress The email address of the user to add.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/addCommenter(emailAddress:string):DriveApp.File;\\n/**Add the given user to the list of commenters for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If the user was\\nalready on the list of viewers, this method promotes the user out of the list of viewers.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Adds the active user as a commenter.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n  file.addCommenter(Session.getActiveUser());\\n}\\n```\\n@param user A representation of the user to add.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/addCommenter(user:User):DriveApp.File;\\n/**Add the given array of users to the list of commenters for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If any\\nof the users were already on the list of viewers, this method promotes them out of the list of\\nviewers.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n  // TODO(developer): Replace 'cloudysanfrancisco@gmail.com' and\\n  // 'baklavainthebalkans@gmail.com' with the email addresses to add as commenters.\\n  const emails \\u003d ['cloudysanfrancisco@gmail.com','baklavainthebalkans@gmail.com'];\\n  console.log(file.addCommenters(emails));\\n}\\n```\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/addCommenters(emailAddresses:string[]):DriveApp.File;\\n/**Adds the given user to the list of editors for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param emailAddress The email address of the user to add.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/addEditor(emailAddress:string):DriveApp.File;\\n/**Adds the given user to the list of editors for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param user A representation of the user to add.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/addEditor(user:User):DriveApp.File;\\n/**Adds the given array of users to the list of editors for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If any of the\\nusers were already on the list of viewers, this method promotes them out of the list of\\nviewers.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/addEditors(emailAddresses:string[]):DriveApp.File;\\n/**Adds the given user to the list of viewers for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If the user was already\\non the list of editors, this method has no effect.\\n@param emailAddress The email address of the user to add.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/addViewer(emailAddress:string):DriveApp.File;\\n/**Adds the given user to the list of viewers for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If the user was already\\non the list of editors, this method has no effect.\\n@param user A representation of the user to add.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/addViewer(user:User):DriveApp.File;\\n/**Adds the given array of users to the list of viewers for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If any of the\\nusers were already on the list of editors, this method has no effect for them.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/addViewers(emailAddresses:string[]):DriveApp.File;\\n/**Gets the permission granted to the given user.\\n@param email the email address of the user whose permissions should be checked\\n@return the permissions granted to the user*/getAccess(email:string):DriveApp.Permission;\\n/**Gets the permission granted to the given user.\\n@param user a representation of the user whose permissions should be checked\\n@return the permissions granted to the user*/getAccess(user:User):DriveApp.Permission;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;\\n/**Gets the date the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) was created.\\n@return the date the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) was created*/getDateCreated():Date;\\n/**Gets the description for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).\\n@return the description for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html)*/getDescription():string;\\n/**Gets the URL that can be used to download the file. Only users with permission to open the file\\nin Google Drive can access the URL. You can use this URL in a browser to download the file, but\\nyou can't use to fetch the file with [`UrlFetchApp`](https://developers.google.com/apps-script/reference/drive/../url-fetch/url-fetch-app.html). If you want the contents of the\\nfile in the script, use [`getBlob()`](https://developers.google.com/apps-script/reference/drive/file.html#getBlob()).\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files and logs the download URLs to the console.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n  console.log(file.getDownloadUrl());\\n}\\n```\\n@return The URL that can be used to download the file.*/getDownloadUrl():string;\\n/**Gets the list of editors for this [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If the user who executes the script\\ndoes not have edit access to the [`File`](https://developers.google.com/apps-script/reference/drive/file.html), this method returns an empty array.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n\\n  // Adds the email addresses in the array as editors of each file.\\n  // TODO(developer): Replace 'cloudysanfrancisco@gmail.com'\\n  // and 'baklavainthebalkans@gmail.com' with valid email addresses.\\n  file.addEditors(['cloudysanfrancisco@gmail.com', 'baklavainthebalkans@gmail.com']);\\n\\n  // Gets a list of the file editors.\\n  const editors \\u003d file.getEditors();\\n\\n  // For each file, logs the editors' email addresses to the console.\\n  for (const editor of editors) {\\n    console.log(editor.getEmail());\\n  }\\n}\\n```\\n@return If the user has edit access for this [`File`](https://developers.google.com/apps-script/reference/drive/file.html), returns the list of\\n    editors. If the user doesn't have edit access, returns an empty array.*/getEditors():DriveApp.User[];\\n/**Gets the ID of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).\\n@return the ID of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html)*/getId():string;\\n/**Gets the date the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) was last updated.\\n@return the date the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) was last updated*/getLastUpdated():Date;\\n/**Gets the MIME type of the file.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files and logs the MIME type to the console.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n  console.log(file.getMimeType());\\n}\\n```\\n@return The MIME type of the file.*/getMimeType():string;\\n/**Gets the name of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).\\n@return the name of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html)*/getName():string;\\n/**Gets the file owner.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files and logs the names of the file owners to the console.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n  console.log(file.getOwner().getName());\\n}\\n```\\n@return The file owner.*/getOwner():DriveApp.User;\\n/**Gets a collection of folders that are immediate parents of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).\\n@return a collection of folders that are immediate parents of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html)*/getParents():DriveApp.FolderIterator;\\n/**Gets the resource key of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) that is required to access items that\\nhave been shared using a link.\\n@return The resource key of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).*/getResourceKey():string;\\n/**Gets whether this [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is eligible to apply the security update that\\nrequires a resource key for access when it's shared using a link.\\n\\nDrive requires a resource key to access some files or folders that have been shared using a\\nlink. This change is part of a security update. The update is turned on by default for eligible\\nfiles and folders. To turn the resource key requirement on or off for eligible files, use\\n`setSecurityUpdateEnabled`.\\n\\nLearn more about the [Security update for Google Drive](https://support.google.com/a/answer/10685032).\\n@return Whether the resource key requirement can be applied for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).*/getSecurityUpdateEligible():boolean;\\n/**Gets whether this [`File`](https://developers.google.com/apps-script/reference/drive/file.html) requires a resource key for access when it's\\nshared using a link. This requirement is turned on by default for eligible files and folders.\\nTo turn the resource key requirement on or off for eligible files, use \\n\\n```\\nsetSecurityUpdateEnabled```\\n\\n.\\n\\nLearn more about the [Security update for Google Drive](https://support.google.com/a/answer/10685032).\\n@return Whether the resource key requirement is enabled for this [`File`](https://developers.google.com/apps-script/reference/drive/file.html).*/getSecurityUpdateEnabled():boolean;\\n/**Gets which class of users can access the [`File`](https://developers.google.com/apps-script/reference/drive/file.html), besides any individual\\nusers who have been explicitly given access.\\n@return which class of users can access the [`File`](https://developers.google.com/apps-script/reference/drive/file.html)*/getSharingAccess():DriveApp.Access;\\n/**Gets the permission granted to those users who can access the [`File`](https://developers.google.com/apps-script/reference/drive/file.html),\\nbesides any individual users who have been explicitly given access.\\n@return the permissions granted to users who can access the [`File`](https://developers.google.com/apps-script/reference/drive/file.html)*/getSharingPermission():DriveApp.Permission;\\n/**Gets the number of bytes used to store the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) in Drive. Note that\\nGoogle Workspace application files do not count toward Drive storage limits and thus return\\n`0` bytes.\\n@return the number of bytes used to store the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) in Drive*/getSize():Integer;\\n/**If this is a Shortcut, returns the ID of the item it points to.\\n\\nOtherwise it returns `null`.\\n\\n```\\n// The ID of the file for which to make a shortcut and the ID of\\n// the folder to which you want to add the shortcut.\\n// TODO(developer): Replace the file and folder IDs with your IDs.\\nconst fileId \\u003d 'abc123456';\\nconst folderId \\u003d 'xyz987654';\\n\\n// Gets the folder to add the shortcut to.\\nconst folder \\u003d DriveApp.getFolderById(folderId);\\n\\n// Creates a shortcut of the file and moves it to the specified folder.\\nconst shortcut \\u003d DriveApp.createShortcut(fileId).moveTo(folder);\\n\\n// Logs the target ID of the shortcut.\\nconsole.log(`${shortcut.getName()}\\u003d${shortcut.getTargetId()}`);\\n```\\n@return The target item ID.*/getTargetId():string;\\n/**If this is a Shortcut, returns the mime type of the item it points to.\\n\\nOtherwise it returns `null`.\\n\\n```\\n// The ID of the file for which to make a shortcut and the ID of\\n// the folder to which you want to add the shortcut.\\n// TODO(developer): Replace the file and folder IDs with your IDs.\\nconst fileId \\u003d 'abc123456';\\nconst folderId \\u003d 'xyz987654';\\n\\n// Gets the folder to add the shortcut to.\\nconst folder \\u003d DriveApp.getFolderById(folderId);\\n\\n// Creates a shortcut of the file and moves it to the specified folder.\\nconst shortcut \\u003d DriveApp.createShortcut(fileId).moveTo(folder);\\n\\n// Logs the MIME type of the file that the shortcut points to.\\nconsole.log(`MIME type of the shortcut: ${shortcut.getTargetMimeType()}`);\\n```\\n@return The target item mime type.*/getTargetMimeType():string;\\n/**If the file is a shortcut, returns the resource key of the item it points to. A resource key is\\nan additional parameter that you need to pass to access files that have been shared using a\\nlink.\\n\\nIf the file isn't a shortcut, it returns `null`.\\n\\n```\\n// Gets a file by its ID.\\n// TODO(developer): Replace 'abc123456' with your file ID.\\nconst file \\u003d DriveApp.getFileById('abc123456');\\n\\n// If the file is a shortcut, returns the resource key of the file that it points to.\\nconsole.log(file.getTargetResourceKey());\\n```\\n@return The target item's resource key or `null` if the file is not a shortcut.*/getTargetResourceKey():string;\\n/**Gets a thumbnail image for the file, or `null` if no thumbnail exists.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n\\n  // Logs the thumbnail image for each file to the console as a blob,\\n  // or null if no thumbnail exists.\\n  console.log(file.getThumbnail());\\n}\\n```\\n@return The thumbnail image for the file.*/getThumbnail():Blob;\\n/**Gets the URL that can be used to open the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) in a Google App like\\nDrive or Docs.\\n@return the URL that can be used to view this [`File`](https://developers.google.com/apps-script/reference/drive/file.html) in a Google App like\\n    Drive or Docs*/getUrl():string;\\n/**Gets the list of viewers and commenters for this [`File`](https://developers.google.com/apps-script/reference/drive/file.html). If the user who\\nexecutes the script does not have edit access to the [`File`](https://developers.google.com/apps-script/reference/drive/file.html), this method\\nreturns an empty array.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n\\n  // For each file, logs the viewers' email addresses to the console.\\n  const viewers \\u003d file.getViewers();\\n  for (viewer of viewers) {\\n    console.log(viewer.getEmail());\\n  }\\n}\\n```\\n@return If the user has edit access for this [`File`](https://developers.google.com/apps-script/reference/drive/file.html), returns the list of\\n    viewers and commenters. If the user doesn't have edit access, returns an empty array.*/getViewers():DriveApp.User[];\\n/**Determines whether users with edit permissions to the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) are allowed to\\nshare with other users or change the permissions.\\n@return `true` if users with edit permissions are allowed to share with other users or\\n    change the permissions; `false` if not*/isShareableByEditors():boolean;\\n/**Determines whether the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) has been starred in the user's Drive.\\n@return `true` if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is starred in the user's Drive; `false` if not*/isStarred():boolean;\\n/**Determines whether the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is in the trash of the user's Drive.\\n@return `true` if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is in the trash of the user's Drive;\\n    `false` if not*/isTrashed():boolean;\\n/**Creates a copy of the file.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n\\n  // Creates a copy of each file and logs the file name to the console.\\n  console.log(file.makeCopy().getName());\\n}\\n```\\n@return The new copy.*/makeCopy():DriveApp.File;\\n/**Creates a copy of the file in the destination directory.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n\\n  // Creates a copy of each file and adds it to the specified folder.\\n  // TODO(developer): Replace the folder ID with your own.\\n  const destination \\u003d DriveApp.getFolderById('123456abcxyz');\\n  const copiedFile \\u003d file.makeCopy(destination);\\n\\n  // Logs the file names to the console.\\n  console.log(copiedFile.getName());\\n}\\n```\\n@param destination The directory to copy the file into.\\n@return The new copy.*/makeCopy(destination:DriveApp.Folder):DriveApp.File;\\n/**Creates a copy of the file and names it with the name provided.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n\\n  // Creates a copy of each file and sets the name to 'Test-Copy.'\\n  const filename \\u003d file.makeCopy('Test-Copy');\\n\\n  // Logs the copied file's name to the console.\\n  console.log(filename.getName());\\n}\\n```\\n@param name The filename that should be applied to the new copy.\\n@return The new copy.*/makeCopy(name:string):DriveApp.File;\\n/**Creates a copy of the file in the destination directory and names it with the name provided.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n\\n  // Creates a copy of each file, sets the file name, and adds the copied file\\n  // to the specified folder.\\n  // TODO(developer): Replace the folder ID with your own.\\n  const destination \\u003d DriveApp.getFolderById('123456abcxyz');\\n  const copiedFile \\u003d file.makeCopy('Test-Copy', destination);\\n\\n  // Logs the file names to the console.\\n  console.log(copiedFile.getName());\\n}\\n```\\n@param name The filename that should be applied to the new copy.\\n@param destination The directory to copy the file into.\\n@return The new copy.*/makeCopy(name:string,destination:DriveApp.Folder):DriveApp.File;\\n/**Moves this item to the provided destination folder.\\n\\nThe current user must be the owner of the file or have at least edit access to the item's\\ncurrent parent folder in order to move the item to the destination folder.\\n@param destination The folder that becomes the new parent.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/moveTo(destination:DriveApp.Folder):DriveApp.File;\\n/**Removes the given user from the list of commenters for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). This method\\ndoes not block users from access the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) if they belong to a class of users\\nwho have general access — for example, if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is shared with the user's\\nentire domain.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n\\n  // Removes the given user from the list of commenters for each file.\\n  // TODO(developer): Replace the email with the email of the user you want to remove.\\n  file.removeCommenter('cloudysanfrancisco@gmail.com');\\n}\\n```\\n@param emailAddress The email address of the user to remove.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/removeCommenter(emailAddress:string):DriveApp.File;\\n/**Removes the given user from the list of commenters for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). This method\\ndoes not block users from access the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) if they belong to a class of users\\nwho have general access — for example, if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is shared with the user's\\nentire domain.\\n\\n```\\n// Gets a list of all files in Google Drive with the given name.\\n// TODO(developer): Replace the file name with your own.\\nconst files \\u003d DriveApp.getFilesByName('Test');\\n\\n// Loops through the files.\\nwhile (files.hasNext()) {\\n  const file \\u003d files.next();\\n\\n  // Removes the given user from the list of commenters for each file.\\n  console.log(file.removeCommenter(Session.getActiveUser()));\\n}\\n```\\n@param user A representation of the user to remove.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/removeCommenter(user:User):DriveApp.File;\\n/**Removes the given user from the list of editors for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). This method doesn't\\nblock users from accessing the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is shared with the user's entire\\ndomain, or if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param emailAddress The email address of the user to remove.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/removeEditor(emailAddress:string):DriveApp.File;\\n/**Removes the given user from the list of editors for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). This method doesn't\\nblock users from accessing the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is shared with the user's entire\\ndomain, or if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param user A representation of the user to remove.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/removeEditor(user:User):DriveApp.File;\\n/**Removes the given user from the list of viewers and commenters for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). This\\nmethod has no effect if the user is an editor, not a viewer or commenter. This method also\\ndoesn't block users from accessing the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) if they belong to a class of users who\\nhave general access—for example, if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is shared with the user's\\nentire domain, or if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param emailAddress The email address of the user to remove.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html) for chaining.*/removeViewer(emailAddress:string):DriveApp.File;\\n/**Removes the given user from the list of viewers and commenters for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). This\\nmethod has no effect if the user is an editor, not a viewer. This method also doesn't block\\nusers from accessing the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) if they belong to a class of users who have general\\naccess—for example, if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is shared with the user's entire domain, or\\nif the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param user A representation of the user to remove.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html) for chaining.*/removeViewer(user:User):DriveApp.File;\\n/**Revokes the access to the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) granted to the given user. This method doesn't\\nblock users from accessing the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) if they belong to a class of users who\\nhave general access — for example, if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is shared with the user's\\nentire domain.\\n@param emailAddress The email address of the user whose access should be revoked.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/revokePermissions(emailAddress:string):DriveApp.File;\\n/**Revokes the access to the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) granted to the given user. This method doesn't\\nblock users from accessing the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) if they belong to a class of users who\\nhave general access — for example, if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is shared with the user's\\nentire domain.\\n@param user A representation of the user whose access should be revoked.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/revokePermissions(user:User):DriveApp.File;\\n/**Overwrites the content of the file with a given replacement. Throws an exception if `content` is larger than 10MB.\\n\\nBeware: this change is irreversible.\\n\\n```\\n// Creates a text file with the content 'Hello, world!'\\nfile \\u003d DriveApp.createFile('New Text File', 'Hello, world!');\\n\\n// Logs the content of the text file to the console.\\nconsole.log(file.getBlob().getDataAsString());\\n\\n// Updates the content of the text file to 'Updated text!'\\nfile.setContent('Updated text!')\\n\\n// Logs content of the text file to the console.\\nconsole.log(file.getBlob().getDataAsString());\\n```\\n@param content The new content for the file.\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/setContent(content:string):DriveApp.File;\\n/**Sets the description for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).\\n@param description the new description for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html)\\n@return this [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining*/setDescription(description:string):DriveApp.File;\\n/**Sets the name of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).\\n@param name the new name of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html)\\n@return this [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining*/setName(name:string):DriveApp.File;\\n/**Changes the owner of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). This method also gives the previous owner\\nexplicit edit access to the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).\\n@param emailAddress the email address of the user who should become the new owner\\n@return this [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining*/setOwner(emailAddress:string):DriveApp.File;\\n/**Changes the owner of the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). This method also gives the previous owner\\nexplicit edit access to the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).\\n@param user a representation of the user who should become the new owner\\n@return this [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining*/setOwner(user:User):DriveApp.File;\\n/**Sets whether the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) requires a resource key for access when it's\\nshared using a link. Eligible files and folders are enabled by default.\\n\\nLearn more about the [Security update for Google Drive](https://support.google.com/a/answer/10685032).\\n@param enabled Whether to enable the resource key requirement for the [`File`](https://developers.google.com/apps-script/reference/drive/file.html).\\n@return This [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining.*/setSecurityUpdateEnabled(enabled:boolean):DriveApp.File;\\n/**Sets whether users with edit permissions to the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) are allowed to share\\nwith other users or change the permissions. The default for a new [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is\\n`true`.\\n@param shareable `true` if users with edit permissions should be allowed to share with\\n    other users or change the permissions; `false` if not\\n@return this [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining*/setShareableByEditors(shareable:boolean):DriveApp.File;\\n/**Sets which class of users can access the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) and what permissions\\nthose users are granted, besides any individual users who have been explicitly given access.\\n\\n```\\n// Creates a folder that anyone on the Internet can read from and write to. (Domain\\n// administrators can prohibit this setting for users of a Google Workspace domain.)\\nvar folder \\u003d DriveApp.createFolder('Shared Folder');\\nfolder.setSharing(DriveApp.Access.ANYONE, DriveApp.Permission.EDIT);\\n```\\n@param accessType which class of users should be able to access the [`File`](https://developers.google.com/apps-script/reference/drive/file.html)\\n@param permissionType the permissions that should be granted to users who can access the [`File`](https://developers.google.com/apps-script/reference/drive/file.html)\\n@return this [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining*/setSharing(accessType:DriveApp.Access,permissionType:DriveApp.Permission):DriveApp.File;\\n/**Sets whether the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is starred in the user's Drive. The default for\\nnew [`File`](https://developers.google.com/apps-script/reference/drive/file.html)s is `false`.\\n@param starred `true` if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) should be starred in the user's\\n    Drive; `false` if not\\n@return this [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining*/setStarred(starred:boolean):DriveApp.File;\\n/**Sets whether the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) is in the trash of the user's Drive. Only the\\nowner may trash the [`File`](https://developers.google.com/apps-script/reference/drive/file.html). The default for new [`File`](https://developers.google.com/apps-script/reference/drive/file.html)s is `false`.\\n@param trashed `true` if the [`File`](https://developers.google.com/apps-script/reference/drive/file.html) should be moved to the trash of\\n    the user's Drive; `false` if not\\n@return this [`File`](https://developers.google.com/apps-script/reference/drive/file.html), for chaining*/setTrashed(trashed:boolean):DriveApp.File;}interface Access{}interface _Access{\\n/**Anyone on the Internet can find and access. No sign-in required.\\n\\nDomain administrators can prohibit this setting for users of a Google Workspace domain. If\\nthe setting is disabled, passing this value to [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws an exception.*/ANYONE:Access;\\n/**Anyone who has the link can access. No sign-in required.\\n\\nDomain administrators can prohibit this setting for users of a Google Workspace domain. If\\nthe setting is disabled, passing this value to [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws an exception.*/ANYONE_WITH_LINK:Access;\\n/**People in your domain can find and access. Sign-in required.\\n\\nThis setting is available only for users of a Google Workspace domain. For other types of\\nGoogle accounts, passing this value to [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws\\nan exception.*/DOMAIN:Access;\\n/**People in your domain who have the link can access. Sign-in required.\\n\\nThis setting is available only for users of a Google Workspace domain. For other types of\\nGoogle accounts, passing this value to [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/drive/file.html#setSharing(Access,Permission)) throws\\nan exception.*/DOMAIN_WITH_LINK:Access;\\n/**Only people explicitly granted permission can access. Sign-in required.*/PRIVATE:Access;}}const DriveApp:DriveApp;\"],[\"form-app.d.ts\",\"interface FormApp{\\n/**An enumeration of types of image alignment.*/Alignment:FormApp._Alignment;\\n/**An enumeration of types of destinations that can store form responses.*/DestinationType:FormApp._DestinationType;\\n/**An enumeration of types of form [`Feedbacks`](https://developers.google.com/apps-script/reference/forms/quiz-feedback.html).*/FeedbackType:FormApp._FeedbackType;\\n/**An enumeration of types of form [`Items`](https://developers.google.com/apps-script/reference/forms/item.html).*/ItemType:FormApp._ItemType;\\n/**An enumeration of possible behaviors for navigating pages.*/PageNavigationType:FormApp._PageNavigationType;\\n/**Creates and returns a new [`Form`](https://developers.google.com/apps-script/reference/forms/form.html). Throws an exception if the given title is `null`\\nor empty.\\n\\n```\\n// Create and open a form.\\nvar form \\u003d FormApp.create('Form Name');\\n```\\n@param title the name of the new form\\n@return the new form*/create(title:string):FormApp.Form;\\n/**Returns an instance of a CheckboxGridValidationBuilder which can be used to set validation on a\\n[`CheckboxGridItem`](https://developers.google.com/apps-script/reference/forms/checkbox-grid-item.html).*/createCheckboxGridValidation():FormApp.CheckboxGridValidationBuilder;\\n/**Returns an instance of a CheckboxValidationBuilder which can be used to set validation on a\\n[`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html).*/createCheckboxValidation():FormApp.CheckboxValidationBuilder;\\n/**Returns an instance of a QuizFeedbackBuilder which can be used to set feedback on a gradeable\\n[`Item`](https://developers.google.com/apps-script/reference/forms/item.html).*/createFeedback():FormApp.QuizFeedbackBuilder;\\n/**Returns an instance of a GridValidationBuilder which can be used to set validation on a [`GridItem`](https://developers.google.com/apps-script/reference/forms/grid-item.html).*/createGridValidation():FormApp.GridValidationBuilder;\\n/**Returns an instance of a ParagraphTextValidationBuilder which can be used to set validation on\\na [`ParagraphTextItem`](https://developers.google.com/apps-script/reference/forms/paragraph-text-item.html).*/createParagraphTextValidation():FormApp.ParagraphTextValidationBuilder;\\n/**Returns an instance of a TextValidationBuilder which can be used to set validation on a [`TextItem`](https://developers.google.com/apps-script/reference/forms/text-item.html).*/createTextValidation():FormApp.TextValidationBuilder;\\n/**Returns the form to which the script is [container-bound](/apps-script/scripts_containers). To interact with forms to which the\\nscript is not container-bound, use [`openById(id)`](https://developers.google.com/apps-script/reference/forms/form-app.html#openById(String)) or [`openByUrl(url)`](https://developers.google.com/apps-script/reference/forms/form-app.html#openByUrl(String))\\ninstead.\\n\\n```\\n// Get the form to which this script is bound.\\nvar form \\u003d FormApp.getActiveForm();\\n```\\n@return the form to which the script is bound, or `null` if the script is not bound to a\\n    form*/getActiveForm():FormApp.Form;\\n/**Returns an instance of the form editor's user-interface environment that allows the script to\\nadd features like menus, dialogs, and sidebars. A script can only interact with the UI for the\\ncurrent instance of an open form editor (not the view that a respondent sees), and only if the\\nscript is [bound](/apps-script/scripts_containers) to the form. For more\\ninformation, see the guides to [menus](/apps-script/guides/menus) and [dialogs and sidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Add a custom menu to the active form, including a separator and a sub-menu.\\nfunction onOpen(e) {\\n  FormApp.getUi()\\n      .createMenu('My Menu')\\n      .addItem('My menu item', 'myFunction')\\n      .addSeparator()\\n      .addSubMenu(FormApp.getUi().createMenu('My sub-menu')\\n          .addItem('One sub-menu item', 'mySecondFunction')\\n          .addItem('Another sub-menu item', 'myThirdFunction'))\\n      .addToUi();\\n}\\n```\\n@return an instance of this form's user-interface environment*/getUi():Ui;\\n/**Returns the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html) with the specified ID. Throws an exception if the ID is invalid or the\\nuser does not have permission to open the form.\\n\\n```\\n// Open a form by ID.\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\n```\\n@param id the ID of the form to open\\n@return the form with the given ID*/openById(id:string):FormApp.Form;\\n/**Returns the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html) with the specified URL. Throws an exception if the URL is invalid or\\nthe user does not have permission to open the form.\\n\\n```\\n// Open a form by URL.\\nvar form \\u003d FormApp.openByUrl(\\n    'https://docs.google.com/forms/d/1234567890abcdefghijklmnopqrstuvwxyz_a1b2c3/edit'\\n    );\\n```\\n@param url the URL of the form to open\\n@return the form with the given URL*/openByUrl(url:string):FormApp.Form;}module FormApp{interface VideoItem{\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`VideoItem`](https://developers.google.com/apps-script/reference/forms/video-item.html), for chaining*/duplicate():FormApp.VideoItem;\\n/**Gets the video's horizontal alignment.\\n@return the horizontal alignment*/getAlignment():FormApp.Alignment;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Gets the video's width in pixels.\\n@return the width in pixels*/getWidth():Integer;\\n/**Sets the video's horizontal alignment.\\n@param alignment the horizontal alignment\\n@return this [`VideoItem`](https://developers.google.com/apps-script/reference/forms/video-item.html), for chaining*/setAlignment(alignment:FormApp.Alignment):FormApp.VideoItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`VideoItem`](https://developers.google.com/apps-script/reference/forms/video-item.html), for chaining*/setHelpText(text:string):FormApp.VideoItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`VideoItem`](https://developers.google.com/apps-script/reference/forms/video-item.html), for chaining*/setTitle(title:string):FormApp.VideoItem;\\n/**Sets the video itself from a given YouTube URL or YouTube video ID.\\n@param youtubeUrl the YouTube URL or ID\\n@return this [`VideoItem`](https://developers.google.com/apps-script/reference/forms/video-item.html), for chaining*/setVideoUrl(youtubeUrl:string):FormApp.VideoItem;\\n/**Sets the video's width in pixels. Only the video's width can be set. Height is set\\nautomatically to maintain the video's proportions.\\n@param width the width in pixels\\n@return this [`VideoItem`](https://developers.google.com/apps-script/reference/forms/video-item.html), for chaining*/setWidth(width:Integer):FormApp.VideoItem;}interface TimeItem{\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this time item. The arguments `hour` and `minute` are best represented as integers from `0` to `23` and from `0` to\\n`59`, respectively. If they exceed those bounds, they behave as a clock would: for\\nexample, `10, 90` is interpreted as 11:30, and `-1, 60` is intepreted as 00:00.\\n@param hour the hour, represented as an integer from `0` to `23`\\n@param minute the minute of the hour, represented as an integer from `0` to `59`\\n@return the item response*/createResponse(hour:Integer,minute:Integer):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`TimeItem`](https://developers.google.com/apps-script/reference/forms/time-item.html), for chaining*/duplicate():FormApp.TimeItem;\\n/**Returns the feedback that is shown to respondents when they respond to a gradeable question.\\n@return the feedback, if any.*/getGeneralFeedback():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the feedback to be shown to respondents when they respond to a gradeable question that\\ndoesn't have a correct or incorrect answer (ie questions that require manual grading).\\n@param feedback the new feedback\\n@return this [`TimeItem`](https://developers.google.com/apps-script/reference/forms/time-item.html), for chaining*/setGeneralFeedback(feedback:FormApp.QuizFeedback):FormApp.TimeItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`TimeItem`](https://developers.google.com/apps-script/reference/forms/time-item.html), for chaining*/setHelpText(text:string):FormApp.TimeItem;\\n/**Sets the number of points a gradeable item is worth. The default for new items is 0.\\n@param points the number of a points a question item is worth\\n@return this [`TimeItem`](https://developers.google.com/apps-script/reference/forms/time-item.html), for chaining*/setPoints(points:Integer):FormApp.TimeItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.TimeItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`TimeItem`](https://developers.google.com/apps-script/reference/forms/time-item.html), for chaining*/setTitle(title:string):FormApp.TimeItem;}interface TextValidationBuilder{\\n/**Requires text item to be a number.\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireNumber():FormApp.TextValidationBuilder;\\n/**Requires text item to be a number between start and end, inclusive.\\n@param start the lower bounds of the inclusive range\\n@param end the upper bounds of the inclusive range\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireNumberBetween(start:number,end:number):FormApp.TextValidationBuilder;\\n/**Requires text item to be a number equal to value specified.\\n@param number the value which the item must be equal to.\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireNumberEqualTo(number:number):FormApp.TextValidationBuilder;\\n/**Requires text item to be a number greater than the value specified.\\n@param number the value which the item must be greater than.\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireNumberGreaterThan(number:number):FormApp.TextValidationBuilder;\\n/**Requires text item to be a number greater than or equal to the value specified.\\n@param number the value which the item must be greater than or equal to.\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireNumberGreaterThanOrEqualTo(number:number):FormApp.TextValidationBuilder;\\n/**Requires text item to be a number less than the value specified.\\n@param number the value which the item must be greater than.\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireNumberLessThan(number:number):FormApp.TextValidationBuilder;\\n/**Requires text item to be a number less than or equal to the value specified.\\n@param number the value which the item must be less than or equal to.\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireNumberLessThanOrEqualTo(number:number):FormApp.TextValidationBuilder;\\n/**Requires text item to be a number not between start and end, inclusive.\\n@param start the lower bounds of the inclusive range\\n@param end the upper bounds of the inclusive range\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireNumberNotBetween(start:number,end:number):FormApp.TextValidationBuilder;\\n/**Requires text item to be a number not equal to the value specified.\\n@param number the value which the item must not be equal to.\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireNumberNotEqualTo(number:number):FormApp.TextValidationBuilder;\\n/**Requires response to contain pattern.\\n@param pattern text must contain pattern\\n@return this for chaining*/requireTextContainsPattern(pattern:string):FormApp.TextValidationBuilder;\\n/**Requires response to not contain pattern.\\n@param pattern text must not contain pattern\\n@return this for chaining*/requireTextDoesNotContainPattern(pattern:string):FormApp.TextValidationBuilder;\\n/**Requires response to not match pattern.\\n@param pattern text must not match pattern\\n@return this for chaining*/requireTextDoesNotMatchPattern(pattern:string):FormApp.TextValidationBuilder;\\n/**Requires text item to be an email address.\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireTextIsEmail():FormApp.TextValidationBuilder;\\n/**Requires text item to be a URL.\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireTextIsUrl():FormApp.TextValidationBuilder;\\n/**Requires response length to be greater than or equal to value.\\n@param number paragraph text length must be greater than this value\\n@return this for chaining*/requireTextLengthGreaterThanOrEqualTo(number:Integer):FormApp.TextValidationBuilder;\\n/**Requires response length to be less than value.\\n@param number paragraph text length must be less than or equal to this value\\n@return this for chaining*/requireTextLengthLessThanOrEqualTo(number:Integer):FormApp.TextValidationBuilder;\\n/**Requires response to match pattern.\\n@param pattern text must match pattern\\n@return this for chaining*/requireTextMatchesPattern(pattern:string):FormApp.TextValidationBuilder;\\n/**Requires text item to be a whole number.\\n@return this [`TextValidation`](https://developers.google.com/apps-script/reference/forms/text-validation.html), for chaining*/requireWholeNumber():FormApp.TextValidationBuilder;}interface TextValidation{}interface TextItem{\\n/**Removes any data validation for this text item.\\n@return this [`TextItem`](https://developers.google.com/apps-script/reference/forms/text-item.html), for chaining*/clearValidation():FormApp.TextItem;\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this text item.\\n@param response an answer to the question posed by the item\\n@return the item response*/createResponse(response:string):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`TextItem`](https://developers.google.com/apps-script/reference/forms/text-item.html), for chaining*/duplicate():FormApp.TextItem;\\n/**Returns the feedback that is shown to respondents when they respond to a gradeable question.\\n@return the feedback, if any.*/getGeneralFeedback():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the feedback to be shown to respondents when they respond to a gradeable question that\\ndoesn't have a correct or incorrect answer (ie questions that require manual grading).\\n@param feedback the new feedback\\n@return this [`TextItem`](https://developers.google.com/apps-script/reference/forms/text-item.html), for chaining*/setGeneralFeedback(feedback:FormApp.QuizFeedback):FormApp.TextItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`TextItem`](https://developers.google.com/apps-script/reference/forms/text-item.html), for chaining*/setHelpText(text:string):FormApp.TextItem;\\n/**Sets the number of points a gradeable item is worth. The default for new items is 0.\\n@param points the number of a points a question item is worth\\n@return this [`TextItem`](https://developers.google.com/apps-script/reference/forms/text-item.html), for chaining*/setPoints(points:Integer):FormApp.TextItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.TextItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`TextItem`](https://developers.google.com/apps-script/reference/forms/text-item.html), for chaining*/setTitle(title:string):FormApp.TextItem;\\n/**Sets the data validation for this text item. Passing in null or a validation without any\\nrequire functions called will remove any prior validation.\\n@param validation a TextValidation to apply to this item.\\n@return this [`TextItem`](https://developers.google.com/apps-script/reference/forms/text-item.html), for chaining*/setValidation(validation:FormApp.TextValidation):FormApp.TextItem;}interface SectionHeaderItem{\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html), for chaining*/duplicate():FormApp.SectionHeaderItem;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html), for chaining*/setHelpText(text:string):FormApp.SectionHeaderItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html), for chaining*/setTitle(title:string):FormApp.SectionHeaderItem;}interface ScaleItem{\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this scale item. Throws an exception if the `response` argument is outside the bounds set for the item.\\n@param response a value answer for this scale item\\n@return the item response*/createResponse(response:Integer):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`ScaleItem`](https://developers.google.com/apps-script/reference/forms/scale-item.html), for chaining*/duplicate():FormApp.ScaleItem;\\n/**Returns the feedback that is shown to respondents when they respond to a gradeable question.\\n@return the feedback, if any.*/getGeneralFeedback():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Gets the label for the scale's lower bound, if any.\\n@return the label for the scale's lower bound*/getLeftLabel():string;\\n/**Gets the scale's lower bound.\\n@return the scale's lower bound*/getLowerBound():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the label for the scale's upper bound, if any.\\n@return the label for the scale's upper bound*/getRightLabel():string;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Gets the scale's upper bound.\\n@return the scale's upper bound*/getUpperBound():Integer;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the scale's lower and upper bounds. The lower bound must be `0` or `1`. The\\nupper bound must be between `3` and `10`, inclusive. A new scale defaults to a\\nlower bound of `1` and an upper bound of `5`.\\n\\nThrows a scripting exception if the given values are outside the permitted limits. Decimals\\nare truncated to the preceding integer.\\n@param lower the new lower bound\\n@param upper the new upper bound\\n@return this [`ScaleItem`](https://developers.google.com/apps-script/reference/forms/scale-item.html), for chaining*/setBounds(lower:Integer,upper:Integer):FormApp.ScaleItem;\\n/**Sets the feedback to be shown to respondents when they respond to a gradeable question that\\ndoesn't have a correct or incorrect answer (ie questions that require manual grading).\\n@param feedback the new feedback\\n@return this [`ScaleItem`](https://developers.google.com/apps-script/reference/forms/scale-item.html), for chaining*/setGeneralFeedback(feedback:FormApp.QuizFeedback):FormApp.ScaleItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`ScaleItem`](https://developers.google.com/apps-script/reference/forms/scale-item.html), for chaining*/setHelpText(text:string):FormApp.ScaleItem;\\n/**Sets labels for the scale's lower and upper bounds.\\n@param lower the new label for the lower bound\\n@param upper the new label for the upper bound\\n@return this [`ScaleItem`](https://developers.google.com/apps-script/reference/forms/scale-item.html), for chaining*/setLabels(lower:string,upper:string):FormApp.ScaleItem;\\n/**Sets the number of points a gradeable item is worth. The default for new items is 0.\\n@param points the number of a points a question item is worth\\n@return this [`ScaleItem`](https://developers.google.com/apps-script/reference/forms/scale-item.html), for chaining*/setPoints(points:Integer):FormApp.ScaleItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.ScaleItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`ScaleItem`](https://developers.google.com/apps-script/reference/forms/scale-item.html), for chaining*/setTitle(title:string):FormApp.ScaleItem;}interface RatingItem{\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`RatingItem`](https://developers.google.com/apps-script/reference/forms/rating-item.html), for chaining*/duplicate():FormApp.RatingItem;\\n/**Returns the feedback that is shown to respondents when they respond to a gradeable question.\\n@return the feedback, if any.*/getGeneralFeedback():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;}interface QuizFeedbackBuilder{\\n/**Adds a link to the feedback's supplemental material.\\n@param url the link to display under the display text\\n@return this [`QuizFeedbackBuilder`](https://developers.google.com/apps-script/reference/forms/quiz-feedback-builder.html), for chaining*/addLink(url:string):FormApp.QuizFeedbackBuilder;\\n/**Adds a link to the feedback's supplemental material.\\n@param url the link to display under the display text\\n@param displayText the text to display for the link\\n@return this [`QuizFeedbackBuilder`](https://developers.google.com/apps-script/reference/forms/quiz-feedback-builder.html), for chaining*/addLink(url:string,displayText:string):FormApp.QuizFeedbackBuilder;\\n/**Builds a Feedback of the corresponding type for this builder.\\n@return [`QuizFeedback`](https://developers.google.com/apps-script/reference/forms/quiz-feedback.html)*/build():FormApp.QuizFeedback;\\n/**Returns a copy of this builder.\\n@return [`QuizFeedbackBuilder`](https://developers.google.com/apps-script/reference/forms/quiz-feedback-builder.html)*/copy():FormApp.QuizFeedbackBuilder;\\n/**Sets the feedback text.\\n@param text the new text\\n@return this [`QuizFeedbackBuilder`](https://developers.google.com/apps-script/reference/forms/quiz-feedback-builder.html), for chaining*/setText(text:string):FormApp.QuizFeedbackBuilder;}interface QuizFeedback{\\n/**Gets a list of the URLs associated with the Feedback. These are displayed to the user as a list\\nof helpful links.\\n@return a list of the URLs associated with the Feedback*/getLinkUrls():string[];\\n/**Gets the Feedback's display text. This text is shown to the user after they've submitted a\\nresponse.\\n@return the Feedback's text*/getText():string;}interface ParagraphTextValidationBuilder{\\n/**Requires response to contain pattern.\\n@param pattern text must contain pattern\\n@return this for chaining*/requireTextContainsPattern(pattern:string):FormApp.ParagraphTextValidationBuilder;\\n/**Requires response to not contain pattern.\\n@param pattern text must not contain pattern\\n@return this for chaining*/requireTextDoesNotContainPattern(pattern:string):FormApp.ParagraphTextValidationBuilder;\\n/**Requires response to not match pattern.\\n@param pattern text must not match pattern\\n@return this for chaining*/requireTextDoesNotMatchPattern(pattern:string):FormApp.ParagraphTextValidationBuilder;\\n/**Requires response length to be greater than or equal to value.\\n@param number paragraph text length must be greater than this value\\n@return this for chaining*/requireTextLengthGreaterThanOrEqualTo(number:Integer):FormApp.ParagraphTextValidationBuilder;\\n/**Requires response length to be less than value.\\n@param number paragraph text length must be less than or equal to this value\\n@return this for chaining*/requireTextLengthLessThanOrEqualTo(number:Integer):FormApp.ParagraphTextValidationBuilder;\\n/**Requires response to match pattern.\\n@param pattern text must match pattern\\n@return this for chaining*/requireTextMatchesPattern(pattern:string):FormApp.ParagraphTextValidationBuilder;}interface ParagraphTextValidation{}interface ParagraphTextItem{\\n/**Removes any data validation for this paragraph text item.\\n@return this [`ParagraphTextItem`](https://developers.google.com/apps-script/reference/forms/paragraph-text-item.html), for chaining*/clearValidation():FormApp.ParagraphTextItem;\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this paragraph text item.\\n@param response an answer to the question posed by the item\\n@return the item response*/createResponse(response:string):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`ParagraphTextItem`](https://developers.google.com/apps-script/reference/forms/paragraph-text-item.html), for chaining*/duplicate():FormApp.ParagraphTextItem;\\n/**Returns the feedback that is shown to respondents when they respond to a gradeable question.\\n@return the feedback, if any.*/getGeneralFeedback():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the feedback to be shown to respondents when they respond to a gradeable question that\\ndoesn't have a correct or incorrect answer (ie questions that require manual grading).\\n@param feedback the new feedback\\n@return this [`ParagraphTextItem`](https://developers.google.com/apps-script/reference/forms/paragraph-text-item.html), for chaining*/setGeneralFeedback(feedback:FormApp.QuizFeedback):FormApp.ParagraphTextItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`ParagraphTextItem`](https://developers.google.com/apps-script/reference/forms/paragraph-text-item.html), for chaining*/setHelpText(text:string):FormApp.ParagraphTextItem;\\n/**Sets the number of points a gradeable item is worth. The default for new items is 0.\\n@param points the number of a points a question item is worth\\n@return this [`ParagraphTextItem`](https://developers.google.com/apps-script/reference/forms/paragraph-text-item.html), for chaining*/setPoints(points:Integer):FormApp.ParagraphTextItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.ParagraphTextItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`ParagraphTextItem`](https://developers.google.com/apps-script/reference/forms/paragraph-text-item.html), for chaining*/setTitle(title:string):FormApp.ParagraphTextItem;\\n/**Sets the data validation for this paragraph text item. Passing in null or a validation without\\nany require functions called will remove any prior validation.\\n@param validation a ParagraphTextValidation to apply to this item.\\n@return this [`ParagraphTextItem`](https://developers.google.com/apps-script/reference/forms/paragraph-text-item.html), for chaining*/setValidation(validation:FormApp.ParagraphTextValidation):FormApp.ParagraphTextItem;}interface PageNavigationType{}interface _PageNavigationType{\\n/**Continue to the next page of the form after completing the current page.*/CONTINUE:PageNavigationType;\\n/**Jump to a specified page of the form after completing the current page.*/GO_TO_PAGE:PageNavigationType;\\n/**Restart the form from the beginning, without clearing answers entered so far, after completing\\nthe current page.*/RESTART:PageNavigationType;\\n/**Submit the form response after completing the current page.*/SUBMIT:PageNavigationType;}interface PageBreakItem{\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`PageBreakItem`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), for chaining*/duplicate():FormApp.PageBreakItem;\\n/**Gets the [`PageBreakItem`](https://developers.google.com/apps-script/reference/forms/page-break-item.html) that the form will jump to after completing the page before this\\npage break (that is, upon reaching this page break by normal linear progression through the\\nform).\\n@return the page break to jump to after completing the page before this page break, or `null` if none is set*/getGoToPage():FormApp.PageBreakItem;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Gets the type of page navigation that occurs after completing the page before this page break\\n(that is, upon reaching this page break by normal linear progression through the form).\\n@return the navigation action to take after completing the page before this page break*/getPageNavigationType():FormApp.PageNavigationType;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Sets the page to jump to after completing the page before this page break (that is, upon\\nreaching this page break by normal linear progression through the form). If the previous page\\ncontained a [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html) or [`ListItem`](https://developers.google.com/apps-script/reference/forms/list-item.html) with a navigation option, that\\nnavigation overrules this navigation.\\n@param goToPageItem the page break to jump to after completing the page before this page break\\n@return this [`PageBreakItem`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), for chaining*/setGoToPage(goToPageItem:FormApp.PageBreakItem):FormApp.PageBreakItem;\\n/**Sets the type of page navigation that occurs after completing the page before this page break\\n(that is, upon reaching this page break by normal linear progression through the form). If the\\npage contained a [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html) or [`ListItem`](https://developers.google.com/apps-script/reference/forms/list-item.html) with a navigation option, that\\nnavigation overrules this navigation.\\n@param navigationType the navigation action to take after completing the page before this page\\n    break\\n@return this [`PageBreakItem`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), for chaining*/setGoToPage(navigationType:FormApp.PageNavigationType):FormApp.PageBreakItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`PageBreakItem`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), for chaining*/setHelpText(text:string):FormApp.PageBreakItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`PageBreakItem`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), for chaining*/setTitle(title:string):FormApp.PageBreakItem;}interface MultipleChoiceItem{\\n/**Creates a new choice.\\n@param value the choice's value, which respondents see as a label when viewing the form\\n@return the new choice*/createChoice(value:string):FormApp.Choice;\\n/**Creates a new choice.\\n@param value the choice's value, which respondents see as a label when viewing the form\\n@param isCorrect whether the choice is a correct answer\\n@return the new choice*/createChoice(value:string,isCorrect:boolean):FormApp.Choice;\\n/**Creates a new choice with a page-navigation option that jumps to a given page-break item. This\\nis equivalent to [`createChoice(value, navigationType)`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html#createChoice(String,PageNavigationType)) with `navigationType` set to `FormApp.PageNavigationType.GO_TO_PAGE`. Choices that use page\\nnavigation cannot be combined in the same item with choices that do not use page navigation.\\n\\nThe page navigation occurs after the respondent completes a page that contains the option,\\nand only if the respondent chose that option. If the respondent chose multiple options with\\npage-navigation instructions on the same page, only the last navigation option has any effect.\\nPage navigation also has no effect on the last page of a form.\\n@param value the choice's value, which respondents see as a label when viewing the form\\n@param navigationItem the item to navigate to\\n@return the new choice*/createChoice(value:string,navigationItem:FormApp.PageBreakItem):FormApp.Choice;\\n/**Creates a new choice with a page-navigation option. Choices that use page navigation cannot be\\ncombined in the same item with choices that do not use page navigation.\\n\\nThe page navigation occurs after the respondent completes a page that contains the option,\\nand only if the respondent chose that option. If the respondent chose multiple options with\\npage-navigation instructions on the same page, only the last navigation option has any effect.\\nPage navigation also has no effect on the last page of a form.\\n@param value the choice's value, which respondents see as a label when viewing the form\\n@param navigationType the choice's navigation type\\n@return the new choice*/createChoice(value:string,navigationType:FormApp.PageNavigationType):FormApp.Choice;\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this multiple-choice item. Throws an exception if the\\n`response` argument does not match a valid choice for this item, unless [`showOtherOption(enabled)`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html#showOtherOption(Boolean)) is set to `true`.\\n@param response a valid answer for this multiple-choice item\\n@return the item response*/createResponse(response:string):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html), for chaining*/duplicate():FormApp.MultipleChoiceItem;\\n/**Gets all choices for an item.\\n@return an array of choices*/getChoices():FormApp.Choice[];\\n/**Returns the feedback that is shown to respondents when they respond correctly to a question.\\n@return the feedback, if any.*/getFeedbackForCorrect():FormApp.QuizFeedback;\\n/**Returns the feedback that is shown to respondents when they respond incorrectly to a question.\\n@return the feedback, if any.*/getFeedbackForIncorrect():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the item has an \\\"other\\\" option.\\n@return `true` if the item has an \\\"other\\\" option; `false` if not*/hasOtherOption():boolean;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the choices for an item from an array of strings. Throws an exception if the given array\\nis empty.\\n\\n```\\n// Open a form by ID and add a new list item.\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar item \\u003d form.addListItem();\\nitem.setTitle('Do you prefer cats or dogs?');\\nitem.setChoiceValues(['Dogs', 'Cats']);\\n```\\n@param values the array of choice values, which respondents see as labels when viewing the form\\n@return this [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html), for chaining*/setChoiceValues(values:string[]):FormApp.MultipleChoiceItem;\\n/**Sets an array of choices for an item. Throws an exception if the given array is empty or\\ncontains a `null` element.\\n\\n```\\n// Open a form by ID and add a new list item.\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar item \\u003d form.addListItem();\\nitem.setTitle('Do you prefer cats or dogs?')\\nitem.setChoices([\\n    item.createChoice('Cats'),\\n    item.createChoice('Dogs')\\n]);\\n```\\n@param choices an array of choices\\n@return this [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html), for chaining*/setChoices(choices:FormApp.Choice[]):FormApp.MultipleChoiceItem;\\n/**Sets the feedback to be shown to respondents when they respond correctly to a question.\\n\\n```\\n// Open a form by ID and add a new list item.\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar item \\u003d form.addListItem();\\nitem.setTitle('Do you prefer cats or dogs?');\\n// Set \\\"Dogs\\\" as the correct answer to this question.\\nitem.setChoices([\\n  item.createChoice('Dogs', true),\\n  item.createChoice('Cats', false)]);\\n// Add feedback which will be shown for correct responses; ie \\\"Dogs\\\".\\nitem.setFeedbackForCorrect(\\n    FormApp.createFeedback().setDisplayText(\\\"Dogs rule, cats drool.\\\").build());\\n```\\n@param feedback the new feedback. A null value will clear the feedback.\\n@return this [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html), for chaining*/setFeedbackForCorrect(feedback:FormApp.QuizFeedback):FormApp.MultipleChoiceItem;\\n/**Sets the feedback to be shown to respondents when they respond incorrectly to a question.\\n@param feedback the new feedback\\n@return this [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html), for chaining*/setFeedbackForIncorrect(feedback:FormApp.QuizFeedback):FormApp.MultipleChoiceItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html), for chaining*/setHelpText(text:string):FormApp.MultipleChoiceItem;\\n/**Sets the number of points a gradeable item is worth. The default for new items is 0.\\n@param points the number of a points a question item is worth\\n@return this [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html), for chaining*/setPoints(points:Integer):FormApp.MultipleChoiceItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.MultipleChoiceItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html), for chaining*/setTitle(title:string):FormApp.MultipleChoiceItem;\\n/**Sets whether the item has an \\\"other\\\" option. The default for a new [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html) or\\n[`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html) is `false`.\\n@param enabled `true` if the item has an \\\"other\\\" option; `false` if not\\n@return this [`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html), for chaining*/showOtherOption(enabled:boolean):FormApp.MultipleChoiceItem;}interface ListItem{\\n/**Creates a new choice.\\n@param value the choice's value, which respondents see as a label when viewing the form\\n@return the new choice*/createChoice(value:string):FormApp.Choice;\\n/**Creates a new choice.\\n@param value the choice's value, which respondents see as a label when viewing the form\\n@param isCorrect whether the choice is a correct answer\\n@return the new choice*/createChoice(value:string,isCorrect:boolean):FormApp.Choice;\\n/**Creates a new choice with a page-navigation option that jumps to a given page-break item. This\\nis equivalent to [`createChoice(value, navigationType)`](https://developers.google.com/apps-script/reference/forms/list-item.html#createChoice(String,PageNavigationType)) with `navigationType` set to `FormApp.PageNavigationType.GO_TO_PAGE`. Choices that use page\\nnavigation cannot be combined in the same item with choices that do not use page navigation.\\n\\nThe page navigation occurs after the respondent completes a page that contains the option,\\nand only if the respondent chose that option. If the respondent chose multiple options with\\npage-navigation instructions on the same page, only the last navigation option has any effect.\\nPage navigation also has no effect on the last page of a form.\\n@param value the choice's value, which respondents see as a label when viewing the form\\n@param navigationItem the item to navigate to\\n@return the new choice*/createChoice(value:string,navigationItem:FormApp.PageBreakItem):FormApp.Choice;\\n/**Creates a new choice with a page-navigation option. Choices that use page navigation cannot be\\ncombined in the same item with choices that do not use page navigation.\\n\\nThe page navigation occurs after the respondent completes a page that contains the option,\\nand only if the respondent chose that option. If the respondent chose multiple options with\\npage-navigation instructions on the same page, only the last navigation option has any effect.\\nPage navigation also has no effect on the last page of a form.\\n@param value the choice's value, which respondents see as a label when viewing the form\\n@param navigationType the choice's navigation type\\n@return the new choice*/createChoice(value:string,navigationType:FormApp.PageNavigationType):FormApp.Choice;\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this list item. Throws an exception if the `response` argument does not match a valid choice for this item.\\n@param response a valid answer for this list item\\n@return the item response*/createResponse(response:string):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`ListItem`](https://developers.google.com/apps-script/reference/forms/list-item.html), for chaining*/duplicate():FormApp.ListItem;\\n/**Gets all choices for an item.\\n@return an array of choices*/getChoices():FormApp.Choice[];\\n/**Returns the feedback that is shown to respondents when they respond correctly to a question.\\n@return the feedback, if any.*/getFeedbackForCorrect():FormApp.QuizFeedback;\\n/**Returns the feedback that is shown to respondents when they respond incorrectly to a question.\\n@return the feedback, if any.*/getFeedbackForIncorrect():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the choices for an item from an array of strings. Throws an exception if the given array\\nis empty.\\n\\n```\\n// Open a form by ID and add a new list item.\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar item \\u003d form.addListItem();\\nitem.setTitle('Do you prefer cats or dogs?');\\nitem.setChoiceValues(['Dogs', 'Cats']);\\n```\\n@param values the array of choice values, which respondents see as labels when viewing the form\\n@return this [`ListItem`](https://developers.google.com/apps-script/reference/forms/list-item.html), for chaining*/setChoiceValues(values:string[]):FormApp.ListItem;\\n/**Sets an array of choices for an item. Throws an exception if the given array is empty or\\ncontains a `null` element.\\n\\n```\\n// Open a form by ID and add a new list item.\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar item \\u003d form.addListItem();\\nitem.setTitle('Do you prefer cats or dogs?')\\nitem.setChoices([\\n    item.createChoice('Cats'),\\n    item.createChoice('Dogs')\\n]);\\n```\\n@param choices an array of choices\\n@return this [`ListItem`](https://developers.google.com/apps-script/reference/forms/list-item.html), for chaining*/setChoices(choices:FormApp.Choice[]):FormApp.ListItem;\\n/**Sets the feedback to be shown to respondents when they respond correctly to a question.\\n\\n```\\n// Open a form by ID and add a new list item.\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar item \\u003d form.addListItem();\\nitem.setTitle('Do you prefer cats or dogs?');\\n// Set \\\"Dogs\\\" as the correct answer to this question.\\nitem.setChoices([\\n  item.createChoice('Dogs', true),\\n  item.createChoice('Cats', false)]);\\n// Add feedback which will be shown for correct responses; ie \\\"Dogs\\\".\\nitem.setFeedbackForCorrect(\\n    FormApp.createFeedback().setDisplayText(\\\"Dogs rule, cats drool.\\\").build());\\n```\\n@param feedback the new feedback. A null value will clear the feedback.\\n@return this [`ListItem`](https://developers.google.com/apps-script/reference/forms/list-item.html), for chaining*/setFeedbackForCorrect(feedback:FormApp.QuizFeedback):FormApp.ListItem;\\n/**Sets the feedback to be shown to respondents when they respond incorrectly to a question.\\n@param feedback the new feedback\\n@return this [`ListItem`](https://developers.google.com/apps-script/reference/forms/list-item.html), for chaining*/setFeedbackForIncorrect(feedback:FormApp.QuizFeedback):FormApp.ListItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`ListItem`](https://developers.google.com/apps-script/reference/forms/list-item.html), for chaining*/setHelpText(text:string):FormApp.ListItem;\\n/**Sets the number of points a gradeable item is worth. The default for new items is 0.\\n@param points the number of a points a question item is worth\\n@return this [`ListItem`](https://developers.google.com/apps-script/reference/forms/list-item.html), for chaining*/setPoints(points:Integer):FormApp.ListItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.ListItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`ListItem`](https://developers.google.com/apps-script/reference/forms/list-item.html), for chaining*/setTitle(title:string):FormApp.ListItem;}interface ItemType{}interface _ItemType{\\n/**A question item that allows the respondent to select one or more checkboxes, as well as an\\noptional \\\"other\\\" field.*/CHECKBOX:ItemType;\\n/**A question item, presented as a grid of columns and rows, that allows the respondent to select\\nmultiple choices per row from a sequence of checkboxes.*/CHECKBOX_GRID:ItemType;\\n/**A question item that allows the respondent to indicate a date.*/DATE:ItemType;\\n/**A question item that allows the respondent to indicate a date and time.*/DATETIME:ItemType;\\n/**A question item that allows the respondent to indicate a length of time.*/DURATION:ItemType;\\n/**A question item that lets the respondent upload a file.*/FILE_UPLOAD:ItemType;\\n/**A question item, presented as a grid of columns and rows, that allows the respondent to select\\none choice per row from a sequence of radio buttons.*/GRID:ItemType;\\n/**A layout item that displays an image.*/IMAGE:ItemType;\\n/**A question item that allows the respondent to select one choice from a drop-down list.*/LIST:ItemType;\\n/**A question item that allows the respondent to select one choice from a list of radio buttons or\\nan optional \\\"other\\\" field.*/MULTIPLE_CHOICE:ItemType;\\n/**A layout item that marks the start of a page.*/PAGE_BREAK:ItemType;\\n/**A question item that allows the respondent to enter a block of text.*/PARAGRAPH_TEXT:ItemType;\\n/**A question item that allows the respondent to give a rating.*/RATING:ItemType;\\n/**A question item that allows the respondent to choose one option from a numbered sequence of\\nradio buttons.*/SCALE:ItemType;\\n/**A layout item that visually indicates the start of a section.*/SECTION_HEADER:ItemType;\\n/**A question item that allows the respondent to enter a single line of text.*/TEXT:ItemType;\\n/**A question item that allows the respondent to indicate a time of day.*/TIME:ItemType;\\n/**A layout item that displays a YouTube video.*/VIDEO:ItemType;}interface ItemResponse{\\n/**Gets the feedback that was given for the respondent's submitted answer.\\n@return a `QuizFeedback` for the question item*/getFeedback():Object;\\n/**Gets the question item that this response answers.\\n@return the question item that this response answers*/getItem():FormApp.Item;\\n/**Gets the answer that the respondent submitted. For most types of question items, this returns a\\n`String`.\\n\\nFor [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html) questions, this returns a `String[]` array containing the\\nresponder's choices. The order of the strings in the array may vary.\\n\\nFor [`GridItem`](https://developers.google.com/apps-script/reference/forms/grid-item.html) questions, this returns a `String[]` array in which the answer at\\nindex `n` corresponds to the question at row `n + 1` in the grid. If a respondent\\ndid not answer a question in the grid, that answer is returned as `''`.\\n\\nFor [`CheckboxGridItem`](https://developers.google.com/apps-script/reference/forms/checkbox-grid-item.html) questions, this returns a `String[][]` array in which the\\nanswers at row index `n` corresponds to the question at row `n + 1` in the checkbox\\ngrid. If a respondent did not answer a question in the grid, that answer is returned as `''`.\\n@return a `String` or `String[]` or `String[][]` of answers to the question\\n    item*/getResponse():Object;\\n/**Gets the score for the respondent's submitted answer.\\n@return a `Double` representing the score for the question item*/getScore():Object;\\n/**Sets the feedback that should be displayed for the respondent's submitted answer.\\n\\nThis method does not actually save the feedback in Forms until [`Form.submitGrades(responses)`](https://developers.google.com/apps-script/reference/forms/form.html#submitGrades(FormResponse)) is called with the updated FormResponses. See `setScore()` for an example.\\n@return a `ItemResponse` for chaining*/setFeedback(feedback:Object):FormApp.ItemResponse;\\n/**Sets the score for the respondent's submitted answer. A null value will clear the existing\\nscore.\\n\\nThis method does not actually save the score in Forms until [`Form.submitGrades(responses)`](https://developers.google.com/apps-script/reference/forms/form.html#submitGrades(FormResponse)) is called with the updated FormResponses.\\n\\n```\\n// For a multiple choice question with options: \\\"Always true\\\", \\\"Sometimes true\\\", and \\\"Never\\\",\\n// award half credit for responses that answered \\\"Sometimes true\\\".\\nvar formResponses \\u003d FormApp.getActiveForm().getResponses();\\n// Go through each form response\\nfor (var i \\u003d 0; i \\u003c formResponses.length; i++) {\\n  var response \\u003d formResponses[i];\\n  var items \\u003d FormApp.getActiveForm().getItems();\\n  // Assume it's the first item\\n  var item \\u003d items[0];\\n  var itemResponse \\u003d response.getGradableResponseForItem(item);\\n  // Give half credit for \\\"Sometimes true\\\".\\n  if (itemResponse !\\u003d null \\u0026\\u0026 itemResponse.getResponse() \\u003d\\u003d 'Sometimes true') {\\n    var points \\u003d item.asMultipleChoiceItem().getPoints();\\n    itemResponse.setScore(points * .5);\\n    // This saves the grade, but does not submit to Forms yet.\\n    response.withItemGrade(itemResponse);\\n  }\\n}\\n// Grades are actually submitted to Forms here.\\nFormApp.getActiveForm().submitGrades(formResponses);\\n```\\n@return a `ItemResponse` for chaining*/setScore(score:Object):FormApp.ItemResponse;}interface Item{\\n/**Returns the item as a checkbox grid item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `CHECKBOX_GRID`.\\n@return the checkbox grid item*/asCheckboxGridItem():FormApp.CheckboxGridItem;\\n/**Returns the item as a checkbox item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `CHECKBOX`.\\n@return the checkbox item*/asCheckboxItem():FormApp.CheckboxItem;\\n/**Returns the item as a date item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `DATE`.\\n@return the date item*/asDateItem():FormApp.DateItem;\\n/**Returns the item as a date-time item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `DATETIME`.\\n@return the date-time item*/asDateTimeItem():FormApp.DateTimeItem;\\n/**Returns the item as a duration item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `DURATION`.\\n@return the duration item*/asDurationItem():FormApp.DurationItem;\\n/**Returns the item as a grid item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `GRID`.\\n@return the grid item*/asGridItem():FormApp.GridItem;\\n/**Returns the item as an image item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `IMAGE`.\\n@return the image item*/asImageItem():FormApp.ImageItem;\\n/**Returns the item as a list item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `LIST`.\\n@return the list item*/asListItem():FormApp.ListItem;\\n/**Returns the item as a multiple-choice item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `MULTIPLE_CHOICE`.\\n@return the multiple-choice item*/asMultipleChoiceItem():FormApp.MultipleChoiceItem;\\n/**Returns the item as a page-break item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `PAGE_BREAK`.\\n@return the page-break item*/asPageBreakItem():FormApp.PageBreakItem;\\n/**Returns the item as a paragraph-text item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `PARAGRAPH_TEXT`.\\n@return the paragraph-text item*/asParagraphTextItem():FormApp.ParagraphTextItem;\\n/**Returns the item as a scale item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `SCALE`.\\n@return the scale item*/asScaleItem():FormApp.ScaleItem;\\n/**Returns the item as a section-header item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `SECTION_HEADER`.\\n@return the section-header item*/asSectionHeaderItem():FormApp.SectionHeaderItem;\\n/**Returns the item as a text item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `TEXT`.\\n@return the text item*/asTextItem():FormApp.TextItem;\\n/**Returns the item as a time item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `TIME`.\\n@return the time item*/asTimeItem():FormApp.TimeItem;\\n/**Returns the item as a video item. Throws a scripting exception if the [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html) was not already `VIDEO`.\\n@return the video item*/asVideoItem():FormApp.VideoItem;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`Item`](https://developers.google.com/apps-script/reference/forms/item.html), for chaining*/duplicate():FormApp.Item;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`Item`](https://developers.google.com/apps-script/reference/forms/item.html), for chaining*/setHelpText(text:string):FormApp.Item;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`Item`](https://developers.google.com/apps-script/reference/forms/item.html), for chaining*/setTitle(title:string):FormApp.Item;}interface ImageItem{\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`ImageItem`](https://developers.google.com/apps-script/reference/forms/image-item.html), for chaining*/duplicate():FormApp.ImageItem;\\n/**Gets the image's horizontal alignment.\\n@return the horizontal alignment*/getAlignment():FormApp.Alignment;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the image that is currently assigned to the item.\\n@return the image data*/getImage():Blob;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Gets the image's width in pixels.\\n@return the width in pixels*/getWidth():Integer;\\n/**Sets the image's horizontal alignment.\\n@param alignment the horizontal alignment\\n@return this [`ImageItem`](https://developers.google.com/apps-script/reference/forms/image-item.html), for chaining*/setAlignment(alignment:FormApp.Alignment):FormApp.ImageItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`ImageItem`](https://developers.google.com/apps-script/reference/forms/image-item.html), for chaining*/setHelpText(text:string):FormApp.ImageItem;\\n/**Sets the image itself.\\n@param image the image data\\n@return this [`ImageItem`](https://developers.google.com/apps-script/reference/forms/image-item.html), for chaining*/setImage(image:BlobSource):FormApp.ImageItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`ImageItem`](https://developers.google.com/apps-script/reference/forms/image-item.html), for chaining*/setTitle(title:string):FormApp.ImageItem;\\n/**Sets the image's width in pixels. Only the image's width can be set. Height is set\\nautomatically to maintain the image's proportions.\\n@param width the width in pixels\\n@return this [`ImageItem`](https://developers.google.com/apps-script/reference/forms/image-item.html), for chaining*/setWidth(width:Integer):FormApp.ImageItem;}interface GridValidationBuilder{\\n/**Requires limit of one response per column for a grid item.\\n@return this validation builder, for chaining*/requireLimitOneResponsePerColumn():FormApp.GridValidationBuilder;}interface GridValidation{}interface GridItem{\\n/**Removes any data validation for this grid item.\\n@return this item, for chaining*/clearValidation():FormApp.GridItem;\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this grid item. The argument `responses` must be a\\n`String[]` array containing as many values as the number of rows in the grid. A `null` element for a non-required grid question indicates no response to that row. Throws an\\nexception if any of the values does not match a valid choice.\\n@param responses an array of valid answers for this grid item\\n@return the item response*/createResponse(responses:string[]):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`GridItem`](https://developers.google.com/apps-script/reference/forms/grid-item.html), for chaining*/duplicate():FormApp.GridItem;\\n/**Gets the values for every column in the grid.\\n@return an array of column values, which respondents see as labels when viewing the form*/getColumns():string[];\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Gets the values for every row in the grid.\\n@return an array of row values, which respondents see as labels when viewing the form*/getRows():string[];\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the columns of the grid based on an array of values. Throws an exception if the given\\narray is empty.\\n@param columns an array of column values, which respondents see as labels when viewing the form\\n@return this item, for chaining*/setColumns(columns:string[]):FormApp.GridItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`GridItem`](https://developers.google.com/apps-script/reference/forms/grid-item.html), for chaining*/setHelpText(text:string):FormApp.GridItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.GridItem;\\n/**Sets the rows of the grid based on an array of values. Throws an exception if the given array\\nis empty.\\n@param rows an array of row values, which respondents see as labels when viewing the form\\n@return this item, for chaining*/setRows(rows:string[]):FormApp.GridItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`GridItem`](https://developers.google.com/apps-script/reference/forms/grid-item.html), for chaining*/setTitle(title:string):FormApp.GridItem;\\n/**Sets the data validation for this grid item. Passing in null or a validation without any\\nrequire functions called will remove any prior validation.\\n@param validation a GridValidation to apply to this item.\\n@return this [`GridItem`](https://developers.google.com/apps-script/reference/forms/grid-item.html), for chaining*/setValidation(validation:FormApp.GridValidation):FormApp.GridItem;}interface FormResponse{\\n/**Generates a URL that can be used to edit a response that has already been submitted. If the\\n[`Form.setAllowResponseEdits(enabled)`](https://developers.google.com/apps-script/reference/forms/form.html#setAllowResponseEdits(Boolean)) setting is disabled, the link leads to a page that\\nexplains that editing form responses is disabled. Anyone who visits the link can edit the\\nresponse, although they need an account with access to the form if the [`Form.setRequireLogin(requireLogin)`](https://developers.google.com/apps-script/reference/forms/form.html#setRequireLogin(Boolean)) setting is enabled. If the [`Form.setCollectEmail(collect)`](https://developers.google.com/apps-script/reference/forms/form.html#setCollectEmail(Boolean))\\nsetting is enabled, the form records the email address of the user who edited the response\\ninstead of the email address of the original respondent.\\n\\nFor a form response that the script has created but not yet submitted, this method returns\\n`null`.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Gets the first form response.\\nconst formResponse \\u003d form.getResponses()[0];\\n\\n// Gets the edit URL for the first form response and logs it to the console.\\nconst editUrl \\u003d formResponse.getEditResponseUrl();\\nconsole.log(editUrl);\\n```\\n@return The URL to change a submitted response.*/getEditResponseUrl():string;\\n/**Gets all item responses contained in a form response, in the same order that the items appear\\nin the form. This method works similarly to [`getItemResponses()`](https://developers.google.com/apps-script/reference/forms/form-response.html#getItemResponses()), but to allow for grading\\na missing answer, it still returns an [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) if the corresponding [`Item`](https://developers.google.com/apps-script/reference/forms/item.html)\\ncan be graded (ie has a point value), even if there isn't an actual response. However, if the\\n[`Item`](https://developers.google.com/apps-script/reference/forms/item.html) isn't gradable, this method excludes that item from its returned array.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Gets an array of the form's responses.\\nconst formResponses \\u003d form.getResponses();\\n\\n// Gets the item responses contained in each form response.\\nfor (const formResponse of formResponses){\\n  const gradableItemsResponses \\u003d formResponse.getGradableItemResponses();\\n\\n  // Logs the title and score for each item response to the console.\\n  for (const gradableItemsResponse of gradableItemsResponses) {\\n    console.log(`${gradableItemsResponse.getItem().getTitle()}\\n       score ${gradableItemsResponse.getScore()}`);\\n  }\\n}\\n```\\n@return An array of responses to every question item within the form for which the respondent\\n    could receive a score.*/getGradableItemResponses():FormApp.ItemResponse[];\\n/**Gets the item response contained in a form response for a given item. This method works\\nsimilarly to [`getResponseForItem(item)`](https://developers.google.com/apps-script/reference/forms/form-response.html#getResponseForItem(Item)), but to allow for grading a missing answer, it still\\nreturns an [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) if the corresponding [`Item`](https://developers.google.com/apps-script/reference/forms/item.html) can be graded (ie has a point\\nvalue), even if there isn't an actual response. However, if the [`Item`](https://developers.google.com/apps-script/reference/forms/item.html) isn't gradable,\\nthis method returns `null`.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Gets an array of the form's responses.\\nconst formResponses \\u003d form.getResponses();\\n\\n// Gets the item responses contained in a form response.\\nfor (const formResponse of formResponses) {\\n  const formItemResponses \\u003d formResponse.getGradableItemResponses();\\n\\n  // Logs the title and score for responses to the first item of the form.\\n  const itemResponse \\u003d formResponse.getGradableResponseForItem(formItemResponses[0].getItem());\\n  console.log(`${itemResponse.getItem().getTitle()} score ${itemResponse.getScore()}`);\\n}\\n```\\n@return The response for a given item, or `null` if none exists and the item is ungraded.*/getGradableResponseForItem(item:FormApp.Item):FormApp.ItemResponse;\\n/**Gets the ID of the form response. This method returns `null` if the form response has not\\nbeen submitted.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Gets an array of the form's responses.\\nconst formResponses \\u003d form.getResponses();\\n\\n// Loops through the form responses and logs the ID for each form response to the console.\\nfor (const formResponse of formResponses) {\\n  console.log(`Response ID: ${formResponse.getId()}`);\\n}\\n```\\n@return The ID of the form response, or `null` if the form response has not been\\n    submitted.*/getId():string;\\n/**Gets all item responses contained in a form response, in the same order that the items appear\\nin the form. If the form response does not contain a response for a given [`TextItem`](https://developers.google.com/apps-script/reference/forms/text-item.html),\\n[`DateItem`](https://developers.google.com/apps-script/reference/forms/date-item.html), [`TimeItem`](https://developers.google.com/apps-script/reference/forms/time-item.html), or [`ParagraphTextItem`](https://developers.google.com/apps-script/reference/forms/paragraph-text-item.html), the [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html)\\nreturned for that item will have an empty string as the response. If the form response omits a\\nresponse for any other item type, this method excludes that item from its returned array.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Gets the responses to the form.\\nconst formResponses \\u003d form.getResponses();\\n\\n// Iterates over the responses.\\nfor (const formResponse of formResponses) {\\n\\n  // Gets the item responses from each form response.\\n  const itemResponses \\u003d formResponse.getItemResponses();\\n\\n  // Iterates over the item responses.\\n  for (const itemResponse of itemResponses) {\\n\\n    // Logs the items' questions and responses to the console.\\n    console.log(`Response to the question '${itemResponse.getItem().getTitle()}' was\\n      '${itemResponse.getResponse()}'`);\\n  }\\n}\\n```\\n@return An array of responses to every question item within the form for which the respondent\\n    provided an answer.*/getItemResponses():FormApp.ItemResponse[];\\n/**Gets the email address of the person who submitted a response, if the [`Form.setCollectEmail(collect)`](https://developers.google.com/apps-script/reference/forms/form.html#setCollectEmail(Boolean)) setting is enabled.\\n\\nFor a form response that the script has created but not yet submitted, this method returns\\n`null`.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Gets an array of the form's responses.\\nconst formResponses \\u003d form.getResponses();\\n\\n// Loops through the responses and logs each respondent's email to the console.\\n// To collect respondent emails, ensure that Form.setCollectEmail(collect) is set to true.\\nfor (const formResponse of formResponses) {\\n  console.log(`Respondent Email: ${formResponse.getRespondentEmail()}`);\\n}\\n```\\n@return The email address of the person who submitted this response, if available, or `null` if the script created this response but has not yet submitted it.*/getRespondentEmail():string;\\n/**Gets the item response contained in this form response for a given item.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Gets the first item on the form.\\nconst item \\u003d form.getItems()[0];\\n\\n// Gets an array of the form's responses.\\nconst formResponses \\u003d form.getResponses();\\n\\n// Loops through the responses and logs each response to the first item to the console.\\nfor (const formResponse of formResponses) {\\n  const itemResponse \\u003d formResponse.getResponseForItem(item);\\n  console.log(itemResponse.getResponse());\\n}\\n```\\n@return The response for a given item, or `null` if none exists.*/getResponseForItem(item:FormApp.Item):FormApp.ItemResponse;\\n/**Gets the timestamp for a form response submission.\\n\\nFor a form response that the script has created but not yet submitted, this method returns\\n`null`.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Gets an array of the form's responses.\\nconst formResponses \\u003d form.getResponses();\\n\\n// Loops through the responses and logs the timestamp of each response to the console.\\nfor (const formResponse of formResponses) {\\n  console.log(`Timestamp: ${formResponse.getTimestamp()}`);\\n}\\n```\\n@return The timestamp at which this response was submitted, or `null` if the script\\n    created this response but has not yet submitted it.*/getTimestamp():Date;\\n/**Submits the response. Throws a scripting exception if the response has already been submitted.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Creates an empty response for the form.\\nconst formResponse \\u003d form.createResponse();\\n\\n// Submits an empty response.\\nformResponse.submit();\\n```\\n@return A newly created response saved to the form's response store.*/submit():FormApp.FormResponse;\\n/**Generates a URL for the form in which the answers are pre-filled based on the answers in this\\nform response.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Gets the first form response.\\nconst formResponse \\u003d form.getResponses()[0];\\n\\n// Generates and logs the URL of a pre-filled form response based on the answers\\n// of the first form response.\\nconst prefilledUrl \\u003d formResponse.toPrefilledUrl();\\nconsole.log(prefilledUrl);\\n```\\n@return The URL for a form with pre-filled answers.*/toPrefilledUrl():string;\\n/**Adds the given item response's grades to a form response. This method applies only to form\\nresponses that have already been submitted, and only affects stored grades once they are\\nsubmitted. This method also only updates the item response's grades; it does not affect the\\nactual response (since the response has already been submitted). If this method is called\\nmultiple times for the same item, only the last grade is retained. If the ItemResponse contains\\nno grades, this method will remove grades for the item.\\n\\n```\\n// Programmatically award partial credit for a given response\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar formResponses \\u003d form.getResponses();\\nvar formItems \\u003d form.getItems();\\nfor (var i \\u003d 0; i \\u003c formResponses.length; i++) {\\n  var formResponse \\u003d formResponses[i];\\n  for (var j \\u003d 0; j \\u003c formItems.length; j++) {\\n    var item \\u003d formItems[j];\\n    var points \\u003d item.asMultipleChoiceItem().getPoints();\\n    var itemResponse \\u003d formResponse.getGradableResponseForItem(item);\\n    Logger.log('Award half credit for answers containing the word \\\"Kennedy\\\"');\\n    var answer \\u003d itemResponse.getResponse();\\n    if (answer !\\u003d null \\u0026\\u0026 answer.includes('Kennedy')) {\\n      itemResponse.setScore(points / 2);\\n      formResponse.withItemGrade(itemResponse);\\n    }\\n  }\\n}\\nform.submitGrades(formResponses);\\n```\\n@return this [`FormResponse`](https://developers.google.com/apps-script/reference/forms/form-response.html), for chaining*/withItemGrade(gradedResponse:FormApp.ItemResponse):FormApp.FormResponse;\\n/**Adds the given item response to a form response. This method applies only to form responses\\nthat the script has created but not yet submitted; it cannot affect stored responses. If this\\nmethod is called multiple times for the same item, only the last item response is retained.\\n\\n```\\n// Opens the Forms file by its ID.\\n// If you created your script from within a Google Forms file, you can\\n// use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the ID with your own.\\nconst form \\u003d FormApp.openById('abc123456');\\n\\n// Creates a response for the form.\\nconst formResponse \\u003d form.createResponse();\\n\\n// Appends a checkbox item to the form.\\nconst item \\u003d form.addCheckboxItem();\\n\\n// Sets the title of the item to 'Which items are ice cream flavors?'\\nitem.setTitle('Which items are ice cream flavors?');\\n\\n// Sets choices for the item.\\nitem.setChoices([\\nitem.createChoice('Vanilla'),\\nitem.createChoice('Strawberry'),\\nitem.createChoice('Brick')\\n]);\\n\\n// Creates a response for the item.\\nconst response \\u003d item.createResponse(['Vanilla', 'Strawberry']);\\n\\n// Adds the item response to the form response.\\nformResponse.withItemResponse(response);\\n\\n// Submits the form response.\\nformResponse.submit();\\n```\\n@return This [`FormResponse`](https://developers.google.com/apps-script/reference/forms/form-response.html), for chaining.*/withItemResponse(response:FormApp.ItemResponse):FormApp.FormResponse;}interface Form{\\n/**Appends a new question item, presented as a grid of columns and rows, that allows the\\nrespondent to select multiple choices per row from a sequence of checkboxes.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a checkbox grid item.\\nconst item \\u003d form.addCheckboxGridItem();\\n\\n// Sets the title 'Where did you celebrate New Year's?'\\nitem.setTitle('Where did you celebrate New Year's?');\\n\\n// Sets the grid's rows and columns.\\nitem.setRows(['New York', 'San Francisco', 'London'])\\n  .setColumns(['2014', '2015', '2016', '2017']);\\n```\\n@return The newly created item.*/addCheckboxGridItem():FormApp.CheckboxGridItem;\\n/**Appends a new question item that allows the respondent to select one or more checkboxes, as\\nwell as an optional \\\"other\\\" field.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a checkbox item.\\nconst item \\u003d form.addCheckboxItem();\\n\\n// Sets the title of the checkbox item to 'Do you prefer cats or dogs?'\\nitem.setTitle('Do you prefer cats or dogs?');\\n\\n// Sets the choices.\\nitem.setChoiceValues(['Cats', 'Dogs']);\\n```\\n@return The newly created item.*/addCheckboxItem():FormApp.CheckboxItem;\\n/**Appends a new question item that allows the respondent to indicate a date.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a date item.\\nconst item \\u003d form.addDateItem();\\n\\n// Sets the title to 'When were you born?'\\nitem.setTitle('When were you born?');\\n\\n// Sets the description for the date item.\\nitem.setHelpText('Some helper text.');\\n```\\n@return The newly created item.*/addDateItem():FormApp.DateItem;\\n/**Appends a new question item that allows the respondent to indicate a date and time.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a question with date and time inputs.\\nconst item \\u003d form.addDateTimeItem();\\n\\n// Sets the title to 'When were you born?'\\nitem.setTitle('When were you born?');\\n\\n// Sets the question as required.\\nitem.setRequired(true);\\n```\\n@return The newly created item.*/addDateTimeItem():FormApp.DateTimeItem;\\n/**Appends a new question item that allows the respondent to indicate a length of time.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a question with a duration input.\\nconst item \\u003d form.addDurationItem();\\n\\n// Sets the title to 'How long can you hold your breath?'\\nitem.setTitle('How long can you hold your breath?');\\n\\n// Sets the question as required.\\nitem.setRequired(true);\\n```\\n@return The newly created item.*/addDurationItem():FormApp.DurationItem;\\n/**Adds the given user to the list of editors for the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param emailAddress The email address of the user to add.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/addEditor(emailAddress:string):FormApp.Form;\\n/**Adds the given user to the list of editors for the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param user A representation of the user to add.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/addEditor(user:User):FormApp.Form;\\n/**Adds the given array of users to the list of editors for the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html). If any of the\\nusers were already on the list of viewers, this method promotes them out of the list of\\nviewers.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/addEditors(emailAddresses:string[]):FormApp.Form;\\n/**Appends a new question item, presented as a grid of columns and rows, that allows the\\nrespondent to select one choice per row from a sequence of radio buttons.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a multiple choice grid.\\nconst item \\u003d form.addGridItem();\\n\\n// Sets the title to 'Rate your interests.'\\nitem.setTitle('Rate your interests');\\n\\n// Sets the grid's rows and columns.\\nitem.setRows(['Cars', 'Computers', 'Celebrities'])\\n  .setColumns(['Boring', 'So-so', 'Interesting']);\\n```\\n@return The newly created item.*/addGridItem():FormApp.GridItem;\\n/**Appends a new layout item that displays an image.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds an image item.\\nconst item \\u003d form.addImageItem();\\n\\n// Gets the Google icon to use as the image.\\nconst img \\u003d UrlFetchApp.fetch('https://fonts.gstatic.com/s/i/productlogos/googleg/v6/web-24dp/logo_googleg_color_1x_web_24dp.png');\\n\\n// Sets the image, title, and description for the item.\\nitem.setTitle('Google icon').setHelpText('Google icon').setImage(img);\\n```\\n@return The newly created item.*/addImageItem():FormApp.ImageItem;\\n/**Appends a new question item that allows the respondent to select one choice from a dropdown\\nlist.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a dropdown list to the form.\\nconst item \\u003d form.addListItem();\\n\\n// Sets the title to 'Do you prefer cats or dogs?'\\nitem.setTitle('Do you prefer cats or dogs?');\\n\\n// Sets the description to 'This is description text...'\\nitem.setHelpText('This is description text...');\\n\\n// Creates and adds choices to the dropdown list.\\nitem.setChoices([\\n  item.createChoice('dog'),\\n  item.createChoice('cat')\\n]);\\n```\\n@return The newly created item.*/addListItem():FormApp.ListItem;\\n/**Adds a new question item that allows the respondent to select one choice from a list of radio\\nbuttons or an optional \\\"other\\\" field.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a multiple choice item to the form.\\nconst item \\u003d form.addMultipleChoiceItem();\\n\\n// Sets the title.\\nitem.setTitle('What is your favorite ice cream flavor?');\\n\\n// Creates some choice items.\\nconst vanilla \\u003d item.createChoice('vanilla');\\nconst chocolate \\u003d item.createChoice('chocolate');\\nconst strawberry \\u003d item.createChoice('strawberry');\\n\\n// Sets the choices.\\nitem.setChoices([vanilla, chocolate, strawberry]);\\n```\\n@return The newly created item.*/addMultipleChoiceItem():FormApp.MultipleChoiceItem;\\n/**Adds a new layout item that marks the start of a page.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds page break items to create a second and third page for the form.\\nconst pageTwo \\u003d form.addPageBreakItem();\\nconst pageThree \\u003d form.addPageBreakItem();\\n\\n// Sets the titles for the pages.\\npageTwo.setTitle('Page two');\\npageThree.setTitle('Page three');\\n\\n// Upon completion of the first page, sets the form to navigate to the third page.\\npageTwo.setGoToPage(pageThree);\\n\\n// Upon completion of the second page, sets the form to navigate back to the first page.\\npageThree.setGoToPage(FormApp.PageNavigationType.RESTART);\\n```\\n@return The newly created item.*/addPageBreakItem():FormApp.PageBreakItem;\\n/**Adds a new question item that allows the respondent to enter a block of text.\\n\\n```\\n// Opens the form by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds the paragraph text item.\\nconst item \\u003d form.addParagraphTextItem();\\n\\n// Sets the title to 'What is your address?'\\nitem.setTitle('What is your address?');\\n```\\n@return The newly created item.*/addParagraphTextItem():FormApp.ParagraphTextItem;\\n/**Appends a new question item that allows the respondent to choose one option from a numbered\\nsequence of radio buttons.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds the scale item.\\nconst item \\u003d form.addScaleItem();\\n\\n// Sets the title of the scale item to 'Choose a number.'\\nitem.setTitle('Choose a number');\\n\\n// Sets the scale to 1-5.\\nitem.setBounds(1, 5);\\n\\n// Sets the label for the lower and upper bounds.\\nitem.setLabels('Lowest', 'Highest');\\n```\\n@return The newly created item.*/addScaleItem():FormApp.ScaleItem;\\n/**Appends a new layout item that visually indicates the start of a section.\\n\\n```\\n // Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds the section heading item.\\nconst item \\u003d form.addSectionHeaderItem();\\n\\n// Sets the title to 'Title of new section.'\\nitem.setTitle('Title of new section');\\n\\n// Sets the description.\\nitem.setHelpText('Description of new section');\\n```\\n@return The newly created item.*/addSectionHeaderItem():FormApp.SectionHeaderItem;\\n/**Appends a new question item that allows the respondent to enter a single line of text.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a single-line text item.\\nconst item \\u003d form.addTextItem();\\n\\n// Sets the title to 'What is your name?'\\nitem.setTitle('What is your name?');\\n```\\n@return The newly created item.*/addTextItem():FormApp.TextItem;\\n/**Appends a new question item that allows the respondent to indicate a time of day.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a question with a time input.\\nconst item \\u003d form.addTimeItem();\\n\\n// Sets the title to 'What time do you usually wake up in the morning?'\\nitem.setTitle('What time do you usually wake up in the morning?');\\n```\\n@return The newly created item.*/addTimeItem():FormApp.TimeItem;\\n/**Appends a new layout item that displays a video.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Adds a video item.\\nconst item \\u003d form.addVideoItem();\\n\\n// Sets the title, description, and video.\\nitem.setTitle('YouTube video')\\n  .setHelpText('Send content automatically via Google Sheets and Apps Script')\\n  .setVideoUrl('https://youtu.be/xxgQr-jSu9o');\\n\\n// Sets the alignment to the center.\\nitem.setAlignment(FormApp.Alignment.CENTER);\\n```\\n@return The newly created item.*/addVideoItem():FormApp.VideoItem;\\n/**Determines whether the form displays a link to edit a response after submitting it.\\n\\nRegardless of this setting, the method [`FormResponse.getEditResponseUrl()`](https://developers.google.com/apps-script/reference/forms/form-response.html#getEditResponseUrl()) allows a\\nscript author who has edit access to the form to generate a URL that can be used to edit a\\nresponse.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Checks if the form displays a link to edit a response after submitting it.\\n// The default is false. To let people edit their responses, use\\n// form.setAllowResponseEdits(true).\\nconst edit \\u003d form.canEditResponse();\\n\\n// If the form doesn't let people edit responses, logs false to the console.\\nconsole.log(edit);\\n```\\n@return `true` if the form displays an \\\"Edit your response\\\" link; `false` if it\\n    doesn't.*/canEditResponse():boolean;\\n/**Determines whether the form collects respondents' email addresses.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the form to not collect respondents' email addresses.\\nform.setCollectEmail(false);\\n\\n// Checks whether the form collects respondents' email addresses and logs it to the console.\\nconst bool \\u003d form.collectsEmail();\\n\\nconsole.log(bool);\\n```\\n@return `true` if the form collects email addresses; `false` if it doesn't.*/collectsEmail():boolean;\\n/**Creates a new response to the form. To answer a question item, create an [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html)\\nfrom the item, then attach it to this form response by calling [`FormResponse.withItemResponse(response)`](https://developers.google.com/apps-script/reference/forms/form-response.html#withItemResponse(ItemResponse)). To save the assembled response, call [`FormResponse.submit()`](https://developers.google.com/apps-script/reference/forms/form-response.html#submit()).\\n@return The newly created form response.*/createResponse():FormApp.FormResponse;\\n/**Deletes all submitted responses from the form's response store. This method does not delete\\ncopies of responses stored in an external response destination (like a spreadsheet), but does\\nclear the form's summary view.\\n\\nBeware: this method is irreversible.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/deleteAllResponses():FormApp.Form;\\n/**Deletes the given item. Throws a scripting exception if the item has already been deleted.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Gets all of the items from the form.\\nconst items \\u003d form.getItems();\\n\\n// Finds a paragraph text item and deletes it.\\nconst item \\u003d items.find(item \\u003d\\u003e item.getType() \\u003d\\u003d\\u003d FormApp.ItemType.PARAGRAPH_TEXT);\\nif (item) {\\n  form.deleteItem(item);\\n}\\n```\\n@param item The item to be deleted.*/deleteItem(item:FormApp.Item):void;\\n/**Deletes the item at a given index among all the items in the form. Throws a scripting exception\\nif no item exists at the given index.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Gets all the items from the form.\\nconst items \\u003d form.getItems();\\n\\n// Finds the index of a paragraph text item and deletes it by the item's index.\\nconst index \\u003d items.findIndex(item \\u003d\\u003e item.getType() \\u003d\\u003d\\u003d FormApp.ItemType.PARAGRAPH_TEXT);\\nif (index !\\u003d\\u003d -1) {\\n  form.deleteItem(index);\\n}\\n```\\n@param index The index of the item among all the items in the form.*/deleteItem(index:Integer):void;\\n/**Deletes a single response from the form's response store. This method does not delete copies of\\nresponses stored in an external response destination (like a spreadsheet), but does remove the\\nresponse from the form's summary view. The response ID can be retrieved with [`FormResponse.getId()`](https://developers.google.com/apps-script/reference/forms/form-response.html#getId()).\\n\\n__Warning__: This method is irreversible.\\n@param responseId The ID of the form response to delete.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/deleteResponse(responseId:string):FormApp.Form;\\n/**Gets the form's confirmation message.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the confirmation message to display after someone submits the form.\\nform.setConfirmationMessage('You successfully submitted the form.');\\n\\n// Gets the confirmation message and logs it to the console.\\nconst message \\u003d form.getConfirmationMessage();\\n\\nconsole.log(message);\\n```\\n@return The form's confirmation message.*/getConfirmationMessage():string;\\n/**Gets the custom message that is displayed if the form is not accepting responses, or an empty\\nstring if no custom message is set.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets a custom closed form message to display to the user when the form\\n// no longer accepts responses.\\nform.setCustomClosedFormMessage('The form is no longer accepting responses.');\\n\\n// Gets the custom message set for the form and logs it to the console.\\nconst message \\u003d form.getCustomClosedFormMessage();\\n\\nconsole.log(message);\\n```\\n@return The custom message to display if the form is not accepting responses, or an empty\\n    string if no custom message is set.*/getCustomClosedFormMessage():string;\\n/**Gets the form's description.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the form description.\\nform.setDescription('This is the form description.');\\n\\n// Gets the form description and logs it to the console.\\nconst description \\u003d form.getDescription();\\n\\nconsole.log(description);\\n```\\n@return The form's description.*/getDescription():string;\\n/**Gets the ID of the form's response destination.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Creates a spreadsheet to use as the response destination.\\nconst ss \\u003d SpreadsheetApp.create('Test_Spreadsheet');\\n\\n// Updates the form's response destination.\\nform.setDestination(FormApp.DestinationType.SPREADSHEET, ss.getId());\\n\\n// Gets the ID of the form's response destination and logs it to the console.\\nconst destinationId \\u003d form.getDestinationId();\\n\\nconsole.log(destinationId);\\n```\\n@return The ID of the form's response destination.*/getDestinationId():string;\\n/**Gets the type of the form's response destination.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc1234556/edit');\\n\\n// Gets the type of the form's response destination and logs it to the console.\\nconst destinationType \\u003d form.getDestinationType().name();\\n\\nconsole.log(destinationType);\\n```\\n@return The type of the form's response destination.*/getDestinationType():FormApp.DestinationType;\\n/**Gets the URL that can be used to access the form's edit mode.\\n\\n```\\n// Opens the form by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Gets the URL that accesses the form's edit mode and logs it to the console.\\nconst url \\u003d form.getEditUrl();\\n\\nconsole.log(url);\\n```\\n@return The URL to edit the form.*/getEditUrl():string;\\n/**Gets the list of editors for this [`Form`](https://developers.google.com/apps-script/reference/forms/form.html).\\n@return An array of users with edit permission.*/getEditors():User[];\\n/**Gets the ID of the form.\\n\\n```\\n// Opens the form by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Gets the ID of the form and logs it to the console.\\nconst id \\u003d form.getId();\\n\\nconsole.log(id);\\n```\\n@return The ID of the form.*/getId():string;\\n/**Gets the item with a given ID. Returns `null` if the ID does not correspond to an item in\\nthe form.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Gets the ID of the first item on the form.\\nconst itemId \\u003d form.getItems()[0].getId();\\n\\n// Gets the item from the ID.\\nconst item \\u003d form.getItemById(itemId);\\n\\n// Gets the name of the item type and logs it to the console.\\nconst type \\u003d item.getType().name();\\n\\nconsole.log(type);\\n```\\n@param id The item's ID.\\n@return The item with the given ID, or `null` if the item does not exist in the form.*/getItemById(id:Integer):FormApp.Item;\\n/**Gets an array of all items in the form.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Gets the list of items in the form.\\nconst items \\u003d form.getItems();\\n\\n// Gets the type for each item and logs them to the console.\\nconst types \\u003d items.map((item) \\u003d\\u003e item.getType().name());\\n\\nconsole.log(types);\\n```\\n@return An array of all items in the form.*/getItems():FormApp.Item[];\\n/**Gets an array of all items of a given type.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Gets a list of all checkbox items on the form.\\nconst items \\u003d form.getItems(FormApp.ItemType.CHECKBOX);\\n\\n// Gets the title of each checkbox item and logs them to the console.\\nconst checkboxItemsTitle \\u003d items.map((item) \\u003d\\u003e item.asCheckboxItem().getTitle());\\nconsole.log(checkboxItemsTitle);\\n```\\n@param itemType The type of items to retrieve.\\n@return An array of all items of that type.*/getItems(itemType:FormApp.ItemType):FormApp.Item[];\\n/**Gets the URL that can be used to respond to the form.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Gets the URL to respond to the form and logs it to the console.\\nconst url \\u003d form.getPublishedUrl();\\nconsole.log(url);\\n```\\n@return The URL to respond to the form.*/getPublishedUrl():string;\\n/**Gets a single form response based on its response ID. Response IDs can be retrieved from [`FormResponse.getId()`](https://developers.google.com/apps-script/reference/forms/form-response.html#getId()).\\n@param responseId The ID for the form response.\\n@return The form response.*/getResponse(responseId:string):FormApp.FormResponse;\\n/**Gets an array of all of the form's responses.\\n@return An array of all of the form's responses.*/getResponses():FormApp.FormResponse[];\\n/**Gets an array of all of the form's responses after a given date and time.\\n@param timestamp The earliest date and time for which form responses should be returned.\\n@return The list of form responses.*/getResponses(timestamp:Date):FormApp.FormResponse[];\\n/**Determines whether the order of the questions on each page of the form is randomized.\\n@return `true` if the order of the questions on each page of the form is randomized;\\n    `false` if not.*/getShuffleQuestions():boolean;\\n/**Gets the URL that can be used to view a summary of the form's responses. Unless [`setPublishingSummary(enabled)`](https://developers.google.com/apps-script/reference/forms/form.html#setPublishingSummary(Boolean)) is set to `true`, only the users with edit permission to the\\nform is able to access the URL.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// Opens the form by its URL.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Gets the URL to view a summary of the form's responses and logs it to the console.\\nconst url \\u003d form.getSummaryUrl();\\nconsole.log(url);\\n```\\n@return The URL to view a summary of responses.*/getSummaryUrl():string;\\n/**Gets the form's title.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the title of the form to 'For_Testing.'\\nform.setTitle('For_Testing');\\n\\n// Gets the title of the form and logs it to the console.\\nconst title \\u003d form.getTitle();\\nconsole.log(title);\\n```\\n@return The form's title.*/getTitle():string;\\n/**Determines whether the form allows only one response per respondent. If the value is `true`, the script cannot submit form responses at all.\\n@return `true` if the form allows only one response per respondent; `false` if not.*/hasLimitOneResponsePerUser():boolean;\\n/**Determines whether the form displays a progress bar.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// Opens the form by its URL.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Displays the progress bar on the form.\\nform.setProgressBar(true);\\n\\n// Checks if the form displays a progress bar and logs it to the console.\\nconsole.log(form.hasProgressBar());\\n```\\n@return `true` if the form displays a progress bar; `false` if it doesn't.*/hasProgressBar():boolean;\\n/**Determines whether the form displays a link to submit another response after a respondent\\ncompletes the form.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the form to display a link to submit another\\n// response after someone submits the form.\\nform.setShowLinkToRespondAgain(true);\\n\\n// Checks if the form displays a 'Submit another response' link and logs it to the console.\\nconsole.log(form.hasRespondAgainLink());\\n```\\n@return `true` if the form displays a \\\"Submit another response\\\" link; `false` if it\\n    doesn't.*/hasRespondAgainLink():boolean;\\n/**Determines whether the form is currently accepting responses.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the form to accept responses.\\nform.setAcceptingResponses(true);\\n\\n// Checks if the form is accepting responses or not and logs it to the console.\\nconst accepting \\u003d form.isAcceptingResponses();\\nconsole.log(accepting);\\n```\\n@return `true` if the form is accepting responses; `false` if it isn't.*/isAcceptingResponses():boolean;\\n/**Determines whether the form displays a link to view a summary of responses after a respondent\\ncompletes the form.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the form to display a link to a summary of\\n// the responses after someone submits the form.\\nform.setPublishingSummary(true);\\n\\n// Checks if the form displays a \\\"See previous responses\\\" link and logs it to the console.\\nconst publishingLink \\u003d form.isPublishingSummary();\\nconsole.log(publishingLink);\\n```\\n@return `true` if the form displays a \\\"See previous responses\\\" link; `false` if it\\n    doesn't.*/isPublishingSummary():boolean;\\n/**Determines whether the form is a quiz.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the form as a quiz.\\nform.setIsQuiz(true);\\n\\n// Checks if the form is a quiz or not and logs it to the console.\\nconsole.log(form.isQuiz());\\n```\\n@return `true` if the form is accepting responses; `false` if it isn't.*/isQuiz():boolean;\\n/**Moves a given item to a given index among all the items in the form. Throws a scripting\\nexception if the given index is out of bounds.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Gets the first item.\\nconst item \\u003d form.getItems()[0];\\n\\n// Moves the item to be the last item.\\nform.moveItem(item, form.getItems().length - 1);\\n```\\n@param item The item to move.\\n@param toIndex The new index for the item among all the items in the form.\\n@return The item that was moved.*/moveItem(item:FormApp.Item,toIndex:Integer):FormApp.Item;\\n/**Moves an item at a given index among all the items in the form to another given index. Throws a\\nscripting exception if the `to` index is out of bounds.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Moves the first item to be the last item.\\nform.moveItem(0, form.getItems().length - 1);\\n```\\n@param from The current index of the item among all the items in the form.\\n@param to The new index for the item among all the items in the form.\\n@return The item that was moved.*/moveItem(from:Integer,to:Integer):FormApp.Item;\\n/**Unlinks the form from its current response destination. The unlinked former destination still\\nretains a copy of all previous responses. All forms, including those that do not have a\\ndestination set explicitly, [save a\\ncopy of responses in the form's response store](https://support.google.com/drive/answer/2917686). If the form does not currently have a\\nresponse destination, this method has no effect.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Opens a spreadsheet to use for the response destination.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Updates the form's response destination to the spreadsheet.\\nform.setDestination(FormApp.DestinationType.SPREADSHEET, ss.getId());\\n\\n// Unlinks the form from the spreadsheet.\\nform.removeDestination();\\n```\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/removeDestination():FormApp.Form;\\n/**Removes the given user from the list of editors for the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html). This method doesn't\\nblock users from accessing the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html) is shared with the user's entire\\ndomain, or if the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param emailAddress The email address of the user to remove.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/removeEditor(emailAddress:string):FormApp.Form;\\n/**Removes the given user from the list of editors for the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html). This method doesn't\\nblock users from accessing the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html) is shared with the user's entire\\ndomain, or if the [`Form`](https://developers.google.com/apps-script/reference/forms/form.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param user A representation of the user to remove.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/removeEditor(user:User):FormApp.Form;\\n/**Determines whether the form requires respondents to log in to an account in the same domain or\\na subdomain before responding.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Checks if the form requires respondents to log in to a Google Workspace account\\n// before responding and logs it to the console.\\nconst login \\u003d form.requiresLogin();\\nconsole.log(login);\\n```\\n@return `true` if the form requires users to log in; `false` if it doesn't.*/requiresLogin():boolean;\\n/**Sets whether the form is currently accepting responses. The default for new forms is `true`.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the form to accept responses.\\nform.setAcceptingResponses(true);\\n\\n// Checks whether the form is accepting responses or not and logs it to the console.\\nconsole.log(form.isAcceptingResponses());\\n```\\n@param enabled `true` if the form should accept responses; `false` if it shouldn't.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setAcceptingResponses(enabled:boolean):FormApp.Form;\\n/**Sets whether the form displays a link to edit a response after submitting it. The default for\\nnew forms is `false`.\\n\\nRegardless of this setting, the method [`FormResponse.getEditResponseUrl()`](https://developers.google.com/apps-script/reference/forms/form-response.html#getEditResponseUrl()) allows a\\nscript author who has edit permission to the form to generate a URL that can be used to edit a\\nresponse.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Shows \\\"Edit your response\\\" link after someone submits the form.\\nform.setAllowResponseEdits(true);\\n\\n// Checks whether the option to edit the form after a user submits it is set to true or not\\n// and logs it to the console.\\nconsole.log(form.canEditResponse());\\n```\\n@param enabled `true` if the form should display an \\\"Edit your response\\\" link; `false` if not.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setAllowResponseEdits(enabled:boolean):FormApp.Form;\\n/**Sets whether the form collects respondents' email addresses. The default for new forms is\\n`false`.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the form to collect respondents' email addresses.\\nform.setCollectEmail(true);\\n\\n// Checks whether the value is set to true or false and logs it to the console.\\nconst collect \\u003d form.collectsEmail();\\nconsole.log(collect);\\n```\\n@param collect `true` if the form should collect email addresses; `false` if it\\n    doesn't.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setCollectEmail(collect:boolean):FormApp.Form;\\n/**Sets the form's confirmation message.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets a custom confirmation message to display after someone submits the form.\\nform.setConfirmationMessage('Your form has been successfully submitted.');\\n\\n// Gets the confirmation message set for the form and logs it to the console.\\nconst message \\u003d form.getConfirmationMessage();\\nconsole.log(message);\\n```\\n@param message The form's new confirmation message.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setConfirmationMessage(message:string):FormApp.Form;\\n/**Sets the message to display if the form is not accepting responses. If no message is set, the\\nform uses a default message.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the form to not accept responses.\\nform.setAcceptingResponses(false);\\n\\n// Sets a custom closed form message to display to the user.\\nform.setCustomClosedFormMessage('The form is no longer accepting responses.');\\n\\n// Gets the custom message set for the form and logs it to the console.\\nconst message \\u003d form.getCustomClosedFormMessage();\\nconsole.log(message);\\n```\\n@param message The message to display if the form is not accepting responses.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setCustomClosedFormMessage(message:string):FormApp.Form;\\n/**Sets the form's description.\\n@param description The form's new description.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setDescription(description:string):FormApp.Form;\\n/**Sets the destination where form responses are saved. All forms, including those that do not\\nhave a destination set explicitly, [save a copy of responses in the form's\\nresponse store](https://support.google.com/drive/answer/2917686).\\n@param type The type of the form's response destination.\\n@param id The ID of the form's response destination.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setDestination(type:FormApp.DestinationType,id:string):FormApp.Form;\\n/**Sets whether the form is a quiz. The default for new forms is `false`.\\n\\nGraded questions are only allowed in Quizzes, so setting this to `false` causes all\\ngrading options to be removed from all questions.\\n\\nQuiz settings are only available in the new Forms UI; making a form a Quiz opts the form\\ninto using the new UI.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within a\\n// Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Makes the form a quiz.\\nform.setIsQuiz(true);\\n\\n// Checks whether the form is a quiz or not and logs it to the console.\\nconsole.log(form.isQuiz());\\n```\\n@param enabled `true` if quiz features should be enabled for the form; `false` if\\n    not.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setIsQuiz(enabled:boolean):FormApp.Form;\\n/**Sets whether the form allows only one response per respondent. The default for new forms is\\n`false`. If the value is set to `true`, the script cannot submit form responses at\\nall.\\n@param enabled `true` if the form should allow only one response per respondent; `false` if not.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setLimitOneResponsePerUser(enabled:boolean):FormApp.Form;\\n/**Sets whether the form has a progress bar. The default for new forms is `false`.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Displays the progress bar on the form.\\nform.setProgressBar(true);\\n\\n// Checks whether the form has a progress bar and logs it to the console.\\nconsole.log(form.hasProgressBar());\\n```\\n@param enabled `true` if the form displays a progress bar; `false` if it doesn't.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setProgressBar(enabled:boolean):FormApp.Form;\\n/**Sets whether the form displays a link to view a summary of responses after a respondent submits\\nthe form. The default for new forms is `false`.\\n@param enabled `true` if the form should display a \\\"See previous responses\\\" link; `false` if not.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setPublishingSummary(enabled:boolean):FormApp.Form;\\n/**Sets whether the form requires respondents to log in to an account in the same domain or a\\nsubdomain before responding. The default for new forms is `false` unless a domain\\nadministrator changes the default.\\n\\nThis feature is available only for forms created by Google Workspace users. Users of other\\ntypes of Google accounts can't be required to log in.\\n\\n```\\n// Opens the Forms file by its URL. If you created your script from within\\n// a Google Forms file, you can use FormApp.getActiveForm() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst form \\u003d FormApp.openByUrl('https://docs.google.com/forms/d/abc123456/edit');\\n\\n// Sets the form so that users must log in to their Google Workspace account.\\nform.setRequireLogin(true);\\n\\n// Checks whether the form requires login or not and logs it to the console.\\nconsole.log(form.requiresLogin());\\n```\\n@param requireLogin `true` if the form requires users to log in; `false` if it\\n    doesn't.\\n@return The current form (for chaining).*/setRequireLogin(requireLogin:boolean):FormApp.Form;\\n/**Sets whether the form displays a link to submit another response after a respondent completes\\nthe form. The default for new forms is `true`.\\n@param enabled `true` if the form should display a \\\"Submit another response\\\" link; `false` if not.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setShowLinkToRespondAgain(enabled:boolean):FormApp.Form;\\n/**Sets whether the order of the questions on each page of the form is randomized.\\n@param shuffle `true` if the order of the questions on each page of the form should be\\n    randomized; `false` if not.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setShuffleQuestions(shuffle:boolean):FormApp.Form;\\n/**Sets the form's title.\\n@param title The form's new title.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/setTitle(title:string):FormApp.Form;\\n/**Converts a long URL for a form to a short URL. Throws an exception if the long URL does not\\nbelong to Google Forms.\\n@param url The URL to shorten.\\n@return A URL in the form `http://goo.gl/forms/1234`.*/shortenFormUrl(url:string):string;\\n/**Submits grades for the given FormResponses.\\n\\nIf your code includes an `onFormSubmit` trigger, calling `submitGrades()`\\ntriggers the `onFormSubmit` condition and causes an infinite loop. To prevent the\\ninfinite loop, add code that checks whether grades already exist before calling `submitGrades()`.\\n@param responses An array of all of the form's responses.\\n@return This [`Form`](https://developers.google.com/apps-script/reference/forms/form.html), for chaining.*/submitGrades(responses:FormApp.FormResponse[]):FormApp.Form;}interface FeedbackType{}interface _FeedbackType{\\n/**Feedback that is automatically displayed to respondents for a question answered correctly.\\nCorrect feedback can only be attached to a question type that supports autograding (e.g. radio,\\ncheckbox, select)*/CORRECT:FeedbackType;\\n/**Feedback that is automatically displayed to respondents when they submit their response.\\nGeneral feedback can only be attached to question types that do not support auto-grading, but\\nare gradeable (ie everything but grid)*/GENERAL:FeedbackType;\\n/**Feedback that is automatically displayed to respondents for a question answered incorrectly.\\nIncorrect feedback can only be attached to a question type that supports autograding (e.g.\\nradio, checkbox, select)*/INCORRECT:FeedbackType;}interface DurationItem{\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this date item. The arguments `hours`, `minutes`, and `seconds` are best represented as integers from `0` to `72` for\\n`hours` and `0` to `59` for `minutes` and `seconds`. Values that\\nexceed those bounds are clamped: for example, `24, 60, 90` is interpreted as 24:59:59.\\n@param hours the hours, represented as an integer from `0` to `72`\\n@param minutes the minutes, represented as an integer from `0` to `59`\\n@param seconds the seconds, represented as an integer from `0` to `59`\\n@return the item response*/createResponse(hours:Integer,minutes:Integer,seconds:Integer):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`DurationItem`](https://developers.google.com/apps-script/reference/forms/duration-item.html), for chaining*/duplicate():FormApp.DurationItem;\\n/**Returns the feedback that is shown to respondents when they respond to a gradeable question.\\n@return the feedback, if any.*/getGeneralFeedback():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the feedback to be shown to respondents when they respond to a gradeable question that\\ndoesn't have a correct or incorrect answer (ie questions that require manual grading).\\n@param feedback the new feedback\\n@return this [`DurationItem`](https://developers.google.com/apps-script/reference/forms/duration-item.html), for chaining*/setGeneralFeedback(feedback:FormApp.QuizFeedback):FormApp.DurationItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`DurationItem`](https://developers.google.com/apps-script/reference/forms/duration-item.html), for chaining*/setHelpText(text:string):FormApp.DurationItem;\\n/**Sets the number of points a gradeable item is worth. The default for new items is 0.\\n@param points the number of a points a question item is worth\\n@return this [`DurationItem`](https://developers.google.com/apps-script/reference/forms/duration-item.html), for chaining*/setPoints(points:Integer):FormApp.DurationItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.DurationItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`DurationItem`](https://developers.google.com/apps-script/reference/forms/duration-item.html), for chaining*/setTitle(title:string):FormApp.DurationItem;}interface DestinationType{}interface _DestinationType{\\n/**A Google Sheets spreadsheet as a destination for form responses.*/SPREADSHEET:DestinationType;}interface DateTimeItem{\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this date-time item. The seconds field of the `Date` object is ignored; by default, the year, month, day, hour, and minute fields are used. If\\n[`setIncludesYear(enabled)`](https://developers.google.com/apps-script/reference/forms/date-time-item.html#setIncludesYear(Boolean)) is set to `false`, the year is\\nignored as well.\\n@param response a `Date` object that represents a month, day, hour, minute, and possibly\\n    year\\n@return the item response*/createResponse(response:Date):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`DateTimeItem`](https://developers.google.com/apps-script/reference/forms/date-time-item.html), for chaining*/duplicate():FormApp.DateTimeItem;\\n/**Returns the feedback that is shown to respondents when they respond to a gradeable question.\\n@return the feedback, if any.*/getGeneralFeedback():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the date item includes a year option.\\n@return `true` if the date includes a year setting; `false` if not*/includesYear():boolean;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the feedback to be shown to respondents when they respond to a gradeable question that\\ndoesn't have a correct or incorrect answer (ie questions that require manual grading).\\n@param feedback the new feedback\\n@return this [`DateTimeItem`](https://developers.google.com/apps-script/reference/forms/date-time-item.html), for chaining*/setGeneralFeedback(feedback:FormApp.QuizFeedback):FormApp.DateTimeItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`DateTimeItem`](https://developers.google.com/apps-script/reference/forms/date-time-item.html), for chaining*/setHelpText(text:string):FormApp.DateTimeItem;\\n/**Sets whether the date item includes a year setting. The default for new date items is `true`.\\n@param enableYear `true` if the date includes a year setting; `false` if not\\n@return this [`DateTimeItem`](https://developers.google.com/apps-script/reference/forms/date-time-item.html), for chaining*/setIncludesYear(enableYear:boolean):FormApp.DateTimeItem;\\n/**Sets the number of points a gradeable item is worth. The default for new items is 0.\\n@param points the number of a points a question item is worth\\n@return this [`DateTimeItem`](https://developers.google.com/apps-script/reference/forms/date-time-item.html), for chaining*/setPoints(points:Integer):FormApp.DateTimeItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.DateTimeItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`DateTimeItem`](https://developers.google.com/apps-script/reference/forms/date-time-item.html), for chaining*/setTitle(title:string):FormApp.DateTimeItem;}interface DateItem{\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this date item. The time fields of the `Date`\\nobject are ignored; by default, only the year, month, and day fields are used. If [`setIncludesYear(enabled)`](https://developers.google.com/apps-script/reference/forms/date-item.html#setIncludesYear(Boolean)) is set to `false`, the year is\\nignored as well.\\n@param response a `Date` object that represents a month, day, and possibly year\\n@return the item response*/createResponse(response:Date):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`DateItem`](https://developers.google.com/apps-script/reference/forms/date-item.html), for chaining*/duplicate():FormApp.DateItem;\\n/**Returns the feedback that is shown to respondents when they respond to a gradeable question.\\n@return the feedback, if any.*/getGeneralFeedback():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the date item includes a year option.\\n@return `true` if the date includes a year setting; `false` if not*/includesYear():boolean;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the feedback to be shown to respondents when they respond to a gradeable question that\\ndoesn't have a correct or incorrect answer (ie questions that require manual grading).\\n@param feedback the new feedback\\n@return this [`DateItem`](https://developers.google.com/apps-script/reference/forms/date-item.html), for chaining*/setGeneralFeedback(feedback:FormApp.QuizFeedback):FormApp.DateItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`DateItem`](https://developers.google.com/apps-script/reference/forms/date-item.html), for chaining*/setHelpText(text:string):FormApp.DateItem;\\n/**Sets whether the date item includes a year setting. The default for new date items is `true`.\\n@param enableYear `true` if the date includes a year setting; `false` if not\\n@return this [`DateItem`](https://developers.google.com/apps-script/reference/forms/date-item.html), for chaining*/setIncludesYear(enableYear:boolean):FormApp.DateItem;\\n/**Sets the number of points a gradeable item is worth. The default for new items is 0.\\n@param points the number of a points a question item is worth\\n@return this [`DateItem`](https://developers.google.com/apps-script/reference/forms/date-item.html), for chaining*/setPoints(points:Integer):FormApp.DateItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.DateItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`DateItem`](https://developers.google.com/apps-script/reference/forms/date-item.html), for chaining*/setTitle(title:string):FormApp.DateItem;}interface Choice{\\n/**Gets the [`PageBreakItem`](https://developers.google.com/apps-script/reference/forms/page-break-item.html) set as a [`GO_TO_PAGE`](https://developers.google.com/apps-script/reference/forms/page-navigation-type.html) destination\\nif the responder selects this choice and completes the current page. This method applies only\\nto choices associated with [`MultipleChoiceItems`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html); for other choices,\\nit returns `null`.\\n@return the [`GO_TO_PAGE`](https://developers.google.com/apps-script/reference/forms/page-navigation-type.html) destination for this choice, or `null` if there is none*/getGotoPage():FormApp.PageBreakItem;\\n/**Gets the [`PageNavigationType`](https://developers.google.com/apps-script/reference/forms/page-navigation-type.html) that occurs if the responder selects this choice and\\ncompletes the current page. This method applies only to choices associated with [`MultipleChoiceItems`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html); for other choices, it returns `null`.\\n@return the navigation action for this choice, or `null` if there is none*/getPageNavigationType():FormApp.PageNavigationType;\\n/**Gets the choice's value, which respondents see as a label when viewing the form.\\n@return the choice's value*/getValue():string;\\n/**Gets whether the choice is a correct answer for the question. This method only applies to\\nquestions that are part of a quiz; for non-quiz forms, it returns false.\\n@return Whether the choice is a correct answer.*/isCorrectAnswer():boolean;}interface CheckboxValidationBuilder{\\n/**Require at least this many choices to be selected.\\n@return this [`CheckboxValidationBuilder`](https://developers.google.com/apps-script/reference/forms/checkbox-validation-builder.html), for chaining*/requireSelectAtLeast(number:Integer):FormApp.CheckboxValidationBuilder;\\n/**Require at most this many choices to be selected.\\n@return this [`CheckboxValidationBuilder`](https://developers.google.com/apps-script/reference/forms/checkbox-validation-builder.html), for chaining*/requireSelectAtMost(number:Integer):FormApp.CheckboxValidationBuilder;\\n/**Require exactly this many choices to be selected.\\n@return this [`CheckboxValidationBuilder`](https://developers.google.com/apps-script/reference/forms/checkbox-validation-builder.html), for chaining*/requireSelectExactly(number:Integer):FormApp.CheckboxValidationBuilder;}interface CheckboxValidation{}interface CheckboxItem{\\n/**Removes any data validation for this checkbox item.\\n@return this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/clearValidation():FormApp.CheckboxItem;\\n/**Creates a new choice.\\n@param value the choice's value, which respondents see as a label when viewing the form\\n@return the new choice*/createChoice(value:string):FormApp.Choice;\\n/**Creates a new choice.\\n@param value the choice's value, which respondents see as a label when viewing the form\\n@param isCorrect whether the choice is a correct answer\\n@return the new choice*/createChoice(value:string,isCorrect:boolean):FormApp.Choice;\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this checkbox item. The argument `responses` is a\\n`String[]` array containing values that need to be checked. Throws an exception if any\\nvalue does not match a valid choice for this item, unless [`showOtherOption(enabled)`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html#showOtherOption(Boolean)) is set to `true`.\\n@param responses an array of valid answers for this multiple-choice item\\n@return the item response*/createResponse(responses:string[]):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/duplicate():FormApp.CheckboxItem;\\n/**Gets all choices for an item.\\n@return an array of choices*/getChoices():FormApp.Choice[];\\n/**Returns the feedback that is shown to respondents when they respond correctly to a question.\\n@return the feedback, if any.*/getFeedbackForCorrect():FormApp.QuizFeedback;\\n/**Returns the feedback that is shown to respondents when they respond incorrectly to a question.\\n@return the feedback, if any.*/getFeedbackForIncorrect():FormApp.QuizFeedback;\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Returns the point value of a gradeable item.\\n@return the number of points a question is worth.*/getPoints():Integer;\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the item has an \\\"other\\\" option.\\n@return `true` if the item has an \\\"other\\\" option; `false` if not*/hasOtherOption():boolean;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the choices for an item from an array of strings. Throws an exception if the given array\\nis empty.\\n\\n```\\n// Open a form by ID and add a new list item.\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar item \\u003d form.addListItem();\\nitem.setTitle('Do you prefer cats or dogs?');\\nitem.setChoiceValues(['Dogs', 'Cats']);\\n```\\n@param values the array of choice values, which respondents see as labels when viewing the form\\n@return this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/setChoiceValues(values:string[]):FormApp.CheckboxItem;\\n/**Sets an array of choices for an item. Throws an exception if the given array is empty or\\ncontains a `null` element.\\n\\n```\\n// Open a form by ID and add a new list item.\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar item \\u003d form.addListItem();\\nitem.setTitle('Do you prefer cats or dogs?')\\nitem.setChoices([\\n    item.createChoice('Cats'),\\n    item.createChoice('Dogs')\\n]);\\n```\\n@param choices an array of choices\\n@return this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/setChoices(choices:FormApp.Choice[]):FormApp.CheckboxItem;\\n/**Sets the feedback to be shown to respondents when they respond correctly to a question.\\n\\n```\\n// Open a form by ID and add a new list item.\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar item \\u003d form.addListItem();\\nitem.setTitle('Do you prefer cats or dogs?');\\n// Set \\\"Dogs\\\" as the correct answer to this question.\\nitem.setChoices([\\n  item.createChoice('Dogs', true),\\n  item.createChoice('Cats', false)]);\\n// Add feedback which will be shown for correct responses; ie \\\"Dogs\\\".\\nitem.setFeedbackForCorrect(\\n    FormApp.createFeedback().setDisplayText(\\\"Dogs rule, cats drool.\\\").build());\\n```\\n@param feedback the new feedback. A null value will clear the feedback.\\n@return this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/setFeedbackForCorrect(feedback:FormApp.QuizFeedback):FormApp.CheckboxItem;\\n/**Sets the feedback to be shown to respondents when they respond incorrectly to a question.\\n@param feedback the new feedback\\n@return this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/setFeedbackForIncorrect(feedback:FormApp.QuizFeedback):FormApp.CheckboxItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/setHelpText(text:string):FormApp.CheckboxItem;\\n/**Sets the number of points a gradeable item is worth. The default for new items is 0.\\n@param points the number of a points a question item is worth\\n@return this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/setPoints(points:Integer):FormApp.CheckboxItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.CheckboxItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/setTitle(title:string):FormApp.CheckboxItem;\\n/**Sets the data validation for this checkbox item. Passing in null or a validation without any\\nrequire functions called will remove any prior validation.\\n@param validation a CheckboxValidation to apply to this item.\\n@return this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/setValidation(validation:FormApp.CheckboxValidation):FormApp.CheckboxItem;\\n/**Sets whether the item has an \\\"other\\\" option. The default for a new [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html) or\\n[`MultipleChoiceItem`](https://developers.google.com/apps-script/reference/forms/multiple-choice-item.html) is `false`.\\n@param enabled `true` if the item has an \\\"other\\\" option; `false` if not\\n@return this [`CheckboxItem`](https://developers.google.com/apps-script/reference/forms/checkbox-item.html), for chaining*/showOtherOption(enabled:boolean):FormApp.CheckboxItem;}interface CheckboxGridValidationBuilder{\\n/**Requires limit of one response per column for a grid item.\\n@return this validation builder, for chaining*/requireLimitOneResponsePerColumn():FormApp.CheckboxGridValidationBuilder;}interface CheckboxGridValidation{}interface CheckboxGridItem{\\n/**Removes any data validation for this grid item.\\n@return this item, for chaining*/clearValidation():FormApp.CheckboxGridItem;\\n/**Creates a new [`ItemResponse`](https://developers.google.com/apps-script/reference/forms/item-response.html) for this checkbox grid item. The argument `responses`\\nmust be a `String[][]` array of arrays containing as many values as the number of inputs\\nin the checkbox grid. A `null` element for a non-required checkbox grid question\\nindicates no response to that row. Throws an exception if any of the values does not match a\\nvalid choice.\\n@param responses an array of arrays of valid answers for this checkbox grid item\\n@return the item response*/createResponse(responses:string[][]):FormApp.ItemResponse;\\n/**Creates a copy of this item and appends it to the end of the form.\\n@return a duplicate of this [`CheckboxGridItem`](https://developers.google.com/apps-script/reference/forms/checkbox-grid-item.html), for chaining*/duplicate():FormApp.CheckboxGridItem;\\n/**Gets the values for every column in the grid.\\n@return an array of column values, which respondents see as labels when viewing the form*/getColumns():string[];\\n/**Gets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's help text or description text*/getHelpText():string;\\n/**Gets the item's unique identifier.\\n@return the item's ID*/getId():Integer;\\n/**Gets the index of the item among all the items in the form.\\n@return the index of the item*/getIndex():Integer;\\n/**Gets the values for every row in the grid.\\n@return an array of row values, which respondents see as labels when viewing the form*/getRows():string[];\\n/**Gets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@return the item's title or header text*/getTitle():string;\\n/**Gets the item's type, represented as an [`ItemType`](https://developers.google.com/apps-script/reference/forms/item-type.html).\\n@return the item's type*/getType():FormApp.ItemType;\\n/**Determines whether the respondent must answer the question.\\n@return whether the respondent must answer the question*/isRequired():boolean;\\n/**Sets the columns of the grid based on an array of values. Throws an exception if the given\\narray is empty.\\n@param columns an array of column values, which respondents see as labels when viewing the form\\n@return this item, for chaining*/setColumns(columns:string[]):FormApp.CheckboxGridItem;\\n/**Sets the item's help text (sometimes called description text for layout items like [`ImageItems`](https://developers.google.com/apps-script/reference/forms/image-item.html), [`PageBreakItems`](https://developers.google.com/apps-script/reference/forms/page-break-item.html), and [`SectionHeaderItems`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param text the new help text\\n@return this [`CheckboxGridItem`](https://developers.google.com/apps-script/reference/forms/checkbox-grid-item.html), for chaining*/setHelpText(text:string):FormApp.CheckboxGridItem;\\n/**Sets whether the respondent must answer the question.\\n@param enabled whether the respondent must answer the question\\n@return the current item (for chaining)*/setRequired(enabled:boolean):FormApp.CheckboxGridItem;\\n/**Sets the rows of the grid based on an array of values. Throws an exception if the given array\\nis empty.\\n@param rows an array of row values, which respondents see as labels when viewing the form\\n@return this item, for chaining*/setRows(rows:string[]):FormApp.CheckboxGridItem;\\n/**Sets the item's title (sometimes called header text, in the case of a [`SectionHeaderItem`](https://developers.google.com/apps-script/reference/forms/section-header-item.html)).\\n@param title the new title or header text\\n@return this [`CheckboxGridItem`](https://developers.google.com/apps-script/reference/forms/checkbox-grid-item.html), for chaining*/setTitle(title:string):FormApp.CheckboxGridItem;\\n/**Sets the data validation for this checkbox grid item. Passing in null or a validation without\\nany require functions called will remove any prior validation.\\n@param validation a CheckboxGridValidation to apply to this item.\\n@return this [`CheckboxGridItem`](https://developers.google.com/apps-script/reference/forms/checkbox-grid-item.html), for chaining*/setValidation(validation:FormApp.CheckboxGridValidation):FormApp.CheckboxGridItem;}interface Alignment{}interface _Alignment{\\n/**Align the image to the center of the form.*/CENTER:Alignment;\\n/**Align the image to the left side of the form.*/LEFT:Alignment;\\n/**Align the image to the right side of the form.*/RIGHT:Alignment;}}const FormApp:FormApp;\"],[\"gmail-app.d.ts\",\"interface GmailApp{\\n/**Creates a draft email message. The size of the email (including headers) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// The code below creates a draft email with the current date and time.\\nvar now \\u003d new Date();\\nGmailApp.createDraft(\\\"mike@example.com\\\", \\\"current time\\\", \\\"The time is: \\\" + now.toString());\\n```\\n@param recipient comma separated list of email addresses\\n@param subject subject of the email\\n@param body body of the email\\n@return the newly created GmailDraft*/createDraft(recipient:string,subject:string,body:string):GmailApp.GmailDraft;\\n/**Creates a draft email message with optional arguments. The email can contain plain text or an\\nHTML body. The size of the email (including headers, but excluding attachments) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Create a draft email with a file from Google Drive attached as a PDF.\\nvar file \\u003d DriveApp.getFileById('1234567890abcdefghijklmnopqrstuvwxyz');\\nGmailApp.createDraft('mike@example.com', 'Attachment example', 'Please see attached file.', {\\n    attachments: [file.getAs(MimeType.PDF)],\\n    name: 'Automatic Emailer Script'\\n});\\n```\\n@param recipient the addresses of the recipient\\n@param subject the subject line\\n@param body the body of the email\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the newly created GmailDraft*/createDraft(recipient:string,subject:string,body:string,options:Object):GmailApp.GmailDraft;\\n/**Create a new user label of the given name.\\n\\n```\\n// Creates the label @FOO and logs label: FOO\\nLogger.log(\\\"label: \\\" + GmailApp.createLabel(\\\"FOO\\\"));\\n```\\n@param name the name of the new label\\n@return the newly created label*/createLabel(name:string):GmailApp.GmailLabel;\\n/**Deletes the specified label.\\n\\n```\\n// Have to get the label by name first\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"FOO\\\");\\nGmailApp.deleteLabel(label);\\n```\\n@param label the label to delete\\n@return the Gmail service, useful for chaining*/deleteLabel(label:GmailApp.GmailLabel):GmailApp;\\n/**Gets a list of the emails that are set up as aliases for this account in Gmail.\\n\\nYou can send a message from any of these aliases by using the \\\"from\\\" optional argument.\\n\\n```\\n// Log the aliases for this Gmail account and send an email as the first one.\\nvar me \\u003d Session.getActiveUser().getEmail();\\nvar aliases \\u003d GmailApp.getAliases();\\nLogger.log(aliases);\\nif (aliases.length \\u003e 0) {\\n  GmailApp.sendEmail(me, 'From an alias', 'A message from an alias!', {'from': aliases[0]});\\n} else {\\n  GmailApp.sendEmail(me, 'No aliases found', 'You have no aliases.');\\n}\\n```\\n@return an array of aliases for this account*/getAliases():string[];\\n/**Gets all classic Google Hangouts threads and Google Chat threads until Google switches all\\nusers of classic Hangouts to Chat later this year. To learn more, see [Learn\\nabout the switch from classic Hangouts to Google Chat](https://support.google.com/chat/answer/9854901).\\n\\nThis call fails when the size of all threads is too large for the system to handle. Where\\nthe thread size is unknown, and potentially very large, use the 'paged' call, and specify\\nranges of the threads to retrieve in each call.\\n\\n```\\nvar threads \\u003d GmailApp.getChatThreads();\\nLogger.log(\\\"# of chat threads: \\\" + threads.length);\\n```\\n@deprecated\\n@return An array of chat threads from Gmail.*/getChatThreads():GmailApp.GmailThread[];\\n/**Gets a range of classic Google Hangouts threads and Google Chat threads until Google switches\\nall users of classic Hangouts to Chat later this year. To learn more, see [Learn\\nabout the switch from classic Hangouts to Google Chat](https://support.google.com/chat/answer/9854901).\\n\\n```\\n// Get first 50 chat threads\\nvar threads \\u003d GmailApp.getChatThreads(0,50);\\n// Will log no more than 50.0\\nLogger.log(threads.length);\\nLogger.log(threads[0].getFirstMessageSubject());\\n```\\n@deprecated\\n@param start the index of the first thread to retrieve\\n@param max the maximum number of threads to retrieve\\n@return an array of chat Gmail threads*/getChatThreads(start:Integer,max:Integer):GmailApp.GmailThread[];\\n/**Retrieve an email message draft by ID.\\n\\nUse this in conjunction with getId() on Gmail drafts.\\n\\n```\\n// Get the first draft message in your drafts folder\\nvar draft \\u003d GmailApp.getDrafts()[0];\\n// Get its ID\\nvar draftId \\u003d draft.getId();\\n// Now fetch the same draft using that ID.\\nvar draftById \\u003d GmailApp.getDraft(draftId);\\n// Should always log true as they should be the same message\\nLogger.log(draft.getMessage().getSubject() \\u003d\\u003d draftById.getMessage().getSubject());\\n```\\n@param draftId the ID of the draft to retrieve\\n@return the draft with the given ID*/getDraft(draftId:string):GmailApp.GmailDraft;\\n/**Retrieves all draft messages.\\n\\n```\\n// Logs the number of draft messages\\nvar drafts \\u003d GmailApp.getDraftMessages();\\nLogger.log(drafts.length);\\n```\\n@return an array of draft Gmail messages*/getDraftMessages():GmailApp.GmailMessage[];\\n/**Gets all Gmail draft messages.\\n\\n```\\nvar drafts \\u003d GmailApp.getDrafts();\\nfor (var i \\u003d 0; i \\u003c drafts.length; i++) {\\n  Logger.log(drafts[i].getId());\\n}\\n```\\n@return an array of Gmail draft messages*/getDrafts():GmailApp.GmailDraft[];\\n/**Retrieves all Inbox threads irrespective of labels.\\n\\nThis call will fail when the size of all threads is too large for the system to handle.\\nWhere the thread size is unknown, and potentially very large, please use the 'paged' call, and\\nspecify ranges of the threads to retrieve in each call.\\n\\n```\\n// Log the subject lines of your Inbox\\nvar threads \\u003d GmailApp.getInboxThreads();\\nfor (var i \\u003d 0; i \\u003c threads.length; i++) {\\n  Logger.log(threads[i].getFirstMessageSubject());\\n}\\n```\\n@return an array of Gmail threads in the Inbox*/getInboxThreads():GmailApp.GmailThread[];\\n/**Retrieves a range of Inbox threads irrespective of labels.\\n\\n```\\n// Log the subject lines of up to the first 50 emails in your Inbox\\nvar threads \\u003d GmailApp.getInboxThreads(0, 50);\\nfor (var i \\u003d 0; i \\u003c threads.length; i++) {\\n  Logger.log(threads[i].getFirstMessageSubject());\\n}\\n```\\n@param start the index of the first thread to retrieve\\n@param max the maximum number of threads to retrieve\\n@return an array of Gmail threads in the Inbox*/getInboxThreads(start:Integer,max:Integer):GmailApp.GmailThread[];\\n/**Gets the number of unread threads in the inbox.\\n\\n```\\nLogger.log(\\\"Messages unread in inbox: \\\" + GmailApp.getInboxUnreadCount());\\n```\\n@return the number of threads in the inbox that have unread messages*/getInboxUnreadCount():Integer;\\n/**Gets a message by ID.\\n\\nUse this in conjunction with getId() on Gmail messages.\\n\\n```\\n// Get the first message in the first thread of your inbox\\nvar message \\u003d GmailApp.getInboxThreads(0, 1)[0].getMessages()[0];\\n// Get its ID\\nvar messageId \\u003d message.getId();\\n// Now fetch the same message using that ID.\\nvar messageById \\u003d GmailApp.getMessageById(messageId);\\n// Should always log true as they should be the same message\\nLogger.log(message.getSubject() \\u003d\\u003d messageById.getSubject());\\n```\\n@param id the ID of the message to retrieve\\n@return the message with the given ID*/getMessageById(id:string):GmailApp.GmailMessage;\\n/**Retrieve all messages in the specified thread.\\n\\n```\\n// Log all the subject lines in the first thread of your inbox\\nvar thread \\u003d GmailApp.getInboxThreads(0, 1)[0];\\nvar messages \\u003d GmailApp.getMessagesForThread(thread);\\nfor (var i \\u003d 0 ; i \\u003c messages.length; i++) {\\n  Logger.log(\\\"subject: \\\" + messages[i].getSubject());\\n}\\n```\\n@param thread the thread of messages to retrieve\\n@return array of messages corresponding to this thread*/getMessagesForThread(thread:GmailApp.GmailThread):GmailApp.GmailMessage[];\\n/**Retrieve all messages in the specified threads.\\n\\n```\\n// Log the subject lines of all messages in the first two threads of your inbox\\nvar thread \\u003d GmailApp.getInboxThreads(0, 2);\\nvar messages \\u003d GmailApp.getMessagesForThreads(thread);\\nfor (var i \\u003d 0 ; i \\u003c messages.length; i++) {\\n  for (var j \\u003d 0; j \\u003c messages[i].length; j++) {\\n    Logger.log(\\\"subject: \\\" + messages[i][j].getSubject());\\n  }\\n}\\n```\\n@param threads the threads of messages to retrieve\\n@return an array of arrays of messages, where each item in the outer array corresponds to a\\n    thread and the inner array contains the messages in that thread*/getMessagesForThreads(threads:GmailApp.GmailThread[]):GmailApp.GmailMessage[][];\\n/**Retrieves all Priority Inbox threads irrespective of labels.\\n\\nThis call will fail when the size of all threads is too large for the system to handle.\\nWhere the thread size is unknown, and potentially very large, please use the 'paged' call, and\\nspecify ranges of the threads to retrieve in each call.\\n\\n```\\nLogger.log(\\\"# of messages in your Priority Inbox: \\\" +\\n           GmailApp.getPriorityInboxThreads().length);\\n```\\n@return an array of Gmail threads in the Priority Inbox*/getPriorityInboxThreads():GmailApp.GmailThread[];\\n/**Retrieves a range of Priority Inbox threads irrespective of labels.\\n\\n```\\n// Will log some number 2 or less\\nLogger.log(\\\"# of messages in your Priority Inbox: \\\" +\\n           GmailApp.getPriorityInboxThreads(0, 2).length);\\n```\\n@param start the index of the first thread to retrieve\\n@param max the maximum number of threads to retrieve\\n@return an array of Gmail threads in the Priority Inbox*/getPriorityInboxThreads(start:Integer,max:Integer):GmailApp.GmailThread[];\\n/**Gets the number of unread threads in the Priority Inbox.\\n\\n```\\nLogger.log(\\\"Number of unread emails in your Priority Inbox : \\\" +\\n           GmailApp.getPriorityInboxUnreadCount());\\n```\\n@return the number of threads in the Priority Inbox that have unread messages*/getPriorityInboxUnreadCount():Integer;\\n/**Retrieves all spam threads irrespective of labels.\\n\\nThis call will fail when the size of all threads is too large for the system to handle.\\nWhere the thread size is unknown, and potentially very large, please use the 'paged' call, and\\nspecify ranges of the threads to retrieve in each call.\\n\\n```\\nLogger.log(\\\"# of total spam threads: \\\" + GmailApp.getSpamThreads().length);\\n```\\n@return an array of Gmail threads in the spam folder*/getSpamThreads():GmailApp.GmailThread[];\\n/**Retrieves a range of spam threads irrespective of labels.\\n\\n```\\n// Will log a number at most 5\\nLogger.log(\\\"# of total spam threads: \\\" + GmailApp.getSpamThreads(0, 5).length);\\n```\\n@param start the index of the first thread to retrieve\\n@param max the maximum number of threads to retrieve\\n@return an array of Gmail threads in the spam folder*/getSpamThreads(start:Integer,max:Integer):GmailApp.GmailThread[];\\n/**Gets the number of unread threads that are spam.\\n\\n```\\n// Unless you actually read stuff in your spam folder, this should be the same as\\n// the number of messages in your spam folder.\\nLogger.log(\\\"# unread threads that are spam: \\\" + GmailApp.getSpamUnreadCount());\\n```\\n@return the number spam threads that have unread messages*/getSpamUnreadCount():Integer;\\n/**Retrieves all starred threads irrespective of labels.\\n\\nThis call will fail when the size of all threads is too large for the system to handle.\\nWhere the thread size is unknown, and potentially very large, please use the 'paged' call, and\\nspecify ranges of the threads to retrieve in each call.\\n\\n```\\n// Logs the number of starred threads\\nLogger.log(\\\"# Starred threads: \\\" + GmailApp.getStarredThreads().length);\\n```\\n@return an array of starred Gmail threads*/getStarredThreads():GmailApp.GmailThread[];\\n/**Retrieves a range of starred threads irrespective of labels.\\n\\n```\\n// Logs the number of starred threads to a maximum of 5\\nLogger.log(\\\"# Starred threads: \\\" + GmailApp.getStarredThreads(0, 5).length);\\n```\\n@param start the index of the first thread to retrieve\\n@param max the maximum number of threads to retrieve\\n@return an array of starred Gmail threads*/getStarredThreads(start:Integer,max:Integer):GmailApp.GmailThread[];\\n/**Gets the number of unread threads that are starred.\\n\\n```\\nLogger.log(\\\"# unread and starred: \\\" + GmailApp.getStarredUnreadCount());\\n```\\n@return the number of starred threads that have unread messages*/getStarredUnreadCount():Integer;\\n/**Gets a thread by ID.\\n\\nUse this in conjunction with getId() on Gmail threads.\\n\\n```\\n// Gets the first inbox thread.\\nconst firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\n// Gets the same thread by ID.\\nconst threadById \\u003d GmailApp.getThreadById(firstThread.getId());\\n// Verifies that they are the same.\\nconsole.log(firstThread.getFirstMessageSubject() \\u003d\\u003d\\u003d threadById.getFirstMessageSubject());\\n```\\n@param id The ID of the thread to retrieve.\\n@return The thread with the given ID or `null` if not found.*/getThreadById(id:string):GmailApp.GmailThread;\\n/**Retrieves all trash threads irrespective of labels.\\n\\nThis call will fail when the size of all threads is too large for the system to handle.\\nWhere the thread size is unknown, and potentially very large, please use the 'paged' call, and\\nspecify ranges of the threads to retrieve in each call.\\n\\n```\\nLogger.log(\\\"# of total trash threads: \\\" + GmailApp.getTrashThreads().length);\\n```\\n@return an array of Gmail threads in the trash*/getTrashThreads():GmailApp.GmailThread[];\\n/**Retrieves a range of trash threads irrespective of labels.\\n\\n```\\n// Will log a number at most 5\\nLogger.log(\\\"# of total trash threads: \\\" + GmailApp.getTrashThreads(0, 5).length);\\n```\\n@param start the index of the first thread to retrieve\\n@param max the maximum number of threads to retrieve\\n@return an array of Gmail threads in the trash*/getTrashThreads(start:Integer,max:Integer):GmailApp.GmailThread[];\\n/**Retrieves a label given the label name.\\n\\n```\\nvar labelObject \\u003d GmailApp.getUserLabelByName(\\\"myLabel\\\");\\n```\\n@param name the name of the label to retrieve\\n@return the Gmail label with the given name*/getUserLabelByName(name:string):GmailApp.GmailLabel;\\n/**Retrieves a list of user-created labels.\\n\\n```\\n// Logs all of the names of your labels\\nvar labels \\u003d GmailApp.getUserLabels();\\nfor (var i \\u003d 0; i \\u003c labels.length; i++) {\\n  Logger.log(\\\"label: \\\" + labels[i].getName());\\n}\\n```\\n@return array of user created labels*/getUserLabels():GmailApp.GmailLabel[];\\n/**Marks this message read and forces the message to refresh.\\n\\n```\\n// Mark the first message in the first thread of your inbox as read\\nvar message \\u003d GmailApp.getInboxThreads(0, 1)[0].getMessages()[0];\\nGmailApp.markMessageRead(message);\\n```\\n@param message the message to mark as read\\n@return the Gmail service, useful for chaining*/markMessageRead(message:GmailApp.GmailMessage):GmailApp;\\n/**Marks this message unread and forces the message to refresh.\\n\\n```\\n// Mark the first message in the first thread of your inbox as unread\\nvar message \\u003d GmailApp.getInboxThreads(0, 1)[0].getMessages()[0];\\nGmailApp.markMessageUnread(message);\\n```\\n@param message the message to mark as unread\\n@return the Gmail service, useful for chaining*/markMessageUnread(message:GmailApp.GmailMessage):GmailApp;\\n/**Marks these messages read and forces the messages to refresh.\\n\\n```\\n// Mark first three messages in the first inbox thread as read.\\n// Assumes that the first inbox thread has 3 messages in it.\\nvar threadMessages \\u003d GmailApp.getInboxThreads(0, 1)[0].getMessages();\\nvar messages \\u003d [threadMessages[0], threadMessages[1], threadMessages[2]];\\nGmailApp.markMessagesRead(thread.getMessages());\\n```\\n@param messages an array of messages to mark as read\\n@return the Gmail service, useful for chaining*/markMessagesRead(messages:GmailApp.GmailMessage[]):GmailApp;\\n/**Marks these messages unread and forces the messages to refresh.\\n\\n```\\n// Mark first three messages in the first inbox thread as unread.\\n// Assumes that the first inbox thread has 3 messages in it\\nvar threadMessages \\u003d GmailApp.getInboxThreads(0, 1)[0].getMessages();\\nvar messages \\u003d [threadMessages[0], threadMessages[1], threadMessages[2]];\\nGmailApp.markMessagesUnread(thread.getMessages());\\n```\\n@param messages an array of messages to mark as unread\\n@return the Gmail service, useful for chaining*/markMessagesUnread(messages:GmailApp.GmailMessage[]):GmailApp;\\n/**Marks this thread as important and forces the thread to refresh.\\n\\n```\\n// Marks first inbox thread as important\\nvar thread \\u003d GmailApp.getInboxThreads(0, 1)[0];\\nGmailApp.markThreadImportant(thread);\\n```\\n@param thread the thread to mark as important\\n@return the Gmail service, useful for chaining*/markThreadImportant(thread:GmailApp.GmailThread):GmailApp;\\n/**Marks this thread as read and forces the thread to refresh.\\n\\n```\\n// Marks first inbox thread as read\\nvar thread \\u003d GmailApp.getInboxThreads(0, 1)[0];\\nGmailApp.markThreadRead(thread);\\n```\\n@param thread the thread to mark as read\\n@return the Gmail service, useful for chaining*/markThreadRead(thread:GmailApp.GmailThread):GmailApp;\\n/**Marks this thread as unimportant and forces the thread to refresh.\\n\\n```\\n// Marks first inbox thread as unimportant\\nvar thread \\u003d GmailApp.getInboxThreads(0, 1)[0];\\nGmailApp.markThreadUnimportant(thread);\\n```\\n@param thread the thread to mark as unimportant\\n@return the Gmail service, useful for chaining*/markThreadUnimportant(thread:GmailApp.GmailThread):GmailApp;\\n/**Marks this thread unread and forces the thread to refresh.\\n\\n```\\n// Marks first inbox thread as unread\\nvar thread \\u003d GmailApp.getInboxThreads(0, 1)[0];\\nGmailApp.markThreadUnread(thread);\\n```\\n@param thread the thread to mark as unread\\n@return the Gmail service, useful for chaining*/markThreadUnread(thread:GmailApp.GmailThread):GmailApp;\\n/**Marks these threads as important and forces the threads to refresh.\\n\\n```\\n// Marks first two threads in inbox as important\\nvar threads \\u003d GmailApp.getInboxThreads(0, 2);\\nGmailApp.markThreadsImportant(threads);\\n```\\n@param threads an array of threads to mark as important\\n@return the Gmail service, useful for chaining*/markThreadsImportant(threads:GmailApp.GmailThread[]):GmailApp;\\n/**Marks these threads as read and forces the threads to refresh.\\n\\n```\\n// Marks first two threads in inbox as read\\nvar threads \\u003d GmailApp.getInboxThreads(0, 2);\\nGmailApp.markThreadsRead(threads);\\n```\\n@param threads an array of threads to mark as read\\n@return the Gmail service, useful for chaining*/markThreadsRead(threads:GmailApp.GmailThread[]):GmailApp;\\n/**Marks these threads as unimportant and forces the threads to refresh.\\n\\n```\\n// Marks first two threads in inbox as unimportant\\nvar threads \\u003d GmailApp.getInboxThreads(0, 2);\\nGmailApp.markThreadsUnimportant(threads);\\n```\\n@param threads an array of threads to mark as unimportant\\n@return the Gmail service, useful for chaining*/markThreadsUnimportant(threads:GmailApp.GmailThread[]):GmailApp;\\n/**Marks these threads as unread and forces the threads to refresh.\\n\\n```\\n// Marks first two threads in inbox as unread\\nvar threads \\u003d GmailApp.getInboxThreads(0, 2);\\nGmailApp.markThreadsUnread(threads);\\n```\\n@param threads an array of threads to mark as unread\\n@return the Gmail service, useful for chaining*/markThreadsUnread(threads:GmailApp.GmailThread[]):GmailApp;\\n/**Moves the message to the trash and forces the message to refresh.\\n\\n```\\n// Move the first message in your inbox to trash\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar firstMessage \\u003d firstThread.getMessages()[0];\\nGmailApp.moveMessageToTrash(firstMessage);\\n```\\n@param message the message to be trashed\\n@return the Gmail service (useful for chaining)*/moveMessageToTrash(message:GmailApp.GmailMessage):GmailApp;\\n/**Moves the specified messages to the trash and forces the messages to refresh.\\n\\n```\\n// Move first two messages in your inbox to trash\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar messages \\u003d firstThread.getMessages();\\nvar toDelete \\u003d [messages[0], messages[1]];\\nGmailApp.moveMessagesToTrash(toDelete);\\n```\\n@param messages the messages to be trashed\\n@return the Gmail service (useful for chaining)*/moveMessagesToTrash(messages:GmailApp.GmailMessage[]):GmailApp;\\n/**Moves this thread to the archive and forces the thread to refresh.\\n\\n```\\n// Archive the first thread in your inbox\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nGmailApp.moveThreadToArchive(firstThread);\\n```\\n@param thread the thread to be archive\\n@return the Gmail service, useful for chaining*/moveThreadToArchive(thread:GmailApp.GmailThread):GmailApp;\\n/**Moves this thread to the inbox and forces the thread to refresh.\\n\\n```\\n// Find a thread not already in your inbox\\nvar thread \\u003d GmailApp.search(\\\"-in:inbox\\\")[0]; // Get the first one\\nGmailApp.moveThreadToInbox(thread);\\n```\\n@param thread the thread to be moved to the inbox\\n@return the Gmail service, useful for chaining*/moveThreadToInbox(thread:GmailApp.GmailThread):GmailApp;\\n/**Moves this thread to spam and forces the thread to refresh.\\n\\n```\\n// Tag first thread in inbox as spam\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nGmailApp.moveThreadToSpam(firstThread);\\n```\\n@param thread the thread to be moved to spam\\n@return the Gmail service, useful for chaining*/moveThreadToSpam(thread:GmailApp.GmailThread):GmailApp;\\n/**Moves this thread to the trash and forces the thread to refresh.\\n\\n```\\n// Move first thread in inbox to trash\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nGmailApp.moveThreadToTrash(firstThread);\\n```\\n@param thread the thread to be trashed\\n@return the Gmail service, useful for chaining*/moveThreadToTrash(thread:GmailApp.GmailThread):GmailApp;\\n/**Moves these threads to the archive and forces the threads to refresh.\\n\\n```\\n// Move first two threads in your inbox to the archive\\nvar firstTwoThreads \\u003d GmailApp.getInboxThreads(0,2);\\nGmailApp.moveThreadsToArchive(firstTwoThreads);\\n```\\n@param threads an array of threads to be archived\\n@return the Gmail service, useful for chaining*/moveThreadsToArchive(threads:GmailApp.GmailThread[]):GmailApp;\\n/**Moves these threads to the inbox and forces the threads to refresh.\\n\\n```\\n// Find two threads not already in your inbox\\nvar firstTwoThreads \\u003d GmailApp.search(\\\"-in:inbox\\\", 0, 2);\\nGmailApp.moveThreadsToInbox(firstTwoThreads);\\n```\\n@param threads an array of threads to be moved to the inbox\\n@return the Gmail service, useful for chaining*/moveThreadsToInbox(threads:GmailApp.GmailThread[]):GmailApp;\\n/**Moves these threads to spam and forces the threads to refresh.\\n\\n```\\n// Move first two threads in your inbox to spam\\nvar firstTwoThreads \\u003d GmailApp.getInboxThreads(0,2);\\nGmailApp.moveThreadsToSpam(firstTwoThreads);\\n```\\n@param threads an array of threads to be moved to spam\\n@return the Gmail service, useful for chaining*/moveThreadsToSpam(threads:GmailApp.GmailThread[]):GmailApp;\\n/**Moves these threads to the trash and forces the threads to refresh.\\n\\n```\\n// Move first two threads in your inbox to trash\\nvar firstTwoThreads \\u003d GmailApp.getInboxThreads(0,2);\\nGmailApp.moveThreadsToTrash(firstTwoThreads);\\n```\\n@param threads an array of threads to be trashed\\n@return the Gmail service, useful for chaining*/moveThreadsToTrash(threads:GmailApp.GmailThread[]):GmailApp;\\n/**Reloads the message and associated state from Gmail (useful in case the labels, read state,\\netc., have changed).\\n\\n```\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar firstMessage \\u003d firstThread.getMessages()[0];\\n// ...Do something that may take a while here....\\nGmailApp.refreshMessage(firstMessage);\\n// ...Do more stuff with firstMessage...\\n```\\n@param message the message to be refreshed\\n@return the Gmail service, useful for chaining*/refreshMessage(message:GmailApp.GmailMessage):GmailApp;\\n/**Reloads the messages and associated state from Gmail (useful in case the labels, read state,\\netc., have changed).\\n\\n```\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar coupleOfMessages \\u003d firstThread.getMessages().slice(0, 2);\\n// ...Do something that may take a while here....\\nGmailApp.refreshMessages(coupleOfMessages);\\n// ...Do more stuff with coupleOfMessages...\\n```\\n@param messages the messages to be refreshed\\n@return the Gmail service, useful for chaining*/refreshMessages(messages:GmailApp.GmailMessage[]):GmailApp;\\n/**Reloads the thread and associated state from Gmail (useful in case the labels, read state,\\netc., have changed).\\n\\n```\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\n// ...Do something that may take a while here....\\nGmailApp.refreshThread(firstThread);\\n// ... Do more stuff with the thread ...\\n```\\n@param thread the thread to be refreshed\\n@return the Gmail service, useful for chaining*/refreshThread(thread:GmailApp.GmailThread):GmailApp;\\n/**Reloads the threads and associated state from Gmail (useful in case the labels, read state,\\netc., have changed).\\n\\n```\\nvar threads \\u003d GmailApp.getInboxThreads(0, 3);\\n// ...Do something that may take a while here....\\nGmailApp.refreshThreads(threads);\\n// ... Do more stuff with threads ...\\n```\\n@param threads the threads to be refreshed\\n@return the Gmail service, useful for chaining*/refreshThreads(threads:GmailApp.GmailThread[]):GmailApp;\\n/**Search Gmail with the given query.\\n\\nThis call will fail when the size of all threads is too large for the system to handle.\\nWhere the thread size is unknown, and potentially very large, please use the 'paged' call, and\\nspecify ranges of the threads to retrieve in each call.\\n\\n```\\n// Find starred messages with subject IMPORTANT\\nvar threads \\u003d GmailApp.search('is:starred subject:\\\"IMPORTANT\\\"');\\n```\\n@param query the search query, as you would type it into Gmail\\n@return an array of Gmail threads matching this query*/search(query:string):GmailApp.GmailThread[];\\n/**Search Gmail with the given query.\\n\\n```\\n// Find starred messages with subject IMPORTANT and return second batch of 10.\\n// Assumes there are at least 11 of them, otherwise this will return an empty array.\\nvar threads \\u003d GmailApp.search('is:starred subject:\\\"IMPORTANT\\\"', 10, 10);\\n```\\n@param query the search query, as you would type it into Gmail\\n@param start the index of the starting thread\\n@param max the maximum number of threads to return\\n@return an array of Gmail threads matching this query*/search(query:string,start:Integer,max:Integer):GmailApp.GmailThread[];\\n/**Sends an email message. The size of the email (including headers) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// The code below will send an email with the current date and time.\\nvar now \\u003d new Date();\\nGmailApp.sendEmail(\\\"mike@example.com\\\", \\\"current time\\\", \\\"The time is: \\\" + now.toString());\\n```\\n@param recipient comma separated list of email addresses\\n@param subject subject of the email (250 characters maximum)\\n@param body body of the email\\n@return the Gmail service, useful for chaining*/sendEmail(recipient:string,subject:string,body:string):GmailApp;\\n/**Sends an email message with optional arguments. The email can contain plain text or an HTML\\nbody. The size of the email (including headers, but excluding attachments) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Send an email with a file from Google Drive attached as a PDF.\\nvar file \\u003d DriveApp.getFileById('1234567890abcdefghijklmnopqrstuvwxyz');\\nGmailApp.sendEmail('mike@example.com', 'Attachment example', 'Please see the attached file.', {\\n    attachments: [file.getAs(MimeType.PDF)],\\n    name: 'Automatic Emailer Script'\\n});\\n```\\n@param recipient the addresses of the recipient\\n@param subject the subject line (250 characters maximum)\\n@param body the body of the email\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the Gmail service, useful for chaining*/sendEmail(recipient:string,subject:string,body:string,options:Object):GmailApp;\\n/**Sets the [current message\\naccess token](/workspace/add-ons/concepts/gsuite-scopes#access_tokens) that enables the script to access the current [`GmailMessage`](https://developers.google.com/apps-script/reference/gmail/gmail-message.html) properties.\\n\\nOnly [Google Workspace Add-on](/workspace/add-ons/gmail) projects using Gmail [current message scopes](/workspace/add-ons/concepts/gsuite-scopes#gmail_add-on_scopes)\\nrequire this method.\\n\\n```\\nfunction handleAddonActionEvent(e) {\\n  var accessToken \\u003d e.messageMetadata.accessToken;\\n  var messageId \\u003d e.messageMetadata.messageId;\\n  GmailApp.setCurrentMessageAccessToken(accessToken);\\n  var mailMessage \\u003d GmailApp.getMessageById(messageId);\\n  // Do something with mailMessage\\n}\\n```\\n@param accessToken the temporary access token obtained from a Gmail add-on [action event object](/gmail/add-ons/concepts/actions#action_event_objects).*/setCurrentMessageAccessToken(accessToken:string):void;\\n/**Adds a star to this message and forces the message to refresh.\\n\\n```\\n// Stars the first message in the first thread in your inbox\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nGmailApp.starMessage(message);\\n```\\n@param message the message to star\\n@return the Gmail service, useful for chaining*/starMessage(message:GmailApp.GmailMessage):GmailApp;\\n/**Adds stars to these messages and forces the messages to refresh.\\n\\n```\\n// Stars the first three messages in the first thread in your inbox\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar coupleOfMessages \\u003d firstThread.getMessages().slice(0, 3);\\nGmailApp.starMessages(coupleOfMessages);\\n```\\n@param messages an array of messages to star\\n@return the Gmail service, useful for chaining*/starMessages(messages:GmailApp.GmailMessage[]):GmailApp;\\n/**Removes a star from this message and forces the message to refresh.\\n\\n```\\n// Unstars the first message in the first thread in your inbox\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nGmailApp.unstarMessage(message);\\n```\\n@param message the message to unstar\\n@return the Gmail service, useful for chaining*/unstarMessage(message:GmailApp.GmailMessage):GmailApp;\\n/**Removes stars from these messages and forces the messages to refresh.\\n\\n```\\n// Unstars the first three messages in the first thread in your inbox\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar coupleOfMessages \\u003d firstThread.getMessages().slice(0, 3);\\nGmailApp.unstarMessages(coupleOfMessages);\\n```\\n@param messages an array of messages to unstar\\n@return the Gmail service, useful for chaining*/unstarMessages(messages:GmailApp.GmailMessage[]):GmailApp;}module GmailApp{interface GmailThread{\\n/**Adds this label to the thread.\\n\\n```\\n// Add label MyLabel to the first thread in the inbox\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"MyLabel\\\");\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.addLabel(label);\\n```\\n@param label the label to apply to this thread\\n@return this thread, useful for chaining*/addLabel(label:GmailApp.GmailLabel):GmailApp.GmailThread;\\n/**Creates a draft message replying to the sender of the last message in this thread using the\\nreply-to address. The size of the email (including headers) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Create a draft reply to the message author with an acknowledgement.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.createDraftReply(\\\"Got your message\\\");\\n```\\n@param body the body of the email\\n@return the newly created draft message*/createDraftReply(body:string):GmailApp.GmailDraft;\\n/**Creates a draft message replying to the sender of the last message in this thread using the\\nreply-to address, with optional arguments.\\n\\nThe email can contain both plain text and an HTML body. The size of the email (including\\nheaders) is [quota\\nlimited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Create a draft response with an HTML text body.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.createDraftReply(\\\"incapable of HTML\\\", {\\n  htmlBody: \\\"\\u003cb\\u003esome HTML body text\\u003c/b\\u003e\\\",\\n  cc: \\\"another@example.com\\\"\\n});\\n```\\n@param body the body of the email\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the newly created draft message*/createDraftReply(body:string,options:Object):GmailApp.GmailDraft;\\n/**Creates a draft message replying to the sender of the last message in this thread, using the\\nreply-to address and all recipients of this message. The size of the email (including headers)\\nis [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Create a draft reply to all recipients (except those bcc'd) of the last email in this\\n// thread.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessage.createDraftReplyAll(\\\"Got your message\\\");\\n```\\n@param body the body of the email\\n@return the newly created draft message*/createDraftReplyAll(body:string):GmailApp.GmailDraft;\\n/**Creates a draft message replying to the sender of the last message in this thread, using the\\nreply-to address and all recipients, with optional arguments.\\n\\nThe email can contain both plain text and an HTML body. The size of the email (including\\nheaders) is [quota\\nlimited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Create a draft reply, using an HTML text body, to all recipients (except those bcc'd) of\\n// the last email of in this thread.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.createDraftReplyAll(\\\"incapable of HTML\\\", {\\n  htmlBody: \\\"\\u003cb\\u003esome HTML body text\\u003c/b\\u003e\\\",\\n  cc: \\\"another@example.com\\\"\\n});\\n```\\n@param body the body of the email\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the newly created draft message*/createDraftReplyAll(body:string,options:Object):GmailApp.GmailDraft;\\n/**Gets the subject of the first message in the thread.\\n\\n```\\n// Log the subject of the first message in the first thread in the inbox\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log(firstThread.getFirstMessageSubject());\\n```\\n@return the subject of the first message in the thread*/getFirstMessageSubject():string;\\n/**Gets the ID of this thread. The ID of a thread varies based on the messages it contains; for a\\nconsistent ID for a particular message in the thread, call `getMessages()[0].getId()`\\ninstead.\\n\\n```\\n// Log the subject of the first message in the first thread in the inbox.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar id \\u003d firstThread.getId();\\n// Get same thread by its ID.\\nvar thread \\u003d GmailApp.getThreadById(id);\\nLogger.log(thread.getFirstMessageSubject() \\u003d\\u003d firstThread.getFirstMessageSubject()); // True\\n```\\n@return the ID of this thread*/getId():string;\\n/**Returns the user-created labels on this thread.\\n\\n```\\n// Log the names of the labels attached to the first thread in the inbox\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar labels \\u003d firstThread.getLabels();\\nfor (var i \\u003d 0; i \\u003c labels.length; i++) {\\n  Logger.log(labels[i].getName());\\n}\\n```\\n@return an array of labels for this thread*/getLabels():GmailApp.GmailLabel[];\\n/**Gets the date of this thread's most recent message.\\n\\n```\\n// Log the date of the most recent message on the first thread in the inbox\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log(firstThread.getLastMessageDate());\\n```\\n@return the date of the most recent message in the thread*/getLastMessageDate():Date;\\n/**Returns the number of messages in the thread.\\n\\n```\\n// Log the number of messages in the thread\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log(firstThread.getMessageCount());\\n```\\n@return the number of messages in the thread*/getMessageCount():Integer;\\n/**Gets the messages in this thread.\\n\\n```\\n// Log the subjects of the messages in the thread\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar messages \\u003d firstThread.getMessages();\\nfor (var i \\u003d 0; i \\u003c messages.length; i++) {\\n  Logger.log(messages[i].getSubject());\\n}\\n```\\n@return an array of Gmail messages in this thread*/getMessages():GmailApp.GmailMessage[];\\n/**Gets a permalink for this thread.\\n\\nNote that this only works with the classic Gmail interface, not Inbox.\\n\\n```\\n// Logs the permalink for the first thread in the inbox\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log(thread.getPermalink());\\n```\\n@return the permalink for this thread*/getPermalink():string;\\n/**Returns whether the thread has any starred messages.\\n\\n```\\n// Log if this thread has starred messages\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log('has starred : ' + firstThread.hasStarredMessages());\\n```\\n@return true if the thread has any starred messages*/hasStarredMessages():boolean;\\n/**Returns whether the thread is marked as important.\\n\\n```\\n// Log if this thread is marked as important\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log('Important? : ' + firstThread.isImportant());\\n```\\n@return Whether the thread is marked as important.*/isImportant():boolean;\\n/**Returns whether the thread is labeled a chat.\\n\\n```\\n// Log if this thread is a chat\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log('is in chats? : ' + firstThread.isInChats());\\n```\\n@return true if the thread is labeled a chat*/isInChats():boolean;\\n/**Returns whether the thread is in the inbox.\\n\\n```\\n// Log if this thread is in the inbox\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log('is in the inbox? : ' + firstThread.isInInbox());\\n```\\n@return true if the thread is in the inbox*/isInInbox():boolean;\\n/**Returns true if this thread is in the priority inbox; returns false otherwise.\\n\\n```\\n// Log if this thread is in the priority inbox\\nvar firstThread \\u003d GmailApp.getPriorityInboxThreads(0,1)[0];\\nLogger.log(\\\"is in priority inbox? \\\" + firstThread.isInPriorityInbox());\\n```\\n@return true if the thread is in the priority inbox*/isInPriorityInbox():boolean;\\n/**Returns whether the thread is marked as spam.\\n\\n```\\n// Log if this thread is in the spam folder\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log('Spam? ' + firstThread.isInSpam());\\n```\\n@return Whether this thread is marked as spam.*/isInSpam():boolean;\\n/**Returns whether the thread is in the trash.\\n\\n```\\n// Log if this thread is in the trash\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log('Trashed? ' + firstThread.isInTrash());\\n```\\n@return true if the thread is in the trash*/isInTrash():boolean;\\n/**Returns whether the thread has any unread messages.\\n\\n```\\n// Log if this thread is unread\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nLogger.log('Unread? ' + firstThread.isUnread());\\n```\\n@return true if there are unread messages*/isUnread():boolean;\\n/**Marks this thread as important.\\n\\n```\\n// Mark first inbox thread as important\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.markImportant();\\n```\\n@return this thread, useful for chaining*/markImportant():GmailApp.GmailThread;\\n/**Marks this thread as read.\\n\\n```\\n// Mark first inbox thread as read\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.markRead();\\n```\\n@return this thread, useful for chaining*/markRead():GmailApp.GmailThread;\\n/**Marks this thread as unimportant.\\n\\n```\\n// Mark first inbox thread as unimportant\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.markUnimportant();\\n```\\n@return this thread, useful for chaining*/markUnimportant():GmailApp.GmailThread;\\n/**Marks this thread as unread.\\n\\n```\\n// Mark first inbox thread as unread\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.markUnread();\\n```\\n@return this thread, useful for chaining*/markUnread():GmailApp.GmailThread;\\n/**Moves this thread to the archive.\\n\\n```\\n// Archive first inbox thread\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.moveToArchive();\\n```\\n@return this thread, useful for chaining*/moveToArchive():GmailApp.GmailThread;\\n/**Moves this thread to the inbox.\\n\\n```\\n// Move first non-inbox thread to inbox\\nvar firstThread \\u003d GmailApp.search(\\\"-in:inbox\\\")[0];\\nfirstThread.moveToInbox();\\n```\\n@return this thread, useful for chaining*/moveToInbox():GmailApp.GmailThread;\\n/**Moves this thread to spam.\\n\\n```\\n// Move first inbox thread to spam\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.moveToSpam();\\n```\\n@return this thread, useful for chaining*/moveToSpam():GmailApp.GmailThread;\\n/**Moves this thread to the trash.\\n\\n```\\n// Move first inbox thread to trash\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.moveToTrash();\\n```\\n@return this thread, useful for chaining*/moveToTrash():GmailApp.GmailThread;\\n/**Reloads this thread, and associated state from Gmail (useful in case the labels, read state,\\netc., have changed).\\n\\n```\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\n// ...Do something that may take a while here....\\nfirstThread.refresh(); // Make sure it's up-to-date\\n// ...Do more stuff with firstThread ...\\n```\\n@return this thread, useful for chaining*/refresh():GmailApp.GmailThread;\\n/**Removes this label from the thread.\\n\\n```\\nvar myLabel \\u003d GmailApp.getUserLabelByName('\\u003cyour label\\u003e');\\nvar threads \\u003d myLabel.getThreads();\\nfor (var x in threads) {\\n  var thread \\u003d threads[x];\\n  thread.removeLabel(myLabel);\\n}\\n```\\n@param label the label to remove from this thread\\n@return this thread, useful for chaining*/removeLabel(label:GmailApp.GmailLabel):GmailApp.GmailThread;\\n/**Reply to the sender of the last message on this thread using the replyTo address.\\n\\nNote that the total size of the email (including all headers) may not exceed 20KB.\\n\\n```\\n// Respond to author of last email in thread with acknowledgment\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.reply(\\\"Got your message\\\");\\n```\\n@param body the body of the email\\n@return this thread, useful for chaining*/reply(body:string):GmailApp.GmailThread;\\n/**Reply to the sender of the last message on this thread using the replyTo address, with optional\\narguments. The email can contain both plain text, and also an HTML body. Note that the total\\nsize of the email (including all headers, but excluding attachments) may not exceed 20KB.\\n\\n```\\n// Respond with HTML body text.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.reply(\\\"incapable of HTML\\\", {\\n  htmlBody: \\\"some HTML body text\\\",\\n  noReply: true\\n});\\n```\\n@param body the body of the email\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return this thread, useful for chaining*/reply(body:string,options:Object):GmailApp.GmailThread;\\n/**Reply to the sender (using the replyTo address), and all recipients of the last message on this\\nthread.\\n\\nNote that the total size of the email (including all headers) may not exceed 20KB.\\n\\n```\\n// Respond to all with acknowledgment to the first thread in the inbox\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.replyAll(\\\"Got your message\\\");\\n```\\n@param body the body of the email\\n@return this thread, useful for chaining*/replyAll(body:string):GmailApp.GmailThread;\\n/**Reply to the sender (using the `replyTo` address), and all recipients of the last message\\non this thread, with optional arguments. The email can contain both plain text, and also an\\nHTML body. Note that the total size of the email (including all headers, but excluding\\nattachments) may not exceed 20KB.\\n\\n```\\n// Respond with HTML body text.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nfirstThread.replyAll(\\\"incapable of HTML\\\", {\\n  htmlBody: \\\"some HTML body text\\\",\\n  noReply: true\\n});\\n```\\n@param body the body of the email\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return this thread, useful for chaining*/replyAll(body:string,options:Object):GmailApp.GmailThread;}interface GmailMessage{\\n/**Creates a draft message replying to the sender of this message using the reply-to address. The\\nsize of the email (including headers) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Create a draft reply to the original message with an acknowledgment.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessage.createDraftReply(\\\"Got your message\\\");\\n```\\n@param body The body of the email.\\n@return The newly created draft message.*/createDraftReply(body:string):GmailApp.GmailDraft;\\n/**Creates a draft message replying to the sender of this message using the reply-to address, with\\noptional arguments.\\n\\nThe email can contain both plain text and an HTML body. The size of the email (including\\nheaders) is [quota\\nlimited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Create a draft response with an HTML text body.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessage.createDraftReply(\\\"incapable of HTML\\\", {\\n  htmlBody: \\\"\\u003cb\\u003esome HTML body text\\u003c/b\\u003e\\\",\\n  cc: \\\"another@example.com\\\"\\n});\\n```\\n@param body The body of the email.\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return The newly created draft message.*/createDraftReply(body:string,options:Object):GmailApp.GmailDraft;\\n/**Creates a draft message replying to the sender using the reply-to address and all recipients of\\nthis message. The size of the email (including headers) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Create a draft response to all recipients (except those bcc'd) with an acknowledgment.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessage.createDraftReplyAll(\\\"Got your message\\\");\\n```\\n@param body The body of the email.\\n@return The newly created draft message.*/createDraftReplyAll(body:string):GmailApp.GmailDraft;\\n/**Creates a draft message replying to the sender of this message using the reply-to address and\\nall recipients, with optional arguments.\\n\\nThe email can contain both plain text and an HTML body. The size of the email (including\\nheaders) is [quota\\nlimited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Create a draft response to all recipients (except those bcc'd) using an HTML text body.\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessage.createDraftReplyAll(\\\"incapable of HTML\\\", {\\n  htmlBody: \\\"\\u003cb\\u003esome HTML body text\\u003c/b\\u003e\\\",\\n  cc: \\\"another@example.com\\\"\\n});\\n```\\n@param body The body of the email.\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return The newly created draft message.*/createDraftReplyAll(body:string,options:Object):GmailApp.GmailDraft;\\n/**Forwards this message to new recipients. The size of the email (including headers) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Forward first message of first inbox thread to recipient1 \\u0026 recipient2, both @example.com\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessage.forward(\\\"recipient1@example.com,recipient2@example.com\\\");\\n```\\n@param recipient A comma-separated list of email addresses.\\n@return This message, useful for chaining.*/forward(recipient:string):GmailApp.GmailMessage;\\n/**Forwards this message to new recipients, with optional arguments.\\n\\nThe email can contain both plain text, and also an HTML body. The size of the email\\n(including headers) is [quota\\nlimited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessage.forward(\\\"recipient1@example.com,recipient2@example.com\\\", {\\n  cc: \\\"myboss@example.com\\\",\\n  bcc: \\\"mybosses-boss@example.com,vp@example.com\\\"\\n});\\n```\\n@param recipient A comma-separated list of email addresses.\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return This message, useful for chaining.*/forward(recipient:string,options:Object):GmailApp.GmailMessage;\\n/**Gets all the attachments for this message.\\n@return An array of Blob attachments for this message.*/getAttachments():GmailApp.GmailAttachment[];\\n/**Gets all the attachments for this message.\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return An array of Blob attachments for this message.*/getAttachments(options:Object):GmailApp.GmailAttachment[];\\n/**Gets the comma-separated recipients bcc'd on this message.\\n\\nThis is empty for all received messages, by definition.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(message.getBcc()); // Log bcc'd addresses\\n```\\n@return The comma-separated recipients bcc'd on this message.*/getBcc():string;\\n/**Gets the HTML content of the body of this message.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(message.getBody()); // Log contents of the body\\n```\\n@return The body content of this message.*/getBody():string;\\n/**Gets the comma-separated recipients cc'd on this message.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(message.getCc()); // Log cc'd addresses\\n```\\n@return The comma-separated recipients cc'd on this message.*/getCc():string;\\n/**Gets the date and time of this message.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(message.getDate()); // Log date and time of the message\\n```\\n@return The date and time of this message.*/getDate():Date;\\n/**Gets the sender of this message.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(message.getFrom()); // Log from address of the message\\n```\\n@return The email address of the message sender.*/getFrom():string;\\n/**Gets the value of an RFC 2822 header given the header name.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox.\\nvar message \\u003d thread.getMessages()[0];         // Get the first message.\\nLogger.log(message.getHeader(\\\"Message-ID\\\"));   // Logs the Message-ID RFC 2822 header.\\n```\\n@param name The name of the RFC header, without the colon separating it from the value.\\n@return The value of the header, or an empty string if the header doesn't exist in the message.*/getHeader(name:string):string;\\n/**Gets the ID of this message.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nvar id \\u003d message.getId();\\nvar messageById \\u003d GmailApp.getMessageById(id);\\nLogger.log(message.getSubject() \\u003d\\u003d messageById.getMessage()); // Always logs true\\n```\\n@return The message ID.*/getId():string;\\n/**Gets the content of the body of this message without HTML formatting. This is more complex than\\n`getBody()` and takes longer.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(message.getPlainBody()); // Log contents of the body\\n```\\n@return The plain body content of this message.*/getPlainBody():string;\\n/**Gets the raw content of this message. This is equivalent to \\\"Show Original\\\" in the Gmail UI.\\n@return The raw content of this message.*/getRawContent():string;\\n/**Gets the reply-to address of this message (usually the sender).\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(message.getReplyTo()); // Logs reply-to address\\n```\\n@return The email address for replies.*/getReplyTo():string;\\n/**Gets the subject of this message.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(message.getSubject()); // Log subject line\\n```\\n@return The subject of this message.*/getSubject():string;\\n/**Gets the thread that contains this message.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(message.getThread().getFirstMessageSubject() \\u003d\\u003d\\n           thread.getFirstMessageSubject()); // Always logs true\\n```\\n@return The GmailThread that contains this message.*/getThread():GmailApp.GmailThread;\\n/**Gets the comma-separated recipients of this message.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(message.getTo()); // Log the recipient of message\\n```\\n@return The comma-separated recipients of this message.*/getTo():string;\\n/**Gets whether this message is a draft.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(\\\"is draft? \\\" + message.isDraft());\\n```\\n@return Whether this message is a draft.*/isDraft():boolean;\\n/**Gets whether this message is a chat.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(\\\"is a chat? \\\" + message.isInChats());\\n```\\n@return Whether this message is a chat.*/isInChats():boolean;\\n/**Gets whether this message is in the inbox.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(\\\"is in inbox? \\\" + message.isInInbox());\\n```\\n@return Whether this message is in the inbox.*/isInInbox():boolean;\\n/**Returns `true` if this message is in the priority inbox; returns `false` otherwise.\\n\\n```\\nvar thread \\u003d GmailApp.getPriorityInboxThreads(0,1)[0]; // Get first thread in priority inbox\\nvar messages \\u003d thread.getMessages();\\nfor (var i \\u003d 0; i \\u003c messages.length; i++) {\\n  // At least one of the messages is in priority inbox\\n  Logger.log(\\\"is in priority inbox? \\\" + messages[i].isInPriorityInbox());\\n}\\n```\\n@return Whether this message is in the priority inbox.*/isInPriorityInbox():boolean;\\n/**Gets whether this message is in the trash.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(\\\"is in the trash? \\\" + message.isInTrash());\\n```\\n@return Whether this message is in the trash.*/isInTrash():boolean;\\n/**Gets whether this message is starred.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(\\\"is starred? \\\" + message.isStarred());\\n```\\n@return Whether this message is starred.*/isStarred():boolean;\\n/**Gets whether this message is unread.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nLogger.log(\\\"is unread? \\\" + message.isUnread());\\n```\\n@return The unread status of this message.*/isUnread():boolean;\\n/**Marks the message as read.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nmessage.markRead(); // Mark as read\\n```\\n@return This GmailMessage, useful for chaining.*/markRead():GmailApp.GmailMessage;\\n/**Marks the message as unread.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nmessage.markUnread(); // Mark as unread\\n```\\n@return This GmailMessage, useful for chaining.*/markUnread():GmailApp.GmailMessage;\\n/**Moves the message to the trash.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nmessage.moveToTrash(); // Move message to trash\\n```\\n@return This GmailMessage, useful for chaining.*/moveToTrash():GmailApp.GmailMessage;\\n/**Reloads this message and associated state from Gmail (useful in case the labels, read state,\\netc., have changed).\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\n// .. Do bunch of stuff here\\nmessage.refresh(); // Make sure it's up to date\\n// Do more stuff to message\\n```\\n@return This message for chaining.*/refresh():GmailApp.GmailMessage;\\n/**Replies to the sender of this message using the reply-to address. The size of the email\\n(including headers) is [quota\\nlimited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Respond to author of message with acknowledgment\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessage.reply(\\\"Got your message\\\");\\n```\\n@param body The body of the email.\\n@return This message, useful for chaining.*/reply(body:string):GmailApp.GmailMessage;\\n/**Replies to the sender of this message using the reply-to address, with optional arguments.\\n\\nThe email can contain both plain text, and also an HTML body. The size of the email\\n(including headers) is [quota\\nlimited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Respond with HTML body text\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessage.reply(\\\"incapable of HTML\\\", {\\n  htmlBody: \\\"\\u003cb\\u003esome HTML body text\\u003c/b\\u003e\\\",\\n  noReply: true\\n});\\n```\\n@param body The body of the email.\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return This message, useful for chaining.*/reply(body:string,options:Object):GmailApp.GmailMessage;\\n/**Replies to the sender using the reply-to address and all recipients of this message. The size\\nof the email (including headers) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Respond to all recipients (except bcc'd) of last email in thread with acknowledgment\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessage.replyAll(\\\"Got your message\\\");\\n```\\n@param body The body of the email.\\n@return This message,useful for chaining.*/replyAll(body:string):GmailApp.GmailMessage;\\n/**Replies to the sender of this message using the reply-to address and all recipients, with\\noptional arguments.\\n\\nThe email can contain both plain text, and also an HTML body. The size of the email\\n(including headers) is [quota\\nlimited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Respond with HTML body text\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nvar message \\u003d firstThread.getMessages()[0];\\nmessageThread.replyAll(\\\"incapable of HTML\\\", {\\n  htmlBody: \\\"\\u003cb\\u003esome HTML body text\\u003c/b\\u003e\\\",\\n  noReply: true\\n});\\n```\\n@param body The body of the email.\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return This message, useful for chaining.*/replyAll(body:string,options:Object):GmailApp.GmailMessage;\\n/**Stars the message.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nmessage.star(); // Star the message\\n```\\n@return This GmailMessage, useful for chaining.*/star():GmailApp.GmailMessage;\\n/**Unstars the message.\\n\\n```\\nvar thread \\u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\\nvar message \\u003d thread.getMessages()[0]; // Get first message\\nmessage.unstar(); // Unstar the message\\n```\\n@return This GmailMessage, useful for chaining.*/unstar():GmailApp.GmailMessage;}interface GmailLabel{\\n/**Adds this label to the given thread and forces the thread to refresh ([`GmailThread.refresh()`](https://developers.google.com/apps-script/reference/gmail/gmail-thread.html#refresh())).\\n\\n```\\n// label the first thread in the inbox with the label MyLabel\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"MyLabel\\\");\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nlabel.addToThread(firstThread);\\n```\\n@param thread The thread to be labeled.\\n@return This label, for chaining.*/addToThread(thread:GmailApp.GmailThread):GmailApp.GmailLabel;\\n/**Adds this label to the given threads and forces the threads to refresh. You can add labels for\\nup to 100 threads per batch.\\n\\n```\\n// label the first three threads in the inbox with the label MyLabel\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"MyLabel\\\");\\nvar threads \\u003d GmailApp.getInboxThreads(0,3);\\nlabel.addToThreads(threads);\\n```\\n@param threads An array of threads to be labeled.\\n@return This label, for chaining.*/addToThreads(threads:GmailApp.GmailThread[]):GmailApp.GmailLabel;\\n/**Deletes this label.\\n\\n```\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"MyLabel\\\");\\nlabel.deleteLabel();\\n```*/deleteLabel():void;\\n/**Gets the name of this label.\\n\\n```\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"MyLabel\\\");\\nLogger.log(label.getName()); //logs MyLabel\\n```\\n@return The name of the label.*/getName():string;\\n/**Gets the threads that are marked with this label.\\n\\nThis calls fail when the size of all threads is too large for the system to handle. Where\\nthe thread size is unknown, and potentially very large, please use [`getThreads(start, max)`](https://developers.google.com/apps-script/reference/gmail/gmail-label.html#getThreads(Integer,Integer)) and specify ranges of the threads to retrieve in each call.\\n\\n```\\n// Log the subject lines of the threads labeled with MyLabel\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"MyLabel\\\");\\nvar threads \\u003d label.getThreads();\\nfor (var i \\u003d 0; i \\u003c threads.length; i++) {\\n  Logger.log(threads[i].getFirstMessageSubject());\\n}\\n```\\n@return An array of threads marked with this label.*/getThreads():GmailApp.GmailThread[];\\n/**Gets a range of threads marked with this label.\\n\\n```\\n// log the subject lines of up to the first 30 threads with the label MyLabel\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"MyLabel\\\");\\nvar threads \\u003d label.getThreads(0, 30);\\nfor (var i \\u003d 0; i \\u003c threads.length; i++) {\\n  Logger.log(threads[i].getFirstMessageSubject());\\n}\\n```\\n@param start The index of the starting thread.\\n@param max The maximum number of threads to return.\\n@return An array of threads marked with this label.*/getThreads(start:Integer,max:Integer):GmailApp.GmailThread[];\\n/**Gets the number of unread threads tagged with this label.\\n\\n```\\n// log the number of unread threads labeled with MyLabel\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"MyLabel\\\");\\nLogger.log(label.getUnreadCount());\\n```\\n@return The number of unread labeled threads.*/getUnreadCount():Integer;\\n/**Removes this label from the given thread and forces the thread to refresh.\\n\\n```\\n// remove the label MyLabel from the first thread in the inbox\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"MyLabel\\\");\\nvar firstThread \\u003d GmailApp.getInboxThreads(0,1)[0];\\nlabel.removeFromThread(firstThread);\\n```\\n@param thread The thread be unlabeled.\\n@return This label, for chaining.*/removeFromThread(thread:GmailApp.GmailThread):GmailApp.GmailLabel;\\n/**Removes this label from the given threads and forces the threads to refresh. You can remove\\nlabels for up to 100 threads per batch.\\n\\n```\\n// remove the label MyLabel from the first three threads in the inbox\\nvar label \\u003d GmailApp.getUserLabelByName(\\\"MyLabel\\\");\\nvar threads \\u003d GmailApp.getInboxThreads(0,3);\\nlabel.removeFromThreads(threads);\\n```\\n@param threads An array of threads to be unlabeled.\\n@return This label, for chaining.*/removeFromThreads(threads:GmailApp.GmailThread[]):GmailApp.GmailLabel;}interface GmailDraft{\\n/**Deletes this draft message.\\n\\n```\\nvar draft \\u003d GmailApp.getDrafts()[0]; // The first draft message in the drafts folder\\ndraft.deleteDraft();\\ndraft.getMessage(); // Throws exception.\\n```*/deleteDraft():void;\\n/**Gets the ID of this draft message.\\n\\n```\\nvar draft \\u003d GmailApp.getDrafts()[0]; // The first draft message in the drafts folder\\nvar draftId \\u003d draft.getId();\\nvar draftById \\u003d GmailApp.getDraft(draftId);\\nLogger.log(draft.getMessage().getSubject() \\u003d\\u003d draftById.getMessage().getSubject());\\n```\\n@return the draft ID*/getId():string;\\n/**Returns a GmailMessage representing this draft.\\n\\n```\\nvar draft \\u003d GmailApp.getDrafts()[0]; // The first draft message in the drafts folder\\nvar message \\u003d draft.getMessage();\\nLogger.log(message.getSubject());\\n```\\n@return the message that represents the contents of this draft*/getMessage():GmailApp.GmailMessage;\\n/**Returns the ID of the [`GmailMessage`](https://developers.google.com/apps-script/reference/gmail/gmail-message.html) representing this draft.\\n\\n```\\nvar draft \\u003d GmailApp.getDrafts()[0]; // The first draft message in the drafts folder\\nvar messageId \\u003d draft.getMessageId();\\nLogger.log(messageId \\u003d\\u003d draft.getMessage().getId());\\n```\\n@return the message ID*/getMessageId():string;\\n/**Sends this draft email message. The size of the email (including headers) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\nvar draft \\u003d GmailApp.getDrafts()[0]; // The first draft message in the drafts folder\\nvar msg \\u003d draft.send(); // Send it\\nLogger.log(msg.getDate()); // Should be approximately the current timestamp\\n```\\n@return the newly sent message*/send():GmailApp.GmailMessage;\\n/**Replaces the contents of this draft message. The size of the email (including headers) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// The code below will update a draft email with the current date and time.\\nvar draft \\u003d GmailApp.getDrafts()[0]; // The first draft message in the drafts folder\\nvar now \\u003d new Date();\\ndraft.update(\\\"mike@example.com\\\", \\\"current time\\\", \\\"The time is: \\\" + now.toString());\\n```\\n@param recipient comma separated list of email addresses\\n@param subject subject of the email (250 characters maximum)\\n@param body body of the email\\n@return the newly updated draft*/update(recipient:string,subject:string,body:string):GmailApp.GmailDraft;\\n/**Replaces the contents of this draft message using optional arguments. The email can contain\\nplain text or an HTML body. The size of the email (including headers) is [quota limited](/apps-script/guides/services/quotas#current_limitations).\\n\\n```\\n// Update a draft email with a file from Google Drive attached as a PDF.\\nvar draft \\u003d GmailApp.getDrafts()[0]; // The first draft message in the drafts folder\\nvar file \\u003d DriveApp.getFileById('1234567890abcdefghijklmnopqrstuvwxyz');\\ndraft.update('mike@example.com', 'Attachment example', 'Please see attached file.', {\\n    attachments: [file.getAs(MimeType.PDF)],\\n    name: 'Automatic Emailer Script'\\n});\\n```\\n@param recipient comma separated list of email addresses\\n@param subject subject of the email (250 characters maximum)\\n@param body body of the email\\n@param options a JavaScript object that specifies advanced parameters, as listed below\\n@return the newly updated draft*/update(recipient:string,subject:string,body:string,options:Object):GmailApp.GmailDraft;}interface GmailAttachment{\\n/**Returns a copy of this blob.\\n@return The new copy.*/copyBlob():Blob;\\n/**Gets all the blobs that are contained within this (possibly composite) blob.\\n@deprecated\\n@return The blobs contained within the blob.*/getAllBlobs():Blob[];\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Gets the data stored in this blob.\\n@return The stored bytes.*/getBytes():Byte[];\\n/**Gets the content type of the bytes in this blob.\\n@return The content type of this data, if known, or `null`.*/getContentType():string;\\n/**Gets the data of this blob as a String with UTF-8 encoding.\\n@return The data as a string.*/getDataAsString():string;\\n/**Gets the data of this blob as a string with the specified encoding.\\n@param charset The charset to use in encoding the data in this blob as a string.\\n@return The data as a string.*/getDataAsString(charset:string):string;\\n/**Gets the SHA1 content hash for this attachment. This method does not count against the Gmail\\nread quota.\\n@return The SHA1 content hash, as a string.*/getHash():string;\\n/**Gets the name of this blob.\\n@return The name of this data, if known, or `null`.*/getName():string;\\n/**Gets the size of this attachment. This method is faster than calling [`getBytes()`](https://developers.google.com/apps-script/reference/gmail/gmail-attachment.html#getBytes())`.length` and does not count against the Gmail read quota.\\n@return The size of the attachment, in bytes.*/getSize():Integer;\\n/**Returns whether this blob is a Google Workspace file (Sheets, Docs, etc.).\\n@return `true` if this blob is a Google Workspace file; `false` if not.*/isGoogleType():boolean;\\n/**Sets the data stored in this blob.\\n@param data The new data.\\n@return This blob, for chaining.*/setBytes(data:Byte[]):Blob;\\n/**Sets the content type of the bytes in this blob.\\n@param contentType The new contentType.\\n@return This blob, for chaining.*/setContentType(contentType:string):Blob;\\n/**Sets the content type of the bytes in this blob based on the file extension. The contentType is\\n`null` if it cannot be guessed from its extension.\\n@return This blob, for chaining.*/setContentTypeFromExtension():Blob;\\n/**Sets the data of this blob from a string with UTF-8 encoding.\\n@param string The string data.\\n@return This blob, for chaining.*/setDataFromString(string:string):Blob;\\n/**Sets the data of this blob from a string with the specified encoding.\\n@param string The string data.\\n@param charset The charset to use in interpreting the string as bytes.\\n@return This blob, for chaining.*/setDataFromString(string:string,charset:string):Blob;\\n/**Sets the name of this blob.\\n@param name The new name.\\n@return This blob, for chaining.*/setName(name:string):Blob;}}const GmailApp:GmailApp;\"],[\"groups-app.d.ts\",\"interface GroupsApp{Role:GroupsApp._Role;\\n/**Retrieves the group having the specified email address. Throws an exception if the group does\\nnot exist or if you do not have permission to see it.\\n\\nHere is an example that gets a group by its email address and outputs whether the current\\nuser is a member. Before running, replace the sample email address with a real group's email.\\n\\n```\\nvar group \\u003d GroupsApp.getGroupByEmail(\\\"example@googlegroups.com\\\");\\nvar currentUser \\u003d Session.getActiveUser();\\nif (group.hasUser(currentUser)) {\\n  Logger.log(\\\"You are a member of this group.\\\");\\n}\\nelse {\\n  Logger.log(\\\"You are not a member of this group.\\\");\\n}\\n```\\n@param email The email address of the group to retrieve.\\n@return The group with the specified email address.*/getGroupByEmail(email:string):GroupsApp.Group;\\n/**Retrieves all the groups of which you are a direct member (or a pending member). This is an\\nempty list if you are not in any groups. Throws an exception if the group does not exist or if\\nyou do not have permission to see it.\\n\\nHere's an example of how to print the email address for every group the user belongs to:\\n\\n```\\nfunction showMyGroups() {\\n  var groups \\u003d GroupsApp.getGroups();\\n  var str \\u003d 'You are in ' + groups.length + ' groups: ';\\n  for (var i \\u003d 0; i \\u003c groups.length; i++) {\\n    var group \\u003d groups[i];\\n    str \\u003d str + group.getEmail() + ' ';\\n  }\\n  Logger.log(str);\\n}\\n```\\n\\nNote that if you are a member of a group, B, which is itself a member of another group, A, then\\nyou are _indirectly_ subscribed to group A. Even though you receive copies of messages\\nsent to the \\\"parent\\\" group A, you are not actually subscribed to that group.\\n\\nYou can use [`Group.getRole(email)`](https://developers.google.com/apps-script/reference/groups/group.html#getRole(String)) to determine if you are an existing or pending\\nmember of the returned groups.\\n@return The list of groups of which the user is a direct member.*/getGroups():GroupsApp.Group[];}module GroupsApp{interface Role{}interface _Role{\\n/**A user who has been banned from a group and cannot attempt to join it.*/BANNED:Role;\\n/**A user who has been invited to join a group by an owner or manager of the group but who has not\\nyet accepted the invitation.*/INVITED:Role;\\n/**The manager of a group.*/MANAGER:Role;\\n/**A user who is a member of this group but is neither an owner nor a manager.*/MEMBER:Role;\\n/**The owner of a group.*/OWNER:Role;\\n/**A user who has requested to join a group but who has not yet been approved by an owner or\\nmanager.*/PENDING:Role;}interface Group{\\n/**Gets this group's email address.\\n\\nThis example lists the email address of all the groups the user belongs to.\\n\\n```\\nfunction listMyGroupEmails() {\\n  var groups \\u003d GroupsApp.getGroups();\\n  for (var i \\u003d 0; i \\u003c groups.length; i++) {\\n    console.log(groups[i].getEmail());\\n  }\\n}\\n```\\n@return The group's email address.*/getEmail():string;\\n/**Retrieves the direct child groups of the group. Throws an exception if you do not have\\npermission to view the group's member list.\\n\\nIn addition to this method, you can use the [Admin SDK Directory](/apps-script/advanced/admin-sdk-directory) advanced service to\\nretrieve group members in a domain.\\n\\n```\\nfunction listGroupMembers() {\\n  var GROUP_EMAIL \\u003d \\\"example@googlegroups.com\\\";\\n  var group \\u003d GroupsApp.getGroupByEmail(GROUP_EMAIL);\\n  var childGroups \\u003d group.getGroups();\\n  console.log(\\\"Group \\\" + GROUP_EMAIL + \\\" has \\\" + childGroups.length + \\\" groups:\\\");\\n  for (var i \\u003d 0; i \\u003c childGroups.length; i++) {\\n    var childGroup \\u003d childGroups[i];\\n    console.log(childGroup.getEmail());\\n  }\\n}\\n```\\n@return All the direct child groups of the group.*/getGroups():GroupsApp.Group[];\\n/**Retrieves a user's role in the context of the group. A user who is a direct member of a group\\nhas exactly one role within that group. Throws an exception if the user is not a member of the\\ngroup or if you do not have permission to view the group's member list.\\n\\nThis example lists the owners of a group:\\n\\n```\\nvar group \\u003d GroupsApp.getGroupByEmail(\\\"example@googlegroups.com\\\");\\nvar users \\u003d group.getUsers();\\nconsole.log('These are the group owners:');\\nfor (var i \\u003d 0; i \\u003c users.length; i++) {\\n  var user \\u003d users[i];\\n  if (group.getRole(user.getEmail()) \\u003d\\u003d GroupsApp.Role.OWNER) {\\n    console.log(user.getEmail());\\n  }\\n}\\n```\\n@param email A user's email address.\\n@return That user's role within the group.*/getRole(email:string):GroupsApp.Role;\\n/**Retrieves a user's role in the context of the group. A user who is a direct member of a group\\nhas exactly one role within that group. Throws an exception if the user is not a member of the\\ngroup or if you do not have permission to view the group's member list.\\n\\nThis example lists the owners of a group:\\n\\n```\\nvar group \\u003d GroupsApp.getGroupByEmail(\\\"example@googlegroups.com\\\");\\nvar users \\u003d group.getUsers();\\nconsole.log('These are the group owners:');\\nfor (var i \\u003d 0; i \\u003c users.length; i++) {\\n  var user \\u003d users[i];\\n  if (group.getRole(user) \\u003d\\u003d GroupsApp.Role.OWNER) {\\n    console.log(user.getEmail());\\n  }\\n}\\n```\\n@param user The user whose role to retrieve.\\n@return That user's role within the group.*/getRole(user:User):GroupsApp.Role;\\n/**Retrieves users' roles in the context of the group. A user who is a direct member of a group\\nhas exactly one role within that group. Throws an exception if any user is not a member of the\\ngroup or if you do not have permission to view the group's member list.\\n\\nThis example lists the owners of a group:\\n\\n```\\nvar group \\u003d GroupsApp.getGroupByEmail(\\\"example@googlegroups.com\\\");\\nvar users \\u003d group.getUsers();\\nvar roles \\u003d group.getRoles(users);\\nconsole.log('These are the group owners:');\\nfor (var i \\u003d 0; i \\u003c users.length; i++) {\\n  if (roles[i] \\u003d\\u003d GroupsApp.Role.OWNER) {\\n    console.log(users[i].getEmail());\\n  }\\n}\\n```\\n@param users The users whose roles are requested.\\n@return The roles of those users within the group.*/getRoles(users:User[]):GroupsApp.Role[];\\n/**Gets the direct members of the group that have a known corresponding Google account. Throws an\\nexception if you don't have permission to view the group's member list or the member emails.\\n\\nNote: if you are a member of a group B which is itself a member of another group A then you\\nare _indirectly_ subscribed to group A. Although you receive copies of messages sent to\\nit, you are not actually subscribed to the parent group A.\\n\\nHere's an example which shows the members of a group. Before running it, replace the email\\naddress of the group with that of one on your domain.\\n\\n```\\nfunction listGroupMembers() {\\n  var GROUP_EMAIL \\u003d \\\"example@googlegroups.com\\\";\\n  var group \\u003d GroupsApp.getGroupByEmail(GROUP_EMAIL);\\n  var users \\u003d group.getUsers();\\n  console.log(\\\"Group \\\" + GROUP_EMAIL + \\\" has \\\" + users.length + \\\" members:\\\");\\n  for (var i \\u003d 0; i \\u003c users.length; i++) {\\n    var user \\u003d users[i];\\n    console.log(user.getEmail());\\n  }\\n}\\n```\\n\\nIn addition to this method, you can use the [Admin SDK Directory](/apps-script/advanced/admin-sdk-directory) advanced service to\\nretrieve group members in a domain.\\n@return All the direct members of the group.*/getUsers():User[];\\n/**Tests if a group is a direct member of this group. The method does not return `true` if\\nthe tested group is nested more than one level below this group. Throws an exception if you do\\nnot have permission to view the group's member list.\\n\\n```\\nvar group \\u003d GroupsApp.getGroupByEmail(\\\"example@googlegroups.com\\\");\\nvar childGroup \\u003d GroupsApp.getGroupByEmail(\\\"childgroup@googlegroups.com\\\");\\nif (group.hasGroup(childGroup)) {\\n  console.log(\\\"childgroup@googlegroups.com is a child group\\\");\\n}\\n```\\n@param group The group whose membership to test.\\n@return `true` if that group is a child group of this group; `false` otherwise.*/hasGroup(group:GroupsApp.Group):boolean;\\n/**Tests if a group is a direct member of this group. The method does not return `true` if\\nthe tested group is nested more than one level below this group. Throws an exception if you do\\nnot have permission to view the group's member list.\\n\\n```\\nvar group \\u003d GroupsApp.getGroupByEmail(\\\"example@googlegroups.com\\\");\\nif (group.hasGroup(\\\"childgroup@googlegroups.com\\\")) {\\n  console.log(\\\"childgroup@googlegroups.com is a child group\\\");\\n}\\n```\\n@param email A group's email address.\\n@return `true` if that group is a child group of this group; `false` otherwise.*/hasGroup(email:string):boolean;\\n/**Tests if a user is a direct member of the group. Throws an exception if you do not have\\npermission to view the group's member list.\\n\\nHere's an example which checks if the current user is a member of a group:\\n\\n```\\nvar group \\u003d GroupsApp.getGroupByEmail(\\\"example@googlegroups.com\\\");\\nvar currentUser \\u003d Session.getActiveUser();\\nif (group.hasUser(currentUser.getEmail())) {\\n  console.log(\\\"You are a member\\\");\\n}\\n```\\n@param email A user's email address.\\n@return `true` if that user is a member of the group; `false` otherwise.*/hasUser(email:string):boolean;\\n/**Tests if a user is a direct member of the group. Throws an exception if you do not have\\npermission to view the group's member list.\\n\\nHere's an example which checks if the current user is a member of a group:\\n\\n```\\nvar group \\u003d GroupsApp.getGroupByEmail(\\\"example@googlegroups.com\\\");\\nvar currentUser \\u003d Session.getActiveUser();\\nif (group.hasUser(currentUser)) {\\n  console.log(\\\"You are a member\\\");\\n}\\n```\\n@param user The user whose membership to test.\\n@return `true` if that user is a member of the group; `false` otherwise.*/hasUser(user:User):boolean;}}const GroupsApp:GroupsApp;\"],[\"html-service.d.ts\",\"interface HtmlService{\\n/**An enum representing the sandbox modes that can be used for client-side `HtmlService`\\nscripts.*/SandboxMode:HtmlService._SandboxMode;\\n/**An enum representing the `X-Frame-Options` modes that can be used for client-side `HtmlService` scripts.*/XFrameOptionsMode:HtmlService._XFrameOptionsMode;\\n/**Creates a new [`HtmlOutput`](https://developers.google.com/apps-script/reference/html/html-output.html) object that can be returned from the script.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput();\\n```\\n@return the new HtmlOutput object*/createHtmlOutput():HtmlService.HtmlOutput;\\n/**Creates a new [`HtmlOutput`](https://developers.google.com/apps-script/reference/html/html-output.html) object from a [`BlobSource`](https://developers.google.com/apps-script/reference/html/../base/blob-source.html) resource.\\n\\n```\\nfunction createFromBlob(blob) {\\n  var output \\u003d HtmlService.createHtmlOutput(blob);\\n  return output;\\n}\\n```\\n@param blob the object to get HTML out of\\n@return the new `HtmlOutput` object*/createHtmlOutput(blob:BlobSource):HtmlService.HtmlOutput;\\n/**Creates a new [`HtmlOutput`](https://developers.google.com/apps-script/reference/html/html-output.html) object that can be returned from the script.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello world!\\u003c/b\\u003e');\\n```\\n@param html the content to serve\\n@return the new HtmlOutput object*/createHtmlOutput(html:string):HtmlService.HtmlOutput;\\n/**Creates a new [`HtmlOutput`](https://developers.google.com/apps-script/reference/html/html-output.html) object from a file in the code editor.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutputFromFile('myPage');\\n```\\n@param filename the name of the file to use\\n@return the new `HtmlOutput` object*/createHtmlOutputFromFile(filename:string):HtmlService.HtmlOutput;\\n/**Creates a new [`HtmlTemplate`](https://developers.google.com/apps-script/reference/html/html-template.html) object from a [`BlobSource`](https://developers.google.com/apps-script/reference/html/../base/blob-source.html) resource.\\n\\n```\\nfunction createFromBlob(blob) {\\n  var template \\u003d HtmlService.createTemplate(blob);\\n  return output;\\n}\\n```\\n@param blob The object to get HTML out of.\\n@return the new `HtmlTemplate` object*/createTemplate(blob:BlobSource):HtmlService.HtmlTemplate;\\n/**Creates a new [`HtmlTemplate`](https://developers.google.com/apps-script/reference/html/html-template.html) object that can be returned from the script.\\n\\n```\\nvar template \\u003d HtmlService.createTemplate('\\u003cb\\u003eThe time is \\u0026lt;?\\u003d new Date() ?\\u0026gt;\\u003c/b\\u003e');\\n```\\n@param html the content of the template\\n@return the new `HtmlTemplate` object*/createTemplate(html:string):HtmlService.HtmlTemplate;\\n/**Creates a new [`HtmlTemplate`](https://developers.google.com/apps-script/reference/html/html-template.html) object from a file in the code editor.\\n\\n```\\nvar template \\u003d HtmlService.createTemplateFromFile('myTemplate');\\n```\\n@param filename the name of the file to use\\n@return the new `HtmlTemplate` object*/createTemplateFromFile(filename:string):HtmlService.HtmlTemplate;\\n/**Gets the user-agent string for the current browser. Returns `null` for most script\\nexecutions if not used in a web app's `doGet()` or `doPost()` function.\\n@return the user-agent string*/getUserAgent():string;}module HtmlService{interface XFrameOptionsMode{}interface _XFrameOptionsMode{\\n/**No `X-Frame-Options` header will be set. This will let any site iframe the page, so the\\ndeveloper should implement their own protection against clickjacking.*/ALLOWALL:XFrameOptionsMode;\\n/**Sets the default value for the `X-Frame-Options` header, which preserves normal security\\nassumptions. If a script does not set an `X-Frame-Options` mode, Apps Script uses this\\nmode as the default.*/DEFAULT:XFrameOptionsMode;}interface SandboxMode{}interface _SandboxMode{\\n/**A legacy sandbox mode that emulates ECMAScript 5 strict mode using only the features available\\nin ECMAScript 3. This mode was the default prior to February 2014.\\n\\n`EMULATED` was [sunset as of December 10,\\n2015](/apps-script/guides/support/sunset). All scripts attempting use `EMULATED` will now use `IFRAME` instead.*/EMULATED:SandboxMode;\\n/**A sandbox mode that uses iframe sandboxing instead of the Caja sandbox technology used by the\\n`EMULATED` and `NATIVE` modes. This mode is the default for new scripts as of\\nNovember 12, 2015 and for all scripts as of July 6, 2016.\\n\\nThis mode imposes many fewer restrictions than the other sandbox modes and runs fastest, but\\ndoes not work at all in certain older browsers, including Internet Explorer 9.*/IFRAME:SandboxMode;\\n/**A sandbox mode that is built on top of ECMAScript 5 strict mode. A sandbox mode built on top of\\nECMAScript 5 strict mode. This mode was [sunset as\\nof July 6, 2016](/apps-script/guides/support/sunset). All scripts now use `IFRAME` mode.*/NATIVE:SandboxMode;}interface HtmlTemplate{\\n/**Evaluates this template and returns an [`HtmlOutput`](https://developers.google.com/apps-script/reference/html/html-output.html) object. Any properties set on this\\n`HtmlTemplate` object will be in scope when evaluating. To debug errors in a template,\\nexamine the code using the [`getCode()`](https://developers.google.com/apps-script/reference/html/html-template.html#getCode()) method.\\n\\n```\\n// A template which evaluates to whatever is bound to 'foo'.\\nvar template \\u003d HtmlService.createTemplate('\\u003c?\\u003d foo ?\\u003e');\\ntemplate.foo \\u003d 'Hello World!';\\nLogger.log(template.evaluate().getContent());  // will log 'Hello World!'\\n```\\n@return an HtmlOutput object*/evaluate():HtmlService.HtmlOutput;\\n/**Generates a string of JavaScript code, based on the template file, that can be evaluated. This\\nmethod produces a string of JavaScript code based on the template file. Calling \\n\\n```\\neval(\\u003ccode\\u003e)```\\n\\n will return a new [`HtmlOutput`](https://developers.google.com/apps-script/reference/html/html-output.html) object with the content of the\\ntemplate after running all embedded server scripts. The generated code is intended to be\\nhuman-readable, and so if you need to debug a template you can call \\n\\n```\\nLogger.log(\\u003ccode\\u003e)```\\n\\n to see what was produced.\\n\\nEvaluating this code will implicitly bind in all variables in the current scope. In general,\\nit's preferable to use the [`evaluate()`](https://developers.google.com/apps-script/reference/html/html-template.html#evaluate()) method, which takes explicit bindings.\\n\\n```\\nvar template \\u003d HtmlService.createTemplate('\\u003cb\\u003eThe time is \\u0026lt;?\\u003d new Date() ?\\u0026gt;\\u003c/b\\u003e');\\nLogger.log(template.getCode());\\n```\\n@return a string based on the template, which can be evaluated*/getCode():string;\\n/**Generates a string of JavaScript code that can be evaluated, with each line of the code\\ncontaining the original line from the template as a comment. This method produces a string of\\nJavaScript code based on the template file. Calling `eval(\\u003ccode\\u003e)` will return\\na new [`HtmlOutput`](https://developers.google.com/apps-script/reference/html/html-output.html) object with the content of the template after running all embedded\\nserver scripts. The generated code is intended to be human-readable, and so if you need to\\ndebug a template you can call `Logger.log(\\u003ccode\\u003e)` to see what was produced.\\n\\nEvaluating this code will implicitly bind in all variables in the current scope. In general,\\nit's preferable to use the [`evaluate()`](https://developers.google.com/apps-script/reference/html/html-template.html#evaluate()) method, which takes explicit bindings.\\n\\n```\\nvar template \\u003d HtmlService.createTemplate('\\u003cb\\u003eThe time is \\u0026lt;?\\u003d new Date() ?\\u0026gt;\\u003c/b\\u003e');\\nLogger.log(template.getCodeWithComments());\\n```\\n@return an string based on the template, which can be evaluated*/getCodeWithComments():string;\\n/**Returns the unprocessed content of this template.\\n\\n```\\nvar template \\u003d HtmlService.createTemplate('\\u003cb\\u003eThe time is \\u0026lt;?\\u003d new Date() ?\\u0026gt;\\u003c/b\\u003e');\\nLogger.log(template.getRawContent());\\n```\\n@return the template's raw content*/getRawContent():string;}interface HtmlOutputMetaTag{\\n/**Gets the content of this meta tag.\\n@return the content of this meta tag.*/getContent():string;\\n/**Gets the name of this `HtmlOutputMetaTag`.\\n@return the name of this meta tag.*/getName():string;}interface HtmlOutput{\\n/**Adds a meta tag to the page. Meta tags included directly in an Apps Script HTML file are\\nignored. Only the following meta tags are allowed:\\n\\n```\\n\\u003cmeta name\\u003d\\\"apple-mobile-web-app-capable\\\" content\\u003d\\\"...\\\"/\\u003e\\n\\u003cmeta name\\u003d\\\"google-site-verification\\\" content\\u003d\\\"...\\\"/\\u003e\\n\\u003cmeta name\\u003d\\\"mobile-web-app-capable\\\" content\\u003d\\\"...\\\"/\\u003e\\n\\u003cmeta name\\u003d\\\"viewport\\\" content\\u003d\\\"...\\\"/\\u003e\\n```\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.addMetaTag('viewport', 'width\\u003ddevice-width, initial-scale\\u003d1');\\n```\\n@param name The value of the meta tag's name attribute.\\n@param content The value of the meta tag's content attribute.\\n@return This output, for chaining.*/addMetaTag(name:string,content:string):HtmlService.HtmlOutput;\\n/**Appends new content to the content of this `HtmlOutput`. Use this only for content from a\\ntrusted source, because it is not escaped.\\n\\n```\\n// Log \\\"\\u003cb\\u003eHello, world!\\u003c/b\\u003e\\u003cp\\u003eHello again, world.\\u003c/p\\u003e\\\"\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.append('\\u003cp\\u003eHello again, world.\\u003c/p\\u003e');\\nLogger.log(output.getContent());\\n```\\n@param addedContent The content to append.\\n@return This output, for chaining.*/append(addedContent:string):HtmlService.HtmlOutput;\\n/**Appends new content to the content of this `HtmlOutput`, using contextual escaping.\\n\\nThis method correctly escapes content based on the current state of the `HtmlOutput`,\\nso that the result is a safe string with no markup or side affects. Use this instead of using\\nappend whenever you are adding content from an untrusted source, such as from a user, to avoid\\naccidentally allowing a cross site scripting (XSS) bug where content or markup that you append\\ncauses unexpected code execution.\\n\\n```\\n// Log \\\"\\u003cb\\u003eHello, world!\\u003c/b\\u003e\\u0026lt;p\\u0026gt;Hello again, world.\\u0026lt;/p\\u0026gt;\\\"\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.appendUntrusted('\\u003cp\\u003eHello again, world.\\u003c/p\\u003e');\\nLogger.log(output.getContent());\\n```\\n@param addedContent The content to append.\\n@return This output, for chaining.*/appendUntrusted(addedContent:string):HtmlService.HtmlOutput;\\n/**Returns an [`HtmlTemplate`](https://developers.google.com/apps-script/reference/html/html-template.html) backed by this `HtmlOutput`. This method can be used to\\nbuild up a template incrementally. Future changes to `HtmlOutput` affect the contents of\\nthe `HtmlTemplate` as well.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\nvar template \\u003d output.asTemplate();\\n```\\n@return The new `HtmlTemplate`.*/asTemplate():HtmlService.HtmlTemplate;\\n/**Clears the current content.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.clear();\\n```\\n@return This output, for chaining.*/clear():HtmlService.HtmlOutput;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;\\n/**Gets the content of this `HtmlOutput`.\\n\\n```\\n// Log \\\"\\u003cb\\u003eHello, world!\\u003c/b\\u003e\\\"\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\nLogger.log(output.getContent());\\n```\\n@return The content that is served.*/getContent():string;\\n/**Gets the URL for a favicon link tag added to the page by calling [`setFaviconUrl(iconUrl)`](https://developers.google.com/apps-script/reference/html/html-output.html#setFaviconUrl(String)). Favicon link tags included directly in an Apps Script HTML file are\\nignored.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.setFaviconUrl('http://www.example.com/image.png');\\nLogger.log(output.getFaviconUrl());\\n```\\n@return The URL of the favicon image.*/getFaviconUrl():string;\\n/**Gets the initial height of the [custom dialog](https://developers.google.com/apps-script/guides/dialogs) in Google\\nDocs, Sheets, or Forms. If the `HtmlOutput` is published as a web app instead, this\\nmethod returns `null`. To resize a dialog that is already open, call [\\n`google.script.host.setHeight(height)`](https://developers.google.com/apps-script/guides/html/communication#resizing_dialogs_in_google_apps) in client-side code.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.setHeight(200);\\nLogger.log(output.getHeight());\\n```\\n@return The height, in pixels.*/getHeight():Integer;\\n/**Gets an array of objects that represent meta tags added to the page by calling [`addMetaTag(name, content)`](https://developers.google.com/apps-script/reference/html/html-output.html#addMetaTag(String,String)). Meta tags included directly in an Apps Script HTML file are\\nignored.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.addMetaTag('viewport', 'width\\u003ddevice-width, initial-scale\\u003d1');\\n\\nvar tags \\u003d output.getMetaTags();\\nLogger.log('\\u003cmeta name\\u003d\\\"%s\\\" content\\u003d\\\"%s\\\"/\\u003e', tags[0].getName(), tags[0].getContent());\\n```\\n@return An array of objects that represent meta tags added to the page by calling [`addMetaTag(name, content)`](https://developers.google.com/apps-script/reference/html/html-output.html#addMetaTag(String,String)).*/getMetaTags():HtmlService.HtmlOutputMetaTag[];\\n/**Gets the title of the output page. Note that the \\u003ctitle\\u003e HTML element is ignored.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\nLogger.log(output.getTitle());\\n```\\n@return The title of the page.*/getTitle():string;\\n/**Gets the initial width of the [custom dialog](https://developers.google.com/apps-script/guides/dialogs) in Google\\nDocs, Sheets, or Forms. If the `HtmlOutput` is published as a web app instead, this\\nmethod returns `null`. To resize a dialog that is already open, call [\\n`google.script.host.setWidth(width)`](https://developers.google.com/apps-script/guides/html/communication#resizing_dialogs_in_google_apps) in client-side code.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.setWidth(200);\\nLogger.log(output.getWidth());\\n```\\n@return The width in pixels.*/getWidth():Integer;\\n/**Sets the content of this `HtmlOutput`.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput();\\noutput.setContent('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\n```\\n@param content The content to serve.\\n@return This output, for chaining.*/setContent(content:string):HtmlService.HtmlOutput;\\n/**Adds a link tag for a favicon to the page. Favicon link tags included directly in an Apps\\nScript HTML file are ignored.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.setFaviconUrl('http://www.example.com/image.png');\\n```\\n@param iconUrl The URL of the favicon image, with the image extension indicating the image\\n    type.\\n@return This output, for chaining.*/setFaviconUrl(iconUrl:string):HtmlService.HtmlOutput;\\n/**Sets the initial height of the [custom dialog](https://developers.google.com/apps-script/guides/dialogs) in Google\\nDocs, Sheets, or Forms. If the `HtmlOutput` is published as a web app instead, this\\nmethod has no effect. To resize a dialog that is already open, call [\\n`google.script.host.setHeight(height)`](https://developers.google.com/apps-script/guides/html/communication#resizing_dialogs_in_google_apps) in client-side code.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.setHeight(200);\\n```\\n@param height The new height in pixels; `null` results in a default value.\\n@return This output, for chaining.*/setHeight(height:Integer):HtmlService.HtmlOutput;\\n/**This method now has no effect — previously it set the [`sandbox\\nmode`](https://developers.google.com/apps-script/reference/html/sandbox-mode.html) used for client-side scripts. To protect users from being served malicious HTML or\\nJavaScript, client-side code served from HTML service executes in a security sandbox that\\nimposes restrictions on the code. Originally this method allowed script authors to choose\\nbetween different versions of the sandbox, but now all scripts now use `IFRAME` mode\\nregardless of what sandbox mode is set. For more information, see the [guide to restrictions in HTML service](/apps-script/guides/html/restrictions).\\n\\nThe `IFRAME` mode imposes many fewer restrictions than the other sandbox modes and\\nruns fastest, but does not work at all in certain older browsers, including Internet Explorer\\n9. The sandbox mode can be read in a client-side script by inspecting `google.script.sandbox.mode`. Note that this property returns the actual mode on the client,\\nwhich may differ from the mode requested on the server if the requested mode is not supported\\nin the user's browser.\\n\\n```\\n\\u003c!-- Read the sandbox mode (in a client-side script). --\\u003e\\n\\u003cscript\\u003e\\n  alert(google.script.sandbox.mode);\\n\\u003c/script\\u003e\\n```\\n@param mode The sandbox mode to use.\\n@return This output, for chaining.*/setSandboxMode(mode:HtmlService.SandboxMode):HtmlService.HtmlOutput;\\n/**Sets the title of the output page. For web apps, this is the title of the entire page, while\\nfor `HtmlOutput` shown in Google Sheets, this is the dialog title.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.setTitle('My First Page');\\n```\\n@param title The new title.\\n@return This output, for chaining.*/setTitle(title:string):HtmlService.HtmlOutput;\\n/**Sets the initial width of a [custom dialog](https://developers.google.com/apps-script/guides/dialogs) in Google\\nDocs, Sheets, or Forms. If the `HtmlOutput` is published as a web app instead, this\\nmethod has no effect. To resize a dialog that is already open, call [\\n`google.script.host.setWidth(width)`](https://developers.google.com/apps-script/guides/html/communication#resizing_dialogs_in_google_apps) in client-side code.\\n\\n```\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.setWidth(200);\\n```\\n@param width The new width in pixels; `null` results in a default value.\\n@return This output, for chaining.*/setWidth(width:Integer):HtmlService.HtmlOutput;\\n/**Sets the state of the page's `X-Frame-Options` header, which controls clickjacking\\nprevention.\\n\\nSetting [`XFrameOptionsMode.ALLOWALL`](https://developers.google.com/apps-script/reference/html/x-frame-options-mode.html#ALLOWALL) lets any site iframe the page, so the\\ndeveloper should implement their own protection against clickjacking.\\n\\nIf a script does not set an `X-Frame-Options` mode, Apps Script uses [`XFrameOptionsMode.DEFAULT`](https://developers.google.com/apps-script/reference/html/x-frame-options-mode.html#DEFAULT) mode as the default.\\n\\n```\\n// Serve HTML with no X-Frame-Options header (in Apps Script server-side code).\\nvar output \\u003d HtmlService.createHtmlOutput('\\u003cb\\u003eHello, world!\\u003c/b\\u003e');\\noutput.setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);\\n```\\n@param mode The XFrame options mode to set.\\n@return This output, for chaining.*/setXFrameOptionsMode(mode:HtmlService.XFrameOptionsMode):HtmlService.HtmlOutput;}}const HtmlService:HtmlService;\"],[\"jdbc.d.ts\",\"interface Jdbc{\\n/**Attempts to establish a connection to the given Google Cloud SQL URL.\\n@param url A database URL of the form `jdbc:google:mysql://subname`.\\n@return A JdbcConnection object.*/getCloudSqlConnection(url:string):Jdbc.JdbcConnection;\\n/**Attempts to establish a connection to the given Google Cloud SQL URL.\\n@param url A database URL of the form `jdbc:google:mysql://subname`.\\n@param info Optional JavaScript object specifying advanced parameters as defined below.\\n@return A JdbcConnection object.*/getCloudSqlConnection(url:string,info:Object):Jdbc.JdbcConnection;\\n/**Attempts to establish a connection to the given Google Cloud SQL URL.\\n@param url A database URL of the form `jdbc:google:mysql://subname`.\\n@param userName The username to pass to the database.\\n@param password The user's password.\\n@return A JdbcConnection object.*/getCloudSqlConnection(url:string,userName:string,password:string):Jdbc.JdbcConnection;\\n/**Attempts to establish a connection to the given database URL.\\n\\n```\\nvar conn \\u003d Jdbc.getConnection('jdbc:mysql://yoursqlserver.example.com:3306/database_name');\\n```\\n@param url A database URL of the form `jdbc:subprotocol:subname`.\\n@return A JdbcConnection object.*/getConnection(url:string):Jdbc.JdbcConnection;\\n/**Attempts to establish a connection to the given database URL.\\n\\n```\\nvar conn \\u003d Jdbc.getConnection('jdbc:mysql://yoursqlserver.example.com:3306/database_name',\\n                              {user: 'username', password: 'password'});\\n```\\n@param url A database URL of the form `jdbc:subprotocol:subname`.\\n@param info Optional JavaScript object specifying advanced parameters as defined below.\\n@return A JdbcConnection object.*/getConnection(url:string,info:Object):Jdbc.JdbcConnection;\\n/**Attempts to establish a connection to the given database using a username and password.\\n\\n```\\nvar conn \\u003d Jdbc.getConnection('jdbc:mysql://yoursqlserver.example.com:3306/database_name',\\n                              'username', 'password');\\n```\\n@param url A database URL of the form `jdbc:subprotocol:subname`.\\n@param userName The username to pass to the database.\\n@param password The user's password.\\n@return A JdbcConnection object.*/getConnection(url:string,userName:string,password:string):Jdbc.JdbcConnection;\\n/**Create a date from milliseconds since epoch.\\n@param milliseconds Milliseconds since epoch.\\n@return A JdbcDate object.*/newDate(milliseconds:Integer):Jdbc.JdbcDate;\\n/**Create a time from milliseconds since epoch.\\n@param milliseconds Milliseconds since epoch.\\n@return A JdbcTime object.*/newTime(milliseconds:Integer):Jdbc.JdbcTime;\\n/**Create a timestamp from milliseconds since epoch.\\n@param milliseconds Milliseconds since epoch.\\n@return A JdbcTimestamp object.*/newTimestamp(milliseconds:Integer):Jdbc.JdbcTimestamp;\\n/**Create a date by parsing the SQL date string.\\n@param date A string containing a SQL date string.\\n@return A JdbcDate object.*/parseDate(date:string):Jdbc.JdbcDate;\\n/**Create a time by parsing the SQL time string.\\n@param time A string containing a SQL time string.\\n@return A JdbcTime object.*/parseTime(time:string):Jdbc.JdbcTime;\\n/**Create a timestamp by parsing the SQL timestamp string.\\n@param timestamp A string containing a SQL timestamp string.\\n@return A JdbcTimestamp object.*/parseTimestamp(timestamp:string):Jdbc.JdbcTimestamp;}module Jdbc{interface JdbcTimestamp{\\n/**For documentation of this method, see [\\n`java.sql.Timestamp#after(Timestamp)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Timestamp.html#after(java.sql.Timestamp)).\\n@param when A timestamp to compare to.\\n@return `true` if and only if this timestampe is strictly later than the timestamp\\n    specified as a parameter; `false` otherwise.*/after(when:Jdbc.JdbcTimestamp):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Timestamp#before(Timestamp)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Timestamp.html#before(java.sql.Timestamp)).\\n@param when A timestamp to compare to.\\n@return `true` if and only if this timestamp is strictly earlier than the timestamp\\n    specified as a parameter; `false` otherwise.*/before(when:Jdbc.JdbcTimestamp):boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getDate()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getDate()).\\n@return The day of the month represented by this timestamp. The value returned is between 1 and\\n    31 representing the day of the month that contains or begins with the instant in time\\n    represented by this timestamp, as interpreted in the local time zone.*/getDate():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getHours()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getHours()).\\n@return The hour represented by this object; the value is a number (0 through 23) representing\\n    the hour within the day that contains or begins with the instant in time represented by\\n    this object, as interpreted in the local time zone.*/getHours():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getMinutes()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getMinutes()).\\n@return The minutes past the hour represented by this object, as interpreted in the local time\\n    zone. The value is a number between 0 through 59 inclusive.*/getMinutes():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getMonth()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getMonth()).\\n@return The month that contains or begins with the instant in time represented by this\\n    timestamp. The value returned is between 0 and 11, with the value 0 representing January.*/getMonth():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Timestamp#getNanos()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Timestamp.html#getNanos()).\\n@return This timestamp's fractional seconds value (nanoseconds).*/getNanos():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getSeconds()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getSeconds()).\\n@return The seconds past the minute represented by this object, as interpreted in the local\\n    time zone. The value is a number between 0 through 61 inclusive, whiere 60 and 61 are only\\n    possible for machines that take leap seconds into account.*/getSeconds():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Timestamp#getTime()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Timestamp.html#getTime()).\\n@return The number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this time\\n    object.*/getTime():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getYear()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getYear()).\\n@return A value that is the result of subtracting 1900 from the year that contains or begins\\n    with the instant in time represented by this timestampe, as interpreted in the local time\\n    zone.*/getYear():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setDate(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setDate(int)).\\n@param date The day of month to set. This timestamp is updated to represent a point in time\\n    within the specified day of month, with the year, month, hour, minute, and second the same\\n    as before, as interpreted in the local time zone. If the date was April 30, for example,\\n    and the date is set to 31, then it is treated as if it were on May 1, because April has\\n    only 30 days.*/setDate(date:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setHours(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setHours(int)).\\n@param hours The hour to set; this object is updated to represent a point in time within the\\n    specified hour of the day, with the year, month, date, minute, and second the same as\\n    before, as interpreted in the local time zone.*/setHours(hours:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setMinutes(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setMinutes(int)).\\n@param minutes The minutes to set; this object is updated to represent a point in time within\\n    the specified minute of the hour, with the year, month, date, hour, and second the same as\\n    before, as interpreted in the local time zone.*/setMinutes(minutes:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setMonth(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setMonth(int)).\\n@param month The month to set. This timestamp is updated to represent a point in time within\\n    the specified month, with the year, date, hour, minute, and second the same as before, as\\n    interpreted in the local time zone. If the date was October 31, for example, and the month\\n    is set to June, then the new date is treated as if it were on July 1, because June has only\\n    30 days.*/setMonth(month:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Timestamp#setNanos(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Timestamp.html#setNanos(int)).\\n@param nanoseconds The new fractional seconds value.*/setNanos(nanoseconds:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setSeconds(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setSeconds(int)).\\n@param seconds The seconds to set; this object is updated to represent a point in time within\\n    the specified second of the minute, with the year, month, date, hour, and minute the same\\n    as before, as interpreted in the local time zone.*/setSeconds(seconds:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Timestamp#setTime(long)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Timestamp.html#setTime(long)).\\n@param milliseconds The time value to set. The value is milliseconds since January 1, 1970,\\n    00:00:00 GMT.*/setTime(milliseconds:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setYear(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setYear(int)).\\n@param year The year value to set; the timestamp's year is set to this value plus 1900. This\\n    timestamp is updated to represent a point in time within the specified year, with the\\n    month, date, hour, minute, and second the same as before, as interpreted in the local time\\n    zone. If the date was February 29, for example, and the year is set to a non-leap year,\\n    then the new date is treated as if it were on March 1.*/setYear(year:Integer):void;}interface JdbcTime{\\n/**For documentation of this method, see [\\n`java.sql.Date#after(Date)`](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#after(java.util.Date)).\\n@param when A time to compare to.\\n@return `true` if and only if this time is strictly later than the time specified as a\\n    parameter; `false` otherwise.*/after(when:Jdbc.JdbcTime):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Date#before(Date)`](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#before(java.util.Date)).\\n@param when A time to compare to.\\n@return `true` if and only if this time is strictly earlier than the time specified as a\\n    parameter; `false` otherwise.*/before(when:Jdbc.JdbcTime):boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getHours()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getHours()).\\n@return The hour represented by this object; the value is a number (0 through 23) representing\\n    the hour within the day that contains or begins with the instant in time represented by\\n    this object, as interpreted in the local time zone.*/getHours():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getMinutes()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getMinutes()).\\n@return The minutes past the hour represented by this object, as interpreted in the local time\\n    zone. The value is a number between 0 through 59 inclusive.*/getMinutes():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getSeconds()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getSeconds()).\\n@return The seconds past the minute represented by this object, as interpreted in the local\\n    time zone. The value is a number between 0 through 61 inclusive, whiere 60 and 61 are only\\n    possible for machines that take leap seconds into account.*/getSeconds():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getTime()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getTime()).\\n@return The number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this time\\n    object.*/getTime():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setHours(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setHours(int)).\\n@param hours The hour to set; this object is updated to represent a point in time within the\\n    specified hour of the day, with the year, month, date, minute, and second the same as\\n    before, as interpreted in the local time zone.*/setHours(hours:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setMinutes(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setMinutes(int)).\\n@param minutes The minutes to set; this object is updated to represent a point in time within\\n    the specified minute of the hour, with the year, month, date, hour, and second the same as\\n    before, as interpreted in the local time zone.*/setMinutes(minutes:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setSeconds(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setSeconds(int)).\\n@param seconds The seconds to set; this object is updated to represent a point in time within\\n    the specified second of the minute, with the year, month, date, hour, and minute the same\\n    as before, as interpreted in the local time zone.*/setSeconds(seconds:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Time#setTime(long)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Time.html#setTime(long)).\\n@param milliseconds The time value to set. The value is milliseconds since January 1, 1970,\\n    00:00:00 GMT, while a negative number is milliseconds before that time.*/setTime(milliseconds:Integer):void;}interface JdbcStruct{\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Struct#getAttributes()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Struct.html#getAttributes()).\\n@return The ordered attribute values of this structure.*/getAttributes():Object[];\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Struct#getSQLTypeName()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Struct.html#getSQLTypeName()).\\n@return The fully-qualified type name of the SQL structured type that this structure\\n    represents.*/getSQLTypeName():string;}interface JdbcStatement{\\n/**For documentation of this method, see [\\n`java.sql.Statement#addBatch(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#addBatch(java.lang.String)).\\n@param sql The SQL command to add to this statement, typically an SQL `INSERT` or `UPDATE`.*/addBatch(sql:string):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#cancel()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#cancel()).*/cancel():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#clearBatch()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#clearBatch()).*/clearBatch():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#clearWarnings()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#clearWarnings()).*/clearWarnings():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#close()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#close()).*/close():void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String)).\\n@param sql The SQL statement to execute.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int)).\\n@param sql The SQL statement to execute.\\n@param autoGeneratedKeys A flag that indicates whether auto-generated keys are made available\\n    for future retrieval; either `Jdbc.Statement.RETURN_GENERATED_KEYS` or `Jdbc.Statement.NO_GENERATED_KEYS`.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string,autoGeneratedKeys:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String, int[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int[])).\\n@param sql The SQL statement to execute.\\n@param columnIndexes The column indices in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string,columnIndexes:Integer[]):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String, String[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20java.lang.String[])).\\n@param sql The SQL statement to execute.\\n@param columnNames The names of columns in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string,columnNames:string[]):boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#executeBatch()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeBatch()).\\n@return The update counts for each command in the batch, using the same order in which commands\\n    were added to the batch.*/executeBatch():Integer[];\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeQuery(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeQuery(java.lang.String)).\\n@param sql The SQL statement to execute, typically a static `SELECT`.\\n@return A result set containing the results of the execution. This is never `null`.*/executeQuery(sql:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String)).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String,%20int)).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@param autoGeneratedKeys A flag that indicates whether auto-generated keys are made available\\n    for future retrieval; either `Jdbc.Statement.RETURN_GENERATED_KEYS` or `Jdbc.Statement.NO_GENERATED_KEYS`.\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string,autoGeneratedKeys:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String, int[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String,%20int[])).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@param columnIndexes The column indices in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string,columnIndexes:Integer[]):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String, String[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String,%20java.lang.String[])).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@param columnNames The names of columns in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string,columnNames:string[]):Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getConnection()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getConnection()).\\n@return The connection that produced this statement.*/getConnection():Jdbc.JdbcConnection;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getFetchDirection()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getFetchDirection()).\\n@return The default direction for result sets generated by this statement, which is either\\n    `Jdbc.ResultSet.FETCH_FORWARD` or `Jdbc.ResultSet.FETCH_REVERSE`.*/getFetchDirection():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getFetchSize()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getFetchSize()).\\n@return The default row fetch size for result sets generated from this statement.*/getFetchSize():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getGeneratedKeys()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getGeneratedKeys()).\\n@return A result set containing the auto-generated keys generated by the execution of this\\n    statement.*/getGeneratedKeys():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getMaxFieldSize()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMaxFieldSize()).\\n@return The current column byte size limit for columns storing character and binary values; a\\n    value of zero indictates no limit.*/getMaxFieldSize():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getMaxRows()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMaxRows()).\\n@return The current maximum number of rows for a result set produced by this statement; a value\\n    of 0 indicates no limit.*/getMaxRows():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getMoreResults()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMoreResults()).\\n@return `true` if the next result is a result set; `false` otherwise.*/getMoreResults():boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getMoreResults(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMoreResults(int)).\\n@param current A flag that indicates what happens to current result sets when retrieved. This\\n    value is one of `Jdbc.Statement.CLOSE_CURRENT_RESULT`, `Jdbc.Statement.KEEP_CURRENT_RESULT`, or `Jdbc.Statement.CLOSE_ALL_RESULTS`.\\n@return `true` if the next result is a result set; `false` otherwise.*/getMoreResults(current:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getQueryTimeout()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getQueryTimeout()).\\n@return The current query timeout in seconds; a value of zero indicates no timeout.*/getQueryTimeout():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getResultSet()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSet()).\\n@return The current result set, or `null` if the result is an update count or there are\\n    no more results.*/getResultSet():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getResultSetConcurrency()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSetConcurrency()).\\n@return The result set concurrency for result sets generated from this statement, which is\\n    either `Jdbc.ResultSet.CONCUR_READ_ONLY` or `Jdbc.ResultSet.CONCUR_UPDATABLE`.*/getResultSetConcurrency():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getResultSetHoldability()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSetHoldability()).\\n@return The result set holdability, which is either `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.*/getResultSetHoldability():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getResultSetType()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSetType()).\\n@return The result set type for result sets generated from this statement, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or\\n    `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.*/getResultSetType():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getUpdateCount()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getUpdateCount()).\\n@return The current result as an update count, or -1 if the current result is a result set or\\n    if there are no more results.*/getUpdateCount():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getWarnings()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getWarnings()).\\n@return The current set of warnings, or `null` if there are no warnings.*/getWarnings():string[];\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#isClosed()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#isClosed()).\\n@return `true` if this statement is closed; `false` otherwise.*/isClosed():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#isPoolable()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#isPoolable()).\\n@return `true` if this statement is poolable; `false` otherwise.*/isPoolable():boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setCursorName(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setCursorName(java.lang.String)).\\n@param name The new cursor name, which must be unique within a connection.*/setCursorName(name:string):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setEscapeProcessing(boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setEscapeProcessing(boolean)).\\n@param enable If `true`, escape processing is enabled; otherwise it is disabled.*/setEscapeProcessing(enable:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setFetchDirection(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setFetchDirection(int)).\\n@param direction The specified direction to set, which is either `Jdbc.ResultSet.FETCH_FORWARD` or `Jdbc.ResultSet.FETCH_REVERSE`.*/setFetchDirection(direction:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setFetchSize(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setFetchSize(int)).\\n@param rows The number of rows to fetch.*/setFetchSize(rows:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setMaxFieldSize(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setMaxFieldSize(int)).\\n@param max The new column byte size limit; a value of zero indicates no limit.*/setMaxFieldSize(max:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#setMaxRows(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setMaxRows(int)).\\n@param max The maximum number of rows a result set generated by this statement can have. A\\n    value of 0 indicates no limit.*/setMaxRows(max:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setPoolable(boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setPoolable(boolean)).\\n@param poolable If `true`, requests that this statement be pooled; otherwise requests it\\n    not be pooled.*/setPoolable(poolable:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setQueryTimeout(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setQueryTimeout(int)).\\n@param seconds The new query timeout in seconds; a value of 0 indicates no timeout.*/setQueryTimeout(seconds:Integer):void;}interface JdbcSavepoint{\\n/**For documentation of this method, see [\\n`java.sql.Savepoint#getSavepointId()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Savepoint.html#getSavepointId()).\\n@return The numeric ID of this savepoint.*/getSavepointId():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Savepoint#getSavepointName()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Savepoint.html#getSavepointName()).\\n@return The name of this savepoint.*/getSavepointName():string;}interface JdbcSQLXML{\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.SQLXML#free()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/SQLXML.html#free()).*/free():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.SQLXML#getString()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/SQLXML.html#getString()).\\n@return The string representation of the XML value designated by this SQLXML instance.*/getString():string;\\n/**For documentation of this method, see [\\n`java.sql.SQLXML#setString(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/SQLXML.html#setString(java.lang.String)).\\n@param value The string representation of the XML value to set.*/setString(value:string):void;}interface JdbcRowId{\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.RowId#getBytes()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/RowId.html#getBytes()).\\n@return The bytes representing the `ROWID` represented by this [`JdbcRowId`](https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id.html).*/getBytes():Byte[];}interface JdbcResultSetMetaData{\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getCatalogName(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getCatalogName(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The catalog name for the table in the designated column, or an empty string if not\\n    applicable.*/getCatalogName(column:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getColumnClassName(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnClassName(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The fully-qualified name of the class of the designated column's values.*/getColumnClassName(column:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getColumnCount()`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnCount()).\\n@return The number of columns in this result set.*/getColumnCount():Integer;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getColumnDisplaySize(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnDisplaySize(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The maximum number of characters allowed as the width of the designated columns.*/getColumnDisplaySize(column:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getColumnLabel(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnLabel(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The designated column's suggested title, usually specifed by a SQL `AS` clause.\\n    Returns the same as [`getColumnName(column)`](https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set-meta-data.html#getColumnName(Integer)) if an `AS` is not specified.*/getColumnLabel(column:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getColumnName(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnName(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The designated column's name.*/getColumnName(column:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getColumnType(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnType(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The [SQL\\n    type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) of the designated column.*/getColumnType(column:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getColumnTypeName(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnTypeName(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The designated column's database-specific type name. Returns the fully-qualifed type\\n    name if this is a user-defined type.*/getColumnTypeName(column:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getPrecision(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getPrecision(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The maximum column size for the given column. For numeric data, this is the maximum\\n    precision. For character data, this is the length in characters. For datetime data, this is\\n    the length in characters of the string representation (assuming the maximum allowed\\n    precision of the fractional seconds component). For binary data, this is the length in\\n    bytes. For the `ROWID` datatype, this is the length in bytes. Returns 0 for types\\n    where the column size is not applicable.*/getPrecision(column:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getScale(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getScale(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The designated columns's number of digits to right of the decimal point. Returns 0 for\\n    data types where the scale is not applicable.*/getScale(column:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getSchemaName(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getSchemaName(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The table schema of the designated column.*/getSchemaName(column:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#getTableName(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getTableName(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The table name of the designated column, or an empty string if not applicable.*/getTableName(column:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#isAutoIncrement(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#isAutoIncrement(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return `true` if the specified column is automatically numbered; `false`\\n    otherwise.*/isAutoIncrement(column:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#isCaseSensitive(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#isCaseSensitive(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return `true` if the specified column is case-sensitive; `false` otherwise.*/isCaseSensitive(column:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#isCurrency(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#isCurrency(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return `true` if the specified column is a cash value; `false` otherwise.*/isCurrency(column:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#isDefinitelyWritable(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#isDefinitelyWritable(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return `true` if writes to the designated column definitely succeed; `false`\\n    otherwise.*/isDefinitelyWritable(column:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#isNullable(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#isNullable(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return The nullability status of the specified column, which is `Jdbc.ResultSetMetaData.columnNoNulls`, `Jdbc.ResultSetMetaData.columnNullable`, or\\n    `Jdbc.ResultSetMetaData.columnNullableUnknown`.*/isNullable(column:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#isReadOnly(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#isReadOnly(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return `true` if the designated column is definitely non-writable; `false`\\n    otherwise.*/isReadOnly(column:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#isSearchable(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#isSearchable(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return `true` if a where clause can use the specified column; `false` otherwise.*/isSearchable(column:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#isSigned(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#isSigned(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return `true` if the values in the specified column are signed numbers; `false`\\n    otherwise.*/isSigned(column:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.ResultSetMetaData#isWritable(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#isWritable(int)).\\n@param column The index of the column to examine (the first column is 1, the second is 2, and\\n    so on).\\n@return `true` if it is possible to write to the designated column; `false`\\n    otherwise.*/isWritable(column:Integer):boolean;}interface JdbcResultSet{\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#absolute(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#absolute(int)).\\n@param row The number of the row to which the cursor moves to. A positive number indicates the\\n    row number counting from the start of the result set, while a negative number indicates the\\n    counting from the end of the result set.\\n@return `true` if the cursor is moved to a position in this result set; `false` if\\n    the cursor is before the first row or after the last row.*/absolute(row:Integer):boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#afterLast()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#afterLast()).*/afterLast():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#beforeFirst()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#beforeFirst()).*/beforeFirst():void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#cancelRowUpdates()`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#cancelRowUpdates()).*/cancelRowUpdates():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#clearWarnings()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#clearWarnings()).*/clearWarnings():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#close()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#close()).*/close():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#deleteRow()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#deleteRow()).*/deleteRow():void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#findColumn(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#findColumn(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column index of the specified column.*/findColumn(columnLabel:string):Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#first()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#first()).\\n@return `true` if the cursor is on a valid row; `false` if there are no rows in the\\n    result set.*/first():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getArray(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getArray(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The value of the designated column in the current row of this result set as an array.*/getArray(columnIndex:Integer):Jdbc.JdbcArray;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getArray(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getArray(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The value of the designated column in the current row of this result set as an array.*/getArray(columnLabel:string):Jdbc.JdbcArray;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getBigDecimal(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getBigDecimal(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The column value; `null` if the value was SQL `NULL`.*/getBigDecimal(columnIndex:Integer):BigNumber;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getBigDecimal(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getBigDecimal(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; `null` if the value was SQL `NULL`.*/getBigDecimal(columnLabel:string):BigNumber;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getBlob(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getBlob(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The value of the designated column in the current row of this result set as a blob.*/getBlob(columnIndex:Integer):Jdbc.JdbcBlob;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getBlob(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getBlob(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The value of the designated column in the current row of this result set as a blob.*/getBlob(columnLabel:string):Jdbc.JdbcBlob;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getBoolean(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getBoolean(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; `false` if the value was SQL `NULL`.*/getBoolean(columnIndex:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getBoolean(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getBoolean(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; `false` if the value was SQL `NULL`.*/getBoolean(columnLabel:string):boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getByte(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getByte(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; 0 if the value was SQL `NULL`.*/getByte(columnIndex:Integer):Byte;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getByte(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getByte(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; 0 if the value was SQL `NULL`.*/getByte(columnLabel:string):Byte;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getBytes(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getBytes(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; `null` if the value was SQL `NULL`.*/getBytes(columnIndex:Integer):Byte[];\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getBytes(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getBytes(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; `null` if the value was SQL `NULL`.*/getBytes(columnLabel:string):Byte[];\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getClob(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getClob(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The value of the designated column in the current row of this result set as a clob.*/getClob(columnIndex:Integer):Jdbc.JdbcClob;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getClob(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getClob(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The value of the designated column in the current row of this result set as a clob.*/getClob(columnLabel:string):Jdbc.JdbcClob;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getConcurrency()`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getConcurrency()).\\n@return The concurrency type, which is either `Jdbc.ResultSet.CONCUR_READ_ONLY` or `Jdbc.ResultSet.CONCUR_UPDATABLE`.*/getConcurrency():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getCursorName()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getCursorName()).\\n@return The SQL name for this result set's cursor.*/getCursorName():string;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getDate(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; `null` if the value was SQL `NULL`.*/getDate(columnIndex:Integer):Jdbc.JdbcDate;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getDate(int, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(int,%20java.util.Calendar)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The column value; `null` if the value was SQL `NULL`.*/getDate(columnIndex:Integer,timeZone:string):Jdbc.JdbcDate;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getDate(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; `null` if the value was SQL `NULL`.*/getDate(columnLabel:string):Jdbc.JdbcDate;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getDate(String, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(java.lang.String,%20java.util.Calendar)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The column value; `null` if the value was SQL `NULL`.*/getDate(columnLabel:string,timeZone:string):Jdbc.JdbcDate;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getDouble(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getDouble(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; 0 if the value was SQL `NULL`.*/getDouble(columnIndex:Integer):number;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getDouble(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getDouble(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; 0 if the value was SQL `NULL`.*/getDouble(columnLabel:string):number;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getFetchDirection()`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getFetchDirection()).\\n@return The specified direction to set, which is either `Jdbc.ResultSet.FETCH_FORWARD` or\\n    `Jdbc.ResultSet.FETCH_REVERSE`.*/getFetchDirection():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getFetchSize()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getFetchSize()).\\n@return The current fetch size for this result set.*/getFetchSize():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getFloat(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getFloat(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; 0 if the value was SQL `NULL`.*/getFloat(columnIndex:Integer):number;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getFloat(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getFloat(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; 0 if the value was SQL `NULL`.*/getFloat(columnLabel:string):number;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getHoldability()`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getHoldability()).\\n@return The holdability of this result set, which is either `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.*/getHoldability():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getInt(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getInt(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; 0 if the value was SQL `NULL`.*/getInt(columnIndex:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getInt(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getInt(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; 0 if the value was SQL `NULL`.*/getInt(columnLabel:string):Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getLong(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getLong(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; 0 if the value was SQL `NULL`.*/getLong(columnIndex:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getLong(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getLong(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; 0 if the value was SQL `NULL`.*/getLong(columnLabel:string):Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getMetaData()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getMetaData()).\\n@return The number, types, and properties of this result set's columns.*/getMetaData():Jdbc.JdbcResultSetMetaData;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getNClob(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getNClob(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The column value of the current row.*/getNClob(columnIndex:Integer):Jdbc.JdbcClob;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getNClob(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getNClob(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value of the current row.*/getNClob(columnLabel:string):Jdbc.JdbcClob;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getNString(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getNString(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The column value of the current row; `null` if the value is SQL `NULL`.*/getNString(columnIndex:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getNString(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getNString(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value of the current row; `null` if the value is SQL `NULL`.*/getNString(columnLabel:string):string;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getObject(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getObject(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The value of the designated column in the current row of this result set.*/getObject(columnIndex:Integer):Object;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getObject(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getObject(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The value of the designated column in the current row of this result set.*/getObject(columnLabel:string):Object;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getRef(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getRef(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The value of the designated column in the current row of this result set as a\\n    reference.*/getRef(columnIndex:Integer):Jdbc.JdbcRef;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getRef(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getRef(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The value of the designated column in the current row of this result set as a\\n    reference.*/getRef(columnLabel:string):Jdbc.JdbcRef;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getRow()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getRow()).\\n@return The current row number, or 0 if there is no current row.*/getRow():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getRowId(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getRowId(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The column row ID value; `null` if the value is SQL `NULL`.*/getRowId(columnIndex:Integer):Jdbc.JdbcRowId;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getRowId(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getRowId(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column row ID value; `null` if the value is SQL `NULL`.*/getRowId(columnLabel:string):Jdbc.JdbcRowId;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getSQLXML(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getSQLXML(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The column value of the current row.*/getSQLXML(columnIndex:Integer):Jdbc.JdbcSQLXML;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getSQLXML(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getSQLXML(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value of the current row.*/getSQLXML(columnLabel:string):Jdbc.JdbcSQLXML;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getShort(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getShort(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; 0 if the value was SQL `NULL`.*/getShort(columnIndex:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getShort(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getShort(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; 0 if the value was SQL `NULL`.*/getShort(columnLabel:string):Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getStatement()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getStatement()).\\n@return The statement that produced this result set, or `null` if the result set was\\n    produced some other way.*/getStatement():Jdbc.JdbcStatement;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getString(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getString(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; `null` if the value was SQL `NULL`.*/getString(columnIndex:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getString(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; `null` if the value was SQL `NULL`.*/getString(columnLabel:string):string;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getTime(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getTime(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; `null` if the value was SQL `NULL`.*/getTime(columnIndex:Integer):Jdbc.JdbcTime;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getTime(int, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getTime(int,%20java.util.Calendar)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The column value; `null` if the value was SQL `NULL`.*/getTime(columnIndex:Integer,timeZone:string):Jdbc.JdbcTime;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getTime(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getTime(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; `null` if the value was SQL `NULL`.*/getTime(columnLabel:string):Jdbc.JdbcTime;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getTime(String, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getTime(java.lang.String,%20java.util.Calendar)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The column value; `null` if the value was SQL `NULL`.*/getTime(columnLabel:string,timeZone:string):Jdbc.JdbcTime;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getTimestamp(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getTimestamp(int)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@return The column value; `null` if the value was SQL `NULL`.*/getTimestamp(columnIndex:Integer):Jdbc.JdbcTimestamp;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getTimestamp(int, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getTimestamp(int,%20java.util.Calendar)).\\n@param columnIndex The index of the column to retrieve (the first column is 1, the second is 2,\\n    and so on).\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The column value; `null` if the value was SQL `NULL`.*/getTimestamp(columnIndex:Integer,timeZone:string):Jdbc.JdbcTimestamp;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getTimestamp(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getTimestamp(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The column value; `null` if the value was SQL `NULL`.*/getTimestamp(columnLabel:string):Jdbc.JdbcTimestamp;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getTimestamp(String, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getTimestamp(java.lang.String,%20java.util.Calendar)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The column value; `null` if the value was SQL `NULL`.*/getTimestamp(columnLabel:string,timeZone:string):Jdbc.JdbcTimestamp;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getType()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getType()).\\n@return The type of this result set, which is one of `Jdbc.ResultSet.TYPE_FORWARD_ONLY`,\\n    `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.*/getType():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#getURL(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getURL(int)).\\n@param columnIndex The index of the column to retrieve the data from (the first column is 1,\\n    the second is 2, and so on).\\n@return The URL value of the designated column in the current row of this result set.*/getURL(columnIndex:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#getURL(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#getURL(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@return The URL value of the designated column in the current row of this result set.*/getURL(columnLabel:string):string;\\n/**Returns the current set of warnings reported by the driver.\\n@return The current set of warnings.*/getWarnings():string[];\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#insertRow()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#insertRow()).*/insertRow():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#isAfterLast()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#isAfterLast()).\\n@return `true` if the cursor is after the last row; `false` if it is in any other\\n    position or if the result set contains no rows.*/isAfterLast():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#isBeforeFirst()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#isBeforeFirst()).\\n@return `true` if the cursor is before the first row; `false` if it is in any other\\n    position or if the result set contains no rows.*/isBeforeFirst():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#isClosed()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#isClosed()).\\n@return `true` if this result set is closed; `false` otherwise.*/isClosed():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#isFirst()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#isFirst()).\\n@return `true` if the cursor is on the first row; `false` otherwise.*/isFirst():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#isLast()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#isLast()).\\n@return `true` if the cursor is on the last row; `false` otherwise.*/isLast():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#first()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#last()).\\n@return `true` if the cursor is on a valid row; `false` if there are no rows in the\\n    result set.*/last():boolean;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#moveToCurrentRow()`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#moveToCurrentRow()).*/moveToCurrentRow():void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#moveToInsertRow()`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#moveToInsertRow()).*/moveToInsertRow():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#next()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#next()).\\n@return `true` if the new current row is valid; `false` otherwise.*/next():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#previous()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#previous()).\\n@return `true` if the cursor is on a valid row; `false` if the cursor is positioned\\n    before the first row.*/previous():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#refreshRow()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#refreshRow()).*/refreshRow():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#relative(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#relative(int)).\\n@param rows The number row steps to move the cursor. A positive number moves the cursor\\n    forward, while a negative number moves the cursor backward.\\n@return `true` if the cursor is on a row; `false` otherwise.*/relative(rows:Integer):boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#rowDeleted()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#rowDeleted()).\\n@return `true` if the current row was visibly deleted; `false` otherwise.*/rowDeleted():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#rowInserted()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#rowInserted()).\\n@return `true` if the current row was visibly inserted; `false` otherwise.*/rowInserted():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#rowUpdated()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#rowUpdated()).\\n@return `true` if the current row was visibly updated; `false` otherwise.*/rowUpdated():boolean;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#setFetchDirection(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#setFetchDirection(int)).\\n@param direction The specified direction to set, which is either `Jdbc.ResultSet.FETCH_FORWARD` or `Jdbc.ResultSet.FETCH_REVERSE`.*/setFetchDirection(direction:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#setFetchSize(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#setFetchSize(int)).\\n@param rows The number of rows to fetch.*/setFetchSize(rows:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateArray(int, Array)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateArray(int,%20java.sql.Array)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateArray(columnIndex:Integer,x:Jdbc.JdbcArray):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateArray(String, Array)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateArray(java.lang.String,%20java.sql.Array)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateArray(columnLabel:string,x:Jdbc.JdbcArray):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateBigDecimal(int, BigDecimal)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateBigDecimal(int,%20java.math.BigDecimal)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateBigDecimal(columnIndex:Integer,x:BigNumber):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateBigDecimal(String, BigDecimal)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateBigDecimal(java.lang.String,%20java.math.BigDecimal)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateBigDecimal(columnLabel:string,x:BigNumber):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateBlob(int, Blob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateBlob(int,%20java.sql.Blob)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateBlob(columnIndex:Integer,x:Jdbc.JdbcBlob):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateRef(String, Blob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateBlob(java.lang.String,%20java.sql.Blob)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateBlob(columnLabel:string,x:Jdbc.JdbcBlob):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateBoolean(int, boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateBoolean(int,%20boolean)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateBoolean(columnIndex:Integer,x:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateBoolean(String, boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateBoolean(java.lang.String,%20boolean)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateBoolean(columnLabel:string,x:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateByte(int, byte)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateByte(int,%20byte)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateByte(columnIndex:Integer,x:Byte):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateByte(String, byte)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateByte(java.lang.String,%20byte)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateByte(columnLabel:string,x:Byte):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateBytes(int, byte[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateBytes(int,%20byte[])).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateBytes(columnIndex:Integer,x:Byte[]):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateBytes(String, byte[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateBytes(java.lang.String,%20byte[])).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateBytes(columnLabel:string,x:Byte[]):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateClob(int, Clob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateClob(int,%20java.sql.Clob)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateClob(columnIndex:Integer,x:Jdbc.JdbcClob):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateClob(String, Clob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateClob(java.lang.String,%20java.sql.Clob)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateClob(columnLabel:string,x:Jdbc.JdbcClob):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateDate(int, Date)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateDate(int,%20java.sql.Date)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateDate(columnIndex:Integer,x:Jdbc.JdbcDate):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateDate(String, Date)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateDate(java.lang.String,%20java.sql.Date)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateDate(columnLabel:string,x:Jdbc.JdbcDate):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateDouble(int, double)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateDouble(int,%20double)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateDouble(columnIndex:Integer,x:number):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateDouble(String, double)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateDouble(java.lang.String,%20double)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateDouble(columnLabel:string,x:number):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateFloat(int, float)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateFloat(int,%20float)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateFloat(columnIndex:Integer,x:number):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateFloat(String, float)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateFloat(java.lang.String,%20float)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateFloat(columnLabel:string,x:number):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateInt(int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateInt(int,%20int)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateInt(columnIndex:Integer,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateInt(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateInt(java.lang.String,%20int)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateInt(columnLabel:string,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateLong(int, long)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateLong(int,%20long)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateLong(columnIndex:Integer,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateLong(String, long)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateLong(java.lang.String,%20long)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateLong(columnLabel:string,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateNClob(int, NClob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateNClob(int,%20java.sql.NClob)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateNClob(columnIndex:Integer,x:Jdbc.JdbcClob):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateNClob(String, NClob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateNClob(java.lang.String,%20java.sql.NClob)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateNClob(columnLabel:string,x:Jdbc.JdbcClob):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateNString(int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateNString(int,%20java.lang.String)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateNString(columnIndex:Integer,x:string):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateNString(String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateNString(java.lang.String,%20java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateNString(columnLabel:string,x:string):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#updateNull(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateNull(int)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).*/updateNull(columnIndex:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateNull(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateNull(java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.*/updateNull(columnLabel:string):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateObject(int, Object)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateObject(int,%20java.lang.Object)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateObject(columnIndex:Integer,x:Object):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateObject(int, Object, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateObject(int,%20java.lang.Object,%20int)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.\\n@param scaleOrLength The number of digits after the decimal for `BigDecimal` types, or\\n    the length of data for `InputStream` or `Reader` types. Ignored for all other\\n    types.*/updateObject(columnIndex:Integer,x:Object,scaleOrLength:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateObject(String, Object)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateObject(java.lang.String,%20java.lang.Object)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateObject(columnLabel:string,x:Object):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateObject(String, Object, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateObject(java.lang.String,%20java.lang.Object,%20int)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.\\n@param scaleOrLength The number of digits after the decimal for `BigDecimal` types, or\\n    the length of data for `InputStream` or `Reader` types. Ignored for all other\\n    types.*/updateObject(columnLabel:string,x:Object,scaleOrLength:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateRef(int, Ref)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateRef(int,%20java.sql.Ref)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateRef(columnIndex:Integer,x:Jdbc.JdbcRef):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateRef(String, Ref)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateRef(java.lang.String,%20java.sql.Ref)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateRef(columnLabel:string,x:Jdbc.JdbcRef):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#updateRow()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateRow()).*/updateRow():void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateRowId(int, RowId)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateRowId(int,%20java.sql.RowId)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateRowId(columnIndex:Integer,x:Jdbc.JdbcRowId):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateRowId(String, RowId)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateRowId(java.lang.String,%20java.sql.RowId)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateRowId(columnLabel:string,x:Jdbc.JdbcRowId):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateSQLXML(int, SQLXML)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateSQLXML(int,%20java.sql.SQLXML)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateSQLXML(columnIndex:Integer,x:Jdbc.JdbcSQLXML):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateSQLXML(String, SQLXML)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateSQLXML(java.lang.String,%20java.sql.SQLXML)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateSQLXML(columnLabel:string,x:Jdbc.JdbcSQLXML):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateShort(int, short)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateShort(int,%20short)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateShort(columnIndex:Integer,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateShort(String, short)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateShort(java.lang.String,%20short)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateShort(columnLabel:string,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateString(int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateString(int,%20java.lang.String)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateString(columnIndex:Integer,x:string):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateString(String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateString(java.lang.String,%20java.lang.String)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateString(columnLabel:string,x:string):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateTime(int, Time)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateTime(int,%20java.sql.Time)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateTime(columnIndex:Integer,x:Jdbc.JdbcTime):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateTime(String, Time)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateTime(java.lang.String,%20java.sql.Time)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateTime(columnLabel:string,x:Jdbc.JdbcTime):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateTimestamp(int, Timestamp)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateTimestamp(int,%20java.sql.Timestamp)).\\n@param columnIndex The index of the column to update (the first column is 1, the second is 2,\\n    and so on).\\n@param x The new column value.*/updateTimestamp(columnIndex:Integer,x:Jdbc.JdbcTimestamp):void;\\n/**For documentation of this method, see [\\n`java.sql.ResultSet#updateTimestamp(String, Timestamp)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#updateTimestamp(java.lang.String,%20java.sql.Timestamp)).\\n@param columnLabel The label for the column, specified with the SQL AS clause. If the AS clause\\n    wasn't specified, then the label is the name of the column.\\n@param x The new column value.*/updateTimestamp(columnLabel:string,x:Jdbc.JdbcTimestamp):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.ResultSet#wasNull()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html#wasNull()).\\n@return `true` if the last column read was SQL `NULL`; `false` otherwise.*/wasNull():boolean;}interface JdbcRef{\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Ref#getBaseTypeName()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Ref.html#getBaseTypeName()).\\n@return The fully-qualified SQL name of the SQL structured type this [`JdbcRef`](https://developers.google.com/apps-script/reference/jdbc/jdbc-ref.html)\\n    references.*/getBaseTypeName():string;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Ref#getObject()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Ref.html#getObject()).\\n@return The object that this [`JdbcRef`](https://developers.google.com/apps-script/reference/jdbc/jdbc-ref.html) references.*/getObject():Object;\\n/**For documentation of this method, see [\\n`java.sql.Ref#setObject(Object)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Ref.html#setObject(java.lang.Object)).\\n@param object The object to set as the refernence target.*/setObject(object:Object):void;}interface JdbcPreparedStatement{\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#addBatch()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#addBatch()).*/addBatch():void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#addBatch(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#addBatch(java.lang.String)).\\n@param sql The SQL command to add to this statement, typically an SQL `INSERT` or `UPDATE`.*/addBatch(sql:string):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#cancel()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#cancel()).*/cancel():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#clearBatch()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#clearBatch()).*/clearBatch():void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#clearParameters()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#clearParameters()).*/clearParameters():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#clearWarnings()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#clearWarnings()).*/clearWarnings():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#close()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#close()).*/close():void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#execute()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#execute()).\\n@return `true` if the first result is a result set; `false` if the first result is\\n    an update count or there is no result.*/execute():boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String)).\\n@param sql The SQL statement to execute.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int)).\\n@param sql The SQL statement to execute.\\n@param autoGeneratedKeys A flag that indicates whether auto-generated keys are made available\\n    for future retrieval; either `Jdbc.Statement.RETURN_GENERATED_KEYS` or `Jdbc.Statement.NO_GENERATED_KEYS`.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string,autoGeneratedKeys:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String, int[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int[])).\\n@param sql The SQL statement to execute.\\n@param columnIndexes The column indices in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string,columnIndexes:Integer[]):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String, String[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20java.lang.String[])).\\n@param sql The SQL statement to execute.\\n@param columnNames The names of columns in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string,columnNames:string[]):boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#executeBatch()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeBatch()).\\n@return The update counts for each command in the batch, using the same order in which commands\\n    were added to the batch.*/executeBatch():Integer[];\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#executeQuery()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()).\\n@return A result set that contains the data produced by the query.*/executeQuery():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeQuery(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeQuery(java.lang.String)).\\n@param sql The SQL statement to execute, typically a static `SELECT`.\\n@return A result set containing the results of the execution. This is never `null`.*/executeQuery(sql:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#executeUpdate()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()).\\n@return The row count ofr SQL Data Manipulation Language statements, or 0 for SQL statements\\n    that return nothing.*/executeUpdate():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String)).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String,%20int)).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@param autoGeneratedKeys A flag that indicates whether auto-generated keys are made available\\n    for future retrieval; either `Jdbc.Statement.RETURN_GENERATED_KEYS` or `Jdbc.Statement.NO_GENERATED_KEYS`.\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string,autoGeneratedKeys:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String, int[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String,%20int[])).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@param columnIndexes The column indices in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string,columnIndexes:Integer[]):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String, String[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String,%20java.lang.String[])).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@param columnNames The names of columns in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string,columnNames:string[]):Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getConnection()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getConnection()).\\n@return The connection that produced this statement.*/getConnection():Jdbc.JdbcConnection;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getFetchDirection()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getFetchDirection()).\\n@return The default direction for result sets generated by this statement, which is either\\n    `Jdbc.ResultSet.FETCH_FORWARD` or `Jdbc.ResultSet.FETCH_REVERSE`.*/getFetchDirection():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getFetchSize()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getFetchSize()).\\n@return The default row fetch size for result sets generated from this statement.*/getFetchSize():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getGeneratedKeys()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getGeneratedKeys()).\\n@return A result set containing the auto-generated keys generated by the execution of this\\n    statement.*/getGeneratedKeys():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getMaxFieldSize()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMaxFieldSize()).\\n@return The current column byte size limit for columns storing character and binary values; a\\n    value of zero indictates no limit.*/getMaxFieldSize():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getMaxRows()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMaxRows()).\\n@return The current maximum number of rows for a result set produced by this statement; a value\\n    of 0 indicates no limit.*/getMaxRows():Integer;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#getMetaData()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#getMetaData()).\\n@return The description of a result set's columns, or `NULL` if this metadata is\\n    unavailable.*/getMetaData():Jdbc.JdbcResultSetMetaData;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getMoreResults()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMoreResults()).\\n@return `true` if the next result is a result set; `false` otherwise.*/getMoreResults():boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getMoreResults(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMoreResults(int)).\\n@param current A flag that indicates what happens to current result sets when retrieved. This\\n    value is one of `Jdbc.Statement.CLOSE_CURRENT_RESULT`, `Jdbc.Statement.KEEP_CURRENT_RESULT`, or `Jdbc.Statement.CLOSE_ALL_RESULTS`.\\n@return `true` if the next result is a result set; `false` otherwise.*/getMoreResults(current:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#getParameterMetaData()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#getParameterMetaData()).\\n@return The parameter metadata, including the number, types, and properties for each parameter.*/getParameterMetaData():Jdbc.JdbcParameterMetaData;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getQueryTimeout()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getQueryTimeout()).\\n@return The current query timeout in seconds; a value of zero indicates no timeout.*/getQueryTimeout():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getResultSet()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSet()).\\n@return The current result set, or `null` if the result is an update count or there are\\n    no more results.*/getResultSet():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getResultSetConcurrency()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSetConcurrency()).\\n@return The result set concurrency for result sets generated from this statement, which is\\n    either `Jdbc.ResultSet.CONCUR_READ_ONLY` or `Jdbc.ResultSet.CONCUR_UPDATABLE`.*/getResultSetConcurrency():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getResultSetHoldability()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSetHoldability()).\\n@return The result set holdability, which is either `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.*/getResultSetHoldability():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getResultSetType()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSetType()).\\n@return The result set type for result sets generated from this statement, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or\\n    `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.*/getResultSetType():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getUpdateCount()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getUpdateCount()).\\n@return The current result as an update count, or -1 if the current result is a result set or\\n    if there are no more results.*/getUpdateCount():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getWarnings()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getWarnings()).\\n@return The current set of warnings, or `null` if there are no warnings.*/getWarnings():string[];\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#isClosed()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#isClosed()).\\n@return `true` if this statement is closed; `false` otherwise.*/isClosed():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#isPoolable()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#isPoolable()).\\n@return `true` if this statement is poolable; `false` otherwise.*/isPoolable():boolean;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setArray(int, Array)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setArray(int,%20java.sql.Array)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setArray(parameterIndex:Integer,x:Jdbc.JdbcArray):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setBigDecimal(int, BigDecimal)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBigDecimal(int,%20java.math.BigDecimal)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setBigDecimal(parameterIndex:Integer,x:BigNumber):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setBlob(int, Clob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBlob(int,%20java.sql.Blob)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setBlob(parameterIndex:Integer,x:Jdbc.JdbcBlob):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setBoolean(int, boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBoolean(int,%20boolean)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setBoolean(parameterIndex:Integer,x:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setByte(int, byte)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setByte(int,%20byte)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setByte(parameterIndex:Integer,x:Byte):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setBytes(int, byte[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBytes(int,%20byte[])).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setBytes(parameterIndex:Integer,x:Byte[]):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setClob(int, Clob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setClob(int,%20java.sql.Clob)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setClob(parameterIndex:Integer,x:Jdbc.JdbcClob):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setCursorName(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setCursorName(java.lang.String)).\\n@param name The new cursor name, which must be unique within a connection.*/setCursorName(name:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setDate(int, Date)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setDate(int,%20java.sql.Date)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setDate(parameterIndex:Integer,x:Jdbc.JdbcDate):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setDate(int, Date, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setDate(int,%20java.sql.Date,%20java.util.Calendar)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).*/setDate(parameterIndex:Integer,x:Jdbc.JdbcDate,timeZone:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setDouble(int, double)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setDouble(int,%20double)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setDouble(parameterIndex:Integer,x:number):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setEscapeProcessing(boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setEscapeProcessing(boolean)).\\n@param enable If `true`, escape processing is enabled; otherwise it is disabled.*/setEscapeProcessing(enable:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setFetchDirection(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setFetchDirection(int)).\\n@param direction The specified direction to set, which is either `Jdbc.ResultSet.FETCH_FORWARD` or `Jdbc.ResultSet.FETCH_REVERSE`.*/setFetchDirection(direction:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setFetchSize(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setFetchSize(int)).\\n@param rows The number of rows to fetch.*/setFetchSize(rows:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setFloat(int, float)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setFloat(int,%20float)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setFloat(parameterIndex:Integer,x:number):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setInt(int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setInt(int,%20int)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setInt(parameterIndex:Integer,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setLong(int, long)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setLong(int,%20long)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setLong(parameterIndex:Integer,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setMaxFieldSize(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setMaxFieldSize(int)).\\n@param max The new column byte size limit; a value of zero indicates no limit.*/setMaxFieldSize(max:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#setMaxRows(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setMaxRows(int)).\\n@param max The maximum number of rows a result set generated by this statement can have. A\\n    value of 0 indicates no limit.*/setMaxRows(max:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setNClob(int, NClob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNClob(int,%20java.sql.NClob)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setNClob(parameterIndex:Integer,x:Jdbc.JdbcClob):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setNString(int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNString(int,%20java.lang.String)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setNString(parameterIndex:Integer,x:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setNull(int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNull(int,%20int)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param sqlType The [SQL\\n    type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) of the specified parameter.*/setNull(parameterIndex:Integer,sqlType:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setNull(int, int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNull(int,%20int,%20java.lang.String)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param sqlType The [SQL\\n    type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) of the specified parameter.\\n@param typeName The fully-qualifed name of an SQL user-defined type. Ignored if the parameter\\n    isn't a user-defined type or `REF`.*/setNull(parameterIndex:Integer,sqlType:Integer,typeName:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setObject(int, Object)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int,%20java.lang.Object)).\\n@param index The index of the parameter to set (the first parameter is 1, the second is 2, and\\n    so on).\\n@param x The object containing the value to set the parameter to.*/setObject(index:Integer,x:Object):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setObject(int, Object, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int,%20java.lang.Object,%20int)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The object containing the value to set the parameter to.\\n@param targetSqlType The [SQL type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) to send\\n    to the database.*/setObject(parameterIndex:Integer,x:Object,targetSqlType:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setObject(int, Object, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int,%20java.lang.Object,%20int,%20int)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The object containing the value to set the parameter to.\\n@param targetSqlType The [SQL type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) to send\\n    to the database. The scale argument may further qualify this type.\\n@param scaleOrLength The number of digits after the decimal for `DECIMAL` or `NUMERIC` types, or the length of data for `InputStream` or `Reader` types.\\n    Ignored for all other types.*/setObject(parameterIndex:Integer,x:Object,targetSqlType:Integer,scaleOrLength:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setPoolable(boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setPoolable(boolean)).\\n@param poolable If `true`, requests that this statement be pooled; otherwise requests it\\n    not be pooled.*/setPoolable(poolable:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setQueryTimeout(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setQueryTimeout(int)).\\n@param seconds The new query timeout in seconds; a value of 0 indicates no timeout.*/setQueryTimeout(seconds:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setRef(int, Ref)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setRef(int,%20java.sql.Ref)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The SQL `REF` value to set.*/setRef(parameterIndex:Integer,x:Jdbc.JdbcRef):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setRowId(int, RowId)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setRowId(int,%20java.sql.RowId)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setRowId(parameterIndex:Integer,x:Jdbc.JdbcRowId):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setSQLXML(int, SQLXML)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setSQLXML(int,%20java.sql.SQLXML)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setSQLXML(parameterIndex:Integer,x:Jdbc.JdbcSQLXML):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setShort(int, short)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setShort(int,%20short)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setShort(parameterIndex:Integer,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setString(int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int,%20java.lang.String)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setString(parameterIndex:Integer,x:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setTime(int, Time)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTime(int,%20java.sql.Time)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setTime(parameterIndex:Integer,x:Jdbc.JdbcTime):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setTime(int, Time, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTime(int,%20java.sql.Time,%20java.util.Calendar)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).*/setTime(parameterIndex:Integer,x:Jdbc.JdbcTime,timeZone:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setTimestamp(int, Timestamp)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTimestamp(int,%20java.sql.Timestamp)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setTimestamp(parameterIndex:Integer,x:Jdbc.JdbcTimestamp):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setTimestamp(int, Timestamp, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTimestamp(int,%20java.sql.Timestamp,%20java.util.Calendar)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).*/setTimestamp(parameterIndex:Integer,x:Jdbc.JdbcTimestamp,timeZone:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setURL(int, URL)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setURL(int,%20java.net.URL)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setURL(parameterIndex:Integer,x:string):void;}interface JdbcParameterMetaData{\\n/**For documentation of this method, see [\\n`java.sql.ParameterMetaData#getParameterClassName(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ParameterMetaData.html#getParameterClassName(int)).\\n@param param The index of the parameter to examine. The first parameter has an index of 1.\\n@return The fully-qualified Java class name that is used by the [`JdbcPreparedStatement.setObject(index, x)`](https://developers.google.com/apps-script/reference/jdbc/jdbc-prepared-statement.html#setObject(Integer,Object)) methods.*/getParameterClassName(param:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ParameterMetaData#getParameterCount()`](https://docs.oracle.com/javase/6/docs/api/java/sql/ParameterMetaData.html#getParameterCount()).\\n@return The number of parameters for which this metadata contains information.*/getParameterCount():Integer;\\n/**For documentation of this method, see [\\n`java.sql.ParameterMetaData#getParameterMode(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ParameterMetaData.html#getParameterMode(int)).\\n@param param The index of the parameter to examine. The first parameter has an index of 1.\\n@return The designated parameter's mode, which is one of `Jdbc.ParameterMetaData.parameterModeIn`, `Jdbc.ParameterMetaData.parameterModeOut`,\\n    `Jdbc.ParameterMetaData.parameterModeInOut`, or `Jdbc.ParameterMetaData.parameterModeUnknown`.*/getParameterMode(param:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ParameterMetaData#getParameterType(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ParameterMetaData.html#getParameterType(int)).\\n@param param The index of the parameter to examine. The first parameter has an index of 1.\\n@return The designated parameter's [SQL type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html).*/getParameterType(param:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ParameterMetaData#getParameterTypeName(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ParameterMetaData.html#getParameterTypeName(int)).\\n@param param The index of the parameter to examine. The first parameter has an index of 1.\\n@return The designated parameter's database-specific type name. This is a fully-qualified type\\n    name if the parameter is a user-defined type.*/getParameterTypeName(param:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.ParameterMetaData#getPrecision(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ParameterMetaData.html#getPrecision(int)).\\n@param param The index of the parameter to examine. The first parameter has an index of 1.\\n@return The maximum column size for the given parameter. For numeric data, this is the maximum\\n    precision. For character data, this is the length in characters. For datetime data, this is\\n    the length in characters of the string representation (assuming the maximum allowed\\n    precision of the fractional seconds component). For binary data, this is the length in\\n    bytes. For the `ROWID` datatype, this is the length in bytes. Returns 0 for types\\n    where the column size is not applicable.*/getPrecision(param:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ParameterMetaData#getScale(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ParameterMetaData.html#getScale(int)).\\n@param param The index of the parameter to examine. The first parameter has an index of 1.\\n@return The designated parameter's number of digits to right of the decimal point. Returns 0\\n    for data types where the scale is not applicable.*/getScale(param:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ParameterMetaData#isNullable(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ParameterMetaData.html#isNullable(int)).\\n@param param The index of the parameter to examine. The first parameter has an index of 1.\\n@return The nullability status of the given parameter; one of `Jdbc.ParameterMetaData.parameterNoNulls`, `Jdbc.ParameterMetaData.parameterNullable`,\\n    or `Jdbc.ParameterMetaData.parameterNullableUnknown`.*/isNullable(param:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.ParameterMetaData#isSigned(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/ParameterMetaData.html#isSigned(int))).\\n@param param The index of the parameter to examine. The first parameter has an index of 1.\\n@return `true` if the specified parameter can accept signed number values; `false`\\n    otherwise.*/isSigned(param:Integer):boolean;}interface JdbcDate{\\n/**For documentation of this method, see [\\n`java.sql.Date#after(date)`](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#after(java.util.Date)).\\n@param when A date to compare to.\\n@return `true` if and only if this date is strictly later than the provided date; `false` otherwise.*/after(when:Jdbc.JdbcDate):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Date#before(date)`](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#before(java.util.Date)).\\n@param when A date to compare to.\\n@return `true` if and only if this date is strictly earlier than the provided date;\\n    `false` otherwise.*/before(when:Jdbc.JdbcDate):boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getDate()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getDate()).\\n@return The day of the month represented by this date. The value is between 1 and 31.*/getDate():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getMonth()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getMonth()).\\n@return The number representing the month that contains or begins with the instant in time\\n    represented by this date. The value returned is between 0 and 11, with the value 0\\n    representing January.*/getMonth():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getTime()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getTime()).\\n@return The number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this\\n    date.*/getTime():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#getYear()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#getYear()).\\n@return The result of subtracting 1900 from the year that contains or begins with the instant\\n    in time represented by this date, as interpreted in the local time zone.*/getYear():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setDate(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setDate(int)).\\n@param date The day of the month to set. The value is between 1 and 31, modified as needed. For\\n    example, if the date was April 30, for example, and the date is set to 31, then it is\\n    treated as if it were on May 1, because April has only 30 days.*/setDate(date:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setMonth(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setMonth(int)).\\n@param month The month value to set. The value returned is between 0 and 11, with the value 0\\n    representing January.*/setMonth(month:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setTime(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Date.html#setTime(long)).\\n@param milliseconds The number of milliseconds since January 1, 1970, 00:00:00 GMT, not to\\n    exceed the milliseconds representation for the year 8099. A negative number indicates the\\n    number of milliseconds before January 1, 1970, 00:00:00 GMT.*/setTime(milliseconds:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Date#setYear(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#setYear(int)).\\n@param year The value to set the year with. This value plus 1900 is the resulting year the date\\n    has after this method executes.*/setYear(year:Integer):void;}interface JdbcDatabaseMetaData{\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#allProceduresAreCallable()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#allProceduresAreCallable()).\\n@return `true` if the user can call all of the procedures returned by [`getProcedures(catalog, schemaPattern, procedureNamePattern)`](https://developers.google.com/apps-script/reference/jdbc/jdbc-database-meta-data.html#getProcedures(String,String,String)); `false` otherwise.*/allProceduresAreCallable():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#allTablesAreSelectable()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#allTablesAreSelectable()).\\n@return `true` if the user can call all of the tables returned by [`getTables(catalog, schemaPattern, tableNamePattern, types)`](https://developers.google.com/apps-script/reference/jdbc/jdbc-database-meta-data.html#getTables(String,String,String,String)) in a `SELECT`\\n    statement; `false` otherwise.*/allTablesAreSelectable():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#autoCommitFailureClosesAllResultSets()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#autoCommitFailureClosesAllResultSets()).\\n@return `true` if, when `autoCommit` is `true`, a SQL exception indicates\\n    that all open result sets are closed, even if holdable. Returns `false` otherwise.*/autoCommitFailureClosesAllResultSets():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#dataDefinitionCausesTransactionCommit()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#dataDefinitionCausesTransactionCommit()).\\n@return `true` if a data definition statement within a transaction forces the transaction\\n    to commit; `false` otherwise.*/dataDefinitionCausesTransactionCommit():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#dataDefinitionIgnoredInTransactions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#dataDefinitionIgnoredInTransactions()).\\n@return `true` if the database ignores a data definition statement within a transaction;\\n    `false` otherwise.*/dataDefinitionIgnoredInTransactions():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#deletesAreDetected(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#deletesAreDetected(int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@return `true` if for the specified result set type a visible row delete is detected by\\n    calls to [`JdbcResultSet.rowDeleted()`](https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set.html#rowDeleted()). If `false`, the deleted rows are removed\\n    from the result set.*/deletesAreDetected(type:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#doesMaxRowSizeIncludeBlobs()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#doesMaxRowSizeIncludeBlobs()).\\n@return `true` if SQL data types `LONGVARCHAR` and `LONGVARBINARY` are\\n    included in the size returned by [`getMaxRowSize()`](https://developers.google.com/apps-script/reference/jdbc/jdbc-database-meta-data.html#getMaxRowSize()); `false` otherwise.*/doesMaxRowSizeIncludeBlobs():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getAttributes(String, String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getAttributes(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema. Passing\\n    `null` incidates the schema name isn't used to narrow the search.\\n@param typeNamePattern The user-defined type name pattern; it must match the type name as it is\\n    stored in the database.\\n@param attributeNamePattern The attribute name pattern; it must match the attribute name as it\\n    is declared in the database.\\n@return A result set containing descriptions the attributes for a specified user-defined type\\n    available in the specified schema and catalog. Each row provides information about a\\n    specific attribute, ordered by `TYPE_CAT`, `TYPE_SCHEM`, `TYPE_NAME`, and\\n    `ORDINAL_POSITION`.*/getAttributes(catalog:string,schemaPattern:string,typeNamePattern:string,attributeNamePattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getBestRowIdentifier(String, String, String, int, boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getBestRowIdentifier(java.lang.String,%20java.lang.String,%20java.lang.String,%20int,%20boolean)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schema The schema name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a schema. Passing `null` incidates\\n    the schema name isn't used to narrow the search.\\n@param table The table name. It must match the table name as it is stored in the database.\\n@param scope The scope of interest, using the same values as present in the `SCOPE`\\n    column description column.\\n@param nullable If `true`, include columns that are nullable; otherwise do not.\\n@return A result set containing the column descriptions that uniquely identify a row (one\\n    column description per row in the result set, ordered by `SCOPE`).*/getBestRowIdentifier(catalog:string,schema:string,table:string,scope:Integer,nullable:boolean):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getCatalogSeparator()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getCatalogSeparator()).\\n@return The separator between a catalog and table name used by this database.*/getCatalogSeparator():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getCatalogTerm()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getCatalogTerm()).\\n@return The database vendor's preferred term for 'catalog'.*/getCatalogTerm():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getCatalogs()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getCatalogs()).\\n@return A result set containing the catalog names, one per row.*/getCatalogs():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getClientInfoProperties()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getClientInfoProperties()).\\n@return A result set containing client info properties the driver supports, ordered by `NAME`, one per row.*/getClientInfoProperties():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getColumnPrivileges(String, String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getColumnPrivileges(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schema The name of the schema to filter the search by, as it appears in the database.\\n    Passing an empty string retrieves those procedures without a schema. Passing `null`\\n    incidates the schema name isn't used to narrow the search.\\n@param table The table name. It must match the table name as it is stored in the database.\\n@param columnNamePattern The column name pattern to filter the search by. It must match the\\n    column name as it is stored in the database.\\n@return A result set containing the column privilege descriptions, one per row, ordered by\\n    `COLUMN_NAME` and `PRIVILEGE`.*/getColumnPrivileges(catalog:string,schema:string,table:string,columnNamePattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getColumns(String, String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getColumns(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema. Passing\\n    `null` incidates the schema name isn't used to narrow the search.\\n@param tableNamePattern The table name pattern to filter the search by. It must match the table\\n    name as it is stored in the database.\\n@param columnNamePattern The column name pattern to filter the search by. It must match the\\n    column name as it is stored in the database.\\n@return A result set containing the column descriptions, one per row, ordered according to\\n    `TABLE_CAT`, `TABLE_SCHEM`, `TABLE_NAME`, and `ORDINAL_POSITION`.*/getColumns(catalog:string,schemaPattern:string,tableNamePattern:string,columnNamePattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getConnection()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getConnection()).\\n@return The connection that produced this metadata.*/getConnection():Jdbc.JdbcConnection;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getCrossReference(String, String, String,\\n     String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getCrossReference(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param parentCatalog A parent catalog name as it appears in the database. Passing an empty\\n    string retrieves those procedures without a catalog. Passing `null` incidates the\\n    catalog name isn't used in the selection criteria.\\n@param parentSchema A parent schema name as it appears in the database. Passing an empty string\\n    retrieves those procedures without a schema. Passing `null` incidates the schema name\\n    isn't used in the selection criteria.\\n@param parentTable The name of the parent table that exports the key. It must match the table\\n    name as it is stored in the database.\\n@param foreignCatalog A foreign catalog name as it appears in the database. Passing an empty\\n    string retrieves those procedures without a catalog. Passing `null` incidates the\\n    catalog name isn't used in the selection criteria.\\n@param foreignSchema A foreign schema name as it appears in the database. Passing an empty\\n    string retrieves those procedures without a schema. Passing `null` incidates the\\n    schema name isn't used in the selection criteria.\\n@param foreignTable The name of the foreign table that exports the key. It must match the table\\n    name as it is stored in the database.\\n@return An result set containing the foreign key column descriptions from the specified foreign\\n    key table that reference the primary key or the columns representing a unique constraint of\\n    the parent table. One column description is provided in each row of the result set, and\\n    they are ordered by `FKTABLE_CAT`, `FKTABLE_SCHEM`, `FKTABLE_NAME`, and\\n    `KEY_SEQ`.*/getCrossReference(parentCatalog:string,parentSchema:string,parentTable:string,foreignCatalog:string,foreignSchema:string,foreignTable:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getDatabaseMajorVersion()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getDatabaseMajorVersion()).\\n@return The major version number of the underlying database.*/getDatabaseMajorVersion():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getDatabaseMinorVersion()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getDatabaseMinorVersion()).\\n@return The minor version number of the underlying database.*/getDatabaseMinorVersion():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getDatabaseProductName()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).\\n@return The name of this database product.*/getDatabaseProductName():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getDatabaseProductVersion()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductVersion()).\\n@return The version number of this database product.*/getDatabaseProductVersion():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getDefaultTransactionIsolation()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getDefaultTransactionIsolation()).\\n@return The database's default transaction isolation level, which is one of: `Jdbc.Connection.TRANSACTION_READ_UNCOMMITTED`, `Jdbc.Connection.TRANSACTION_READ_COMMITTED`, `Jdbc.Connection.TRANSACTION_REPEATABLE_READ`, `Jdbc.Connection.TRANSACTION_SERIALIZABLE`, or `Jdbc.Connection.TRANSACTION_NONE`.*/getDefaultTransactionIsolation():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getDriverMajorVersion()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getDriverMajorVersion()).\\n@return The JDBC driver's major version number.*/getDriverMajorVersion():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getDriverMinorVersion()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getDriverMinorVersion()).\\n@return The JDBC driver's minor version number.*/getDriverMinorVersion():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getDriverName()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getDriverName()).\\n@return The name of this JDBC driver.*/getDriverName():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getDriverVersion()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getDriverVersion()).\\n@return The version number of this JDBC driver.*/getDriverVersion():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getImportedKeys(String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getExportedKeys(java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schema The schema name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a schema. Passing `null` incidates\\n    the schema name isn't used to narrow the search.\\n@param table The table name. It must match the table name as it is stored in the database.\\n@return An result set containing the foreign key column descriptions for the primary key\\n    columns exported by the table. One column description is provided in each row of the result\\n    set, and they are ordered by `FKTABLE_CAT`, `FKTABLE_SCHEM`, `FKTABLE_NAME`, and `KEY_SEQ`.*/getExportedKeys(catalog:string,schema:string,table:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getExtraNameCharacters()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getExtraNameCharacters()).\\n@return The extra characters that are avaiable for use in unquoted identifier names in addition\\n    to a-z, A-Z, 0-9, and _.*/getExtraNameCharacters():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getFunctionColumns(String, String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getFunctionColumns(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema. Passing\\n    `null` incidates the schema name isn't used to narrow the search.\\n@param functionNamePattern The function pattern, which match the function name as it is stored\\n    in the database.\\n@param columnNamePattern The parameter name pattern, which must match the parameter or column\\n    name as it is stored in the database.\\n@return A result set containing the descriptions of system and user function parameters\\n    available in the given catalog. Each row contains one function description, ordered\\n    according to `FUNCTION_CAT`, `FUNCTION_SCHEM`, `FUNCTION_NAME`, and\\n    `SPECIFIC_ NAME`.*/getFunctionColumns(catalog:string,schemaPattern:string,functionNamePattern:string,columnNamePattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getFunctions(String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getFunctions(java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema. Passing\\n    `null` incidates the schema name isn't used to narrow the search.\\n@param functionNamePattern The function pattern, which must match the function name as it is\\n    stored in the database.\\n@return A result set containing descriptions of the system and user functions available in the\\n    given catalog. Each row contains one function description, ordered according to `FUNCTION_CAT`, `FUNCTION_SCHEM`, `FUNCTION_NAME`, and `SPECIFIC_ NAME`.*/getFunctions(catalog:string,schemaPattern:string,functionNamePattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getIdentifierQuoteString()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getIdentifierQuoteString()).\\n@return The string used to quote SQL identifiers. Defaults to a space (\\\" \\\") if identifier\\n    quoting isn't supported.*/getIdentifierQuoteString():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getImportedKeys(String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getImportedKeys(java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schema The schema name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a schema. Passing `null` incidates\\n    the schema name isn't used to narrow the search.\\n@param table The table name. It must match the table name as it is stored in the database.\\n@return An result set containing the column descriptions for the primary key columns referenced\\n    by the given table's foreign key columns (those imported by a table). One column\\n    description is provided in each row of the result set, and they are ordered by `PKTABLE_CAT`, `PKTABLE_SCHEM`, `PKTABLE_NAME`, and `KEY_SEQ`.*/getImportedKeys(catalog:string,schema:string,table:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getIndexInfo(String, String, String, boolean, boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getIndexInfo(java.lang.String,%20java.lang.String,%20java.lang.String,%20boolean,%20boolean)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schema The schema name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a schema. Passing `null` incidates\\n    the schema name isn't used to narrow the search.\\n@param table The table name. It must match the table name as it is stored in the database.\\n@param unique If `true`, the method only return indices for unique values; otherwise it\\n    returns indices whether the values are unique or not.\\n@param approximate If `true`, the result is allowed to reflect approximate or out-of-data\\n    values; otherwise result accuracy is requested.\\n@return An result set containing the index and statistic column descriptions for the specified\\n    table. One column description is provided in each row of the result set, and they are\\n    ordered by `NON_UNIQUE`, `TYPE`, `INDEX_NAME`, and `ORDINAL_POSITION`.*/getIndexInfo(catalog:string,schema:string,table:string,unique:boolean,approximate:boolean):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getJDBCMajorVersion()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getJDBCMajorVersion()).\\n@return The major JDBC version number for this driver.*/getJDBCMajorVersion():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getJDBCMinorVersion()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getJDBCMinorVersion()).\\n@return The minor JDBC version number for this driver.*/getJDBCMinorVersion():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxBinaryLiteralLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxBinaryLiteralLength()).\\n@return The maximum number of hex characters this database allows in an inline binary literal.\\n    A response of 0 indicates there is no known limit.*/getMaxBinaryLiteralLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxCatalogNameLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxCatalogNameLength()).\\n@return The maximum number of characters this database allows in a catalog name. A response of\\n    0 indicates there is no known limit.*/getMaxCatalogNameLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxCharLiteralLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxCharLiteralLength()).\\n@return The maximum number of characters this database allows in a character literal. A\\n    response of 0 indicates there is no known limit.*/getMaxCharLiteralLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxColumnNameLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxColumnNameLength()).\\n@return The maximum number of characters this database allows in a column name. A response of 0\\n    indicates there is no known limit.*/getMaxColumnNameLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxColumnsInGroupBy()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxColumnsInGroupBy()).\\n@return The maximum number of columns this database allows in a `GROUP BY` clause. A\\n    response of 0 indicates there is no known limit.*/getMaxColumnsInGroupBy():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxColumnsInIndex()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxColumnsInIndex()).\\n@return The maximum number of columns this database allows in an index. A response of 0\\n    indicates there is no known limit.*/getMaxColumnsInIndex():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxColumnsInOrderBy()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxColumnsInOrderBy()).\\n@return The maximum number of columns this database allows in an `ORDER BY` clause. A\\n    response of 0 indicates there is no known limit.*/getMaxColumnsInOrderBy():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxColumnsInSelect()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxColumnsInSelect()).\\n@return The maximum number of columns this database allows in an `SELECT` list. A\\n    response of 0 indicates there is no known limit.*/getMaxColumnsInSelect():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxColumnsInTable()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxColumnsInTable()).\\n@return The maximum number of columns this database allows in a table. A response of 0\\n    indicates there is no known limit.*/getMaxColumnsInTable():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxConnections()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxConnections()).\\n@return The maximum number of concurrent connections to this database. A response of 0\\n    indicates there is no known limit.*/getMaxConnections():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxCursorNameLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxCursorNameLength()).\\n@return The maximum number of characters that this database allows in a cursor name. A response\\n    of 0 indicates there is no known limit.*/getMaxCursorNameLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxIndexLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxIndexLength()).\\n@return The maximum number of bytes this database allows for an index, including all its parts.\\n    A response of 0 indicates there is no known limit.*/getMaxIndexLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxProcedureNameLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxProcedureNameLength()).\\n@return The maximum number of characters this database allows in a procedure name. A response\\n    of 0 indicates there is no known limit.*/getMaxProcedureNameLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxRowSize()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxRowSize()).\\n@return The maximum number of bytes this database allows in a single row. A response of 0\\n    indicates there is no known limit.*/getMaxRowSize():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxSchemaNameLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxSchemaNameLength()).\\n@return The maximum number of characters this database allows in a schema name. A response of 0\\n    indicates there is no known limit.*/getMaxSchemaNameLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxStatementLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxStatementLength()).\\n@return The maximum number of characters this database allows in an SQL statement. A response\\n    of 0 indicates there is no known limit.*/getMaxStatementLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxStatements()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxStatements()).\\n@return The maximum number of active statements to this database that can be open\\n    simultaneously. A response of 0 indicates there is no known limit.*/getMaxStatements():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxTableNameLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxTableNameLength()).\\n@return The maximum number of characters this database allows in a table name. A response of 0\\n    indicates there is no known limit.*/getMaxTableNameLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxTablesInSelect()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxTablesInSelect()).\\n@return The maximum number of tables this database allows in a `SELECT` statement. A\\n    response of 0 indicates there is no known limit.*/getMaxTablesInSelect():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getMaxUserNameLength()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxUserNameLength()).\\n@return The maximum number of characters this database allows in a username. A response of 0\\n    indicates there is no known limit.*/getMaxUserNameLength():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getNumericFunctions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getNumericFunctions()).\\n@return The comma-separated list of math functions available with this database. These are the\\n    Open/Open CLI math function names used in the JDBC function escape clause.*/getNumericFunctions():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getPrimaryKeys(String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getPrimaryKeys(java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schema The schema name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a schema. Passing `null` incidates\\n    the schema name isn't used to narrow the search.\\n@param table The table name. It must match the table name as it is stored in the database.\\n@return An result set containing the column descriptions for the primary key columns, one per\\n    row, ordered by `COLUMN_NAME`.*/getPrimaryKeys(catalog:string,schema:string,table:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getProcedureColumns(String, String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getProcedureColumns(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema. Passing\\n    `null` incidates the schema name isn't used to narrow the search.\\n@param procedureNamePattern The procedure name pattern to filter the search by. It must match\\n    the procedure name as it is stored in the database.\\n@param columnNamePattern The column name pattern to filter the search by. It must match the\\n    column name as it is stored in the database.\\n@return A result set containing the procedure and column descriptions, one per row.*/getProcedureColumns(catalog:string,schemaPattern:string,procedureNamePattern:string,columnNamePattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getProcedureTerm()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getProcedureTerm()).\\n@return The database vendor's preferred term for 'procedure'.*/getProcedureTerm():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getProcedures(String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getProcedures(java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema. Passing\\n    `null` incidates the schema name isn't used to narrow the search.\\n@param procedureNamePattern The procedure name pattern to filter the search by. It must match\\n    the procedure name as it is stored in the database.\\n@return A result set containing the procedure descriptions, one per row.*/getProcedures(catalog:string,schemaPattern:string,procedureNamePattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getResultSetHoldability()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getResultSetHoldability()).\\n@return The database default holdability; one of `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.*/getResultSetHoldability():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getRowIdLifetime()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getRowIdLifetime()).\\n@return The status indicatig the lifetime of a `ROWID`, which is one of `Jdbc.RowIdLifetime.ROWID_UNSUPPORTED`, `Jdbc.RowIdLifetime.ROWID_VALID_OTHER`, `Jdbc.RowIdLifetime.ROWID_VALID_SESSION`, `Jdbc.RowIdLifetime.ROWID_VALID_TRANSACTION`, or `Jdbc.RowIdLifetime.ROWID_VALID_FOREVER`.*/getRowIdLifetime():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getSQLKeywords()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getSQLKeywords()).\\n@return The comma-separated list of all this database's SQL keywords that aren't also SQL:2003\\n    keywords.*/getSQLKeywords():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getSQLStateType()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getSQLStateType()).\\n@return The type of `SQLSTATE`, which is either `sqlStateXOpen` or `sqlStateSQL`.*/getSQLStateType():Integer;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getSchemaTerm()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getSchemaTerm()).\\n@return The database vendor's preferred term for 'schema'.*/getSchemaTerm():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getSchemas()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getSchemas()).\\n@return A result set containing the schema descriptions, one per row.*/getSchemas():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getSchemas()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getSchemas()).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema. Passing\\n    `null` incidates the schema name isn't used to narrow the search.\\n@return A result set containing scheme descriptions available in this database, ordered by\\n    `TABLE_CATALOG` and `TABLE_SCHEM`.*/getSchemas(catalog:string,schemaPattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getSearchStringEscape()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getSearchStringEscape()).\\n@return The string that is used to escape wildcard characters such as '_' or '%'.*/getSearchStringEscape():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getStringFunctions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getStringFunctions()).\\n@return The comma-separated list of string functions available with this database. These are\\n    the Open Group CLI string function names used in the JDBC function escape clause.*/getStringFunctions():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getSuperTables(String, String,String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getSuperTables(java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name as it appears in the database. Passing an empty string\\n    retrieves those procedures without a catalog. Passing `null` incidates the catalog\\n    name isn't used in the selection criteria.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema.\\n@param tableNamePattern The table name pattern; may be a fully qualified name.\\n@return A result set containing descriptions of the table hierarchies defined in a particular\\n    schema in this database. Each row provides information about a specific table type. Tables\\n    without supers aren't listed.*/getSuperTables(catalog:string,schemaPattern:string,tableNamePattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getSuperTypes(String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getSuperTypes(java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name as it appears in the database. Passing an empty string\\n    retrieves those procedures without a catalog. Passing `null` incidates the catalog\\n    name isn't used in the selection criteria.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema.\\n@param typeNamePattern The user-defined type name pattern; may be a fully qualified name.\\n@return A result set containing descriptions of the user-defined type hierarchies defined in a\\n    particular schema in this database. Each row provides information about a specific\\n    user-defined type. Types without supers aren't listed.*/getSuperTypes(catalog:string,schemaPattern:string,typeNamePattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getSystemFunctions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getSystemFunctions()).\\n@return The comma-separated list of system functions available with this database. These are\\n    the Open Group CLI system function names used in the JDBC function escape clause.*/getSystemFunctions():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getTablePrivileges(String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getTablePrivileges(java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema. Passing\\n    `null` incidates the schema name isn't used to narrow the search.\\n@param tableNamePattern The table name pattern to filter the search by. It must match the table\\n    name as it is stored in the database.\\n@return A result set containing the table privilege descriptions, one per row, ordered by\\n    `TABLE_CAT`, `TABLE_SCHEM`, `TABLE_NAME`, and `PRIVILEGE`.*/getTablePrivileges(catalog:string,schemaPattern:string,tableNamePattern:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getTableTypes()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getTableTypes()).\\n@return A result set containing the table types, one per row.*/getTableTypes():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getTables(String, String, String, String[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getTables(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String[])).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema. Passing\\n    `null` incidates the schema name isn't used to narrow the search.\\n@param tableNamePattern The table name pattern to filter the search by. It must match the table\\n    name as it is stored in the database.\\n@param types A list of type types to return, each of which must be on the list that [`getTableTypes()`](https://developers.google.com/apps-script/reference/jdbc/jdbc-database-meta-data.html#getTableTypes()) returns. Passing `null` indictates that all table types are\\n    returned.\\n@return A result set containing the table descriptions, one per row, ordered according to\\n    `TABLE_TYPE`, `TABLE_CAT`, `TABLE_SCHEM`, and `TABLE_NAME`.*/getTables(catalog:string,schemaPattern:string,tableNamePattern:string,types:string[]):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getTimeDateFunctions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getTimeDateFunctions()).\\n@return The comma-separated list of time and date functions available with this database.*/getTimeDateFunctions():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getTypeInfo()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getTypeInfo()).\\n@return An result set containing the descriptions of data types supported by this database. One\\n    SQL type description is provided in each row of the result set, and they are ordered by\\n    `DATA_TYPE` and then by how closely the data type maps to the corresponding JDBC SQL\\n    type.*/getTypeInfo():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getUDTs(String, String, String, int[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getUDTs(java.lang.String,%20java.lang.String,%20java.lang.String,%20int[])).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schemaPattern The schema name pattern to filter the search by, as it appears in the\\n    database. Passing an empty string retrieves those procedures without a schema. Passing\\n    `null` incidates the schema name isn't used to narrow the search.\\n@param typeNamePattern The type name pattern to filter the search by; may be a fully qualified\\n    name.\\n@param types A list of user-defined types (`JAVA_OBJECT`, `STRUCT`, or `DISTINCT`) to include. Passing `null` indictates that all types are returned.\\n@return A result set containing the user-defined type (UDT) descriptions, one per row, ordered\\n    according to `DATA_TYPE`, `TYPE_CAT`, `TYPE_SCHEM`, and `TYPE_NAME`.*/getUDTs(catalog:string,schemaPattern:string,typeNamePattern:string,types:Integer[]):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.DatabaseMetaData#getURL()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getURL()).\\n@return The URL for this database management system, or `null` if isn't generated.*/getURL():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getUserName()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getUserName()).\\n@return The username as known to this database.*/getUserName():string;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#getVersionColumns(String, String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getVersionColumns(java.lang.String,%20java.lang.String,%20java.lang.String)).\\n@param catalog The catalog name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a catalog. Passing `null`\\n    incidates the catalog name isn't used to narrow the search.\\n@param schema The schema name to filter the search by, as it appears in the database. Passing\\n    an empty string retrieves those procedures without a schema. Passing `null` incidates\\n    the schema name isn't used to narrow the search.\\n@param table The table name. It must match the table name as it is stored in the database.\\n@return An unordered result set containing the column descriptions that are updated when any\\n    value in a row is updated (one column description per row in the result set).*/getVersionColumns(catalog:string,schema:string,table:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#insertsAreDetected(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#insertsAreDetected(int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@return `true` if for the specified result set type a visible row insert is detected by\\n    calls to [`JdbcResultSet.rowInserted()`](https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set.html#rowInserted()); `false` otherwise.*/insertsAreDetected(type:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#isCatalogAtStart()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#isCatalogAtStart()).\\n@return `true` if a catalog appears at the start of a fully-qualified table name; `false` otherwise.*/isCatalogAtStart():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#isReadOnly()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#isReadOnly()).\\n@return `true` if the database is read-only; `false` otherwise.*/isReadOnly():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#locatorsUpdateCopy()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#locatorsUpdateCopy()).\\n@return `true` if updates made to a Large Object (LOB) are made to a copy of th LOB;\\n    `false` if updates are made directly to the LOB.*/locatorsUpdateCopy():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#nullPlusNonNullIsNull()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#nullPlusNonNullIsNull()).\\n@return `true` if concatenations of `NULL` and non-`NULL` values result in a\\n    `NULL`; `false` otherwise.*/nullPlusNonNullIsNull():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#nullsAreSortedAtEnd()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#nullsAreSortedAtEnd()).\\n@return `true` if `NULL` values are sorted to the end regardless of sort order\\n    (ascending or descending). Returns `false` otherwise.*/nullsAreSortedAtEnd():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#nullsAreSortedAtStart()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#nullsAreSortedAtStart()).\\n@return `true` if `NULL` values are sorted to the start regardless of sort order\\n    (ascending or descending). Returns `false` otherwise.*/nullsAreSortedAtStart():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#nullsAreSortedHigh()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#nullsAreSortedHigh()).\\n@return `true` if the `NULL` values are sorted high, meaning they are considered to\\n    have a value higher than others in the domain when sorting. Returns `false`\\n    otherwise.*/nullsAreSortedHigh():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#nullsAreSortedLow()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#nullsAreSortedLow()).\\n@return `true` if the `NULL` values are sorted low, meaning they are considered to\\n    have a value lower than others in the domain when sorting. Returns `false` otherwise.*/nullsAreSortedLow():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#othersDeletesAreVisible(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#othersDeletesAreVisible(int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@return `true` if for the given result set type the deletes made by others are visible;\\n    `false` otherwise.*/othersDeletesAreVisible(type:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#othersInsertsAreVisible(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#othersInsertsAreVisible(int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@return `true` if for the given result set type the inserts made by others are visible;\\n    `false` otherwise.*/othersInsertsAreVisible(type:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#othersUpdatesAreVisible(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#othersUpdatesAreVisible(int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@return `true` if for the given result set type the updates made by others are visible;\\n    `false` otherwise.*/othersUpdatesAreVisible(type:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#ownDeletesAreVisible(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#ownDeletesAreVisible(int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@return `true` if for the given result set type the set's own deletes are visible; `false` otherwise.*/ownDeletesAreVisible(type:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#ownInsertsAreVisible(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#ownInsertsAreVisible(int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@return `true` if for the given result set type the set's own inserts are visible; `false` otherwise.*/ownInsertsAreVisible(type:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#ownUpdatesAreVisible(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#ownUpdatesAreVisible(int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@return `true` if for the given result set type the set's own updates are visible; `false` otherwise.*/ownUpdatesAreVisible(type:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#storesLowerCaseIdentifiers()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#storesLowerCaseIdentifiers()).\\n@return `true` if the database treats mixed case unquoted SQL identifiers as\\n    case-insensitive and stores them in lowercase; `false` otherwise.*/storesLowerCaseIdentifiers():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#storesLowerCaseQuotedIdentifiers()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#storesLowerCaseQuotedIdentifiers()).\\n@return `true` if the database treats mixed case quoted SQL identifiers as\\n    case-insensitive and stores them in lowercase; `false` otherwise.*/storesLowerCaseQuotedIdentifiers():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#storesMixedCaseIdentifiers()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#storesMixedCaseIdentifiers()).\\n@return `true` if the database treats mixed case unquoted SQL identifiers as\\n    case-insensitive and stores them in mixed case; `false` otherwise.*/storesMixedCaseIdentifiers():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#storesMixedCaseQuotedIdentifiers()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#storesMixedCaseQuotedIdentifiers()).\\n@return `true` if the database treats mixed case quoted SQL identifiers as\\n    case-insensitive and stores them in mixed case; `false` otherwise.*/storesMixedCaseQuotedIdentifiers():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#storesUpperCaseIdentifiers()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#storesUpperCaseIdentifiers()).\\n@return `true` if the database treats mixed case unquoted SQL identifiers as\\n    case-insensitive and stores them in uppercase; `false` otherwise.*/storesUpperCaseIdentifiers():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#storesUpperCaseQuotedIdentifiers()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#storesUpperCaseQuotedIdentifiers()).\\n@return `true` if the database treats mixed case quoted SQL identifiers as\\n    case-insensitive and stores them in uppercase; `false` otherwise.*/storesUpperCaseQuotedIdentifiers():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsANSI92EntryLevelSQL()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsANSI92EntryLevelSQL()).\\n@return `true` if this database supports the ANSI92 entry level SQL grammar; `false` otherwise.*/supportsANSI92EntryLevelSQL():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsANSI92FullSQL()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsANSI92FullSQL()).\\n@return `true` if this database supports the ANSI92 full level SQL grammar; `false`\\n    otherwise.*/supportsANSI92FullSQL():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsANSI92IntermediateSQL()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsANSI92IntermediateSQL()).\\n@return `true` if this database supports the ANSI92 intermediate level SQL grammar;\\n    `false` otherwise.*/supportsANSI92IntermediateSQL():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsAlterTableWithAddColumn()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsAlterTableWithAddColumn()).\\n@return `true` if the database supports `ALTER TABLE` with add column; `false` otherwise.*/supportsAlterTableWithAddColumn():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsAlterTableWithDropColumn()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsAlterTableWithDropColumn()).\\n@return `true` if the database supports `ALTER TABLE` with drop column; `false` otherwise.*/supportsAlterTableWithDropColumn():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsBatchUpdates()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsBatchUpdates()).\\n@return `true` if the database supports batch updates; `false` otherwise.*/supportsBatchUpdates():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsCatalogsInDataManipulation()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsCatalogsInDataManipulation()).\\n@return `true` if a data manipulation statement can include a catalog name; `false`\\n    otherwise.*/supportsCatalogsInDataManipulation():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsCatalogsInIndexDefinitions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsCatalogsInIndexDefinitions()).\\n@return `true` if an index definition statement can include a catalog name; `false`\\n    otherwise.*/supportsCatalogsInIndexDefinitions():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsCatalogsInPrivilegeDefinitions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsCatalogsInPrivilegeDefinitions()).\\n@return `true` if a privilege definition statement can include a catalog name; `false` otherwise.*/supportsCatalogsInPrivilegeDefinitions():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsCatalogsInProcedureCalls()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsCatalogsInProcedureCalls()).\\n@return `true` if a procedure call statement can include a catalog name; `false`\\n    otherwise.*/supportsCatalogsInProcedureCalls():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsCatalogsInTableDefinitions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsCatalogsInTableDefinitions()).\\n@return `true` if a table definition statement can include a catalog name; `false`\\n    otherwise.*/supportsCatalogsInTableDefinitions():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsColumnAliasing()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsColumnAliasing()).\\n@return `true` if the database supports column aliasing; `false` otherwise.*/supportsColumnAliasing():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsConvert()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsConvert()).\\n@return `true` if this database supports the JDBC scalar function `CONVERT` for the\\n    conversion of one [JDBC type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) to\\n    another; `false` otherwise.*/supportsConvert():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsConvert(int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsConvert(int,%20int)).\\n@param fromType The [\\n    type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) to convert from.\\n@param toType The [\\n    type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) to convert to.\\n@return `true` if this database supports the JDBC scalar function `CONVERT` for the\\n    conversion of the specified JDBC types; `false` otherwise.*/supportsConvert(fromType:Integer,toType:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsCoreSQLGrammar()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsCoreSQLGrammar()).\\n@return `true` if this database supports the ODBC Core SQL grammar; `false`\\n    otherwise.*/supportsCoreSQLGrammar():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsCorrelatedSubqueries()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsCorrelatedSubqueries()).\\n@return `true` if this database supports correlated subqueries; `false` otherwise.*/supportsCorrelatedSubqueries():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsDataDefinitionAndDataManipulationTransactions()`\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsDataDefinitionAndDataManipulationTransactions()).\\n@return `true` if this database supports both data definition and data manipulation\\n    statements within a transaction; `false` otherwise.*/supportsDataDefinitionAndDataManipulationTransactions():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsDataManipulationTransactionsOnly()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsDataManipulationTransactionsOnly()).\\n@return `true` if this database supports data manipulation statements within a\\n    transaction; `false` otherwise.*/supportsDataManipulationTransactionsOnly():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsDifferentTableCorrelationNames()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsDifferentTableCorrelationNames()).\\n@return `true` if table correlation names are supported and are restricted to be\\n    different frm the names of the tables in the database; `false` otherwise.*/supportsDifferentTableCorrelationNames():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsExpressionsInOrderBy()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsExpressionsInOrderBy()).\\n@return `true` if this database supports expressions in `ORDER BY` lists; `false` otherwise.*/supportsExpressionsInOrderBy():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsExtendedSQLGrammar()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsExtendedSQLGrammar()).\\n@return `true` if this database supports the ODBC Extended SQL grammar; `false`\\n    otherwise.*/supportsExtendedSQLGrammar():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsFullOuterJoins()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsFullOuterJoins()).\\n@return `true` if this database supports full nested outer joins; `false`\\n    otherwise.*/supportsFullOuterJoins():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsGetGeneratedKeys()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsGetGeneratedKeys()).\\n@return `true` if auto-generated keys can be retrieved after a statement is executed;\\n    `false` otherwise.*/supportsGetGeneratedKeys():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsGroupBy()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsGroupBy()).\\n@return `true` if this database supports some form of `GROUP BY` clause; `false` otherwise.*/supportsGroupBy():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsGroupByBeyondSelect()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsGroupByBeyondSelect()).\\n@return `true` if this database supports using columns that aren't in the `SELECT`\\n    statement in a `GROUP BY` clause, provided that all the columns in the `SELECT`\\n    statement are included in the `GROUP BY` clause. Returns `false` otherwise.*/supportsGroupByBeyondSelect():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsGroupByUnrelated()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsGroupByUnrelated()).\\n@return `true` if this database supports using a column that isn't in the `SELECT`\\n    statement in a `GROUP BY` clause; `false` otherwise.*/supportsGroupByUnrelated():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsIntegrityEnhancementFacility()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsIntegrityEnhancementFacility()).\\n@return `true` if this database supports the SQL Integrity Enhancement Facility; `false` otherwise.*/supportsIntegrityEnhancementFacility():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsLikeEscapeClause()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsLikeEscapeClause()).\\n@return `true` if this database supports specifying a `LIKE` escape clause; `false` otherwise.*/supportsLikeEscapeClause():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsLimitedOuterJoins()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsLimitedOuterJoins()).\\n@return `true` if this database provides limited support for outer joins; `false`\\n    otherwise.*/supportsLimitedOuterJoins():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsMinimumSQLGrammar()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsMinimumSQLGrammar()).\\n@return `true` if this database supports the ODBC Minimum SQL grammar; `false`\\n    otherwise.*/supportsMinimumSQLGrammar():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsMixedCaseIdentifiers()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsMixedCaseIdentifiers()).\\n@return `true` if the database treats mixed case unquoted SQL identifiers as\\n    case-sensitive and as a result stores them in mixed case; `false` otherwise.*/supportsMixedCaseIdentifiers():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsMixedCaseQuotedIdentifiers()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsMixedCaseQuotedIdentifiers()).\\n@return `true` if the database treats mixed case quoted SQL identifiers as case-sensitive\\n    and as a result stores them in mixed case; `false` otherwise.*/supportsMixedCaseQuotedIdentifiers():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsMultipleOpenResults()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsMultipleOpenResults()).\\n@return `true` if a callable statement can return multiple result sets simultenously;\\n    `false` otherwise.*/supportsMultipleOpenResults():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsMultipleResultSets()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsMultipleResultSets()).\\n@return `true` if this database supports getting multiple result sets from a single\\n    execution call; `false` otherwise.*/supportsMultipleResultSets():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsMultipleTransactions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsMultipleTransactions()).\\n@return `true` if this database supports having multiple transactions on different\\n    connections open at once; `false` otherwise.*/supportsMultipleTransactions():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsNamedParameters()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsNamedParameters()).\\n@return `true` if the database supports named parameters to callable statements; `false` otherwise.*/supportsNamedParameters():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsNonNullableColumns()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsNonNullableColumns()).\\n@return `true` if columns in this database may be defined as non-nullable; `false`\\n    otherwise.*/supportsNonNullableColumns():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsOpenCursorsAcrossCommit()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsOpenCursorsAcrossCommit()).\\n@return `true` if this database supports keeping cursors always open across commits;\\n    `false` otherwise.*/supportsOpenCursorsAcrossCommit():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsOpenCursorsAcrossRollback()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsOpenCursorsAcrossRollback()).\\n@return `true` if this database supports keeping cursors always open across rollbacks;\\n    `false` otherwise.*/supportsOpenCursorsAcrossRollback():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsOpenStatementsAcrossCommit()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsOpenStatementsAcrossCommit()).\\n@return `true` if this database supports keeping statements always open across commits;\\n    `false` otherwise.*/supportsOpenStatementsAcrossCommit():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsOpenStatementsAcrossRollback()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsOpenStatementsAcrossRollback()).\\n@return `true` if this database supports keeping statements always open across rollbacks;\\n    `false` otherwise.*/supportsOpenStatementsAcrossRollback():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsOrderByUnrelated()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsOrderByUnrelated()).\\n@return `true` if this database supports using a column that isn't in the `SELECT`\\n    statement in an `ORDER BY` clause; `false` otherwise.*/supportsOrderByUnrelated():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsOuterJoins()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsOuterJoins()).\\n@return `true` if this database supports some form of outer join; `false`\\n    otherwise.*/supportsOuterJoins():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsPositionedDelete()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsPositionedDelete()).\\n@return `true` if this database supports positioned `DELETE` statements; `false` otherwise.*/supportsPositionedDelete():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsPositionedUpdate()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsPositionedUpdate()).\\n@return `true` if this database supports positioned `UPDATE` statements; `false` otherwise.*/supportsPositionedUpdate():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsResultSetConcurrency(int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsResultSetConcurrency(int,%20int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@param concurrency The concurrency type, which is either `Jdbc.ResultSet.CONCUR_READ_ONLY` or `Jdbc.ResultSet.CONCUR_UPDATABLE`.\\n@return `true` if this database supports the specified result set and concurrency type\\n    combination; `false` otherwise.*/supportsResultSetConcurrency(type:Integer,concurrency:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsResultSetHoldability(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsResultSetHoldability(int)).\\n@param holdability A holdability constant to check; one of `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.\\n@return `true` if the database the specified holdability; `false` otherwise.*/supportsResultSetHoldability(holdability:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsResultSetType(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsResultSetType(int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@return `true` if this database supports the specified result set type; `false`\\n    otherwise.*/supportsResultSetType(type:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSavepoints()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSavepoints()).\\n@return `true` if the database supports savepoints; `false` otherwise.*/supportsSavepoints():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSchemasInDataManipulation()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSchemasInDataManipulation()).\\n@return `true` if a data manipulation statement can include a schema name; `false`\\n    otherwise.*/supportsSchemasInDataManipulation():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSchemasInIndexDefinitions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSchemasInIndexDefinitions()).\\n@return `true` if an index definition statement can include a schema name; `false`\\n    otherwise.*/supportsSchemasInIndexDefinitions():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSchemasInPrivilegeDefinitions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSchemasInPrivilegeDefinitions()).\\n@return `true` if an privilege definition statement can include a schema name; `false` otherwise.*/supportsSchemasInPrivilegeDefinitions():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSchemasInProcedureCalls()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSchemasInProcedureCalls()).\\n@return `true` if a procedure call statement can include a schema name; `false`\\n    otherwise.*/supportsSchemasInProcedureCalls():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSchemasInTableDefinitions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSchemasInTableDefinitions()).\\n@return `true` if a table definition statement can include a schema name; `false`\\n    otherwise.*/supportsSchemasInTableDefinitions():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSelectForUpdate()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSelectForUpdate()).\\n@return `true` if this database supports `SELECT FOR UPDATE` statements; `false` otherwise.*/supportsSelectForUpdate():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsStatementPooling()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsStatementPooling()).\\n@return `true` if the database supports statement pooling; `false` otherwise.*/supportsStatementPooling():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsStoredFunctionsUsingCallSyntax()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsStoredFunctionsUsingCallSyntax()).\\n@return `true` if the database supports invoking user-defined or vendor functions using\\n    the stored procedure escape syntax; `false` otherwise.*/supportsStoredFunctionsUsingCallSyntax():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsStoredProcedures()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsStoredProcedures()).\\n@return `true` if this database supports stored procedure calls that used the stored\\n    procedure escape syntax; `false` otherwise.*/supportsStoredProcedures():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSubqueriesInComparisons()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSubqueriesInComparisons()).\\n@return `true` if this database supports subqueries in comparison expressions; `false` otherwise.*/supportsSubqueriesInComparisons():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSubqueriesInExists()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSubqueriesInExists()).\\n@return `true` if this database supports subqueries in `EXISTS` expressions; `false` otherwise.*/supportsSubqueriesInExists():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSubqueriesInIns()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSubqueriesInIns()).\\n@return `true` if this database supports subqueries in `IN` expressions; `false` otherwise.*/supportsSubqueriesInIns():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsSubqueriesInQuantifieds()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsSubqueriesInQuantifieds()).\\n@return `true` if this database supports subqueries in quantified expressions; `false` otherwise.*/supportsSubqueriesInQuantifieds():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsTableCorrelationNames()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsTableCorrelationNames()).\\n@return `true` if this database supports table corelation names; `false` otherwise.*/supportsTableCorrelationNames():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsTransactionIsolationLevel(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsTransactionIsolationLevel(int)).\\n@param level The transaction isolation level to determine the support of. This must be one of\\n    `Jdbc.Connection.TRANSACTION_READ_UNCOMMITTED`, `Jdbc.Connection.TRANSACTION_READ_COMMITTED`, `Jdbc.Connection.TRANSACTION_REPEATABLE_READ`, `Jdbc.Connection.TRANSACTION_SERIALIZABLE`, or `Jdbc.Connection.TRANSACTION_NONE`.\\n@return `true` if this database supports the given transaction isolation level; `false` otherwise.*/supportsTransactionIsolationLevel(level:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsTransactions()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsTransactions()).\\n@return `true` if this database supports transactions; `false` otherwise.*/supportsTransactions():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsUnion()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsUnion()).\\n@return `true` if this database supports SQL `UNION`; `false` otherwise.*/supportsUnion():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#supportsUnionAll()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsUnionAll()).\\n@return `true` if this database supports SQL `UNION ALL`; `false` otherwise.*/supportsUnionAll():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#updatesAreDetected(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#updatesAreDetected(int)).\\n@param type The result set type, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.\\n@return `true` if for the specified result set type a visible row update is detected by\\n    calls to [`JdbcResultSet.rowUpdated()`](https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set.html#rowUpdated()); `false` otherwise.*/updatesAreDetected(type:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#usesLocalFilePerTable()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#usesLocalFilePerTable()).\\n@return `true` if the database stores each table in a separate local file; `false`\\n    otherwise.*/usesLocalFilePerTable():boolean;\\n/**For documentation of this method, see [\\n`java.sql.DatabaseMetaData#usesLocalFiles()`](https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#usesLocalFiles()).\\n@return `true` if the database stores tables in a local file; `false` otherwise.*/usesLocalFiles():boolean;}interface JdbcConnection{\\n/**For documentation of this method, see [\\n`java.sql.Connection#clearWarnings()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#clearWarnings()).*/clearWarnings():void;\\n/**Release this connection's database and all associated resources.\\n\\n```\\nvar conn \\u003d Jdbc.getConnection(\\\"jdbc:mysql://\\u003chost\\u003e:\\u003cport\\u003e/\\u003cinstance\\u003e\\\", \\\"user\\\", \\\"password\\\");\\nconn.close();\\n```*/close():void;\\n/**Makes all pending changes permanent, releases database locks held by this [`JdbcConnection`](https://developers.google.com/apps-script/reference/jdbc/jdbc-connection.html).\\n\\n```\\nvar conn \\u003d Jdbc.getConnection(\\\"jdbc:mysql://\\u003chost\\u003e:\\u003cport\\u003e/\\u003cinstance\\u003e\\\", \\\"user\\\", \\\"password\\\");\\nconn.setAutoCommit(false);\\nvar stmt \\u003d conn.prepareStatement(\\\"insert into person (lname,fname) values (?,?)\\\");\\nvar start \\u003d new Date();\\nfor (var i \\u003d 0; i \\u003c 5000; i++) {\\n  // Objects are accessed using 1-based indexing\\n  stmt.setObject(1, 'firstName' + i);\\n  stmt.setObject(2, 'lastName' + i);\\n  stmt.addBatch();\\n}\\nvar res \\u003d stmt.executeBatch();\\nconn.commit(); // When this returns, this is when changes are actually committed\\nconn.close();\\n```*/commit():void;\\n/**For documentation of this method, see [\\n`java.sql.Connection#createArrayOf(String, Object[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createArrayOf(java.lang.String,%20java.lang.Object[])).\\n@param typeName The database-specific SQL name of the array elemnents' type. Options include\\n    built-in types, user-defined types, or standard SQL types supported by the database.\\n@param elements The elements to populate in the returned object.\\n@return An array whose elements map to the specified SQL type.*/createArrayOf(typeName:string,elements:Object[]):Jdbc.JdbcArray;\\n/**Constructs a [`JdbcBlob`](https://developers.google.com/apps-script/reference/jdbc/jdbc-blob.html) instance. See also [\\n\\n```\\njava.sql.Connection#createBlob()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createBlob()).\\n\\nThe object returned initially contains no data. You can use the `setBytes` methods of\\n[`JdbcBlob`](https://developers.google.com/apps-script/reference/jdbc/jdbc-blob.html) to set the data it should contain. The blob used here is not the same as the\\nblob created with [`Utilities.newBlob(data)`](https://developers.google.com/apps-script/reference/jdbc/../utilities/utilities.html#newBlob(Byte)). To convert\\nbetween the two formats, use the defined `getBytes()` and `setBytes()` methods.\\nAlternatively, both [`JdbcBlob`](https://developers.google.com/apps-script/reference/jdbc/jdbc-blob.html) and [`JdbcClob`](https://developers.google.com/apps-script/reference/jdbc/jdbc-clob.html) provide a `getAppsScriptBlob()`\\nconvenience method for converting to a format that can be used by Apps Script.\\n@return An empty blob object.*/createBlob():Jdbc.JdbcBlob;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Connection#createClob()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createClob()).\\n@return An empty clob object.*/createClob():Jdbc.JdbcClob;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Connection#createNClob()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createNClob()).\\n@return An empty nclob object.*/createNClob():Jdbc.JdbcClob;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Connection#createSQLXML()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createSQLXML()).\\n@return An empty SQLXML object.*/createSQLXML():Jdbc.JdbcSQLXML;\\n/**Creates a [`JdbcStatement`](https://developers.google.com/apps-script/reference/jdbc/jdbc-statement.html) object for sending SQL statements to the database. See also [\\n`java.sql.Connection#createStatement()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createStatement()).\\n\\n```\\n// This sample code assumes authentication is off\\nvar conn \\u003d Jdbc.getConnection(\\\"jdbc:mysql://\\u003chost\\u003e:3306/\\u003cinstance\\u003e\\\")\\nvar stmt \\u003d conn.createStatement();\\n\\nstmt.setMaxRows(100);\\nvar rs \\u003d stmt.execute(\\\"select * from person\\\");\\n\\nwhile(rs.next()) {\\n  // Do something\\n}\\n\\nrs.close();\\nstmt.close();\\nconn.close();\\n```\\n@return A statement instance to execute queries with.*/createStatement():Jdbc.JdbcStatement;\\n/**Creates a [`JdbcStatement`](https://developers.google.com/apps-script/reference/jdbc/jdbc-statement.html) object for sending SQL statements to the database. See also [\\n`java.sql.Connection#createStatement(int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createStatement(int,%20int)).\\n\\nThis version allows the result set type and concurrency to be overridden.\\n\\n```\\n// This sample code assumes authentication is off\\n// For more information about this method, see documentation here:\\n//  http://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createStatement(int, int)\\nvar conn \\u003d Jdbc.getConnection(\\\"jdbc:mysql://\\u003chost\\u003e:3306/\\u003cinstance\\u003e\\\")\\nvar stmt \\u003d conn.createStatement(Jdbc.ResultSet.TYPE_FORWARD_ONLY,\\n                                Jdbc.ResultSet.CONCUR_READ_ONLY);\\n\\nstmt.setMaxRows(100);\\nvar rs \\u003d stmt.execute(\\\"select * from person\\\");\\n\\nwhile(rs.next()) {\\n  // Do something\\n}\\n\\nrs.close();\\nstmt.close();\\nconn.close();\\n```\\n@param resultSetType A result set type; one of `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_SENSITIVE`.\\n@param resultSetConcurrency A concurrency type; either `Jdbc.ResultSet.CONCUR_READ_ONLY`\\n    or `Jdbc.ResultSet.CONCUR_UPDATABLE`.\\n@return A statement instance to execute queries with.*/createStatement(resultSetType:Integer,resultSetConcurrency:Integer):Jdbc.JdbcStatement;\\n/**Creates a [`JdbcStatement`](https://developers.google.com/apps-script/reference/jdbc/jdbc-statement.html) object for sending SQL statements to the database. See also [\\n`java.sql.Connection#createStatement(int, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createStatement(int,%20int,%20int)).\\n\\nThis version allows the result set type, concurrency and holdability to be overridden.\\n\\n```\\n// This sample code assumes authentication is off\\n// For more information about this method, see documentation here:\\n//  http://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createStatement(int, int)\\nvar conn \\u003d Jdbc.getConnection(\\\"jdbc:mysql://\\u003chost\\u003e:3306/\\u003cinstance\\u003e\\\")\\nvar stmt \\u003d conn.createStatement(Jdbc.ResultSet.TYPE_FORWARD_ONLY,\\n                                Jdbc.ResultSet.CONCUR_READ_ONLY,\\n                                Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT);\\n\\nstmt.setMaxRows(100);\\nvar rs \\u003d stmt.execute(\\\"select * from person\\\");\\n\\nwhile(rs.next()) {\\n  // Do something\\n}\\n\\nrs.close();\\nstmt.close();\\nconn.close();\\n```\\n@param resultSetType A result set type; one of `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_SENSITIVE`.\\n@param resultSetConcurrency A concurrency type; either `Jdbc.ResultSet.CONCUR_READ_ONLY`\\n    or `Jdbc.ResultSet.CONCUR_UPDATABLE`.\\n@param resultSetHoldability A holdability setting; either `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.\\n@return A statement instance to execute queries with.*/createStatement(resultSetType:Integer,resultSetConcurrency:Integer,resultSetHoldability:Integer):Jdbc.JdbcStatement;\\n/**For documentation of this method, see [\\n`java.sql.Connection#createStruct(String, Object[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#createStruct(java.lang.String,%20java.lang.Object[])).\\n@param typeName The database-specific SQL name of the array elemnents' type. Options include\\n    built-in types, user-defined types, or standard SQL types supported by the database.\\n@param attributes The attributes that populate the returned object.\\n@return A structure object that maps to the given SQL type and is populated with the given\\n    attributes.*/createStruct(typeName:string,attributes:Object[]):Jdbc.JdbcStruct;\\n/**For documentation of this method, see [\\n`java.sql.Connection#getAutoCommit()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#getAutoCommit()).\\n@return `true` if the connection's auto-commit mode is enabled; `false` otherwise.*/getAutoCommit():boolean;\\n/**or documentation of this method, see [\\n\\n```\\njava.sql.Connection#getCatalog()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#getCatalog()).\\n@return The current catalog name or `null` if no name has been set.*/getCatalog():string;\\n/**For documentation of this method, see [\\n`java.sql.Connection#getHoldability()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#getHoldability()).\\n@return The holdability setting of the connection; either `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.*/getHoldability():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Connection#getMetaData()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#getMetaData()).\\n@return The metadata of the database this connection connects to.*/getMetaData():Jdbc.JdbcDatabaseMetaData;\\n/**For documentation of this method, see [\\n`java.sql.Connection#getTransactionIsolation()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#getTransactionIsolation()).\\n@return The current transaction level, which is one of: `Jdbc.Connection.TRANSACTION_READ_UNCOMMITTED`, `Jdbc.Connection.TRANSACTION_READ_COMMITTED`, `Jdbc.Connection.TRANSACTION_REPEATABLE_READ`, `Jdbc.Connection.TRANSACTION_SERIALIZABLE`, or `Jdbc.Connection.TRANSACTION_NONE`.*/getTransactionIsolation():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Connection#getWarnings()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#getWarnings()).\\n@return An array of warning strings.*/getWarnings():string[];\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Connection#isClosed()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#isClosed()).\\n@return `true` if the connection is closed; `false` otherwise.*/isClosed():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Connection#isReadOnly()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#isReadOnly()).\\n@return `true` if the connection is read-only; `false` otherwise.*/isReadOnly():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Connection#isValid(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#isValid(int)).\\n@param timeout The time in seconds to wait for the validation operation to complete. A value of\\n    0 indicates no timeout is applied.\\n@return `true` if the connection is valid; `false` otherwise. Also returns `false` if the timeout period expires before the operation completes.*/isValid(timeout:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Connection#nativeSQL(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#nativeSQL(java.lang.String)).\\n@param sql An SQL statement that may contain one more more '?' placeholders.\\n@return The native form of the provided statement.*/nativeSQL(sql:string):string;\\n/**For documentation of this method, see [\\n`java.sql.Connection#prepareCall(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#prepareCall(java.lang.String)).\\n@param sql An SQL statement that may contain one more more '?' placeholders, typically provided\\n    using JDBC call escape syntax.\\n@return A callable statement containing the pre-compiled SQL statement.*/prepareCall(sql:string):Jdbc.JdbcCallableStatement;\\n/**For documentation of this method, see [\\n`java.sql.Connection#prepareCall(String, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#prepareCall(java.lang.String,%20int,%20int)).\\n@param sql An SQL statement that may contain one more more '?' placeholders, typically provided\\n    using JDBC call escape syntax.\\n@param resultSetType A result set type; one of `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_SENSITIVE`.\\n@param resultSetConcurrency A concurrency type; either `Jdbc.ResultSet.CONCUR_READ_ONLY`\\n    or `Jdbc.ResultSet.CONCUR_UPDATABLE`.\\n@return A callable statement containing the pre-compiled SQL statement that produces result\\n    sets with the provided type and concurrency.*/prepareCall(sql:string,resultSetType:Integer,resultSetConcurrency:Integer):Jdbc.JdbcCallableStatement;\\n/**For documentation of this method, see [\\n`java.sql.Connection#prepareCall(String, int, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#prepareCall(java.lang.String,%20int,%20int,%20int)).\\n@param sql An SQL statement that may contain one more more '?' placeholders, typically provided\\n    using JDBC call escape syntax.\\n@param resultSetType A result set type; one of `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_SENSITIVE`.\\n@param resultSetConcurrency A concurrency type; either `Jdbc.ResultSet.CONCUR_READ_ONLY`\\n    or `Jdbc.ResultSet.CONCUR_UPDATABLE`.\\n@param resultSetHoldability A holdability setting; either `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.\\n@return A callable statement containing the pre-compiled SQL statement that produces result\\n    sets with the provided type, concurrency.*/prepareCall(sql:string,resultSetType:Integer,resultSetConcurrency:Integer,resultSetHoldability:Integer):Jdbc.JdbcCallableStatement;\\n/**For documentation of this method, see [\\n`java.sql.Connection#prepareStatement(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)).\\n@param sql An SQL statement that may contain one more more '?' IN parameter placeholders.\\n@return A prepared statement containing the pre-compiled SQL statement.*/prepareStatement(sql:string):Jdbc.JdbcPreparedStatement;\\n/**For documentation of this method, see [\\n`java.sql.Connection#prepareStatement(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String,%20int)).\\n@param sql An SQL statement that may contain one more more '?' IN parameter placeholders.\\n@param autoGeneratedKeys A flag that indicates whether auto-generated keys are returned; either\\n    `Jdbc.Statement.RETURN_GENERATED_KEYS` or `Jdbc.Statement.NO_GENERATED_KEYS`.\\n@return A prepared statement containing the pre-compiled SQL statement, possibly capable of\\n    returning auto-generated keys.*/prepareStatement(sql:string,autoGeneratedKeys:Integer):Jdbc.JdbcPreparedStatement;\\n/**For documentation of this method, see [\\n`java.sql.Connection#prepareStatement(String, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String,%20int,%20int)).\\n@param sql An SQL statement that may contain one more more '?' IN parameter placeholders.\\n@param resultSetType A result set type; one of `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_SENSITIVE`.\\n@param resultSetConcurrency A concurrency type; either `Jdbc.ResultSet.CONCUR_READ_ONLY`\\n    or `Jdbc.ResultSet.CONCUR_UPDATABLE`.\\n@return A prepared statement containing the pre-compiled SQL statement that produces result\\n    sets with the provided type and concurrency.*/prepareStatement(sql:string,resultSetType:Integer,resultSetConcurrency:Integer):Jdbc.JdbcPreparedStatement;\\n/**For documentation of this method, see [\\n`java.sql.Connection#prepareStatement(String, int, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String,%20int,%20int,%20int)).\\n@param sql An SQL statement that may contain one more more '?' IN parameter placeholders.\\n@param resultSetType A result set type; one of `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or `Jdbc.ResultSet.TYPE_SCROLL_SENSITIVE`.\\n@param resultSetConcurrency A concurrency type; either `Jdbc.ResultSet.CONCUR_READ_ONLY`\\n    or `Jdbc.ResultSet.CONCUR_UPDATABLE`.\\n@param resultSetHoldability A holdability setting; either `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.\\n@return A prepared statement containing the pre-compiled SQL statement that produces result\\n    sets with the provided type, concurrency, and holdability.*/prepareStatement(sql:string,resultSetType:Integer,resultSetConcurrency:Integer,resultSetHoldability:Integer):Jdbc.JdbcPreparedStatement;\\n/**For documentation of this method, see [\\n`java.sql.Connection#prepareStatement(String, int[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String,%20int[])).\\n@param sql An SQL statement that may contain one more more '?' IN parameter placeholders.\\n@param indices The column indices of columns that are returned from the inserted row or rows.\\n@return A prepared statement containing the pre-compiled SQL statement, capable of returning\\n    auto-generated keys specified by the provided column indices.*/prepareStatementByIndex(sql:string,indices:Integer[]):Jdbc.JdbcPreparedStatement;\\n/**For documentation of this method, see [\\n`java.sql.Connection#prepareStatement(String, String[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String,%20java.lang.String[])).\\n@param sql An SQL statement that may contain one more more '?' IN parameter placeholders.\\n@param columnNames The column names that specify which columns the method should return from\\n    the inserted row or rows.\\n@return A prepared statement containing the pre-compiled SQL statement, capable of returning\\n    auto-generated keys specified by the provided column names.*/prepareStatementByName(sql:string,columnNames:string[]):Jdbc.JdbcPreparedStatement;\\n/**For documentation of this method, see [\\n`java.sql.Connection#releaseSavepoint(Savepoint)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#releaseSavepoint(java.sql.Savepoint)).\\n@param savepoint The save point to remove.*/releaseSavepoint(savepoint:Jdbc.JdbcSavepoint):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Connection#rollback()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#rollback()).*/rollback():void;\\n/**For documentation of this method, see [\\n`java.sql.Connection#rollback(Savepoint)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#rollback(java.sql.Savepoint)).\\n@param savepoint The save point to rollback to.*/rollback(savepoint:Jdbc.JdbcSavepoint):void;\\n/**For documentation of this method, see [\\n`java.sql.Connection#setAutoCommit(boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#setAutoCommit(boolean)).\\n@param autoCommit If `true`, auto-commit mode is enabled; `false` disables.*/setAutoCommit(autoCommit:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.Connection#setCatalog(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#setCatalog(java.lang.String)).\\n@param catalog The name of a catalog (the subspace in the connection's database) in which to\\n    work.*/setCatalog(catalog:string):void;\\n/**For documentation of this method, see [\\n`java.sql.Connection#setHoldability(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#setHoldability(int)).\\n@param holdability The default holdability of [`JdbcResultSet`](https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set.html) objects created with this\\n    connection; either `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.*/setHoldability(holdability:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.Connection#setReadOnly(boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#setReadOnly(boolean)).\\n@param readOnly If `true`, read-only mode is enabled; `false` disables.*/setReadOnly(readOnly:boolean):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Connection#setSavepoint()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#setSavepoint()).\\n@return The new unnamed save point.*/setSavepoint():Jdbc.JdbcSavepoint;\\n/**For documentation of this method, see [\\n`java.sql.Connection#setSavepoint(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#setSavepoint(java.lang.String)).\\n@param name The name of the created save point.\\n@return The new named save point.*/setSavepoint(name:string):Jdbc.JdbcSavepoint;\\n/**For documentation of this method, see [\\n`java.sql.Connection#setTransactionIsolation(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html#setTransactionIsolation(int)).\\n@param level The transaction level to set, which is one of: `Jdbc.Connection.TRANSACTION_READ_UNCOMMITTED`, `Jdbc.Connection.TRANSACTION_READ_COMMITTED`, `Jdbc.Connection.TRANSACTION_REPEATABLE_READ`, `Jdbc.Connection.TRANSACTION_SERIALIZABLE`, or `Jdbc.Connection.TRANSACTION_NONE`.*/setTransactionIsolation(level:Integer):void;}interface JdbcClob{\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Clob#truncate(long)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Clob.html#free()).*/free():void;\\n/**Gets the content of this JdbcClob as an Apps Script blob.\\n@return A [`Blob`](https://developers.google.com/apps-script/reference/jdbc/../base/blob.html) that can be used directly by other Apps Script APIs.*/getAppsScriptBlob():Blob;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**For documentation of this method, see [\\n`java.sql.Clob#getSubString(long, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Clob.html#getSubString(long,%20int)).\\n@param position The index of the first character of the substring to extract. The first\\n    character is at index 1.\\n@param length The number of consecutive characters to copy (must be 0 or greater).\\n@return The retrieved substring.*/getSubString(position:Integer,length:Integer):string;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Clob#length()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Clob.html#length()).\\n@return The length (in characters) of this clob.*/length():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Clob#position(Clob, long)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Clob.html#position(java.sql.Clob,%20long)).\\n@param search The clob object to search for.\\n@param start The position at which to begin searching; the first position is 1.\\n@return The position at which the specifed clob appears, or -1 if it is not present.*/position(search:Jdbc.JdbcClob,start:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Clob#position(String, long)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Clob.html#position(java.lang.String,%20long)).\\n@param search The substring to search for.\\n@param start The position at which to begin searching; the first position is 1.\\n@return The position at which the specifed substring appears, or -1 if it is not present.*/position(search:string,start:Integer):Integer;\\n/**Convenience method for writing a [`JdbcClob`](https://developers.google.com/apps-script/reference/jdbc/jdbc-clob.html) to a clob.\\n@param position The position at which writing to the clob starts; the first position is 1.\\n@param blobSource The blob source to write.\\n@return The number of characters written.*/setString(position:Integer,blobSource:BlobSource):Integer;\\n/**Convenience method for writing a [`JdbcClob`](https://developers.google.com/apps-script/reference/jdbc/jdbc-clob.html) to a clob.\\n@param position The position at which writing to the clob starts; the first position is 1.\\n@param blobSource The blob source to write.\\n@param offset The offset into the provided string where reading characters to write starts.\\n@param len The number of characters to write.\\n@return The number of characters written.*/setString(position:Integer,blobSource:BlobSource,offset:Integer,len:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Clob#setString(long, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Clob.html#setString(long,%20java.lang.String)).\\n@param position The position at which writing to the clob starts; the first position is 1.\\n@param value The string to write.\\n@return The number of characters written.*/setString(position:Integer,value:string):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Clob#setString(long, String, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Clob.html#setString(long,%20java.lang.String,%20int,%20int)).\\n@param position The position at which writing to the clob starts; the first position is 1.\\n@param value The string to write.\\n@param offset The offset into the provided string where reading characters to write starts.\\n@param len The number of characters to write.\\n@return The number of characters written.*/setString(position:Integer,value:string,offset:Integer,len:Integer):Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Clob#truncate(long)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Clob.html#truncate(long)).\\n@param length The size (in bytes) of this clob after truncation.*/truncate(length:Integer):void;}interface JdbcCallableStatement{\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#addBatch()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#addBatch()).*/addBatch():void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#addBatch(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#addBatch(java.lang.String)).\\n@param sql The SQL command to add to this statement, typically an SQL `INSERT` or `UPDATE`.*/addBatch(sql:string):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#cancel()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#cancel()).*/cancel():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#clearBatch()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#clearBatch()).*/clearBatch():void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#clearParameters()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#clearParameters()).*/clearParameters():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#clearWarnings()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#clearWarnings()).*/clearWarnings():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#close()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#close()).*/close():void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#execute()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#execute()).\\n@return `true` if the first result is a result set; `false` if the first result is\\n    an update count or there is no result.*/execute():boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String)).\\n@param sql The SQL statement to execute.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int)).\\n@param sql The SQL statement to execute.\\n@param autoGeneratedKeys A flag that indicates whether auto-generated keys are made available\\n    for future retrieval; either `Jdbc.Statement.RETURN_GENERATED_KEYS` or `Jdbc.Statement.NO_GENERATED_KEYS`.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string,autoGeneratedKeys:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String, int[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int[])).\\n@param sql The SQL statement to execute.\\n@param columnIndexes The column indices in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string,columnIndexes:Integer[]):boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#execute(String, String[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20java.lang.String[])).\\n@param sql The SQL statement to execute.\\n@param columnNames The names of columns in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return `true` if the first result is a result set; `false` if it is an update\\n    count or if there are no results.*/execute(sql:string,columnNames:string[]):boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#executeBatch()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeBatch()).\\n@return The update counts for each command in the batch, using the same order in which commands\\n    were added to the batch.*/executeBatch():Integer[];\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#executeQuery()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()).\\n@return A result set that contains the data produced by the query.*/executeQuery():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeQuery(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeQuery(java.lang.String)).\\n@param sql The SQL statement to execute, typically a static `SELECT`.\\n@return A result set containing the results of the execution. This is never `null`.*/executeQuery(sql:string):Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#executeUpdate()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()).\\n@return The row count ofr SQL Data Manipulation Language statements, or 0 for SQL statements\\n    that return nothing.*/executeUpdate():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String)).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String,%20int)).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@param autoGeneratedKeys A flag that indicates whether auto-generated keys are made available\\n    for future retrieval; either `Jdbc.Statement.RETURN_GENERATED_KEYS` or `Jdbc.Statement.NO_GENERATED_KEYS`.\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string,autoGeneratedKeys:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String, int[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String,%20int[])).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@param columnIndexes The column indices in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string,columnIndexes:Integer[]):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#executeUpdate(String, String[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate(java.lang.String,%20java.lang.String[])).\\n@param sql The SQL Data Manipulation Language statement to execute (such as `INSERT`,\\n    `UPDATE`, or `DELETE`), or else a statement that returns nothing (such as a DDL\\n    statement).\\n@param columnNames The names of columns in the whose auto-generated keys are made available for\\n    future retrieval.\\n@return Either the row count for for Data Manipulation Language statements, or 0 for statements\\n    that return nothing.*/executeUpdate(sql:string,columnNames:string[]):Integer;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getArray(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getArray(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `ARRAY` parameter. Returns `null` if the value is `null`.*/getArray(parameterIndex:Integer):Jdbc.JdbcArray;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getArray(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getArray(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `ARRAY` parameter. Returns `null` if the value is `null`.*/getArray(parameterName:string):Jdbc.JdbcArray;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getBigDecimal(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getBigDecimal(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `NUMERIC` parameter in full precision. Returns `null` if the\\n    value is `null`.*/getBigDecimal(parameterIndex:Integer):BigNumber;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getBigDecimal(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getBigDecimal(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `NUMERIC` parameter. Returns `null` if the value is `null`.*/getBigDecimal(parameterName:string):BigNumber;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getBlob(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getBlob(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `BLOB` parameter. Returns `null` if the value is `null`.*/getBlob(parameterIndex:Integer):Jdbc.JdbcBlob;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getBlob(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getBlob(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `BLOB` parameter. Returns `null` if the value is `null`.*/getBlob(parameterName:string):Jdbc.JdbcBlob;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getBoolean(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getBoolean(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `BIT` or `BOOLEAN` parameter. Returns `false` if the\\n    value is `null`.*/getBoolean(parameterIndex:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getBoolean(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getBoolean(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `BIT` or `BOOLEAN` parameter. Returns `false` if the\\n    value is `null`.*/getBoolean(parameterName:string):boolean;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getByte(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getByte(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `TINYINT` parameter. Returns 0 if the value is `null`.*/getByte(parameterIndex:Integer):Byte;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getByte(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getByte(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `TINYINT` parameter. Returns 0 if the value is `null`.*/getByte(parameterName:string):Byte;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getBytes(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getBytes(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `BINARY` or `VARBINARY` parameter. Returns `null` if\\n    the value is `null`.*/getBytes(parameterIndex:Integer):Byte[];\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getBytes(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getBytes(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `BINARY` or `VARBINARY` parameter. Returns `null` if\\n    the value is `null`.*/getBytes(parameterName:string):Byte[];\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getClob(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getClob(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `CLOB` parameter. Returns `null` if the value is `null`.*/getClob(parameterIndex:Integer):Jdbc.JdbcClob;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getClob(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getClob(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `CLOB` parameter. Returns `null` if the value is `null`.*/getClob(parameterName:string):Jdbc.JdbcClob;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getConnection()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getConnection()).\\n@return The connection that produced this statement.*/getConnection():Jdbc.JdbcConnection;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getDate(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getDate(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `DATE` parameter. Returns `null` if the value is `null`.*/getDate(parameterIndex:Integer):Jdbc.JdbcDate;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getDate(int, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getDate(int,%20java.util.Calendar)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The value of a `DATE` parameter. Returns `null` if the value is `null`.*/getDate(parameterIndex:Integer,timeZone:string):Jdbc.JdbcDate;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getDate(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getDate(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `DATE` parameter. Returns `null` if the value is `null`.*/getDate(parameterName:string):Jdbc.JdbcDate;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getDate(String, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getDate(java.lang.String,%20java.util.Calendar)).\\n@param parameterName The name of the parameter.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The value of a `DATE` parameter. Returns `null` if the value is `null`.*/getDate(parameterName:string,timeZone:string):Jdbc.JdbcDate;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getDouble(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getDouble(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `DOUBLE` parameter. Returns 0 if the value is `null`.*/getDouble(parameterIndex:Integer):number;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getDouble(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getDouble(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `DOUBLE` parameter. Returns 0 if the value is `null`.*/getDouble(parameterName:string):number;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getFetchDirection()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getFetchDirection()).\\n@return The default direction for result sets generated by this statement, which is either\\n    `Jdbc.ResultSet.FETCH_FORWARD` or `Jdbc.ResultSet.FETCH_REVERSE`.*/getFetchDirection():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getFetchSize()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getFetchSize()).\\n@return The default row fetch size for result sets generated from this statement.*/getFetchSize():Integer;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getFloat(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getFloat(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `FLOAT` parameter. Returns 0 if the value is `null`.*/getFloat(parameterIndex:Integer):number;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getFloat(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getFloat(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `FLOAT` parameter. Returns 0 if the value is `null`.*/getFloat(parameterName:string):number;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getGeneratedKeys()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getGeneratedKeys()).\\n@return A result set containing the auto-generated keys generated by the execution of this\\n    statement.*/getGeneratedKeys():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getInt(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getInt(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `INTEGER` parameter. Returns 0 if the value is `null`.*/getInt(parameterIndex:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getInt(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getInt(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `INTEGER` parameter. Returns 0 if the value is `null`.*/getInt(parameterName:string):Integer;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getLong(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getLong(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `BIGINT` parameter. Returns 0 if the value is `null`.*/getLong(parameterIndex:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getLong(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getLong(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `BIGINT` parameter. Returns 0 if the value is `null`.*/getLong(parameterName:string):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getMaxFieldSize()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMaxFieldSize()).\\n@return The current column byte size limit for columns storing character and binary values; a\\n    value of zero indictates no limit.*/getMaxFieldSize():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getMaxRows()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMaxRows()).\\n@return The current maximum number of rows for a result set produced by this statement; a value\\n    of 0 indicates no limit.*/getMaxRows():Integer;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#getMetaData()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#getMetaData()).\\n@return The description of a result set's columns, or `NULL` if this metadata is\\n    unavailable.*/getMetaData():Jdbc.JdbcResultSetMetaData;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getMoreResults()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMoreResults()).\\n@return `true` if the next result is a result set; `false` otherwise.*/getMoreResults():boolean;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getMoreResults(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getMoreResults(int)).\\n@param current A flag that indicates what happens to current result sets when retrieved. This\\n    value is one of `Jdbc.Statement.CLOSE_CURRENT_RESULT`, `Jdbc.Statement.KEEP_CURRENT_RESULT`, or `Jdbc.Statement.CLOSE_ALL_RESULTS`.\\n@return `true` if the next result is a result set; `false` otherwise.*/getMoreResults(current:Integer):boolean;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getNClob(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getNClob(int)).\\n@param parameterIndex An index indicating which paramater to register (the first parameter is\\n    1, the second is 2, and so on).\\n@return The value of a `NCLOB` parameter. Returns `null` if the value is `null`.*/getNClob(parameterIndex:Integer):Jdbc.JdbcClob;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getNClob(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getNClob(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `NCLOB` parameter. Returns `null` if the value is `null`.*/getNClob(parameterName:string):Jdbc.JdbcClob;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getNString(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getNString(int)).\\n@param parameterIndex An index indicating which paramater to register (the first parameter is\\n    1, the second is 2, and so on).\\n@return A string that maps a `NCHAR`, `NVARCHAR`, or `LONGNVARCHAR` value.*/getNString(parameterIndex:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getNString(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getNString(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return A string that maps a `NCHAR`, `NVARCHAR`, or `LONGNVARCHAR` value.*/getNString(parameterName:string):string;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getObject(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getObject(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return An object holding the parameter value.*/getObject(parameterIndex:Integer):Object;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getObject(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getObject(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return An object holding the parameter value.*/getObject(parameterName:string):Object;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#getParameterMetaData()`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#getParameterMetaData()).\\n@return The parameter metadata, including the number, types, and properties for each parameter.*/getParameterMetaData():Jdbc.JdbcParameterMetaData;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getQueryTimeout()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getQueryTimeout()).\\n@return The current query timeout in seconds; a value of zero indicates no timeout.*/getQueryTimeout():Integer;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getRef(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getRef(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `REF` parameter. Returns `null` if the value is `null`.*/getRef(parameterIndex:Integer):Jdbc.JdbcRef;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getRef(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getRef(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `REF` parameter. Returns `null` if the value is `null`.*/getRef(parameterName:string):Jdbc.JdbcRef;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getResultSet()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSet()).\\n@return The current result set, or `null` if the result is an update count or there are\\n    no more results.*/getResultSet():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getResultSetConcurrency()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSetConcurrency()).\\n@return The result set concurrency for result sets generated from this statement, which is\\n    either `Jdbc.ResultSet.CONCUR_READ_ONLY` or `Jdbc.ResultSet.CONCUR_UPDATABLE`.*/getResultSetConcurrency():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getResultSetHoldability()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSetHoldability()).\\n@return The result set holdability, which is either `Jdbc.ResultSet.HOLD_CURSORS_OVER_COMMIT` or `Jdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT`.*/getResultSetHoldability():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getResultSetType()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getResultSetType()).\\n@return The result set type for result sets generated from this statement, which is `Jdbc.ResultSet.TYPE_FORWARD_ONLY`, `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`, or\\n    `Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE`.*/getResultSetType():Integer;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getRowId(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getRowId(int)).\\n@param parameterIndex An index indicating which paramater to register (the first parameter is\\n    1, the second is 2, and so on).\\n@return The `ROWID` value. Returns `null` if the parameter contains an SQL `NULL`.*/getRowId(parameterIndex:Integer):Jdbc.JdbcRowId;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getRowId(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getRowId(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The `ROWID` value. Returns `null` if the parameter contains an SQL `NULL`.*/getRowId(parameterName:string):Jdbc.JdbcRowId;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getSQLXML(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getSQLXML(int)).\\n@param parameterIndex An index indicating which paramater to register (the first parameter is\\n    1, the second is 2, and so on).\\n@return A SQLXML object that maps to an SQL XML value.*/getSQLXML(parameterIndex:Integer):Jdbc.JdbcSQLXML;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getSQLXML(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getSQLXML(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return A SQLXML object that maps to an SQL XML value.*/getSQLXML(parameterName:string):Jdbc.JdbcSQLXML;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getShort(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getShort(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `SMALLINT` parameter. Returns 0 if the value is `null`.*/getShort(parameterIndex:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getShort(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getShort(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `SMALLINT` parameter. Returns 0 if the value is `null`.*/getShort(parameterName:string):Integer;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getString(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getString(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `CHAR`, `VARCHAR`, or `LONGVARCHAR` parameter.*/getString(parameterIndex:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getString(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getString(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `CHAR`, `VARCHAR`, or `LONGVARCHAR` parameter. Returns\\n    `null` if the value is `null`.*/getString(parameterName:string):string;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getTime(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getTime(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `TIME` parameter. Returns `null` if the value is `null`.*/getTime(parameterIndex:Integer):Jdbc.JdbcTime;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getTime(int, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getTime(int,%20java.util.Calendar)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The value of a `TIME` parameter. Returns `null` if the value is `null`.*/getTime(parameterIndex:Integer,timeZone:string):Jdbc.JdbcTime;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getTime(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getTime(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `TIME` parameter. Returns `null` if the value is `null`.*/getTime(parameterName:string):Jdbc.JdbcTime;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getTime(String, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getTime(java.lang.String,%20java.util.Calendar)).\\n@param parameterName The name of the parameter.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The value of a `TIME` parameter. Returns `null` if the value is `null`.*/getTime(parameterName:string,timeZone:string):Jdbc.JdbcTime;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getTimestamp(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getTimestamp(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `TIMESTAMP` parameter. Returns `null` if the value is `null`.*/getTimestamp(parameterIndex:Integer):Jdbc.JdbcTimestamp;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getTimestamp(int, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getTimestamp(int,%20java.util.Calendar)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The value of a `TIMESTAMP` parameter. Returns `null` if the value is `null`.*/getTimestamp(parameterIndex:Integer,timeZone:string):Jdbc.JdbcTimestamp;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getTimestamp(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getTimestamp(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `TIMESTAMP` parameter. Returns `null` if the value is `null`.*/getTimestamp(parameterName:string):Jdbc.JdbcTimestamp;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getTimestamp(String, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getTimestamp(java.lang.String,%20java.util.Calendar)).\\n@param parameterName The name of the parameter.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).\\n@return The value of a `TIMESTAMP` parameter. Returns `null` if the value is `null`.*/getTimestamp(parameterName:string,timeZone:string):Jdbc.JdbcTimestamp;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getURL(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getURL(int)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@return The value of a `DATALINK` parameter as a string.*/getURL(parameterIndex:Integer):string;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#getURL(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#getURL(java.lang.String)).\\n@param parameterName The name of the parameter.\\n@return The value of a `DATALINK` parameter. Returns `null` if the value is `null`.*/getURL(parameterName:string):string;\\n/**For documentation of this method, see [\\n`java.sql.Statement#getUpdateCount()`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getUpdateCount()).\\n@return The current result as an update count, or -1 if the current result is a result set or\\n    if there are no more results.*/getUpdateCount():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#getWarnings()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#getWarnings()).\\n@return The current set of warnings, or `null` if there are no warnings.*/getWarnings():string[];\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#isClosed()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#isClosed()).\\n@return `true` if this statement is closed; `false` otherwise.*/isClosed():boolean;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#isPoolable()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#isPoolable()).\\n@return `true` if this statement is poolable; `false` otherwise.*/isPoolable():boolean;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#registerOutParameter(int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#registerOutParameter(int,%20int)).\\n@param parameterIndex An index indicating which paramater to register (the first parameter is\\n    1, the second is 2, and so on).\\n@param sqlType The JDBC [type code](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) to\\n    register. If the parameter is of JDBC type `NUMERIC` or `DECIMAL`,\\n    use [`registerOutParameter(parameterIndex, sqlType, scale)`](https://developers.google.com/apps-script/reference/jdbc/jdbc-callable-statement.html#registerOutParameter(Integer,Integer,Integer)) instead.*/registerOutParameter(parameterIndex:Integer,sqlType:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#registerOutParameter(int, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#registerOutParameter(int,%20int,%20int)).\\n@param parameterIndex An index indicating which paramater to register (the first parameter is\\n    1, the second is 2, and so on).\\n@param sqlType The JDBC [type code](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) to\\n    register.\\n@param scale The desired number of digits to the right of the decimal point (must be zero or\\n    greater).*/registerOutParameter(parameterIndex:Integer,sqlType:Integer,scale:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#registerOutParameter(int, int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#registerOutParameter(int,%20int,%20java.lang.String)).\\n@param parameterIndex The index of the parameter to retrieve (the first parameter is 1, the\\n    second is 2, and so on).\\n@param sqlType A [type\\n    code](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) value.\\n@param typeName The fully-qualified name of an SQL structured type.*/registerOutParameter(parameterIndex:Integer,sqlType:Integer,typeName:string):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#registerOutParameter(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#registerOutParameter(java.lang.String,%20int)).\\n@param parameterName The name of the parameter to be registered.\\n@param sqlType A [type\\n    code](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) value.*/registerOutParameter(parameterName:string,sqlType:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#registerOutParameter(String, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#registerOutParameter(java.lang.String,%20int,%20int)).\\n@param parameterName The name of the parameter to be registered.\\n@param sqlType A [type\\n    code](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) value.\\n@param scale The desired number of digits to the right of the decimal point, which must be zero\\n    or greater.*/registerOutParameter(parameterName:string,sqlType:Integer,scale:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#registerOutParameter(String, int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#registerOutParameter(java.lang.String,%20int,%20java.lang.String)).\\n@param parameterName The name of the parameter to be registered.\\n@param sqlType A [type\\n    code](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) value.\\n@param typeName The fully-qualified name of an SQL structured type.*/registerOutParameter(parameterName:string,sqlType:Integer,typeName:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setArray(int, Array)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setArray(int,%20java.sql.Array)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setArray(parameterIndex:Integer,x:Jdbc.JdbcArray):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setBigDecimal(int, BigDecimal)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBigDecimal(int,%20java.math.BigDecimal)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setBigDecimal(parameterIndex:Integer,x:BigNumber):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setBigDecimal(String, BigDecimal)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setBigDecimal(java.lang.String,%20java.math.BigDecimal)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setBigDecimal(parameterName:string,x:BigNumber):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setBlob(int, Clob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBlob(int,%20java.sql.Blob)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setBlob(parameterIndex:Integer,x:Jdbc.JdbcBlob):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setBlob(String, Blob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setBlob(java.lang.String,%20java.sql.Blob)).\\n@param parameterName The name of the parameter to set.\\n@param x A blob that maps to an SQL `BLOB` value.*/setBlob(parameterName:string,x:Jdbc.JdbcBlob):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setBoolean(int, boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBoolean(int,%20boolean)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setBoolean(parameterIndex:Integer,x:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setBoolean(String, boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setBoolean(java.lang.String,%20boolean)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setBoolean(parameterName:string,x:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setByte(int, byte)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setByte(int,%20byte)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setByte(parameterIndex:Integer,x:Byte):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setByte(String, byte)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setByte(java.lang.String,%20byte)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setByte(parameterName:string,x:Byte):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setBytes(int, byte[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBytes(int,%20byte[])).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setBytes(parameterIndex:Integer,x:Byte[]):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setBytes(String, byte[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setBytes(java.lang.String,%20byte[])).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setBytes(parameterName:string,x:Byte[]):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setClob(int, Clob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setClob(int,%20java.sql.Clob)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setClob(parameterIndex:Integer,x:Jdbc.JdbcClob):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setBlob(String, Clob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setClob(java.lang.String,%20java.sql.Clob)).\\n@param parameterName The name of the parameter to set.\\n@param x A clob that maps to an SQL `CLOB` value.*/setClob(parameterName:string,x:Jdbc.JdbcClob):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setCursorName(String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setCursorName(java.lang.String)).\\n@param name The new cursor name, which must be unique within a connection.*/setCursorName(name:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setDate(int, Date)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setDate(int,%20java.sql.Date)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setDate(parameterIndex:Integer,x:Jdbc.JdbcDate):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setDate(int, Date, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setDate(int,%20java.sql.Date,%20java.util.Calendar)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).*/setDate(parameterIndex:Integer,x:Jdbc.JdbcDate,timeZone:string):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setDate(String, Date)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setDate(java.lang.String,%20java.sql.Date)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setDate(parameterName:string,x:Jdbc.JdbcDate):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setDate(String, Date, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setDate(java.lang.String,%20java.sql.Date,%20java.util.Calendar)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).*/setDate(parameterName:string,x:Jdbc.JdbcDate,timeZone:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setDouble(int, double)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setDouble(int,%20double)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setDouble(parameterIndex:Integer,x:number):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setDouble(String, double)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setDouble(java.lang.String,%20double)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setDouble(parameterName:string,x:number):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setEscapeProcessing(boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setEscapeProcessing(boolean)).\\n@param enable If `true`, escape processing is enabled; otherwise it is disabled.*/setEscapeProcessing(enable:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setFetchDirection(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setFetchDirection(int)).\\n@param direction The specified direction to set, which is either `Jdbc.ResultSet.FETCH_FORWARD` or `Jdbc.ResultSet.FETCH_REVERSE`.*/setFetchDirection(direction:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setFetchSize(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setFetchSize(int)).\\n@param rows The number of rows to fetch.*/setFetchSize(rows:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setFloat(int, float)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setFloat(int,%20float)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setFloat(parameterIndex:Integer,x:number):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setFloat(String, float)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setFloat(java.lang.String,%20float)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setFloat(parameterName:string,x:number):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setInt(int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setInt(int,%20int)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setInt(parameterIndex:Integer,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setInt(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setInt(java.lang.String,%20int)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setInt(parameterName:string,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setLong(int, long)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setLong(int,%20long)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setLong(parameterIndex:Integer,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setLong(String, long)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setLong(java.lang.String,%20long)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setLong(parameterName:string,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setMaxFieldSize(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setMaxFieldSize(int)).\\n@param max The new column byte size limit; a value of zero indicates no limit.*/setMaxFieldSize(max:Integer):void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Statement#setMaxRows(int)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setMaxRows(int)).\\n@param max The maximum number of rows a result set generated by this statement can have. A\\n    value of 0 indicates no limit.*/setMaxRows(max:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setNClob(int, NClob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNClob(int,%20java.sql.NClob)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setNClob(parameterIndex:Integer,x:Jdbc.JdbcClob):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setNClob(String, NClob)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setNClob(java.lang.String,%20java.sql.NClob)).\\n@param parameterName The name of the parameter to set.\\n@param value The parameter value to set.*/setNClob(parameterName:string,value:Jdbc.JdbcClob):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setNString(int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNString(int,%20java.lang.String)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setNString(parameterIndex:Integer,x:string):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setNString(String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setNString(java.lang.String,%20java.lang.String)).\\n@param parameterName The name of the parameter to set.\\n@param value The parameter value to set.*/setNString(parameterName:string,value:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setNull(int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNull(int,%20int)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param sqlType The [SQL\\n    type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) of the specified parameter.*/setNull(parameterIndex:Integer,sqlType:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setNull(int, int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNull(int,%20int,%20java.lang.String)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param sqlType The [SQL\\n    type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) of the specified parameter.\\n@param typeName The fully-qualifed name of an SQL user-defined type. Ignored if the parameter\\n    isn't a user-defined type or `REF`.*/setNull(parameterIndex:Integer,sqlType:Integer,typeName:string):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setNull(String, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setNull(java.lang.String,%20int)).\\n@param parameterName The name of the parameter to set.\\n@param sqlType The SQL [\\n    type code](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html).*/setNull(parameterName:string,sqlType:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setNull(String, int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setNull(java.lang.String,%20int,%20java.lang.String)).\\n@param parameterName The name of the parameter to set.\\n@param sqlType The [SQL\\n    type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html).\\n@param typeName The fully-qualified name of an SQL user-defined type; ignored if the parameter\\n    is not a user-defined type or SQL `REF` value.*/setNull(parameterName:string,sqlType:Integer,typeName:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setObject(int, Object)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int,%20java.lang.Object)).\\n@param index The index of the parameter to set (the first parameter is 1, the second is 2, and\\n    so on).\\n@param x The object containing the value to set the parameter to.*/setObject(index:Integer,x:Object):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setObject(int, Object, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int,%20java.lang.Object,%20int)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The object containing the value to set the parameter to.\\n@param targetSqlType The [SQL type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) to send\\n    to the database.*/setObject(parameterIndex:Integer,x:Object,targetSqlType:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setObject(int, Object, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int,%20java.lang.Object,%20int,%20int)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The object containing the value to set the parameter to.\\n@param targetSqlType The [SQL type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) to send\\n    to the database. The scale argument may further qualify this type.\\n@param scaleOrLength The number of digits after the decimal for `DECIMAL` or `NUMERIC` types, or the length of data for `InputStream` or `Reader` types.\\n    Ignored for all other types.*/setObject(parameterIndex:Integer,x:Object,targetSqlType:Integer,scaleOrLength:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setObject(String, Object)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setObject(java.lang.String,%20java.lang.Object)).\\n@param parameterName The name of the parameter to set.\\n@param x The object containing the value to set.*/setObject(parameterName:string,x:Object):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setObject(String, Object, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setObject(java.lang.String,%20java.lang.Object,%20int)).\\n@param parameterName The name of the parameter to set.\\n@param x The object containing the value to set.\\n@param targetSqlType The [SQL type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) sent to\\n    the database.*/setObject(parameterName:string,x:Object,targetSqlType:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setObject(String, Object, int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setObject(java.lang.String,%20java.lang.Object,%20int,%20int)).\\n@param parameterName The name of the parameter to set.\\n@param x The object containing the value to set.\\n@param targetSqlType The [SQL type](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) sent to\\n    the database. The scale parameter may further qualify this type.\\n@param scale The number of digits after the decimal point for `DECIMAL` and `NUMERIC` types. Ignored for all other types.*/setObject(parameterName:string,x:Object,targetSqlType:Integer,scale:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setPoolable(boolean)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setPoolable(boolean)).\\n@param poolable If `true`, requests that this statement be pooled; otherwise requests it\\n    not be pooled.*/setPoolable(poolable:boolean):void;\\n/**For documentation of this method, see [\\n`java.sql.Statement#setQueryTimeout(int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#setQueryTimeout(int)).\\n@param seconds The new query timeout in seconds; a value of 0 indicates no timeout.*/setQueryTimeout(seconds:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setRef(int, Ref)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setRef(int,%20java.sql.Ref)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The SQL `REF` value to set.*/setRef(parameterIndex:Integer,x:Jdbc.JdbcRef):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setRowId(int, RowId)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setRowId(int,%20java.sql.RowId)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setRowId(parameterIndex:Integer,x:Jdbc.JdbcRowId):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setRowId(String, RowId)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setRowId(java.lang.String,%20java.sql.RowId)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setRowId(parameterName:string,x:Jdbc.JdbcRowId):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setSQLXML(int, SQLXML)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setSQLXML(int,%20java.sql.SQLXML)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setSQLXML(parameterIndex:Integer,x:Jdbc.JdbcSQLXML):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setSQLXML(String, SQLXML)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setSQLXML(java.lang.String,%20java.sql.SQLXML)).\\n@param parameterName The name of the parameter to set.\\n@param xmlObject A SQLXML object that maps to an SQL XML value.*/setSQLXML(parameterName:string,xmlObject:Jdbc.JdbcSQLXML):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setShort(int, short)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setShort(int,%20short)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setShort(parameterIndex:Integer,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setShort(String, short)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setShort(java.lang.String,%20short)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setShort(parameterName:string,x:Integer):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setString(int, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int,%20java.lang.String)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setString(parameterIndex:Integer,x:string):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setString(String, String)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setString(java.lang.String,%20java.lang.String)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setString(parameterName:string,x:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setTime(int, Time)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTime(int,%20java.sql.Time)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setTime(parameterIndex:Integer,x:Jdbc.JdbcTime):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setTime(int, Time, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTime(int,%20java.sql.Time,%20java.util.Calendar)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).*/setTime(parameterIndex:Integer,x:Jdbc.JdbcTime,timeZone:string):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setTime(String, Time)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setTime(java.lang.String,%20java.sql.Time)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setTime(parameterName:string,x:Jdbc.JdbcTime):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setTime(String, Time, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setTime(java.lang.String,%20java.sql.Time,%20java.util.Calendar)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).*/setTime(parameterName:string,x:Jdbc.JdbcTime,timeZone:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setTimestamp(int, Timestamp)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTimestamp(int,%20java.sql.Timestamp)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setTimestamp(parameterIndex:Integer,x:Jdbc.JdbcTimestamp):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setTimestamp(int, Timestamp, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTimestamp(int,%20java.sql.Timestamp,%20java.util.Calendar)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).*/setTimestamp(parameterIndex:Integer,x:Jdbc.JdbcTimestamp,timeZone:string):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setTimestamp(String, Timestamp)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setTimestamp(java.lang.String,%20java.sql.Timestamp)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.*/setTimestamp(parameterName:string,x:Jdbc.JdbcTimestamp):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setTimestamp(String, Timestamp, Calendar)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setTimestamp(java.lang.String,%20java.sql.Timestamp,%20java.util.Calendar)).\\n@param parameterName The name of the parameter to set.\\n@param x The parameter value to set.\\n@param timeZone A time zone string used to construct [\\n    java.lang.Calendar](https://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html) instance, which in turn is used to build the date. Several formats\\n    of time zone strings are recognized: short IDs (such as `PST`, `EST`, and\\n    `GMT`), long IDs (such as `US/Pacific` and `America/Los_Angeles`), and\\n    offsets (such as `GMT+6:30`).*/setTimestamp(parameterName:string,x:Jdbc.JdbcTimestamp,timeZone:string):void;\\n/**For documentation of this method, see [\\n`java.sql.PreparedStatement#setURL(int, URL)`](https://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setURL(int,%20java.net.URL)).\\n@param parameterIndex The index of the parameter to set (the first parameter is 1, the second\\n    is 2, and so on).\\n@param x The parameter value to set.*/setURL(parameterIndex:Integer,x:string):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#setURL(String, URL)`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#setURL(java.lang.String,%20java.net.URL)).\\n@param parameterName The name of the parameter to set.\\n@param val The parameter value to set.*/setURL(parameterName:string,val:string):void;\\n/**For documentation of this method, see [\\n`java.sql.CallableStatement#wasNull()`](https://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html#wasNull()).\\n@return `true` if the last parameter read was `null`; returns `false`\\n    otherwise.*/wasNull():boolean;}interface JdbcBlob{\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Blob#free()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Blob.html#free()).*/free():void;\\n/**Gets the content of this JdbcBlob as an Apps Script blob.\\n@return A [`Blob`](https://developers.google.com/apps-script/reference/jdbc/../base/blob.html) that can be used directly by other Apps Script APIs.*/getAppsScriptBlob():Blob;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**For documentation of this method, see [\\n`java.sql.Blob#getBytes(long, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Blob.html#getBytes(long,%20int)).\\n@param position The ordinal position of the first byte in the blob value to be extracted; the\\n    first byte is at position 1.\\n@param length The number of consecutive bytes to copy; the value for length must be zero or\\n    greater.\\n@return A byte array containing up to the specified number of consecutive bytes from the blob\\n    value.*/getBytes(position:Integer,length:Integer):Byte[];\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Blob#length()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Blob.html#length()).\\n@return The number of bytes in this blob.*/length():Integer;\\n/**For documentation of this method, see [\\n`java.sql.Blob#position(byte[], long)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Blob.html#position(byte[],%20long)).\\n@param pattern The byte array to search for.\\n@param start The position in the blob value where to beging searching; the first position is 1.\\n@return The position at which the specified pattern begins, or else -1 if the pattern is not\\n    found.*/position(pattern:Byte[],start:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Blob#position(blob, long)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Blob.html#position(java.sql.Blob,%20long)).\\n@param pattern The [`JdbcBlob`](https://developers.google.com/apps-script/reference/jdbc/jdbc-blob.html) indicating the value to search for.\\n@param start The position in the blob value where to beging searching; the first position is 1.\\n@return The position at which the specified pattern begins, or else -1 if the pattern is not\\n    found.*/position(pattern:Jdbc.JdbcBlob,start:Integer):Integer;\\n/**Convenience method for writing a [`JdbcBlob`](https://developers.google.com/apps-script/reference/jdbc/jdbc-blob.html) to this blob.\\n@param position The position in the blob at which to start writing; the first position is 1.\\n@param blobSource The source of data to write to this blob.\\n@return The number of bytes written.*/setBytes(position:Integer,blobSource:BlobSource):Integer;\\n/**Convenience method for writing a [`JdbcBlob`](https://developers.google.com/apps-script/reference/jdbc/jdbc-blob.html) to this blob.\\n@param position The position in the blob at which to start writing; the first position is 1.\\n@param blobSource The source of data to write to this blob.\\n@param offset The offset into the provided byte array at which to start reading bytes to set.\\n@param length The number of bytes to write to the blob.\\n@return The number of bytes written.*/setBytes(position:Integer,blobSource:BlobSource,offset:Integer,length:Integer):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Blob#setBytes(long, byte[])`](https://docs.oracle.com/javase/6/docs/api/java/sql/Blob.html#setBytes(long,%20byte[])).\\n@param position The position in the blob at which to start writing; the first position is 1.\\n@param bytes The array of bytes to write to this blob.\\n@return The number of bytes written.*/setBytes(position:Integer,bytes:Byte[]):Integer;\\n/**For documentation of this method, see [\\n`java.sql.Blob#setBytes(long, byte[], int, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Blob.html#setBytes(long,%20byte[],%20int,%20int)).\\n@param position The position in the blob at which to start writing; the first position is 1.\\n@param bytes The array of bytes to write to this blob.\\n@param offset The offset into the provided byte array at which to start reading bytes to set.\\n@param length The number of bytes to write to the blob.\\n@return The number of bytes written.*/setBytes(position:Integer,bytes:Byte[],offset:Integer,length:Integer):Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Blob#truncate(long)```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Blob.html#truncate(long)).\\n@param length The size (in bytes) of this blob after truncation.*/truncate(length:Integer):void;}interface JdbcArray{\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Array#free()```\\n\\n](http://docs.oracle.com/javase/6/docs/api/java/sql/Array.html#free()).*/free():void;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Array#getArray()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Array.html#getArray())\\n@return An object containing the ordered elements of the SQL array value.*/getArray():Object;\\n/**For documentation of this method, see [\\n`java.sql.Array#getArray(long, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Array.html#getArray(long,%20int)).\\n@param index The array index of the first element to retrieve, where the first element has an\\n    index of 1.\\n@param count The number of successive SQL array elements to retrieve.\\n@return An object containing up to the specified number of consecutive SQL array elements.*/getArray(index:Integer,count:Integer):Object;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Array#getBaseType()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Array.html#getBaseType()).\\n@return The [type\\n    code](https://docs.oracle.com/javase/6/docs/api/java/sql/Types.html) for the elements in this array.*/getBaseType():Integer;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Array#getBaseTypeName()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Array.html#getBaseTypeName()).\\n@return The database-specific name for the built-in base type or else the fully-qualified SQL\\n    type name for a base type that is a UDT.*/getBaseTypeName():string;\\n/**For documentation of this method, see [\\n\\n```\\njava.sql.Array#getResultSet()```\\n\\n](https://docs.oracle.com/javase/6/docs/api/java/sql/Array.html#getResultSet()).\\n@return The [`JdbcResultSet`](https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set.html) containing one row for each of the elements in the array\\n    designated by this Array object, with the rows in ascending order based on the indices.*/getResultSet():Jdbc.JdbcResultSet;\\n/**For documentation of this method, see [\\n`java.sql.Array#getResultSet(long, int)`](https://docs.oracle.com/javase/6/docs/api/java/sql/Array.html#getResultSet(long,%20int)).\\n@param index The array index of the first element to retrieve, where the first element has an\\n    index of 1.\\n@param count The number of successive SQL array elements to retrieve.\\n@return A [`JdbcResultSet`](https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set.html) containing up to the specified number of consecutive SQL array\\n    elements.*/getResultSet(index:Integer,count:Integer):Jdbc.JdbcResultSet;}}const Jdbc:Jdbc;\"],[\"language-app.d.ts\",\"interface LanguageApp{\\n/**Automatically translates some text from a source language to a destination language.\\n\\n```\\n// The code below will write \\\"Esta es una prueba\\\" to the log.\\n  var spanish \\u003d LanguageApp.translate('This is a test', 'en', 'es');\\n  Logger.log(spanish);\\n```\\n\\nA list of language codes is available [here](/translate/docs/languages).\\n@param text the text to translate\\n@param sourceLanguage the language code in which text is written. If it is set to the empty\\n    string, the source language code will be auto-detected\\n@param targetLanguage the language code to which the text should be translated\\n@return the translated text*/translate(text:string,sourceLanguage:string,targetLanguage:string):string;\\n/**Automatically translates some text from a source language to a destination language.\\n\\n```\\n// The code below will write \\\"Esta es una \\u003cstrong\\u003eprueba\\u003c/strong\\u003e\\\" to the log.\\n  var spanish \\u003d LanguageApp.translate('This is a \\u0026lt;strong\\u0026gt;test\\u0026lt;/strong\\u0026gt;',\\n                                      'en', 'es', {contentType: 'html'});\\n  Logger.log(spanish);\\n```\\n\\nA list of language codes is available [here](/translate/docs/languages).\\n@param text the text to translate\\n@param sourceLanguage the language code in which text is written. If it is set to the empty\\n    string, the source language code will be auto-detected\\n@param targetLanguage the language code to which the text should be translated\\n@param advancedArgs optional JavaScript object fields\\n@return the translated text*/translate(text:string,sourceLanguage:string,targetLanguage:string,advancedArgs:Object):string;}const LanguageApp:LanguageApp;\"],[\"linear-optimization-service.d.ts\",\"interface LinearOptimizationService{\\n/**Status of the solver.*/Status:LinearOptimizationService._Status;\\n/**Type of variables created by the solver.*/VariableType:LinearOptimizationService._VariableType;\\n/**Creates an engine to to solve linear programs (potentially mixed-integer programs).\\n\\n```\\n// Creates a linear optimization engine.\\nvar engine \\u003d LinearOptimizationService.createEngine();\\nengine.addVariable('x', 0, 10);\\n\\n// ...\\n```\\n@return a linear optimization engine*/createEngine():LinearOptimizationService.LinearOptimizationEngine;}module LinearOptimizationService{interface VariableType{}interface _VariableType{\\n/**Type of variable that can take any real value.*/CONTINUOUS:VariableType;\\n/**Type of variable that can only take integer values.*/INTEGER:VariableType;}interface Status{}interface _Status{\\n/**Status when it failed to find a solution for unexpected reasons.*/ABNORMAL:Status;\\n/**Status when a feasible (not necessarily optimal) solution has been found.*/FEASIBLE:Status;\\n/**Status when the current model is unfeasible (has no solution).*/INFEASIBLE:Status;\\n/**Status when the model is invalid.*/MODEL_INVALID:Status;\\n/**Status when [`LinearOptimizationEngine.solve()`](https://developers.google.com/apps-script/reference/optimization/linear-optimization-engine.html#solve()) has not been called yet.*/NOT_SOLVED:Status;\\n/**Status when an optimal solution has been found.*/OPTIMAL:Status;\\n/**Status when the current model is unbound.*/UNBOUNDED:Status;}interface LinearOptimizationSolution{\\n/**Gets the value of the objective function in the current solution.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add variables, constraints and define the objective with addVariable(), addConstraint(), etc\\nengine.addVariable('x', 0, 10);\\n\\n// ...\\n\\n// Solve the linear program\\nvar solution \\u003d engine.solve();\\nLogger.log('ObjectiveValue: ' + solution.getObjectiveValue());\\n```\\n@return the value of the objective function*/getObjectiveValue():number;\\n/**Gets the status of the solution. Before solving a problem, the status will be `NOT_SOLVED`.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add variables, constraints and define the objective with addVariable(), addConstraint(), etc\\nengine.addVariable('x', 0, 10);\\n\\n// ...\\n\\n// Solve the linear program\\nvar solution \\u003d engine.solve();\\nif (solution.getStatus() !\\u003d LinearOptimizationService.Status.FEASIBLE \\u0026\\u0026\\n    solution.getStatus() !\\u003d LinearOptimizationService.Status.OPTIMAL) {\\n  throw 'No solution ' + status;\\n}\\nLogger.log('Status: ' + solution.getStatus());\\n```\\n@return the status of the solver*/getStatus():LinearOptimizationService.Status;\\n/**Gets the value of a variable in the solution created by the last call to [`LinearOptimizationEngine.solve()`](https://developers.google.com/apps-script/reference/optimization/linear-optimization-engine.html#solve()).\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add variables, constraints and define the objective with addVariable(), addConstraint(), etc\\nengine.addVariable('x', 0, 10);\\n\\n// ...\\n\\n// Solve the linear program\\nvar solution \\u003d engine.solve();\\nLogger.log('Value of x: ' + solution.getVariableValue('x'));\\n```\\n@param variableName name of the variable\\n@return the value of the variable in the solution*/getVariableValue(variableName:string):number;\\n/**Determines whether the solution is either feasible or optimal.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add variables, constraints and define the objective with addVariable(), addConstraint(), etc\\nengine.addVariable('x', 0, 10);\\n\\n// ...\\n\\n// Solve the linear program\\nvar solution \\u003d engine.solve();\\nif (!solution.isValid()) {\\n  throw 'No solution ' + status;\\n}\\n```\\n@return `true` if the solution is valid ([`Status.FEASIBLE`](https://developers.google.com/apps-script/reference/optimization/status.html#FEASIBLE) or\\n    [`Status.OPTIMAL`](https://developers.google.com/apps-script/reference/optimization/status.html#OPTIMAL)); `false` if not*/isValid():boolean;}interface LinearOptimizationEngine{\\n/**Adds a new linear constraint in the model. The upper and lower bound of the constraint are\\ndefined at creation time. Coefficients for the variables are defined via calls to [`LinearOptimizationConstraint.setCoefficient(variableName, coefficient)`](https://developers.google.com/apps-script/reference/optimization/linear-optimization-constraint.html#setCoefficient(String,Number)).\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Create a linear constraint with the bounds 0 and 10\\nvar constraint \\u003d engine.addConstraint(0, 10);\\n\\n// Create a variable so we can add it to the constraint\\nengine.addVariable('x', 0, 5);\\n\\n// Set the coefficient of the variable in the constraint. The constraint is now:\\n// 0 \\u003c\\u003d 2 * x \\u003c\\u003d 5\\nconstraint.setCoefficient('x', 2);\\n```\\n@param lowerBound lower bound of the constraint\\n@param upperBound upper bound of the constraint\\n@return the constraint created*/addConstraint(lowerBound:number,upperBound:number):LinearOptimizationService.LinearOptimizationConstraint;\\n/**Adds constraints in batch to the model.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add a boolean variable 'x' (integer \\u003e\\u003d 0 and \\u003c\\u003d 1) and a real (continuous \\u003e\\u003d 0 and \\u003c\\u003d 100)\\nvariable 'y'.\\nengine.addVariables(['x', 'y'], [0, 0], [1, 100],\\n    [LinearOptimizationService.VariableType.INTEGER,\\n        LinearOptimizationService.VariableType.CONTINUOUS]);\\n\\n// Adds two constraints:\\n//   0 \\u003c\\u003d x + y \\u003c\\u003d 3\\n//   1 \\u003c\\u003d 10 * x - y \\u003c\\u003d 5\\nengine.addConstraints([0.0, 1.0], [3.0, 5.0], [['x', 'y'], ['x', 'y']], [[1, 1], [10, -1]]);\\n```\\n@param lowerBounds lower bounds of the constraints\\n@param upperBounds upper bounds of the constraints\\n@param variableNames the names of variables for which the coefficients are being set\\n@param coefficients coefficients being set\\n@return a linear optimization engine*/addConstraints(lowerBounds:number[],upperBounds:number[],variableNames:string[][],coefficients:number[][]):LinearOptimizationService.LinearOptimizationEngine;\\n/**Adds a new continuous variable to the model. The variable is referenced by its name. The type\\nis set to [`VariableType.CONTINUOUS`](https://developers.google.com/apps-script/reference/optimization/variable-type.html#CONTINUOUS).\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\nvar constraint \\u003d engine.addConstraint(0, 10);\\n\\n// Add a boolean variable (integer \\u003e\\u003d 0 and \\u003c\\u003d 1)\\nengine.addVariable('x', 0, 1, LinearOptimizationService.VariableType.INTEGER);\\n\\n// Add a real (continuous) variable. Notice the lack of type specification.\\nengine.addVariable('y', 0, 100);\\n```\\n@param name unique name of the variable\\n@param lowerBound lower bound of the variable\\n@param upperBound upper bound of the variable\\n@return a linear optimization engine*/addVariable(name:string,lowerBound:number,upperBound:number):LinearOptimizationService.LinearOptimizationEngine;\\n/**Adds a new variable to the model. The variable is referenced by its name.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\nvar constraint \\u003d engine.addConstraint(0, 10);\\n\\n// Add a boolean variable (integer \\u003e\\u003d 0 and \\u003c\\u003d 1)\\nengine.addVariable('x', 0, 1, LinearOptimizationService.VariableType.INTEGER);\\n\\n// Add a real (continuous) variable\\nengine.addVariable('y', 0, 100, LinearOptimizationService.VariableType.CONTINUOUS);\\n```\\n@param name unique name of the variable\\n@param lowerBound lower bound of the variable\\n@param upperBound upper bound of the variable\\n@param type type of the variable, can be one of [`VariableType`](https://developers.google.com/apps-script/reference/optimization/variable-type.html)\\n@return a linear optimization engine*/addVariable(name:string,lowerBound:number,upperBound:number,type:LinearOptimizationService.VariableType):LinearOptimizationService.LinearOptimizationEngine;\\n/**Adds a new variable to the model. The variable is referenced by its name.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\nvar constraint \\u003d engine.addConstraint(0, 10);\\n\\n// Add a boolean variable (integer \\u003e\\u003d 0 and \\u003c\\u003d 1)\\nengine.addVariable('x', 0, 1, LinearOptimizationService.VariableType.INTEGER, 2);\\n// The objective is now 2 * x.\\n\\n// Add a real (continuous) variable\\nengine.addVariable('y', 0, 100, LinearOptimizationService.VariableType.CONTINUOUS, -5);\\n// The objective is now 2 * x - 5 * y.\\n```\\n@param name unique name of the variable\\n@param lowerBound lower bound of the variable\\n@param upperBound upper bound of the variable\\n@param type type of the variable, can be one of [`VariableType`](https://developers.google.com/apps-script/reference/optimization/variable-type.html)\\n@param objectiveCoefficient objective coefficient of the variable\\n@return a linear optimization engine*/addVariable(name:string,lowerBound:number,upperBound:number,type:LinearOptimizationService.VariableType,objectiveCoefficient:number):LinearOptimizationService.LinearOptimizationEngine;\\n/**Adds variables in batch to the model. The variables are referenced by their names.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add a boolean variable 'x' (integer \\u003e\\u003d 0 and \\u003c\\u003d 1) and a real (continuous \\u003e\\u003d0 and \\u003c\\u003d 100)\\n// variable 'y'.\\nengine.addVariables(['x', 'y'], [0, 0], [1, 100],\\n    [LinearOptimizationService.VariableType.INTEGER,\\n        LinearOptimizationService.VariableType.CONTINUOUS]);\\n```\\n@param names unique names of the variables\\n@param lowerBounds lower bounds of the variables\\n@param upperBounds upper bounds of the variables\\n@param types types of the variables, can be one of [`VariableType`](https://developers.google.com/apps-script/reference/optimization/variable-type.html)\\n@param objectiveCoefficients objective coefficients of the variables\\n@return a linear optimization engine*/addVariables(names:string[],lowerBounds:number[],upperBounds:number[],types:LinearOptimizationService.VariableType[],objectiveCoefficients:number[]):LinearOptimizationService.LinearOptimizationEngine;\\n/**Sets the optimization direction to maximizing the linear objective function.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add a real (continuous) variable. Notice the lack of type specification.\\nengine.addVariable('y', 0, 100);\\n\\n// Set the coefficient of 'y' in the objective.\\n// The objective is now 5 * y\\nengine.setObjectiveCoefficient('y', 5);\\n\\n// We want to maximize.\\nengine.setMaximization();\\n```\\n@return a linear optimization engine*/setMaximization():LinearOptimizationService.LinearOptimizationEngine;\\n/**Sets the optimization direction to minimizing the linear objective function.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add a real (continuous) variable. Notice the lack of type specification.\\nengine.addVariable('y', 0, 100);\\n\\n// Set the coefficient of 'y' in the objective.\\n// The objective is now 5 * y\\nengine.setObjectiveCoefficient('y', 5);\\n\\n// We want to minimize\\nengine.setMinimization();\\n```\\n@return a linear optimization engine*/setMinimization():LinearOptimizationService.LinearOptimizationEngine;\\n/**Sets the coefficient of a variable in the linear objective function.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add a real (continuous) variable. Notice the lack of type specification.\\nengine.addVariable('y', 0, 100);\\n\\n// Set the coefficient of 'y' in the objective.\\n// The objective is now 5 * y\\nengine.setObjectiveCoefficient('y', 5);\\n```\\n@param variableName name of variable for which the coefficient is being set\\n@param coefficient coefficient of the variable in the objective function\\n@return a linear optimization engine*/setObjectiveCoefficient(variableName:string,coefficient:number):LinearOptimizationService.LinearOptimizationEngine;\\n/**Solves the current linear program with the default deadline of 30 seconds. Returns the solution found.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add variables, constraints and define the objective with addVariable(), addConstraint(), etc\\nengine.addVariable('x', 0, 10);\\n\\n// ...\\n\\n// Solve the linear program\\nvar solution \\u003d engine.solve();\\nif (!solution.isValid()) {\\n  throw 'No solution ' + solution.getStatus();\\n}\\nLogger.log('Value of x: ' + solution.getVariableValue('x'));\\n```\\n@return solution of the optimization*/solve():LinearOptimizationService.LinearOptimizationSolution;\\n/**Solves the current linear program. Returns the solution found. and if it is an optimal\\nsolution.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n\\n// Add variables, constraints and define the objective with addVariable(), addConstraint(), etc\\nengine.addVariable('x', 0, 10);\\n\\n// ...\\n\\n// Solve the linear program\\nvar solution \\u003d engine.solve(300);\\nif (!solution.isValid()) {\\n  throw 'No solution ' + solution.getStatus();\\n}\\nLogger.log('Value of x: ' + solution.getVariableValue('x'));\\n```\\n@param seconds deadline for solving the problem, in seconds; the maximum deadline is 300 seconds\\n@return solution of the optimization*/solve(seconds:number):LinearOptimizationService.LinearOptimizationSolution;}interface LinearOptimizationConstraint{\\n/**Sets the coefficient of a variable in the constraint. By default, variables have a coefficient\\nof 0.\\n\\n```\\nvar engine \\u003d LinearOptimizationService.createEngine();\\n// Create a linear constraint with the bounds 0 and 10\\nvar constraint \\u003d engine.addConstraint(0, 10);\\n// Create a variable so we can add it to the constraint\\nengine.addVariable('x', 0, 5);\\n// Set the coefficient of the variable in the constraint. The constraint is now:\\n// 0 \\u003c\\u003d 2 * x \\u003c\\u003d 5\\nconstraint.setCoefficient('x', 2);\\n```\\n@param variableName the name of variable for which the coefficient is being set\\n@param coefficient coefficient being set\\n@return this linear optimization constraint*/setCoefficient(variableName:string,coefficient:number):LinearOptimizationService.LinearOptimizationConstraint;}}const LinearOptimizationService:LinearOptimizationService;\"],[\"lock-service.d.ts\",\"interface LockService{\\n/**Gets a lock that prevents any user of the current document from concurrently running a section\\nof code. A code section guarded by a document lock can be executed simultaneously by script\\ninstances running in the context of different documents, but by no more than one execution for\\nany given document. Note that the lock is not actually acquired until [`Lock.tryLock(timeoutInMillis)`](https://developers.google.com/apps-script/reference/lock/lock.html#tryLock(Integer))\\nor [`Lock.waitLock(timeoutInMillis)`](https://developers.google.com/apps-script/reference/lock/lock.html#waitLock(Integer)) is called. If this method is called outside of the context of a\\ncontaining document (such as from a standalone script or webapp), `null` is returned.\\n@return a lock scoped to the script and current document, or `null` if called from a\\n    standalone script or webapp*/getDocumentLock():LockService.Lock;\\n/**Gets a lock that prevents any user from concurrently running a section of code. A code section\\nguarded by a script lock cannot be executed simultaneously regardless of the identity of the\\nuser. Note that the lock is not actually acquired until [`Lock.tryLock(timeoutInMillis)`](https://developers.google.com/apps-script/reference/lock/lock.html#tryLock(Integer)) or [`Lock.waitLock(timeoutInMillis)`](https://developers.google.com/apps-script/reference/lock/lock.html#waitLock(Integer)) is called.\\n@return a lock scoped to the script*/getScriptLock():LockService.Lock;\\n/**Gets a lock that prevents the current user from concurrently running a section of code. A code\\nsection guarded by a user lock can be executed simultaneously by different users, but by no\\nmore than one execution for any given user. The lock is \\\"private\\\" to the user. Note that the\\nlock is not actually acquired until [`Lock.tryLock(timeoutInMillis)`](https://developers.google.com/apps-script/reference/lock/lock.html#tryLock(Integer)) or [`Lock.waitLock(timeoutInMillis)`](https://developers.google.com/apps-script/reference/lock/lock.html#waitLock(Integer)) is\\ncalled.\\n@return a lock scoped to the script and current user*/getUserLock():LockService.Lock;}module LockService{interface Lock{\\n/**Returns true if the lock was acquired. This method will return false if [`tryLock(timeoutInMillis)`](https://developers.google.com/apps-script/reference/lock/lock.html#tryLock(Integer)) or\\n[`waitLock(timeoutInMillis)`](https://developers.google.com/apps-script/reference/lock/lock.html#waitLock(Integer)) were never called, timed out before the lock could be retrieved, or if [`releaseLock()`](https://developers.google.com/apps-script/reference/lock/lock.html#releaseLock()) was called.\\n\\n```\\nvar lock \\u003d LockService.getScriptLock();\\nlock.tryLock(10000);\\nif (!lock.hasLock()) {\\n  Logger.log('Could not obtain lock after 10 seconds.');\\n}\\n```\\n@return true if the lock was acquired, false otherwise*/hasLock():boolean;\\n/**Releases the lock, allowing other processes waiting on the lock to continue. The lock is\\nautomatically released when the script terminates, but for efficiency it is best to release it\\nas soon as you no longer need exclusive access to a section of code. This method has no effect\\nif the lock has not been acquired.\\n\\nNote that if you are working with a spreadsheet, you should call SpreadsheetApp.flush()\\nprior to releasing the lock, to commit all pending changes to the spreadsheet while you still\\nhave exclusive access to it.\\n\\n```\\nvar lock \\u003d LockService.getScriptLock();\\nlock.waitLock(10000);\\n// Do some work on a shared resource.\\nlock.releaseLock();\\n```*/releaseLock():void;\\n/**Attempts to acquire the lock, timing out after the provided number of milliseconds. This method\\nhas no effect if the lock has already been acquired.\\n\\n```\\nvar lock \\u003d LockService.getScriptLock();\\nvar success \\u003d lock.tryLock(10000);\\nif (!success) {\\n  Logger.log('Could not obtain lock after 10 seconds.');\\n}\\n```\\n@param timeoutInMillis how long to wait to acquire the lock, in milliseconds\\n@return true if the lock was acquired, false otherwise*/tryLock(timeoutInMillis:Integer):boolean;\\n/**Attempts to acquire the lock, timing out with an exception after the provided number of\\nmilliseconds. This method is the same as [`tryLock(timeoutInMillis)`](https://developers.google.com/apps-script/reference/lock/lock.html#tryLock(Integer)) except that it throws an exception\\nwhen the lock could not be acquired instead of returning false.\\n\\n```\\nvar lock \\u003d LockService.getScriptLock();\\ntry {\\n  lock.waitLock(10000);\\n} catch (e) {\\n  Logger.log('Could not obtain lock after 10 seconds.');\\n}\\n```\\n@param timeoutInMillis how long to wait to acquire the lock, in milliseconds*/waitLock(timeoutInMillis:Integer):void;}}const LockService:LockService;\"],[\"logger.d.ts\",\"interface Logger{\\n/**Clears the log.*/clear():void;\\n/**Returns a complete list of messages in the current log. This method can be used to save or\\nemail the entire log output generated during script execution.\\n\\n```\\n// Generate a log, then email it to the person who ran the script.\\nvar files \\u003d DriveApp.getFiles();\\nwhile (files.hasNext()) {\\n  Logger.log(files.next().getName());\\n}\\nvar recipient \\u003d Session.getActiveUser().getEmail();\\nvar subject \\u003d 'A list of files in your Google Drive';\\nvar body \\u003d Logger.getLog();\\nMailApp.sendEmail(recipient, subject, body);\\n```\\n@return the log from the logging console*/getLog():string;\\n/**Writes the string to the logging console. To view the logged output, select __View \\u003e Show\\nlogs__. This can be very useful for debugging scripts.\\n@param data the message to log\\n@return the Logger, for chaining.*/log(data:Object):Logger;\\n/**Writes a formatted string to the logging console, using the format and values provided. The\\nstring can include multiple `%s` placeholders, which are replaced with corresponding\\nvalues from the list of arguments, converted to strings.\\n\\n```\\n// Log the number of Google Groups you belong to.\\nvar groups \\u003d GroupsApp.getGroups();\\nLogger.log('You are a member of %s Google Groups.', groups.length);\\n```\\n@param format a format string that contains as many instances of `%s` as the number of\\n    `values` arguments\\n@param values a variable number of values to insert into the format string\\n@return the Logger, for chaining*/log(format:string,...values:Object[]):Logger;}const Logger:Logger;\"],[\"mail-app.d.ts\",\"interface MailApp{\\n/**Returns the number of recipients you can send emails to for the rest of the day. The returned\\nvalue is valid for the current execution and might vary between executions.\\n\\nQuotas are based on the number of email recipients. For specific quota information, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas).\\n\\n```\\nvar emailQuotaRemaining \\u003d MailApp.getRemainingDailyQuota();\\nLogger.log(\\\"Remaining email quota: \\\" + emailQuotaRemaining);\\n```\\n@return The number of emails remaining that the script can send.*/getRemainingDailyQuota():Integer;\\n/**Sends an email message. This variation of the method is much more flexible, allowing for many\\nmore options.\\n\\n```\\n// This code fetches the Google and YouTube logos, inlines them in an email\\n// and sends the email\\nfunction inlineImage() {\\n  var googleLogoUrl \\u003d \\\"https://www.gstatic.com/images/branding/googlelogo/1x/googlelogo_color_74x24dp.png\\\";\\n  var youtubeLogoUrl \\u003d\\n        \\\"https://developers.google.com/youtube/images/YouTube_logo_standard_white.png\\\";\\n  var googleLogoBlob \\u003d UrlFetchApp\\n                         .fetch(googleLogoUrl)\\n                         .getBlob()\\n                         .setName(\\\"googleLogoBlob\\\");\\n  var youtubeLogoBlob \\u003d UrlFetchApp\\n                          .fetch(youtubeLogoUrl)\\n                          .getBlob()\\n                          .setName(\\\"youtubeLogoBlob\\\");\\n  MailApp.sendEmail({\\n    to: \\\"recipient@example.com\\\",\\n    subject: \\\"Logos\\\",\\n    htmlBody: \\\"inline Google Logo\\u003cimg src\\u003d'cid:googleLogo'\\u003e images! \\u003cbr\\u003e\\\" +\\n              \\\"inline YouTube Logo \\u003cimg src\\u003d'cid:youtubeLogo'\\u003e\\\",\\n    inlineImages:\\n      {\\n        googleLogo: googleLogoBlob,\\n        youtubeLogo: youtubeLogoBlob\\n      }\\n  });\\n}\\n```\\n@param message a JavaScript object representing an email message*/sendEmail(message:Object):void;\\n/**Sends an email message.\\n\\n```\\nMailApp.sendEmail(\\\"recipient@example.com\\\",\\n                  \\\"TPS reports\\\",\\n                  \\\"Where are the TPS reports?\\\");\\n```\\n@param recipient the addresses of the recipients, separated by commas\\n@param subject the subject line\\n@param body the body of the email*/sendEmail(recipient:string,subject:string,body:string):void;\\n/**Sends an email message with optional arguments.\\n\\n```\\n// Send an email with two attachments: a file from Google Drive (as a PDF) and an HTML file.\\nvar file \\u003d DriveApp.getFileById('1234567890abcdefghijklmnopqrstuvwxyz');\\nvar blob \\u003d Utilities.newBlob('Insert any HTML content here', 'text/html', 'my_document.html');\\nMailApp.sendEmail('mike@example.com', 'Attachment example', 'Two files are attached.', {\\n    name: 'Automatic Emailer Script',\\n    attachments: [file.getAs(MimeType.PDF), blob]\\n});\\n```\\n@param recipient the addresses of the recipients, separated by commas\\n@param subject the subject line\\n@param body the body of the email\\n@param options a JavaScript object that specifies advanced parameters, as listed below*/sendEmail(recipient:string,subject:string,body:string,options:Object):void;\\n/**Sends an email message. This method allows a user to easily specify a Reply-To address for the\\nsent message that can differ from the sender.\\n\\n```\\nMailApp.sendEmail(\\\"recipient@example.com\\\",\\n                  \\\"replies@example.com\\\",\\n                  \\\"TPS report status\\\",\\n                  \\\"What is the status of those TPS reports?\\\");\\n```\\n@param to the addresses of the recipients, separated by commas\\n@param replyTo the reply-to address\\n@param subject the subject line\\n@param body the body of the email in plain text*/sendEmail(to:string,replyTo:string,subject:string,body:string):void;}const MailApp:MailApp;\"],[\"maps.d.ts\",\"interface Maps{DirectionFinder:Maps.DirectionFinderEnums;StaticMap:Maps.StaticMapEnums;\\n/**Decodes an encoded polyline string back into an array of points.\\n\\n```\\n// Decodes a string representation of the latitudes and longitudes of Minneapolis and Milwaukee\\n// respectively.\\nvar polyline \\u003d 'qvkpG`qhxPbgyI_zq_@';\\nvar points \\u003d Maps.decodePolyline(polyline);\\nfor (var i \\u003d 0; i \\u003c points.length; i+\\u003d 2) {\\n  Logger.log('%s, %s', points[i], points[i+1]);\\n}\\n```\\n@param polyline An encoded polyline to decode.\\n@return An array of latitude longitude pairs (lat0, long0, lat1, long1, ...).*/decodePolyline(polyline:string):number[];\\n/**Encodes an array of points into a string.\\n\\n```\\n// The latitudes and longitudes of New York and Boston respectively.\\nvar points \\u003d [40.77, -73.97, 42.34, -71.04];\\nvar polyline \\u003d Maps.encodePolyline(points);\\n```\\n@param points An array of latitude/longitude pairs to encode.\\n@return An encoded string representing those points.*/encodePolyline(points:number[]):string;\\n/**Creates a new DirectionFinder object.\\n@return A new direction finder object.*/newDirectionFinder():Maps.DirectionFinder;\\n/**Creates an ElevationSampler object.\\n@return A new elevation sampler object.*/newElevationSampler():Maps.ElevationSampler;\\n/**Creates a new Geocoder object.\\n@return A new geocoder object.*/newGeocoder():Maps.Geocoder;\\n/**Creates a new StaticMap object.\\n@return A new static map object.*/newStaticMap():Maps.StaticMap;\\n/**Enables the use of an externally established [Google Maps APIs Premium Plan](https://developers.google.com/maps/premium/) account,\\nto leverage additional [quota\\nallowances](https://developers.google.com/maps/premium/usage-limits). Your client ID and signing key can be obtained from the Google Enterprise\\nSupport Portal. Set these values to `null` to go back to using the default quota\\nallowances.\\n\\n__Note__: This method doesn't work with API keys. Additionally,\\nplease note that Premium Plan is no longer available for new customers. If you don't already\\nhave a Premium Plan license, please don't call [`setAuthentication(clientId, signingKey)`](https://developers.google.com/apps-script/reference/maps/maps.html#setAuthentication(String,String)). You are able to use\\nthe [`Maps`](https://developers.google.com/apps-script/reference/maps/maps.html) methods with the default quota allowances.\\n\\n```\\nMaps.setAuthentication('gme-123456789', 'VhSEZvOXVSdnlxTnpJcUE');\\n```\\n@param clientId A client identifier.\\n@param signingKey A private signing key.*/setAuthentication(clientId:string,signingKey:string):void;}module Maps{interface Type{}interface _Type{\\n/**A hybrid of the satellite and roadmap maps, showing a transparent layer of major streets and\\nplace names on the satellite map.*/HYBRID:Type;\\n/**A standard roadmap, as is normally shown on the Google Maps website.*/ROADMAP:Type;\\n/**A satellite map.*/SATELLITE:Type;\\n/**A physical relief map, showing terrain and vegetation.*/TERRAIN:Type;}interface StaticMapEnums{Color:Maps._Color;Format:Maps._Format;MarkerSize:Maps._MarkerSize;Type:Maps._Type;}interface StaticMap{\\n/**Adds a new address to the current path definition.\\n\\n```\\n// Creates a map and adds a path from New York to Boston.\\nvar map \\u003d Maps.newStaticMap()\\n    .beginPath()\\n    .addAddress('New York, NY')\\n    .addAddress('Boston, MA')\\n    .endPath();\\n```\\n@param address An address to add.\\n@return This map instance, for chaining.*/addAddress(address:string):Maps.StaticMap;\\n/**Adds a marker to the map using a point (lat/lng).\\n\\n```\\n// Creates a map and adds a marker at the specified coordinates.\\nvar map \\u003d Maps.newStaticMap().addMarker(40.741799, -74.004207);\\n```\\n@param latitude The latitude of the new marker.\\n@param longitude The longitude of the new marker.\\n@return This map instance, for chaining.*/addMarker(latitude:number,longitude:number):Maps.StaticMap;\\n/**Adds a marker to the map using an address.\\n\\n```\\n// Creates a map and adds a marker at the specified address.\\nvar map \\u003d Maps.newStaticMap().addMarker('76 9th Ave, New York NY');\\n```\\n@param address The address at wich to place the new marker.\\n@return This map instance, for chaining.*/addMarker(address:string):Maps.StaticMap;\\n/**Adds a path to the map using an array of points.\\n\\n```\\n// Creates a map and adds a path from New York to Boston.\\nvar map \\u003d Maps.newStaticMap()\\n    .addPath([40.714353, -74.005973, 42.358431, -71.059773]);\\n```\\n@param points An array of latitude/longitude pairs that define the path.\\n@return This map instance, for chaining.*/addPath(points:number[]):Maps.StaticMap;\\n/**Adds a path to the map using an encoded polyline.\\n\\n```\\n// Creates a map and adds a path from New York to Boston.\\nvar polyline \\u003d Maps.encodePolyline([40.714353, -74.005973, 42.358431, -71.059773]);\\nvar map \\u003d Maps.newStaticMap().addPath(polyline);\\n```\\n@param polyline An encoded polyline.\\n@return This map instance, for chaining.*/addPath(polyline:string):Maps.StaticMap;\\n/**Adds a new point (lat/lng) to the current path definition.\\n\\n```\\n// Creates a map and adds a path from New York to Boston.\\nvar map \\u003d Maps.newStaticMap()\\n    .beginPath()\\n    .addPoint(40.714353, -74.005973)\\n    .addPoint(42.358431, -71.059773)\\n    .endPath();\\n```\\n@param latitude The latitude of the point.\\n@param longitude The longitude of the point.\\n@return This map instance, for chaining.*/addPoint(latitude:number,longitude:number):Maps.StaticMap;\\n/**Adds a point (lat/lng) location that must be visible in the map.\\n\\n```\\n// Creates a map where New York and Boston are visible.\\nvar map \\u003d Maps.newStaticMap()\\n    .addVisible(40.714353, -74.005973);\\n    .addVisible(42.358431, -71.059773)\\n```\\n@param latitude The latitude of the point.\\n@param longitude The longitude of the point.\\n@return This map instance, for chaining.*/addVisible(latitude:number,longitude:number):Maps.StaticMap;\\n/**Adds an address location that must be visible in the map.\\n\\n```\\n// Creates a map where New York and Boston are visible.\\nvar map \\u003d Maps.newStaticMap()\\n    .addVisible('New York, NY')\\n    .addVisible('Boston, MA');\\n```\\n@param address An address that must be visible in the map.\\n@return This map instance, for chaining.*/addVisible(address:string):Maps.StaticMap;\\n/**Starts a new path definition. Calls to `addAddress()` and `addPoint()` define each\\nnew vertex in the path. The path is completed when `endPath()` is called.\\n\\n```\\n// Creates a map and adds a path from New York to Boston.\\nvar map \\u003d Maps.newStaticMap()\\n    .beginPath()\\n    .addAddress('New York, NY')\\n    .addAddress('Boston, MA')\\n    .endPath();\\n```\\n@return This map instance, for chaining.*/beginPath():Maps.StaticMap;\\n/**Clears the current set of markers.\\n\\n```\\nvar map \\u003d Maps.newStaticMap();\\n// ...\\n// Do something interesting here ...\\n// ...\\n// Remove all markers on the map.\\nmap.clearMarkers();\\n```\\n@return This map instance, for chaining.*/clearMarkers():Maps.StaticMap;\\n/**Clear the current set of paths.\\n\\n```\\nvar map \\u003d Maps.newStaticMap();\\n// ...\\n// Do something interesting here ...\\n// ...\\n// Remove all paths on the map.\\nmap.clearPaths();\\n```\\n@return This map instance, for chaining.*/clearPaths():Maps.StaticMap;\\n/**Clears the current set of visible locations.\\n\\n```\\nvar map \\u003d Maps.newStaticMap();\\n// ...\\n// Do something interesting here ...\\n// ...\\n// Remove all visible locations created with addVisible().\\nmap.clearVisibles();\\n```\\n@return This map instance, for chaining.*/clearVisibles():Maps.StaticMap;\\n/**Completes a path definition started with beginPath().\\n\\n```\\n// Creates a map and adds a path from New York to Boston.\\nvar map \\u003d Maps.newStaticMap()\\n    .beginPath()\\n    .addAddress('New York, NY')\\n    .addAddress('Boston, MA')\\n    .endPath();\\n```\\n@return This map instance, for chaining.*/endPath():Maps.StaticMap;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Gets the image data as a [`Blob`](https://developers.google.com/apps-script/reference/maps/../base/blob.html).\\n\\n```\\n// Creates a map centered on Times Square and saves it to Google Drive.\\nvar map \\u003d Maps.newStaticMap().setCenter('Times Square, New York, NY');\\nDocsList.createFile(map);  // You can call map.getBlob() explicitly or use it\\n                           // implicitly by passing the map where a blob is expected.\\n```\\n@return An image of the map in the selected image format.*/getBlob():Blob;\\n/**Gets the raw image data as a byte array.\\n\\nIn general, prefer using [`getBlob()`](https://developers.google.com/apps-script/reference/maps/static-map.html#getBlob()) which allows for simpler interactions with other\\nservices.\\n\\n```\\n// Creates a map centered on Times Square and saves it to Google Drive.\\nvar map \\u003d Maps.newStaticMap().setCenter('Times Square, New York, NY');\\nDocsList.createFile(Utilities.newBlob(map.getMapImage(), 'image/png', 'map.png'));\\n```\\n@return An image of the map in the selected image format.*/getMapImage():Byte[];\\n/**Gets the URL of the map image.\\n\\n```\\n// Creates a map centered on Times Square and gets the URL.\\nvar map \\u003d Maps.newStaticMap().setCenter('Times Square, New York, NY');\\n// All static map URLs require an API key.\\nLogger.log(map.getMapUrl() + \\\"\\u0026key\\u003dYOUR_API_KEY\\\");\\n```\\n@return URL The map image URL.*/getMapUrl():string;\\n/**Sets the center of the map using a point (lat/lng).\\n\\n```\\n// Creates a map centered on Times Square, using its coordinates.\\nvar map \\u003d Maps.newStaticMap().setCenter(40.759011, -73.984472);\\n```\\n@param latitude The latitude of the center.\\n@param longitude The longitude of the center.\\n@return This map instance, for chaining.*/setCenter(latitude:number,longitude:number):Maps.StaticMap;\\n/**Sets the center of the map using an address.\\n\\n```\\n// Creates a map centered on Times Square, using its address.\\nvar map \\u003d Maps.newStaticMap().setCenter('Times Square, New York, NY');\\n```\\n@param address The address of the center.\\n@return This map instance, for chaining.*/setCenter(address:string):Maps.StaticMap;\\n/**Sets the custom marker image to use when creating new markers. Markers that have already been\\nadded are not affected.\\n\\n```\\n// Creates a map with markers set to be medium sized, black, and labeled with the number \\\"1\\\".\\nvar map \\u003d Maps.newStaticMap()\\n    .setCustomMarkerStyle('http://www.example.com/marker.png', false);\\n```\\n@param imageUrl Specifies a URL to use as the marker's custom icon. Images may be in PNG, JPEG\\n    or GIF formats, though PNG is recommended.\\n@param useShadow Indicates that the marker should have a shadow generated, based on the image's\\n    visible region and its opacity/transparency.\\n@return This map instance, for chaining.*/setCustomMarkerStyle(imageUrl:string,useShadow:boolean):Maps.StaticMap;\\n/**Sets the format of the map image.\\n\\n```\\n// Creates a map with the image format set to PNG.\\nvar map \\u003d Maps.newStaticMap().setFormat(Maps.StaticMap.Format.PNG);\\n```\\n@param format A constant value from [`Format`](https://developers.google.com/apps-script/reference/maps/format.html).\\n@return This map instance, for chaining.*/setFormat(format:string):Maps.StaticMap;\\n/**Sets the language to be used for text on the map (where avaialbe).\\n\\n```\\n// Creates a map with the language set to French.\\nvar map \\u003d Maps.newStaticMap().setLanguage('fr');\\n```\\n@param language A BCP-47 language identifier.\\n@return This map instance, for chaining.*/setLanguage(language:string):Maps.StaticMap;\\n/**Sets the type of map to be shown.\\n\\n```\\n// Creates a satellite map.\\nvar map \\u003d Maps.newStaticMap().setMapType(Maps.StaticMap.Type.SATELLITE);\\n```\\n@param mapType A constant value from [`Type`](https://developers.google.com/apps-script/reference/maps/type.html).\\n@return This map instance, for chaining.*/setMapType(mapType:string):Maps.StaticMap;\\n/**Sets the marker style to use when creating new markers. Markers that have already been added\\nare not affected.\\n\\n```\\n// Creates a map with markers set to be medium sized, black, and labeled with the number \\\"1\\\".\\nvar map \\u003d Maps.newStaticMap()\\n    .setMarkerStyle(Maps.StaticMap.MarkerSize.MID, Maps.StaticMap.Color.BLACK , '1');\\n```\\n@param size A constant value from [`MarkerSize`](https://developers.google.com/apps-script/reference/maps/marker-size.html).\\n@param color A string in the format \\\"0xrrggbb\\\" or a constant value from [`Color`](https://developers.google.com/apps-script/reference/maps/color.html).\\n@param label A string containing a single character A-Z or 0-9.\\n@return This map instance, for chaining.*/setMarkerStyle(size:string,color:string,label:string):Maps.StaticMap;\\n/**Sets whether or not to use specialized tile sets for mobile devices.\\n\\n```\\n// Creates a map that uses mobile-friendly tiles.\\nvar map \\u003d Maps.newStaticMap().setMobile(true);\\n```\\n@param useMobileTiles Whether or not to use mobile tiles.\\n@return This map instance, for chaining.*/setMobile(useMobileTiles:boolean):Maps.StaticMap;\\n/**Sets the path style to use when creating new paths. Paths that have already been added are not\\naffected.\\n\\n```\\n// Creates a map with paths set to be 1 pixel wide with a black line and a white fill.\\nvar map \\u003d Maps.newStaticMap()\\n    .setPathStyle(1, Maps.StaticMap.Color.BLACK , 'red');\\n```\\n@param weight The width of lines in pixels.\\n@param color The line color, as a string in the format \\\"0xrrggbb\\\" or a constant value from\\n    [`Color`](https://developers.google.com/apps-script/reference/maps/color.html).\\n@param fillColor The fill color, a string in the format \\\"0xrrggbb\\\" or a constant value from\\n    [`Color`](https://developers.google.com/apps-script/reference/maps/color.html).\\n@return This map instance, for chaining.*/setPathStyle(weight:Integer,color:string,fillColor:string):Maps.StaticMap;\\n/**Sets the width and height of the map image in pixels.\\n\\n```\\n// Creates a map 400px wide by 300px high.\\nvar map \\u003d Maps.newStaticMap().setSize(400, 300);\\n```\\n@param width The width of the image in pixels.\\n@param height The height of the image in pixels.\\n@return This map instance, for chaining.*/setSize(width:Integer,height:Integer):Maps.StaticMap;\\n/**Sets the zoom factor, or magnification level, used for the map.\\n\\n```\\n// Creates a map with a zoom factor of 10.\\nvar map \\u003d Maps.newStaticMap().setZoom(10);\\n```\\n@param zoom A value from zero to 21, inclusive.\\n@return This map instance, for chaining.*/setZoom(zoom:Integer):Maps.StaticMap;}interface Mode{}interface _Mode{\\n/**Bicycling directions via bicycle paths and preferred streets (where available).*/BICYCLING:Mode;\\n/**Driving directions via roads.*/DRIVING:Mode;\\n/**Transit directions via public transit routes (where available). This mode requires that you set\\neither the departure or arrival time.\\n\\n```\\n// Log all available data for a public-transit trip.\\nvar directions \\u003d Maps.newDirectionFinder()\\n    .setOrigin('The Cloisters, New York, NY')\\n    .setDestination('JFK airport, New York, NY')\\n    .setMode(Maps.DirectionFinder.Mode.TRANSIT)\\n    .setDepart(new Date())\\n    .getDirections();\\nvar route \\u003d directions.routes[0];\\nLogger.log(route);\\n```*/TRANSIT:Mode;\\n/**Walking directions via pedestrian paths and sidewalks (where available).*/WALKING:Mode;}interface MarkerSize{}interface _MarkerSize{\\n/**Medium sized markers (largest available).*/MID:MarkerSize;\\n/**Small sized markers. Labels will not be visible on markers of this size.*/SMALL:MarkerSize;\\n/**Tiny sized markets (smallest available). Labels will not be visible on markers of this size.*/TINY:MarkerSize;}interface Geocoder{\\n/**Gets the approximate geographic points for a given address.\\n\\n```\\n// Gets the geographic coordinates for Times Square.\\nvar response \\u003d Maps.newGeocoder().geocode('Times Square, New York, NY');\\nfor (var i \\u003d 0; i \\u003c response.results.length; i++) {\\n  var result \\u003d response.results[i];\\n  Logger.log('%s: %s, %s', result.formatted_address, result.geometry.location.lat,\\n      result.geometry.location.lng);\\n}\\n```\\n@param address an address\\n@return a JSON Object containing the geocoding data, as described [here](/maps/documentation/geocoding/#JSON)*/geocode(address:string):Object;\\n/**Gets the approximate addresses for a given geographic point.\\n\\n```\\n// Gets the address of a point in Times Square.\\nvar response \\u003d Maps.newGeocoder().reverseGeocode(40.758577, -73.984464);\\nfor (var i \\u003d 0; i \\u003c response.results.length; i++) {\\n  var result \\u003d response.results[i];\\n  Logger.log('%s: %s, %s', result.formatted_address, result.geometry.location.lat,\\n      result.geometry.location.lng);\\n}\\n```\\n@param latitude the latitude of the point\\n@param longitude the longitude of the point\\n@return a JSON Object containing the reverse geocoding data, as described [here](/maps/documentation/geocoding/#ReverseGeocoding)*/reverseGeocode(latitude:number,longitude:number):Object;\\n/**Sets the bounds of an area that should be given extra preference in the results.\\n\\n```\\n// Creates a Geocoder that prefers points in the area of Manhattan.\\nvar geocoder \\u003d Maps.newGeocoder()\\n    .setBounds(40.699642, -74.021072, 40.877569, -73.908548);\\n```\\n@param swLatitude the latitude of the south west corner of the bounds\\n@param swLongitude the longitude of the south west corner of the bounds\\n@param neLatitude the latitude of the north east corner of the bounds\\n@param neLongitude the longitude of the north east corner of the bounds\\n@return the Geocoder object to facilitate chaining of calls*/setBounds(swLatitude:number,swLongitude:number,neLatitude:number,neLongitude:number):Maps.Geocoder;\\n/**Sets the language to be used in the results.\\n\\n```\\n// Creates a Geocoder with the language set to French.\\nvar geocoder \\u003d Maps.newGeocoder().setLanguage('fr');\\n```\\n@param language a BCP-47 language identifier\\n@return the Geocoder object to facilitate chaining of calls.*/setLanguage(language:string):Maps.Geocoder;\\n/**Sets a region to use when interpreting location names. The supported region codes correspond to\\nthe ccTLDs supported by Google Maps. For example, the region code \\\"uk\\\" corresponds to\\n\\\"maps.google.co.uk\\\".\\n\\n```\\n// Creates a Geocoder with the region set to France.\\nvar geocoder \\u003d Maps.newGeocoder().setRegion('fr');\\n```\\n@param region the region code to use\\n@return the Geocoder object to facilitate chaining of calls*/setRegion(region:string):Maps.Geocoder;}interface Format{}interface _Format{\\n/**GIF format.*/GIF:Format;\\n/**JPEG format.*/JPG:Format;\\n/**Non-progressive JPEG format.*/JPG_BASELINE:Format;\\n/**8-bit PNG format.*/PNG:Format;\\n/**32-bit PNG format.*/PNG32:Format;\\n/**8-bit PNG format.*/PNG8:Format;}interface ElevationSampler{\\n/**Returns elevation data for a single point (lat/lng).\\n\\n```\\n// Gets the elevation of Times Square using a point.\\nvar data \\u003d Maps.newElevationSampler().sampleLocation(40.759011, -73.984472);\\nLogger.log(data.results[0].elevation);\\n```\\n@param latitude the latitude of the point to sample\\n@param longitude the longitude of the point to sample\\n@return a JSON Object containing the elevation data, as described [here](/maps/documentation/elevation/#ElevationResponses)*/sampleLocation(latitude:number,longitude:number):Object;\\n/**Returns elevation data for a series of points (lat/lng).\\n\\n```\\n// Gets the elevation of Times Square and Central Park using points.\\nvar data \\u003d Maps.newElevationSampler().sampleLocations([\\n    // Times Square\\n    40.759011, -73.984472,\\n    // Central Park\\n    40.777052, -73.975464\\n]);\\nLogger.log('Times Square: ' + data.results[0].elevation);\\nLogger.log('Central Park: ' + data.results[1].elevation);\\n```\\n@param points an array of latitude/longitude pairs\\n@return a JSON Object containing the elevation data, as described [here](/maps/documentation/elevation/#ElevationResponses)*/sampleLocations(points:number[]):Object;\\n/**Returns elevation data for the points in an encoded polyline.\\n\\n```\\n// Gets the elevation of Times Square and Central Park using a polyline.\\nvar data \\u003d Maps.newElevationSampler().sampleLocations('yvwwF|aqbMwoBiw@');\\nLogger.log('Times Square: ' + data.results[0].elevation);\\nLogger.log('Central Park: ' + data.results[1].elevation);\\n```\\n@param encodedPolyline an encoded polyline of points to sample\\n@return a JSON Object containing the elevation data, as described [here](/maps/documentation/elevation/#ElevationResponses)*/sampleLocations(encodedPolyline:string):Object;\\n/**Returns elevation data for a number of samples along a line, defined using a series of points.\\n\\n```\\n// Gets the elevation of five points between Times Square and Central Park.\\nvar data \\u003d Maps.newElevationSampler().samplePath([\\n    // Times Square\\n    40.759011, -73.984472,\\n    // Central Park\\n    40.777052, -73.975464\\n], 5);\\nfor (var i \\u003d 0; i \\u003c data.results.length; i++) {\\n  Logger.log(data.results[i].elevation);\\n}\\n```\\n@param points an array of latitude/longitude pairs defining a path to sample over\\n@param numSamples the number of points to sample along the path of points\\n@return a JSON Object containing the elevation data, as described [here](/maps/documentation/elevation/#ElevationResponses)*/samplePath(points:number[],numSamples:Integer):Object;\\n/**Returns elevation data for a number of samples along a line, defined using an encoded polyline.\\n\\n```\\n// Gets the elevation of five points between Times Square and Central Park.\\nvar data \\u003d Maps.newElevationSampler().samplePath('yvwwF|aqbMwoBiw@', 5);\\nfor (var i \\u003d 0; i \\u003c data.results.length; i++) {\\n  Logger.log(data.results[i].elevation);\\n}\\n```\\n@param encodedPolyline an encoded polyline of points defining a path to sample over\\n@param numSamples the number of points to sample along the path of points\\n@return a JSON Object containing the elevation data, as described [here](/maps/documentation/elevation/#ElevationResponses)*/samplePath(encodedPolyline:string,numSamples:Integer):Object;}interface DirectionFinderEnums{Avoid:Maps._Avoid;Mode:Maps._Mode;}interface DirectionFinder{\\n/**Adds a waypoint that the route must pass through, using a point (lat/lng).\\n\\n```\\n// Creates a DirectionFinder with a wapoint at Lincoln Center.\\nvar directionFinder \\u003d Maps.newDirectionFinder().addWaypoint(40.772628, -73.984243);\\n```\\n@param latitude Latitude of the waypoint.\\n@param longitude Longitude of the waypoint.\\n@return The DirectionFinder object to facilitate chaining of calls.*/addWaypoint(latitude:number,longitude:number):Maps.DirectionFinder;\\n/**Adds a waypoint that the route must pass through, using an address.\\n\\n```\\n// Creates a DirectionFinder with a wapoint at Lincoln Center.\\nvar directionFinder \\u003d Maps.newDirectionFinder().addWaypoint('Lincoln Center, New York, NY');\\n```\\n@param address An address.\\n@return The DirectionFinder object to facilitate chaining of calls.*/addWaypoint(address:string):Maps.DirectionFinder;\\n/**Clears the current set of waypoints.\\n\\n```\\nvar directionFinder \\u003d Maps.newDirectionFinder()\\n// ...\\n// Do something interesting here ...\\n// ...\\n// Remove all waypoints added with addWaypoint().\\ndirectionFinder.clearWaypoints();\\n```\\n@return the DirectionFinder object to facilitate chaining of calls*/clearWaypoints():Maps.DirectionFinder;\\n/**Gets the directions using the origin, destination, and other options that were set.\\n\\n```\\n// Logs how long it would take to walk from Times Square to Central Park.\\nvar directions \\u003d Maps.newDirectionFinder()\\n    .setOrigin('Times Square, New York, NY')\\n    .setDestination('Central Park, New York, NY')\\n    .setMode(Maps.DirectionFinder.Mode.WALKING)\\n    .getDirections();\\nLogger.log(directions.routes[0].legs[0].duration.text);\\n```\\n@return a JSON object containing the set of routes for the directions, as described [here](/maps/documentation/directions/#JSON)*/getDirections():Object;\\n/**Sets whether or not alternative routes should be returned, instead of just the highest ranked\\nroute (defaults to false). If true, the resulting object's `routes` array may\\ncontain multiple entries.\\n\\n```\\n// Creates a DirectionFinder with alernative routes enabled.\\nvar directionFinder \\u003d Maps.newDirectionFinder().setAlternatives(true);\\n```\\n@param useAlternatives true to return alternative routes, false otherwise\\n@return the DirectionFinder object to facilitate chaining of calls*/setAlternatives(useAlternatives:boolean):Maps.DirectionFinder;\\n/**Sets the desired time of arrival (when applicable).\\n\\n```\\n// Creates a DirectionFinder with an arrival time of 2 hours from now.\\nvar now \\u003d new Date();\\nvar arrive \\u003d new Date(now.getTime() + (2 * 60 * 60 * 1000));\\nvar directionFinder \\u003d Maps.newDirectionFinder().setArrive(arrive);\\n```\\n@param time the time of arrival\\n@return the DirectionFinder object to facilitate chaining of calls*/setArrive(time:Date):Maps.DirectionFinder;\\n/**Sets whether to avoid certain types of restrictions.\\n\\n```\\n// Creates a DirectionFinder that avoid highways.\\nvar directionFinder \\u003d Maps.newDirectionFinder().setAvoid(Maps.DirectionFinder.Avoid.HIGHWAYS);\\n```\\n@param avoid a constant value from [`Avoid`](https://developers.google.com/apps-script/reference/maps/avoid.html)\\n@return the DirectionFinder object to facilitate chaining of calls*/setAvoid(avoid:string):Maps.DirectionFinder;\\n/**Sets the desired time of departure (when applicable).\\n\\n```\\n// Creates a DirectionFinder with a departure time of 1 hour from now.\\nvar now \\u003d new Date();\\nvar depart \\u003d new Date(now.getTime() + (1 * 60 * 60 * 1000));\\nvar directionFinder \\u003d Maps.newDirectionFinder().setDepart(depart);\\n```\\n@param time the time of departure\\n@return The DirectionFinder object to facilitate chaining of calls.*/setDepart(time:Date):Maps.DirectionFinder;\\n/**Sets the ending location for which to calculate directions to, using a point (lat/lng).\\n\\n```\\n// Creates a DirectionFinder with the destination set to Central Park.\\nvar directionFinder \\u003d Maps.newDirectionFinder().setDestination(40.777052, -73.975464);\\n```\\n@param latitude the latitude of the ending location\\n@param longitude the longitude of the ending location\\n@return the DirectionFinder object to facilitate chaining of calls*/setDestination(latitude:number,longitude:number):Maps.DirectionFinder;\\n/**Sets the ending location for which to calculate directions to, using an address.\\n\\n```\\n// Creates a DirectionFinder with the destination set to Central Park.\\nvar directionFinder \\u003d Maps.newDirectionFinder().setDestination('Central Park, New York, NY');\\n```\\n@param address the ending address\\n@return the DirectionFinder object to facilitate chaining of calls*/setDestination(address:string):Maps.DirectionFinder;\\n/**Sets the language to be used for the directions.\\n\\n```\\n// Creates a DirectionFinder with the language set to French.\\nvar directionFinder \\u003d Maps.newDirectionFinder().setLanguage('fr');\\n```\\n@param language a BCP-47 language identifier\\n@return the DirectionFinder object to facilitate chaining of calls*/setLanguage(language:string):Maps.DirectionFinder;\\n/**Sets the mode of travel (defaults to driving).\\n\\n```\\n// Creates a DirectionFinder with the mode set to walking.\\nvar directionFinder \\u003d Maps.newDirectionFinder().setMode(Maps.DirectionFinder.Mode.WALKING);\\n```\\n@param mode a constant value from [`Mode`](https://developers.google.com/apps-script/reference/maps/mode.html)\\n@return the DirectionFinder object to facilitate chaining of calls*/setMode(mode:string):Maps.DirectionFinder;\\n/**Sets whether or not to optimize the provided route by rearranging the waypoints in a more\\nefficient order (defaults to false).\\n\\n```\\n// Creates a DirectionFinder with wapoint optimization enabled.\\nvar directionFinder \\u003d Maps.newDirectionFinder().setOptimizeWaypoints(true);\\n```\\n@param optimizeOrder true to optimize the order, or false otherwise\\n@return the DirectionFinder object to facilitate chaining of calls*/setOptimizeWaypoints(optimizeOrder:boolean):Maps.DirectionFinder;\\n/**Sets the starting location from which to calculate directions, using a point (lat/lng).\\n\\n```\\n// Creates a DirectionFinder with the origin set to Times Square.\\nvar directionFinder \\u003d Maps.newDirectionFinder().setOrigin(40.759011, -73.984472);\\n```\\n@param latitude the latitude of the starting location\\n@param longitude the longitude of the starting location\\n@return the DirectionFinder object to facilitate chaining of calls*/setOrigin(latitude:number,longitude:number):Maps.DirectionFinder;\\n/**Sets the starting location from which to calculate directions, using an address.\\n\\n```\\n// Creates a DirectionFinder with the origin set to Times Square.\\nvar directionFinder \\u003d Maps.newDirectionFinder().setOrigin('Times Square, New York, NY');\\n```\\n@param address the starting address\\n@return the DirectionFinder instance to facilitate chaining of calls*/setOrigin(address:string):Maps.DirectionFinder;\\n/**Sets a region to use when interpreting location names. The supported region codes correspond to\\nthe ccTLDs supported by Google Maps. For example, the region code \\\"uk\\\" corresponds to\\n\\\"maps.google.co.uk\\\".\\n\\n```\\n// Creates a DirectionFinder with the region set to France.\\nvar directionFinder \\u003d Maps.newDirectionFinder().setRegion('fr');\\n```\\n@param region the region code to use\\n@return the DirectionFinder object to facilitate chaining of calls*/setRegion(region:string):Maps.DirectionFinder;}interface Color{}interface _Color{BLACK:Color;BLUE:Color;BROWN:Color;GRAY:Color;GREEN:Color;ORANGE:Color;PURPLE:Color;RED:Color;WHITE:Color;YELLOW:Color;}interface Avoid{}interface _Avoid{\\n/**Avoid highways.*/HIGHWAYS:Avoid;\\n/**Avoid tolls.*/TOLLS:Avoid;}}const Maps:Maps;\"],[\"mime-type.d.ts\",\"interface MimeType{}interface _MimeType{\\n/**Representation of MIME type for a BMP image file (typically .bmp).*/BMP:MimeType;\\n/**Representation of MIME type for a CSS text file (typically .css).*/CSS:MimeType;\\n/**Representation of MIME type for a CSV text file (typically .csv).*/CSV:MimeType;\\n/**Representation of MIME type for a Google Drive folder.*/FOLDER:MimeType;\\n/**Representation of MIME type for a GIF image file (typically .gif).*/GIF:MimeType;\\n/**Representation of MIME type for a Google Apps Script project.*/GOOGLE_APPS_SCRIPT:MimeType;\\n/**Representation of MIME type for a Google Docs file.*/GOOGLE_DOCS:MimeType;\\n/**Representation of MIME type for a Google Drawings file.*/GOOGLE_DRAWINGS:MimeType;\\n/**Representation of MIME type for a Google Forms file.*/GOOGLE_FORMS:MimeType;\\n/**Representation of MIME type for a Google Sheets file.*/GOOGLE_SHEETS:MimeType;\\n/**Representation of MIME type for a Google Sites file.*/GOOGLE_SITES:MimeType;\\n/**Representation of MIME type for a Google Slides file.*/GOOGLE_SLIDES:MimeType;\\n/**Representation of MIME type for an HTML text file (typically .html).*/HTML:MimeType;\\n/**Representation of MIME type for a JavaScript text file (typically .js).*/JAVASCRIPT:MimeType;\\n/**Representation of MIME type for a JPEG image file (typically .jpg).*/JPEG:MimeType;\\n/**Representation of MIME type for a Microsoft Excel spreadsheet file (typically .xlsx).*/MICROSOFT_EXCEL:MimeType;\\n/**Representation of MIME type for a Microsoft Excel legacy file (typically .xls).*/MICROSOFT_EXCEL_LEGACY:MimeType;\\n/**Representation of MIME type for a Microsoft PowerPoint presentation file (typically .pptx).*/MICROSOFT_POWERPOINT:MimeType;\\n/**Representation of MIME type for a Microsoft PowerPoint legacy file (typically .ppt).*/MICROSOFT_POWERPOINT_LEGACY:MimeType;\\n/**Representation of MIME type for a Microsoft Word document file (typically .docx).*/MICROSOFT_WORD:MimeType;\\n/**Representation of MIME type for a Microsoft Word legacy file (typically .doc).*/MICROSOFT_WORD_LEGACY:MimeType;\\n/**Representation of MIME type for an OpenDocument graphics file (typically .odg).*/OPENDOCUMENT_GRAPHICS:MimeType;\\n/**Representation of MIME type for an OpenDocument presentation file (typically .odp).*/OPENDOCUMENT_PRESENTATION:MimeType;\\n/**Representation of MIME type for an OpenDocument spreadsheet file (typically .ods).*/OPENDOCUMENT_SPREADSHEET:MimeType;\\n/**Representation of MIME type for an OpenDocument word-processing file (typically .odt).*/OPENDOCUMENT_TEXT:MimeType;\\n/**Representation of MIME type for a PDF file (typically .pdf).*/PDF:MimeType;\\n/**Representation of MIME type for a plain text file (typically .txt).*/PLAIN_TEXT:MimeType;\\n/**Representation of MIME type for a PNG image file (typically .png).*/PNG:MimeType;\\n/**Representation of MIME type for a rich text file (typically .rtf).*/RTF:MimeType;\\n/**Representation of MIME type for a Google Drive shortcut.*/SHORTCUT:MimeType;\\n/**Representation of MIME type for an SVG image file (typically .svg).*/SVG:MimeType;\\n/**Representation of MIME type for a ZIP archive file (typically .zip).*/ZIP:MimeType;}\"],[\"properties-service.d.ts\",\"interface PropertiesService{\\n/**Gets a property store (for this script only) that all users can access within the open\\ndocument, spreadsheet, or form. It is only available if the script is published and executing\\nas an add-on or if it is [bound](https://developers.google.com/apps-script/scripts_containers) to a Google file\\ntype. When document properties are not available this method returns `null`. Document\\nproperties created by a script are not accessible outside that script, even by other scripts\\naccessing the same document.\\n@return a property store for this script only that all users of the current document can\\n    access, or `null` if the script is not either an add-on or bound to a Google\\n    Workspace file*/getDocumentProperties():PropertiesService.Properties;\\n/**Gets a property store that all users can access, but only within this script.\\n@return a property store that all users of the script can access*/getScriptProperties():PropertiesService.Properties;\\n/**Gets a property store that only the current user can access, and only within this script.\\n@return a property store that only the current user of the script can access*/getUserProperties():PropertiesService.Properties;}module PropertiesService{interface Properties{\\n/**Deletes all properties in the current `Properties` store.\\n\\n```\\n// Deletes all user properties.\\nvar userProperties \\u003d PropertiesService.getUserProperties();\\nuserProperties.deleteAllProperties();\\n```\\n@return this `Properties` store, for chaining*/deleteAllProperties():PropertiesService.Properties;\\n/**Deletes the property with the given key in the current `Properties` store.\\n\\n```\\n// Deletes the user property 'nickname'.\\nvar userProperties \\u003d PropertiesService.getUserProperties();\\nuserProperties.deleteProperty('nickname');\\n```\\n@param key the key for the property to delete\\n@return this `Properties` store, for chaining*/deleteProperty(key:string):PropertiesService.Properties;\\n/**Gets all keys in the current `Properties` store.\\n\\n```\\n// Sets several properties, then logs the value of each key.\\nvar scriptProperties \\u003d PropertiesService.getScriptProperties();\\nscriptProperties.setProperties({\\n  'cow': 'moo',\\n  'sheep': 'baa',\\n  'chicken': 'cluck'\\n});\\nvar keys \\u003d scriptProperties.getKeys();\\nLogger.log('Animals known:');\\nfor (var i \\u003d 0; i \\u003c keys.length; i++) {\\n  Logger.log(keys[i]);\\n}\\n```\\n@return an array of all keys in the current `Properties` store*/getKeys():string[];\\n/**Gets a copy of all key-value pairs in the current `Properties` store. Note that the\\nreturned object is not a live view of the store. Consequently, changing the properties on the\\nreturned object will not automatically update them in storage, or vice versa.\\n\\n```\\n// Sets several script properties, then retrieves them and logs them.\\nvar scriptProperties \\u003d PropertiesService.getScriptProperties();\\nscriptProperties.setProperties({\\n  'cow': 'moo',\\n  'sheep': 'baa',\\n  'chicken': 'cluck'\\n});\\n\\nvar animalSounds \\u003d scriptProperties.getProperties();\\n\\n// Logs:\\n// A chicken goes cluck!\\n// A cow goes moo!\\n// A sheep goes baa!\\nfor (var kind in animalSounds) {\\n  Logger.log('A %s goes %s!', kind, animalSounds[kind]);\\n}\\n```\\n@return a copy of all key-value pairs in the current `Properties` store*/getProperties():Object;\\n/**Gets the value associated with the given key in the current `Properties` store, or `null` if no such key exists.\\n\\n```\\n// Gets the user property 'nickname'.\\nvar userProperties \\u003d PropertiesService.getUserProperties();\\nvar nickname \\u003d userProperties.getProperty('nickname');\\nLogger.log(nickname);\\n```\\n@param key the key for the property value to retrieve\\n@return the value associated with the given key in the current `Properties` store*/getProperty(key:string):string;\\n/**Sets all key-value pairs from the given object in the current `Properties` store.\\n\\n```\\n// Sets multiple user properties at once.\\nvar userProperties \\u003d PropertiesService.getUserProperties();\\nvar newProperties \\u003d {nickname: 'Bob', region: 'US', language: 'EN'};\\nuserProperties.setProperties(newProperties);\\n```\\n@param properties an object containing key-values pairs to set\\n@return this `Properties` store, for chaining*/setProperties(properties:Object):PropertiesService.Properties;\\n/**Sets all key-value pairs from the given object in the current `Properties` store,\\noptionally deleting all other properties in the store.\\n\\n```\\n// Sets multiple user properties at once while deleting all other user properties.\\nvar userProperties \\u003d PropertiesService.getUserProperties();\\nvar newProperties \\u003d {nickname: 'Bob', region: 'US', language: 'EN'};\\nuserProperties.setProperties(newProperties, true);\\n```\\n@param properties an object containing key-values pairs to set\\n@param deleteAllOthers `true` to delete all other key-value pairs in the properties\\n    object; `false` to not\\n@return this `Properties` store, for chaining*/setProperties(properties:Object,deleteAllOthers:boolean):PropertiesService.Properties;\\n/**Sets the given key-value pair in the current `Properties` store.\\n\\n```\\n// Sets the user property 'nickname' to 'Bobby'.\\nvar userProperties \\u003d PropertiesService.getUserProperties();\\nuserProperties.setProperty('nickname', 'Bobby');\\n```\\n@param key the key for the property\\n@param value the value to associate with the key\\n@return this `Properties` store, for chaining*/setProperty(key:string,value:string):PropertiesService.Properties;}}const PropertiesService:PropertiesService;\"],[\"script-app.d.ts\",\"interface ScriptApp{\\n/**An enumeration that identifies which categories of authorized services Apps Script is able to\\nexecute through a triggered function.*/AuthMode:ScriptApp._AuthMode;\\n/**An enumeration denoting the authorization status of a script.*/AuthorizationStatus:ScriptApp._AuthorizationStatus;\\n/**An enumeration denoting the type of triggered event.*/EventType:ScriptApp._EventType;\\n/**An enumeration denoting how the script was installed to the user as an add-on.*/InstallationSource:ScriptApp._InstallationSource;\\n/**An enumeration denoting the source of the event that causes the trigger to fire.*/TriggerSource:ScriptApp._TriggerSource;\\n/**An enumeration representing the days of the week.*/WeekDay:_Weekday;\\n/**Removes the given trigger so it no longer runs.\\n\\n```\\n// Deletes all triggers in the current project.\\nvar triggers \\u003d ScriptApp.getProjectTriggers();\\nfor (var i \\u003d 0; i \\u003c triggers.length; i++) {\\n  ScriptApp.deleteTrigger(triggers[i]);\\n}\\n```\\n@param trigger The trigger to delete.*/deleteTrigger(trigger:ScriptApp.Trigger):void;\\n/**Gets an object used to determine whether the user needs to authorize this script to use one or\\nmore services, and to provide the URL for an authorization dialog. If the script is published\\nas an [add-on](/gsuite/add-ons/overview) that uses [installable triggers](/apps-script/understanding_triggers), this information can be\\nused to control access to sections of code for which the user lacks the necessary\\nauthorization. Alternately, the add-on can ask the user to open the URL for the authorization\\ndialog to resolve the problem.\\n\\n```\\nvar authInfo \\u003d ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL);\\nstatus \\u003d authInfo.getAuthorizationStatus();\\nurl \\u003d authInfo.getAuthorizationUrl();\\n```\\n@param authMode the authorization mode for which authorization information is requested; in\\n    almost all cases, the value for `authMode` should be `ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL)`, since no other authorization mode\\n    requires that users grant authorization\\n@return an object that can provide information about the user's authorization status*/getAuthorizationInfo(authMode:ScriptApp.AuthMode):ScriptApp.AuthorizationInfo;\\n/**Gets an [OpenID Connect](/identity/protocols/OpenIDConnect) identity token for the\\neffective user, if the `openid` scope has been granted. This scope is not included\\nby default, and you must add it as an [explicit scope](/apps-script/concepts/scopes#setting_explicit_scopes) in the manifest\\nfile to request it. Include the scopes `https://www.googleapis.com/auth/userinfo.email` or `https://www.googleapis.com/auth/userinfo.profile` to return additional\\nuser information in the token.\\n\\nThe returned ID token is an encoded [JSON Web Token (JWT)](https://jwt.io/), and\\nit must be decoded to extract information from it. The following examples shows how to decode\\nthe token and extract the effective user's Google profile ID.\\n\\n```\\nvar idToken \\u003d ScriptApp.getIdentityToken();\\nvar body \\u003d idToken.split('.')[1];\\nvar decoded \\u003d Utilities.newBlob(Utilities.base64Decode(body)).getDataAsString();\\nvar payload \\u003d JSON.parse(decoded);\\nvar profileId \\u003d payload.sub;\\nLogger.log('Profile ID: ' + profileId);\\n```\\n\\nSee the [OpenID Connect](/identity/protocols/OpenIDConnect#obtainuserinfo)\\ndocumentation for the full list of fields (claims) returned.\\n@return The identity token if available; otherwise `null`.*/getIdentityToken():string;\\n/**Returns an enum value that indicates how the script came to be installed as an add-on for the\\ncurrent user (for example, whether the user installed it personally through the Chrome Web\\nStore, or whether a domain administrator installed it for all users).\\n@return The source of installation.*/getInstallationSource():ScriptApp.InstallationSource;\\n/**Gets the OAuth 2.0 [access\\ntoken](https://datatracker.ietf.org/doc/html/rfc6749#section-1.4) for the effective user. If the script's OAuth scopes are sufficient to authorize\\nanother Google API that normally requires its own OAuth flow (like [Google Picker](/apps-script/guides/dialogs#file-open_dialogs)), scripts can bypass the\\nsecond authorization prompt by passing this token instead. The token expires after a time (a\\nfew minutes at minimum); scripts should handle authorization failures and call this method to\\nobtain a fresh token when needed.\\n\\nThe token returned by this method only includes scopes that the script currently needs.\\nScopes that were previously authorized but are no longer used by the script are not included in\\nthe returned token. If additional OAuth scopes are needed beyond what the script itself\\nrequires, they can be [specified](/apps-script/concepts/scopes#setting_explicit_scopes) in the script's\\nmanifest file.\\n@return A string representation of the OAuth 2.0 token.*/getOAuthToken():string;\\n/**Gets the project key of the current script. The project key is a unique identifier for scripts\\nand used to compose the callback URL used in conjunction with [`newStateToken()`](https://developers.google.com/apps-script/reference/script/script-app.html#newStateToken()).\\n\\nWhen called in a [library](/apps-script/guides/libraries), this returns the\\nproject key of the outer-most script being executed.\\n@deprecated\\n@return The project key of the current script.*/getProjectKey():string;\\n/**Gets all installable triggers associated with the current project and current user.\\n\\n```\\nLogger.log('Current project has ' + ScriptApp.getProjectTriggers().length + ' triggers.');\\n```\\n@return An array of the current user's triggers associated with this project.*/getProjectTriggers():ScriptApp.Trigger[];\\n/**Gets the script project's unique ID. This is the preferred method to get the unique identifier\\nfor the script project as opposed to ~~[`getProjectKey()`](https://developers.google.com/apps-script/reference/script/script-app.html#getProjectKey())~~. This ID can be used in all places\\nwhere project key was previously provided.\\n@return The script project's ID.*/getScriptId():string;\\n/**Gets all installable triggers associated with the current project and current user.\\n\\n```\\nLogger.log('Current script has ' + ScriptApp.getScriptTriggers().length + ' triggers.');\\n```\\n@deprecated\\n@return An array of the current user's triggers associated with this project.*/getScriptTriggers():ScriptApp.Trigger[];\\n/**Gets an object used to control publishing the script as a web app.\\n\\n```\\n// Get the URL of the published web app.\\nvar url \\u003d ScriptApp.getService().getUrl();\\n```\\n@return An object used to observe and control publishing the script as a web app.*/getService():ScriptApp.Service;\\n/**Gets all installable triggers owned by this user in the given document, for this script or\\nadd-on only. This method cannot be used to see the triggers attached to other scripts.\\n\\n```\\nvar doc \\u003d DocumentApp.getActiveDocument();\\nvar triggers \\u003d ScriptApp.getUserTriggers(doc);\\n// Log the handler function for the first trigger in the array.\\nLogger.log(triggers[0].getHandlerFunction());\\n```\\n@param document A Google Docs file that may contain installable triggers.\\n@return An array of triggers owned by this user in the given document.*/getUserTriggers(document:DocumentApp.Document):ScriptApp.Trigger[];\\n/**Gets all installable triggers owned by this user in the given form, for this script or add-on\\nonly. This method cannot be used to see the triggers attached to other scripts.\\n\\n```\\nvar form \\u003d FormApp.getActiveForm();\\nvar triggers \\u003d ScriptApp.getUserTriggers(form);\\n// Log the trigger source for the first trigger in the array.\\nLogger.log(triggers[0].getTriggerSource());\\n```\\n@param form A Google Forms file that may contain installable triggers.\\n@return An array of triggers owned by this user in the given form.*/getUserTriggers(form:FormApp.Form):ScriptApp.Trigger[];\\n/**Gets all installable triggers owned by this user in the given spreadsheet, for this script or\\nadd-on only. This method cannot be used to see the triggers attached to other scripts.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar triggers \\u003d ScriptApp.getUserTriggers(ss);\\n// Log the event type for the first trigger in the array.\\nLogger.log(triggers[0].getEventType());\\n```\\n@param spreadsheet A Google Sheets file that may contain installable triggers.\\n@return An array of triggers owned by this user in the given spreadsheet.*/getUserTriggers(spreadsheet:SpreadsheetApp.Spreadsheet):ScriptApp.Trigger[];\\n/**Invalidates the authorization the effective user has to execute the current script. Used to\\ninvalidate any permissions for the current script. This is especially useful for functions\\ntagged as one-shot authorization. Since one-shot authorization functions can only be called the\\nfirst run after the script has acquired authorization, if you wish to perform an action\\nafterwards, you must revoke any authorization the script had, so the user can see the\\nauthorization dialog again.\\n\\n```\\nScriptApp.invalidateAuth();\\n```*/invalidateAuth():void;\\n/**Creates a builder for a state token that can be used in a callback API (like an OAuth flow).\\n\\n```\\n// Generate a callback URL, given the name of a callback function. The script does not need to\\n// be published as a web app; the /usercallback URL suffix replaces /edit in any script's URL.\\nfunction getCallbackURL(callbackFunction) {\\n  // IMPORTANT: Replace string below with the URL from your script, minus the /edit at the end.\\n  var scriptUrl \\u003d 'https://script.google.com/macros/d/1234567890abcdefghijklmonpqrstuvwxyz';\\n  var urlSuffix \\u003d '/usercallback?state\\u003d';\\n  var stateToken \\u003d ScriptApp.newStateToken()\\n      .withMethod(callbackFunction)\\n      .withTimeout(120)\\n      .createToken();\\n  return scriptUrl + urlSuffix + stateToken;\\n}\\n```\\n\\nIn most OAuth2 flows, the `state` token is passed to the authorization endpoint\\ndirectly (not as part of the callback URL), and the authorization endpoint then passes it as\\npart of the callback URL.\\n\\nFor example:\\n\\n  + The script redirects the user to OAuth2 authorize URL: `https://accounts.google.com/o/oauth2/auth?state\\u003dtoken_generated_with_this_method\\u0026callback_uri\\u003dhttps://script.google.com/macros/d/1234567890abcdefghijklmonpqrstuvwxyz/usercallback\\u0026other_oauth2_parameters`\\n  + The user clicks authorize, and the OAuth2 authorization page redirects the user back to\\n      `https://script.google.com/macros/d/1234567890abcdefghijklmonpqrstuvwxyz/usercallback?state\\u003dtoken_generated_with_this_method\\u0026other_params_that_include_tokens_or_grants`\\n  + The above redirect (back to `http://script.google.com/...`), causes the browser\\n      request to `/usercallback`, which invokes the method specified by [`StateTokenBuilder.withMethod(method)`](https://developers.google.com/apps-script/reference/script/state-token-builder.html#withMethod(String)).\\n@return An object used to continue the state-token-building process.*/newStateToken():ScriptApp.StateTokenBuilder;\\n/**Begins the process of creating an installable trigger that, when fired, calls a given function.\\n\\n```\\n// Creates an edit trigger for a spreadsheet identified by ID.\\nScriptApp.newTrigger('myFunction')\\n    .forSpreadsheet('1234567890abcdefghijklmnopqrstuvwxyz_a1b2c3')\\n    .onEdit()\\n    .create();\\n```\\n@param functionName The function to call when the trigger fires. You can use functions from\\n    included libraries, such as `Library.libFunction1`.\\n@return An object used to continue the trigger-building process.*/newTrigger(functionName:string):ScriptApp.TriggerBuilder;}module ScriptApp{interface TriggerSource{}interface _TriggerSource{\\n/**Google Calendar causes the trigger to fire.*/CALENDAR:TriggerSource;\\n/**A time-driven event causes the trigger to fire.*/CLOCK:TriggerSource;\\n/**Google Docs causes the trigger to fire.*/DOCUMENTS:TriggerSource;\\n/**Google Forms causes the trigger to fire.*/FORMS:TriggerSource;\\n/**Google Sheets causes the trigger to fire.*/SPREADSHEETS:TriggerSource;}interface TriggerBuilder{\\n/**Creates and returns a [`DocumentTriggerBuilder`](https://developers.google.com/apps-script/reference/script/document-trigger-builder.html) tied to the given document.\\n\\n```\\nScriptApp.newTrigger('myFunction')\\n  .forDocument(DocumentApp.getActiveDocument())\\n  .onOpen()\\n  .create();\\n```\\n@param document the document\\n@return the new DocumentTriggerBuilder*/forDocument(document:DocumentApp.Document):ScriptApp.DocumentTriggerBuilder;\\n/**Creates and returns a [`DocumentTriggerBuilder`](https://developers.google.com/apps-script/reference/script/document-trigger-builder.html) tied to the document with the given ID.\\n\\n```\\nScriptApp.newTrigger('myFunction')\\n  .forDocument('1234567890abcdefghijklmnopqrstuvwxyz')\\n  .onOpen()\\n  .create();\\n```\\n@param key the ID for the document\\n@return the new DocumentTriggerBuilder*/forDocument(key:string):ScriptApp.DocumentTriggerBuilder;\\n/**Creates and returns a [`FormTriggerBuilder`](https://developers.google.com/apps-script/reference/script/form-trigger-builder.html) tied to the given form.\\n\\n```\\nScriptApp.newTrigger('myFunction')\\n  .forForm(FormApp.getActiveForm())\\n  .onFormSubmit()\\n  .create();\\n```\\n@param form the form\\n@return the new FormTriggerBuilder*/forForm(form:FormApp.Form):ScriptApp.FormTriggerBuilder;\\n/**Creates and returns a [`FormTriggerBuilder`](https://developers.google.com/apps-script/reference/script/form-trigger-builder.html) tied to the form with the given ID.\\n\\n```\\nScriptApp.newTrigger('myFunction')\\n  .forForm('1234567890abcdefghijklmnopqrstuvwxyz')\\n  .onFormSubmit()\\n  .create();\\n```\\n@param key the ID for the form\\n@return the new FormTriggerBuilder*/forForm(key:string):ScriptApp.FormTriggerBuilder;\\n/**Creates and returns a [`SpreadsheetTriggerBuilder`](https://developers.google.com/apps-script/reference/script/spreadsheet-trigger-builder.html) tied to the given spreadsheet.\\n\\n```\\nScriptApp.newTrigger('myFunction')\\n  .forSpreadsheet(SpreadsheetApp.getActive())\\n  .onEdit()\\n  .create();\\n```\\n@param sheet the spreadsheet\\n@return the new SpreadsheetTriggerBuilder*/forSpreadsheet(sheet:SpreadsheetApp.Spreadsheet):ScriptApp.SpreadsheetTriggerBuilder;\\n/**Creates and returns a [`SpreadsheetTriggerBuilder`](https://developers.google.com/apps-script/reference/script/spreadsheet-trigger-builder.html) tied to the spreadsheet with the given\\nID.\\n\\n```\\nScriptApp.newTrigger('myFunction')\\n  .forSpreadsheet('1234567890abcdefghijklmnopqrstuvwxyz')\\n  .onEdit()\\n  .create();\\n```\\n@param key the ID for the spreadsheet\\n@return the new SpreadsheetTriggerBuilder*/forSpreadsheet(key:string):ScriptApp.SpreadsheetTriggerBuilder;\\n/**Returns a builder for building calendar triggers.\\n@param emailId email ID of the user calendar the trigger monitors.\\n@return The new CalendarTriggerBuilder.*/forUserCalendar(emailId:string):ScriptApp.CalendarTriggerBuilder;\\n/**Creates and returns a [`ClockTriggerBuilder`](https://developers.google.com/apps-script/reference/script/clock-trigger-builder.html) for building time-based triggers.\\n\\n```\\nScriptApp.newTrigger('myFunction')\\n  .timeBased()\\n  .atDate(2013, 10, 31)\\n  .create();\\n```\\n@return the new ClockTriggerBuilder*/timeBased():ScriptApp.ClockTriggerBuilder;}interface Trigger{\\n/**Returns the event type that the trigger fires on.\\n\\n```\\nvar triggers \\u003d ScriptApp.getProjectTriggers();\\nfor (var i \\u003d 0; i \\u003c triggers.length; i++) {\\n  if (triggers[i].getEventType() \\u003d\\u003d ScriptApp.EventType.CLOCK) {\\n    // Some code here - other options are:\\n    // ScriptApp.EventType.ON_EDIT\\n    // ScriptApp.EventType.ON_FORM_SUBMIT\\n    // ScriptApp.EventType.ON_OPEN\\n  }\\n}\\n```\\n@return the event type that this is a trigger for*/getEventType():ScriptApp.EventType;\\n/**Returns the function that will be called when the trigger fires.\\n\\n```\\n// Create a trigger for the script.\\nScriptApp.newTrigger('myFunction').forSpreadsheet('id of my spreadsheet').onEdit().create();\\nLogger.log(ScriptApp.getProjectTriggers()[0].getHandlerFunction()); // logs \\\"myFunction\\\"\\n```\\n@return the method name*/getHandlerFunction():string;\\n/**Returns the source of events that will cause the trigger to fire.\\n\\nFor example, a spreadsheet onEdit trigger would return SPREADSHEETS, or a time based trigger\\nwould return CLOCK.\\n\\n```\\nvar triggers \\u003d ScriptApp.getProjectTriggers();\\nfor (var i \\u003d 0; i \\u003c triggers.length; i++) {\\n  if (triggers[i].getTriggerSource() \\u003d\\u003d ScriptApp.TriggerSource.CLOCK) {\\n    Logger.log(triggers[i].getUniqueId() + \\\" source is clock\\\");\\n  } else if (triggers[i].getTriggerSource() \\u003d\\u003d ScriptApp.TriggerSource.SPREADSHEETS) {\\n    Logger.log(triggers[i].getUniqueId() + \\\" source is spreadsheets\\\");\\n  }\\n}\\n```\\n@return the publisher this is a trigger for*/getTriggerSource():ScriptApp.TriggerSource;\\n/**Returns the id specific to the source.\\n\\nFor example, if the trigger source is a spreadsheet, this would be the id of the\\nspreadsheet. For clock events this returns null.\\n@return the id of the entity in the publisher that this is a trigger for*/getTriggerSourceId():string;\\n/**Returns a unique identifier that can be used to distinguish triggers from each other.\\n@return the unique identifier of the trigger*/getUniqueId():string;}interface StateTokenBuilder{\\n/**Constructs an encrypted string representation of the state token.\\n\\n```\\nvar stateToken \\u003d ScriptApp.newStateToken().createToken();\\n```\\n@return an encrypted string representing the token*/createToken():string;\\n/**Adds an argument to the token. This method can be called multiple times.\\n\\n```\\nvar stateToken \\u003d ScriptApp.newStateToken().withArgument('myField', 'myValue').createToken();\\n```\\n@param name the name of the argument\\n@param value the value of the argument\\n@return the state token builder, for chaining*/withArgument(name:string,value:string):ScriptApp.StateTokenBuilder;\\n/**Sets a callback function. The default is a function named `callback()`.\\n\\n```\\nvar stateToken \\u003d ScriptApp.newStateToken().withMethod('myCallback').createToken();\\n```\\n@param method The name of the callback function, represented as a string without parentheses or\\n    arguments. You can use functions from included libraries, such as \\n\\n```\\n    Library.libFunction1```\\n\\n.\\n@return the state token builder, for chaining*/withMethod(method:string):ScriptApp.StateTokenBuilder;\\n/**Sets the duration (in seconds) for which the token is valid. The defaults is 60 seconds; the\\nmaximum duration is 3600 seconds (1 hour).\\n\\n```\\nvar stateToken \\u003d ScriptApp.newStateToken().withTimeout(60).createToken();\\n```\\n@param seconds the duration for which the token is valid; the maximum value is `3600`\\n@return the state token builder, for chaining*/withTimeout(seconds:Integer):ScriptApp.StateTokenBuilder;}interface SpreadsheetTriggerBuilder{\\n/**Creates the trigger and returns it.\\n@return The created trigger.*/create():ScriptApp.Trigger;\\n/**Specifies a trigger that will fire when the spreadsheet's content or structure is changed.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActive();\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .forSpreadsheet(sheet)\\n  .onChange()\\n  .create();\\n```\\n@return a builder for chaining*/onChange():ScriptApp.SpreadsheetTriggerBuilder;\\n/**Specifies a trigger that will fire when the spreadsheet is edited.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActive();\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .forSpreadsheet(sheet)\\n  .onEdit()\\n  .create();\\n```\\n@return a builder for chaining*/onEdit():ScriptApp.SpreadsheetTriggerBuilder;\\n/**Specifies a trigger that will fire when the spreadsheet has a form submitted to it.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActive();\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .forSpreadsheet(sheet)\\n  .onFormSubmit()\\n  .create();\\n```\\n@return A builder for chaining.*/onFormSubmit():ScriptApp.SpreadsheetTriggerBuilder;\\n/**Specifies a trigger that will fire when the spreadsheet is opened.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActive();\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .forSpreadsheet(sheet)\\n  .onOpen()\\n  .create();\\n```\\n@return a builder for chaining*/onOpen():ScriptApp.SpreadsheetTriggerBuilder;}interface Service{\\n/**Disables the script from being accessed as a web app. This method is equivalent to opening the\\n\\\"Publish \\u003e Deploy as web app\\\" dialog and clicking \\\"disable web app\\\".\\n\\n```\\nScriptApp.getService().disable();\\n```\\n@deprecated*/disable():void;\\n/**Returns the URL of the web app, if it has been deployed; otherwise returns `null`. If you\\nare running the development mode web app, this returns the development mode url.\\n\\n```\\n// Mail the URL of the published web app.\\nMailApp.sendMail(\\\"myself@example.com\\\", \\\"My Snazzy App\\\",\\n  \\\"My new app is now available at \\\" + ScriptApp.getService().getUrl());\\n```\\n@return the URL of the web app*/getUrl():string;\\n/**Returns `true` if the script is accessible as a web app.\\n@return `true` if the script is published as a web app; `false` if not*/isEnabled():boolean;}interface InstallationSource{}interface _InstallationSource{\\n/**Add-on was installed by the administrator for the user's domain.*/APPS_MARKETPLACE_DOMAIN_ADD_ON:InstallationSource;\\n/**Script is not running as an add-on.*/NONE:InstallationSource;\\n/**Add-on was installed by the user from the Chrome Web Store.*/WEB_STORE_ADD_ON:InstallationSource;}interface FormTriggerBuilder{\\n/**Creates and returns the new trigger.\\n@return The new trigger.*/create():ScriptApp.Trigger;\\n/**Specifies a trigger that will fire when a response is submitted to the form.\\n\\n```\\nvar form \\u003d FormApp.openById('1234567890abcdefghijklmnopqrstuvwxyz');\\nScriptApp.newTrigger('myFunction')\\n    .forForm(form)\\n    .onFormSubmit()\\n    .create();\\n```\\n@return this [`FormTriggerBuilder`](https://developers.google.com/apps-script/reference/script/form-trigger-builder.html), for chaining*/onFormSubmit():ScriptApp.FormTriggerBuilder;\\n/**Specifies a trigger that will fire when the form's edit view is opened.\\n\\n```\\nvar form \\u003d FormApp.getActiveForm();\\nScriptApp.newTrigger('myFunction')\\n    .forForm(form)\\n    .onOpen()\\n    .create();\\n```\\n@return This [`FormTriggerBuilder`](https://developers.google.com/apps-script/reference/script/form-trigger-builder.html), for chaining.*/onOpen():ScriptApp.FormTriggerBuilder;}interface EventType{}interface _EventType{\\n/**The trigger fires once the time-driven event reaches a specific time.*/CLOCK:EventType;\\n/**The trigger fires once the user changes the Google Sheets file (for example, by adding a row,\\nwhich counts as a change instead of an edit).*/ON_CHANGE:EventType;\\n/**The trigger fires once the user edits the Google Sheets file (for example, by entering a new\\nvalue into a cell, which counts as an edit instead of a change).*/ON_EDIT:EventType;\\n/**The trigger fires once an event gets created, updated, or deleted on the specified Google\\nCalendar.*/ON_EVENT_UPDATED:EventType;\\n/**The trigger fires once the user responds to a Google Form. This trigger is available either in\\nthe Google Form itself or in the Google Sheets file that the form sends its responses to.*/ON_FORM_SUBMIT:EventType;\\n/**The trigger fires once the user opens the Google Docs, Sheets, or Forms file.*/ON_OPEN:EventType;}interface DocumentTriggerBuilder{\\n/**Creates and returns the new trigger.\\n@return The new trigger.*/create():ScriptApp.Trigger;\\n/**Specifies a trigger that will fire when the document is opened.\\n\\n```\\nvar document \\u003d DocumentApp.getActiveDocument();\\nScriptApp.newTrigger('myFunction')\\n  .forDocument(document)\\n  .onOpen()\\n  .create();\\n```\\n@return This [`DocumentTriggerBuilder`](https://developers.google.com/apps-script/reference/script/document-trigger-builder.html), for chaining.*/onOpen():ScriptApp.DocumentTriggerBuilder;}interface ClockTriggerBuilder{\\n/**Specifies the minimum duration (in milliseconds) after the current time that the trigger runs.\\nThe actual duration might vary, but won't be less than your specified minimum.\\n\\n```\\n// Creates a trigger that runs 10 minutes later\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .after(10 * 60 * 1000)\\n  .create();\\n```\\n@param durationMilliseconds The minimum duration (in milliseconds) after the current time when\\n    the trigger should run.\\n@return The builder, for chaining.*/after(durationMilliseconds:Integer):ScriptApp.ClockTriggerBuilder;\\n/**Specifies when the trigger runs.\\n\\n```\\n// Creates a trigger for December 1, 2012\\nvar triggerDay \\u003d new Date(2012, 11, 1);\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .at(triggerDay)\\n  .create();\\n```\\n@param date A Date object representing when the trigger should run.\\n@return The builder, for chaining.*/at(date:Date):ScriptApp.ClockTriggerBuilder;\\n/**Specifies that the trigger fires on the given date, by default near midnight (+/- 15 minutes).\\n\\n```\\n// Schedules for January 1st, 2013\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .atDate(2013, 1, 1)\\n  .create();\\n```\\n@param year The calendar year to schedule the trigger.\\n@param month The calendar month to schedule the trigger (should be a number between 1 and 12,\\n    inclusive).\\n@param day The calendar day to schedule the trigger (should be a number between 1 and 31,\\n    inclusive).\\n@return The builder, for chaining.*/atDate(year:Integer,month:Integer,day:Integer):ScriptApp.ClockTriggerBuilder;\\n/**Specifies the hour the trigger at which the trigger runs.\\n\\n```\\n// Runs between 5am-6am in the timezone of the script\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .atHour(5)\\n  .everyDays(1) // Frequency is required if you are using atHour() or nearMinute()\\n  .create();\\n```\\n@param hour The hour at which to fire.\\n@return The builder, for chaining.*/atHour(hour:Integer):ScriptApp.ClockTriggerBuilder;\\n/**Creates the trigger.\\n@return The newly created, scheduled trigger.*/create():ScriptApp.Trigger;\\n/**Specifies to run the trigger every `n` days.\\n\\n```\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .everyDays(3)\\n  .create();\\n```\\n@param n The number of days between executions.\\n@return The builder, for chaining.*/everyDays(n:Integer):ScriptApp.ClockTriggerBuilder;\\n/**Specifies to run the trigger every `n` hours.\\n\\n```\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .everyHours(12)\\n  .create();\\n```\\n@param n The number of hours between executions.\\n@return The builder, for chaining.*/everyHours(n:Integer):ScriptApp.ClockTriggerBuilder;\\n/**Specifies to run the trigger every `n` minutes. `n` must be 1, 5, 10, 15 or 30.\\n\\n```\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .everyMinutes(10)\\n  .create();\\n```\\n@param n The number of minutes between executions.\\n@return The builder, for chaining.*/everyMinutes(n:Integer):ScriptApp.ClockTriggerBuilder;\\n/**Specifies to run the trigger every `n` weeks.\\n\\n```\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .everyWeeks(2)\\n  .onWeekDay(ScriptApp.WeekDay.FRIDAY)\\n  .create();\\n```\\n@param n The number of weeks between executions.\\n@return The builder, for chaining.*/everyWeeks(n:Integer):ScriptApp.ClockTriggerBuilder;\\n/**Specifies the timezone for the specified dates/time when the trigger runs. By default, the\\ntimezone is that of the script.\\n\\nThe list of valid timezone strings corresponds with the valid timezone strings listed by [Joda.org](http://joda-time.sourceforge.net/timezones.html). An invalid timezone string\\ncauses the script to throw an error.\\n\\n```\\n// Schedule the trigger to execute at noon every day in the US/Pacific time zone\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .atHour(12)\\n  .everyDays(1)\\n  .inTimezone(\\\"America/Los_Angeles\\\")\\n  .create();\\n```\\n@param timezone The timezone with which to treat time information in the event.\\n@return This [`ClockTriggerBuilder`](https://developers.google.com/apps-script/reference/script/clock-trigger-builder.html), for chaining.*/inTimezone(timezone:string):ScriptApp.ClockTriggerBuilder;\\n/**Specifies the minute at which the trigger runs (plus or minus 15 minutes). If `nearMinute()` is not called, a random minute value is used.\\n\\n```\\n// Runs at approximately 5:30am in the timezone of the script\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .atHour(5)\\n  .nearMinute(30)\\n  .everyDays(1) // Frequency is required if you are using atHour() or nearMinute()\\n  .create();\\n```\\n@param minute The minute at which to fire.\\n@return The builder, for chaining.*/nearMinute(minute:Integer):ScriptApp.ClockTriggerBuilder;\\n/**Specifies the date in the month that the trigger runs.\\n\\n```\\n// Schedules for the first of every month\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .onMonthDay(1)\\n  .create();\\n```\\n@param day The day of the month the trigger should be scheduled for.\\n@return The builder, for chaining.*/onMonthDay(day:Integer):ScriptApp.ClockTriggerBuilder;\\n/**Specifies the day of the week that the trigger runs.\\n\\n```\\nScriptApp.newTrigger(\\\"myFunction\\\")\\n  .timeBased()\\n  .onWeekDay(ScriptApp.WeekDay.FRIDAY)\\n  .create();\\n```\\n@param day The day of the week to fire.\\n@return The builder, for chaining.*/onWeekDay(day:Weekday):ScriptApp.ClockTriggerBuilder;}interface CalendarTriggerBuilder{\\n/**Creates the trigger and returns it.\\n@return The new trigger.*/create():ScriptApp.Trigger;\\n/**Specifies a trigger that fires when a calendar entry is created, updated, or deleted.\\n@return This [`CalendarTriggerBuilder`](https://developers.google.com/apps-script/reference/script/calendar-trigger-builder.html), for chaining.*/onEventUpdated():ScriptApp.CalendarTriggerBuilder;}interface AuthorizationStatus{}interface _AuthorizationStatus{\\n/**The user has granted this script all the authorization it currently requires.*/NOT_REQUIRED:AuthorizationStatus;\\n/**The user needs to authorize this script to use one or more services. In most cases, the script\\nprompts the user for authorization the next time it runs; however, if the script is published\\nas an [add-on](/gsuite/add-ons/overview) that uses [installable triggers](/apps-script/understanding_triggers), the trigger runs the\\nscript without prompting for authorization but throws an exception if the script attempts to\\ncall the unauthorized service.*/REQUIRED:AuthorizationStatus;}interface AuthorizationInfo{\\n/**Gets a value that indicates whether the user needs to authorize this script to use one or more\\nservices (for example, `ScriptApp.AuthorizationStatus.REQUIRED`).\\n\\n```\\n// Log the authorization status (REQUIRED or NOT_REQUIRED).\\nvar authInfo \\u003d ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL);\\nLogger.log(authInfo.getAuthorizationStatus());\\n```\\n@return the authorization status*/getAuthorizationStatus():ScriptApp.AuthorizationStatus;\\n/**Gets the authorization URL that can be used to grant access to the script. This method returns\\n`null` if no authorization is required. The page at the URL will close automatically if\\nit is accessed and the script does not require any authorization.\\n\\n```\\n// Log the URL used to grant access to the script.\\nvar authInfo \\u003d ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL);\\nLogger.log(authInfo.getAuthorizationUrl());\\n```\\n@return a URL that can be used to authorize the script*/getAuthorizationUrl():string;}interface AuthMode{}interface _AuthMode{\\n/**A mode that allows access to a limited subset of services for use in custom spreadsheet\\nfunctions. Some of these services — including read-only access to Spreadsheet service —\\nnormally require authorization, but are permitted without authorization when used in a custom\\nfunction. Because custom functions do not include an event parameter, this value is never\\nreturned; it is documented only to demonstrate that custom functions run in their own\\nauthorization mode.*/CUSTOM_FUNCTION:AuthMode;\\n/**A mode that allows access to all services that require authorization. This mode occurs when an\\nadd-on or a script executes as the result of any trigger other than the cases described for\\n`LIMITED` or `NONE`.*/FULL:AuthMode;\\n/**A mode that allows access to a limited subset of services. This mode occurs when an add-on or a\\nscript [bound](/apps-script/scripts_containers) to a document executes an `onOpen(e)` or `onEdit(e)` simple trigger, except in the case described for `NONE`.*/LIMITED:AuthMode;\\n/**A mode that does not allow access to any services that require authorization. This mode occurs\\nwhen an add-on executes an `onOpen(e)` simple trigger, and the user has installed an\\nadd-on in a different document but the add-on has not been used in the current document.*/NONE:AuthMode;}}const ScriptApp:ScriptApp;\"],[\"script-properties.d.ts\",\"interface ScriptProperties{\\n/**Deletes all properties.\\n\\n```\\nScriptProperties.deleteAllProperties();\\n```\\n@deprecated\\n@return this object, for chaining*/deleteAllProperties():ScriptProperties;\\n/**Deletes the property with the given key.\\n\\n```\\nScriptProperties.deleteProperty('special');\\n```\\n@deprecated\\n@param key key for property to delete\\n@return this object, for chaining*/deleteProperty(key:string):ScriptProperties;\\n/**Get all of the available keys.\\n@deprecated*/getKeys():string[];\\n/**Get all of the available properties at once.\\n\\nThis gives a copy, not a live view, so changing the properties on the returned object won't\\nupdate them in storage and vice versa.\\n\\n```\\nScriptProperties.setProperties({\\n  \\\"cow\\\"     : \\\"moo\\\",\\n  \\\"sheep\\\"   : \\\"baa\\\",\\n  \\\"chicken\\\" : \\\"cluck\\\"\\n});\\n\\n// Logs \\\"A cow goes: moo\\\"\\nLogger.log(\\\"A cow goes: %s\\\", ScriptProperties.getProperty(\\\"cow\\\"));\\n\\n// This makes a copy. Any changes that happen here will not\\n// be written back to properties.\\nvar animalSounds \\u003d ScriptProperties.getProperties();\\n\\n// Logs:\\n// A chicken goes cluck!\\n// A cow goes moo!\\n// A sheep goes baa!\\nfor(var kind in animalSounds) {\\n  Logger.log(\\\"A %s goes %s!\\\", kind, animalSounds[kind]);\\n}\\n```\\n@deprecated\\n@return a copy of the properties containing key-value pairs*/getProperties():Object;\\n/**Returns the value associated with the provided key, or null if there is no such value.\\n\\n```\\nvar specialValue \\u003d ScriptProperties.getProperty('special');\\n```\\n@deprecated\\n@param key key for the value to retrieve\\n@return the value associated with the key*/getProperty(key:string):string;\\n/**Bulk-sets all the properties drawn from the given object.\\n\\n```\\nScriptProperties.setProperties({special: 'sauce', 'meaning': 42});\\n```\\n@deprecated\\n@param properties an object containing the properties to set.\\n@return this object, for chaining*/setProperties(properties:Object):ScriptProperties;\\n/**Bulk-sets all the properties drawn from the given object.\\n\\n```\\n// This deletes all other properties\\nScriptProperties.setProperties({special: 'sauce', 'meaning': 42}, true);\\n```\\n@deprecated\\n@param properties an object containing the properties to set.\\n@param deleteAllOthers whether to delete all existing properties.\\n@return this object, for chaining*/setProperties(properties:Object,deleteAllOthers:boolean):ScriptProperties;\\n/**Persists the specified in value with the provided key. Any existing value associated with this\\nkey will be overwritten.\\n\\n```\\nScriptProperties.setProperty('special', 'sauce');\\n```\\n@deprecated\\n@param key key for property\\n@param value value to associate with the key\\n@return this object, for chaining*/setProperty(key:string,value:string):ScriptProperties;}const ScriptProperties:ScriptProperties;\"],[\"session.d.ts\",\"interface Session{\\n/**Gets information about the current user. If security policies do not allow access to the user's\\nidentity, [`User.getEmail()`](https://developers.google.com/apps-script/reference/base/user.html#getEmail()) returns a blank string. The circumstances in which the\\nemail address is available vary: for example, the user's email address is not available in any\\ncontext that allows a script to run without that user's authorization, like a simple `onOpen(e)` or `onEdit(e)` trigger, a custom function in Google Sheets, or a web app\\ndeployed to \\\"execute as me\\\" (that is, authorized by the developer instead of the user).\\nHowever, these restrictions generally do not apply if the developer runs the script themselves\\nor belongs to the same Google Workspace domain as the user.\\n\\n```\\n// Log the email address of the person running the script.\\nvar email \\u003d Session.getActiveUser().getEmail();\\nLogger.log(email);\\n```\\n@return the current user*/getActiveUser():User;\\n/**Gets the language setting of the current user as a string—for example, `en` for English.\\n\\n```\\n// Log the language setting of the person running the script.\\nLogger.log(Session.getActiveUserLocale());\\n```\\n@return a string that represents the user's language setting*/getActiveUserLocale():string;\\n/**Gets information about the user under whose authority the script is running. If the script is a\\nweb app set to \\\"execute as me\\\" (the developer), this returns the developer's user account. If\\nthe script is running under an [installable\\ntrigger](/apps-script/understanding_triggers), this returns the account of the user who created the trigger. In most other\\nscenarios, this returns the same account as [`getActiveUser()`](https://developers.google.com/apps-script/reference/base/session.html#getActiveUser()).\\n\\n```\\n// Log the email address of the user under whose authority the script is running.\\nvar email \\u003d Session.getEffectiveUser().getEmail();\\nLogger.log(email);\\n```\\n@return the user under whose authority the script is running*/getEffectiveUser():User;\\n/**Gets the time zone of the script. New scripts default to the owner's time zone, but the\\nscript's time zone can be changed by clicking __File \\u003e Project properties__ in the script\\neditor. Note that spreadsheets have a separate time zone, which can be changed by clicking\\n__File \\u003e Spreadsheet settings__ in Google Sheets. Spreadsheet time zones that differ from\\nthe script time zone are a frequent source of scripting bugs.\\n\\n```\\n// Log the time zone of the script.\\nvar timeZone \\u003d Session.getScriptTimeZone();\\nLogger.log(timeZone);\\n```\\n@return the time zone of the script*/getScriptTimeZone():string;\\n/**Gets a temporary key that is unique to the active user but does not reveal the user identity.\\nThe temporary key rotates every 30 days and is unique to the script.\\n\\n```\\n// Log the temporary key of the person running the script.\\nLogger.log(Session.getTemporaryActiveUserKey());\\n```\\n@return the temporary active user key*/getTemporaryActiveUserKey():string;\\n/**Gets the time zone of the script. New scripts default to the owner's time zone, but the\\nscript's time zone can be changed by clicking __File \\u003e Project properties__ in the script\\neditor. Note that spreadsheets have a separate time zone, which can be changed by clicking\\n__File \\u003e Spreadsheet settings__ in Google Sheets. Spreadsheet time zones that differ from\\nthe script time zone are a frequent source of scripting bugs.\\n\\n```\\n// Log the time zone of the script.\\nvar timeZone \\u003d Session.getTimeZone();\\nLogger.log(timeZone);\\n```\\n@deprecated\\n@return the time zone of the script*/getTimeZone():string;\\n/**Gets information about the current user.\\n@deprecated\\n@return the currently signed in user*/getUser():User;}const Session:Session;\"],[\"sites-app.d.ts\",\"interface SitesApp{AttachmentType:SitesApp._AttachmentType;PageType:SitesApp._PageType;\\n/**Creates a new Site by copying an existing Site.\\n\\nWarning: Copying a site takes time, from seconds to possibly many minutes, depending on the\\nsize of the site. Although the method returns right away, the copy is still going on in the\\nbackground, and not all pages in the copied site are immediately available. This method can\\nalso be used to instantiate a new site based on a given template.\\n\\n```\\n// This creates a site. Note that this only works for Google Workspace domains.\\n// There is no version of this API for consumer accounts.\\nvar site \\u003d SitesApp.createSite(\\\"examplepetstore.com\\\",\\n                               \\\"homepage\\\",\\n                               \\\"My Home Page\\\",\\n                               \\\"This is a new site I created!\\\");\\n\\nvar siteCopy \\u003d SitesApp.copySite(\\\"examplepetstore.com\\\",\\n                                 \\\"homepage-clone\\\",\\n                                 \\\"Cloned Home Page\\\",\\n                                 \\\"Begun, these clone wars have.\\\",\\n                                 site);\\n```\\n@deprecated\\n@param domain The Google Workspace hosted domain, such as examplepetstore.com.\\n@param name The webspace name found in the URL, such as mySite.\\n@param title The title of the site\\n@param summary The description of the site\\n@param site The Site to copy from. This can either be a site or a template. If the parameter is\\n    an existing site then the entire contents of the site will be copied. If the given Site is\\n    a template, then a new Site is created based on that template.\\n@return The site that was copied. Note that the copy is asynchronous, and the copy operation\\n    may still be ongoing even though a reference to the site has been returned.*/copySite(domain:string,name:string,title:string,summary:string,site:SitesApp.Site):SitesApp.Site;\\n/**Creates a new Site.\\n\\n```\\n// This creates a site. Note that this only works for Google Workspace domains.\\n// There is no version of this API for consumer accounts.\\nvar site \\u003d SitesApp.createSite(\\\"examplepetstore.com\\\",\\n                               \\\"homepage\\\",\\n                               \\\"My Home Page\\\",\\n                               \\\"This is a new site I created!\\\");\\n```\\n@deprecated\\n@param domain The Google Workspace hosted domain, such as examplepetstore.com.\\n@param name The path name found in the URL, such as mySite.\\n@param title The title of the site.\\n@param summary The description of the site.\\n@return The created site.*/createSite(domain:string,name:string,title:string,summary:string):SitesApp.Site;\\n/**Returns the active page, if the script is hosted in a container, or `null` otherwise.\\n\\n```\\nvar site \\u003d SitesApp.getActivePage();\\n```\\n@deprecated\\n@return The active container if it is a sites page.*/getActivePage():SitesApp.Page;\\n/**Returns the active container, if the script is hosted in a container, or `null`\\notherwise.\\n\\n```\\nvar site \\u003d SitesApp.getActiveSite();\\n```\\n@deprecated\\n@return The active container if it is a site.*/getActiveSite():SitesApp.Site;\\n/**Retrieves first 200 Sites belonging to this domain. To get all the sites, use the ~~[`getAllSites(domain, start, max)`](https://developers.google.com/apps-script/reference/sites/sites-app.html#getAllSites(String,Integer,Integer))~~ method to page through the results.\\n\\n```\\n// This writes the first page of sites belonging to a Google Workspace\\n// domain to the log.\\nvar sites \\u003d SitesApp.getAllSites(\\\"examplepetstore.com.\\\");\\nfor(var i in sites) {\\n  Logger.log(sites[i].getUrl());\\n}\\n```\\n@deprecated\\n@param domain The Google Workspace hosted domain, such as examplepetstore.com.\\n@return An array of sites belonging to the domain.*/getAllSites(domain:string):SitesApp.Site[];\\n/**Retrieves all Sites belonging to this domain.\\n\\n```\\n// This writes the a list of sites in domain example.com to the log.\\nvar pageStart \\u003d 0;\\nvar pageSize \\u003d 50;\\nwhile (true) {\\n  Logger.log(\\\"Loading sites starting at %s\\\", pageStart);\\n  var sites \\u003d SitesApp.getAllSites(\\\"examplepetstore.com\\\", pageStart, pageSize);\\n  if (sites.length \\u003d\\u003d 0) {\\n    break;\\n  }\\n  Logger.log(\\\"Got %s sites back\\\", sites.length);\\n  pageStart +\\u003d sites.length;\\n  for(var i in sites) {\\n    Logger.log(\\\"Found site: %s\\\", sites[i].getUrl());\\n  }\\n}\\n```\\n@deprecated\\n@param domain The Google Workspace hosted domain, such as examplepetstore.com.\\n@param start The index of the first site to return.\\n@param max The maximum number of results to return.\\n@return An array of sites belonging to the domain.*/getAllSites(domain:string,start:Integer,max:Integer):SitesApp.Site[];\\n/**Retrieves a Page by url.\\n\\n```\\n// This snippet retrieves the page at the given URL.\\n// Returns null if the page does not exist or if the URL given is invalid.\\nvar page \\u003d SitesApp.getPageByUrl(\\n                    \\\"https://sites.google.com/site/demositeappsscript/mylistpage\\\");\\nLogger.log(page.getName());\\n```\\n@deprecated\\n@param url The public url.\\n@return A ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~ instance corresponding to the page at the URL or `null` if the\\n    page does not exist.*/getPageByUrl(url:string):SitesApp.Page;\\n/**Retrieves a Site for the given Google Site, if the user is a consumer who does not have a\\nhosted domain.\\n\\n```\\n// Returns a Site instance\\nvar site \\u003d SitesApp.getSite('mysite');\\n```\\n@deprecated\\n@param name The webspace name found in the URL, such as mySite.\\n@return A Site instance corresponding to a consumer site.*/getSite(name:string):SitesApp.Site;\\n/**Retrieves a Site for the given Google Site.\\n\\n```\\n// Returns a Site instance\\nvar site \\u003d SitesApp.getSite('example.com', 'mysite');\\n```\\n@deprecated\\n@param domain The Google Workspace hosted domain, such as examplepetstore.com.\\n@param name The webspace name found in the URL, such as mySite.\\n@return A Site instance corresponding to a hosted domain.*/getSite(domain:string,name:string):SitesApp.Site;\\n/**Retrieves a Site by url.\\n\\n```\\n// This snippet retrieves the site at the given URL\\n// Throws an Invalid argument exception if the site does not exist or if\\n// the URL given is invalid\\nvar site \\u003d SitesApp.getSiteByUrl(\\\"https://sites.google.com/site/demosite\\\");\\nLogger.log(site.getName());\\n```\\n@deprecated\\n@param url The public url.\\n@return A Site found at the given URL.*/getSiteByUrl(url:string):SitesApp.Site;\\n/**Retrieves first page of Sites for a user, if the user is a consumer who does not have a hosted\\ndomain.\\n\\n```\\n// This writes the first page of sites owned by the user running\\n// the script to the log.\\nvar sites \\u003d SitesApp.getSites();\\nfor(var i in sites) {\\n  Logger.log(sites[i].getUrl());\\n}\\n```\\n@deprecated\\n@return An array of sites beloning to the user running the script.*/getSites():SitesApp.Site[];\\n/**Retrieves Sites for a user between the given bounds if the user is a consumer who does not have\\na hosted domain.\\n\\n```\\nvar sites \\u003d SitesApp.getSites(25, 50);\\nfor(var i in sites) {\\n  Logger.log(sites[i].getUrl());\\n}\\n```\\n@deprecated\\n@param start The index of the first site to return.\\n@param max The maximum number of results to return.\\n@return An array of all the sites owned for a user.*/getSites(start:Integer,max:Integer):SitesApp.Site[];\\n/**Retrieves first page of Sites belonging to this user in this domain.\\n\\n```\\n// This writes the first page of sites owned by the user running\\n// the script to the log.\\nvar sites \\u003d SitesApp.getSites(\\\"example.com\\\");\\nfor(var i in sites) {\\n  Logger.log(sites[i].getUrl());\\n}\\n```\\n@deprecated\\n@param domain The Google Workspace hosted domain, such as examplepetstore.com.\\n@return An array of sites beloning to the user running the script.*/getSites(domain:string):SitesApp.Site[];\\n/**Retrieves all Sites belonging to this user in this domain for the given range given.\\n\\n```\\n// This writes the a list of sites owned by the user running\\n// the script in positions bounded by the start and max values to the log.\\nvar sites \\u003d SitesApp.getSites(\\\"example.com\\\", 25, 50);\\nfor(var i in sites) {\\n  Logger.log(sites[i].getUrl());\\n}\\n```\\n@deprecated\\n@param domain The Google Workspace hosted domain, such as examplepetstore.com.\\n@param start The index of the first site to return.\\n@param max The maximum number of results to return.\\n@return An array of sites belonging to the user.*/getSites(domain:string,start:Integer,max:Integer):SitesApp.Site[];}module SitesApp{interface Site{\\n/**Add a new collaborator to the site\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nsite.addCollaborator(\\\"eric@example.com\\\");\\n```\\n@deprecated\\n@param email The email of the user to add as a collaborator\\n@return this site for chaining*/addCollaborator(email:string):SitesApp.Site;\\n/**Add a new collaborator to the website\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar currentUser \\u003d Session.getActiveUser();\\nsite.addCollaborator(currentUser);\\n```\\n@deprecated\\n@param user The user to add as a collaborator\\n@return this site for chaining*/addCollaborator(user:User):SitesApp.Site;\\n/**Adds the given user to the list of editors for the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~. If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param emailAddress The email address of the user to add.\\n@return This ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~, for chaining.*/addEditor(emailAddress:string):SitesApp.Site;\\n/**Adds the given user to the list of editors for the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~. If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param user A representation of the user to add.\\n@return This ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~, for chaining.*/addEditor(user:User):SitesApp.Site;\\n/**Adds the given array of users to the list of editors for the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~. If any of the\\nusers were already on the list of viewers, this method promotes them out of the list of\\nviewers.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~, for chaining.*/addEditors(emailAddresses:string[]):SitesApp.Site;\\n/**Add a new owner to the website\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nsite.addOwner(\\\"eric@example.com\\\");\\n```\\n@deprecated\\n@param email The email of the user to add as an owner\\n@return this site for chaining*/addOwner(email:string):SitesApp.Site;\\n/**Add a new owner to the website\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar currentUser \\u003d Session.getActiveUser();\\nsite.addOwner(currentUser);\\n```\\n@deprecated\\n@param user The user to add as an owner\\n@return this site for chaining*/addOwner(user:User):SitesApp.Site;\\n/**Adds the given user to the list of viewers for the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~. If the user was already\\non the list of editors, this method has no effect.\\n@param emailAddress The email address of the user to add.\\n@return This ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~, for chaining.*/addViewer(emailAddress:string):SitesApp.Site;\\n/**Adds the given user to the list of viewers for the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~. If the user was already\\non the list of editors, this method has no effect.\\n@param user A representation of the user to add.\\n@return This ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~, for chaining.*/addViewer(user:User):SitesApp.Site;\\n/**Adds the given array of users to the list of viewers for the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~. If any of the\\nusers were already on the list of editors, this method has no effect for them.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~, for chaining.*/addViewers(emailAddresses:string[]):SitesApp.Site;\\n/**Create a new Announcement\\n@deprecated\\n@param title The title of the Announcement page to create\\n@param html The HTML body of the page\\n@param parent The Parent page\\n@return The created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createAnnouncement(title:string,html:string,parent:SitesApp.Page):SitesApp.Page;\\n/**Create a new announcements page. Note that a parent site or page cannot have more than 500\\nchild pages.\\n\\n```\\n// This method can be called from both a Site instance\\n// as well as a Page instance\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nsite.createAnnouncementsPage(\\\"New Announcement\\\",\\n                             \\\"new-announcement\\\",\\n                             \\\"\\u003ch1\\u003eYour announcement goes here\\u003c/h1\\u003e\\\");\\n\\npage.createAnnouncementsPage(\\\"New Announcement\\\",\\n                             \\\"new-announcement-child\\\",\\n                             \\\"\\u003ch1\\u003eYour announcement goes here\\u003c/h1\\u003e\\\");\\n```\\n@deprecated\\n@param title the page title\\n@param name the page name\\n@param html the page content\\n@return the newly created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createAnnouncementsPage(title:string,name:string,html:string):SitesApp.Page;\\n/**Deprecated. Replaced with createComment on ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~.\\n\\nCreate a new Comment.\\n@deprecated\\n@param inReplyTo a GData feed url - meaningless and broken\\n@param html the comment content\\n@param parent the parent the comments shows up on\\n@return the newly created ~~[`Comment`](https://developers.google.com/apps-script/reference/sites/comment.html)~~*/createComment(inReplyTo:string,html:string,parent:SitesApp.Page):SitesApp.Comment;\\n/**Create a new file-cabinet page. Note that a parent site or page cannot have more than 500 child\\npages.\\n\\n```\\n// This method can be called from either a site or a page.\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nsite.createFileCabinetPage(\\\"New File Cabinet\\\",\\n                           \\\"new-file-cabinet\\\",\\n                           \\\"\\u003ch1\\u003eYour HTML here\\u003c/h1\\u003e\\\");\\n\\npage.createFileCabinetPage(\\\"New File Cabinet\\\",\\n                             \\\"new-file-cabinet-child\\\",\\n                             \\\"\\u003ch1\\u003eYour HTML here\\u003c/h1\\u003e\\\");\\n```\\n@deprecated\\n@param title the page title\\n@param name the page name\\n@param html the page content\\n@return The newly created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createFileCabinetPage(title:string,name:string,html:string):SitesApp.Page;\\n/**Deprecated. Replaced by createListItem on ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~.\\n\\nCreate a new ListItem.\\n@deprecated\\n@param html the item content - meaningless and broken.\\n@param columnNames the names of the columns, which are unnecessary\\n@param values the column values\\n@param parent the ListPage parent\\n@return the ~~[`ListItem`](https://developers.google.com/apps-script/reference/sites/list-item.html)~~ for chaining.*/createListItem(html:string,columnNames:string[],values:string[],parent:SitesApp.Page):SitesApp.ListItem;\\n/**Create a new list page. Note that a parent site or page cannot have more than 500 child pages.\\n\\n```\\n// This method can be called from either a site or a page.\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nsite.createListPage(\\\"New List Page\\\",\\n                    \\\"new-list-page\\\",\\n                    \\\"\\u003ch1\\u003eYour List Page HTML here\\u003c/h1\\u003e\\\",\\n                    [ \\\"col1\\\", \\\"col2\\\" ]);\\n\\npage.createListPage(\\\"New List Page\\\",\\n                    \\\"new-list-page-child\\\",\\n                    \\\"\\u003ch1\\u003eYour List Page HTML here\\u003c/h1\\u003e\\\",\\n                    [ \\\"col1\\\", \\\"col2\\\" ]);\\n```\\n@deprecated\\n@param title the page title\\n@param name the page name\\n@param html the page content\\n@param columnNames the column names used for the list\\n@return The newly created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createListPage(title:string,name:string,html:string,columnNames:string[]):SitesApp.Page;\\n/**Create a new page from a template. Note that a parent site or page cannot have more than 500\\nchild pages.\\n\\n```\\n// This method can be called from either a site or a page.\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar template \\u003d site.getTemplates()[0];\\n\\n// If an invalid template is passed, this will throw an \\\"Invalid Argument\\\" error.\\nsite.createPageFromTemplate(\\\"ClonedPage\\\", \\\"cloned-page\\\", template);\\n```\\n@deprecated\\n@param title the page title\\n@param name the page name\\n@param template the template page\\n@return the newly created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createPageFromTemplate(title:string,name:string,template:SitesApp.Page):SitesApp.Page;\\n/**Deprecated. Replaced by createWebAttachment on ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~.\\n\\nCreate a new Web Attachment.\\n@deprecated\\n@param title the attachment title\\n@param url the url of the attachment\\n@param parent the parent page\\n@return this Attachment for chaining.*/createWebAttachment(title:string,url:string,parent:SitesApp.Page):SitesApp.Attachment;\\n/**Create a new web page. Note that a parent site or page cannot have more than 500 child pages.\\n\\n```\\n// This method can be called from either a site or a page.\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nsite.createAnnouncementsPage(\\\"New Announcement\\\",\\n                             \\\"new-announcement\\\",\\n                             \\\"\\u003ch1\\u003eYour announcement goes here\\u003c/h1\\u003e\\\");\\n\\npage.createAnnouncementsPage(\\\"New Announcement\\\",\\n                             \\\"new-announcement-child\\\",\\n                             \\\"\\u003ch1\\u003eYour announcement goes here\\u003c/h1\\u003e\\\");\\n```\\n@deprecated\\n@param title the page title\\n@param name the page name\\n@param html the page content\\n@return The newly created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createWebPage(title:string,name:string,html:string):SitesApp.Page;\\n/**Deletes this site.\\n\\n```\\nvar site \\u003d SitesApp.getSite('example.com', 'mysite');\\nsite.deleteSite();\\n```\\n@deprecated*/deleteSite():void;\\n/**Gets an array of descendant pages (direct and indirect), up to a limit of 200 pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar pages \\u003d site.getAllDescendants();\\n```\\n@deprecated\\n@return an array of direct and indirect child pages*/getAllDescendants():SitesApp.Page[];\\n/**Gets an array of descendant pages, with optional advanced arguments.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar descendants \\u003d site.getAllDescendants({\\n  type: SitesApp.PageType.WEB_PAGE,\\n  start: 0,\\n  max: 25,\\n  includeDrafts: false,\\n  includeDeleted: true,\\n  search: \\\"target\\\"\\n});\\n\\nfor(var i in descendants) {\\n  Logger.log(descendants[i].getName());\\n}\\n```\\n@deprecated\\n@param options JavaScript object fields defined in the Advanced Arguments section below\\n@return an array of direct and indirect child pages of the given type*/getAllDescendants(options:Object):SitesApp.Page[];\\n/**Retrieves a list of announcements for the given Google Site.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar pages \\u003d site.getAnnouncements();\\nfor(var i in pages) {\\n  Logger.log(pages[i].getTitle());\\n}\\n```\\n@deprecated\\n@return an array of announcement @link Page} instances*/getAnnouncements():SitesApp.Page[];\\n/**Retrieves a list of announcements pages for the given Google Site.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar pages \\u003d site.getAnnouncementsPages();\\nfor(var i in pages) {\\n  Logger.log(pages[i].getTitle());\\n}\\n```\\n@deprecated\\n@return an array of ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~ instances*/getAnnouncementsPages():SitesApp.Page[];\\n/**Retrieves a list of attachments for the given Google Site.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar attachments \\u003d site.getAttachments();\\nfor(var i in attachments) {\\n  // Only hosted attachments have content types\\n  Logger.log(attachments[i].getContentType());\\n}\\n```\\n@deprecated\\n@return an array of ~~[`Attachment`](https://developers.google.com/apps-script/reference/sites/attachment.html)~~ instances*/getAttachments():SitesApp.Attachment[];\\n/**Gets a particular child page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar pages \\u003d site.getChildByName(\\\"childPage\\\");\\n```\\n@deprecated\\n@param name the child page name\\n@return the child page*/getChildByName(name:string):SitesApp.Page;\\n/**Gets an array of child pages, up to a limit of 200 pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar pages \\u003d site.getChildren();\\n```\\n@deprecated\\n@return an array of direct child pages*/getChildren():SitesApp.Page[];\\n/**Gets an array of child pages, with optional advanced arguments.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar childPages \\u003d site.getChildren({\\n  type: SitesApp.PageType.WEB_PAGE,\\n  start: 0,\\n  max: 25,\\n  includeDrafts: false,\\n  includeDeleted: true,\\n  search: \\\"target\\\"\\n});\\n\\nfor(var i in childPages) {\\n  Logger.log(childPages[i].getName());\\n}\\n```\\n@deprecated\\n@param options JavaScript object fields defined in the Advanced Arguments section below\\n@return an array of direct child pages of the given type*/getChildren(options:Object):SitesApp.Page[];\\n/**Retrieves list of collaborators for the site\\n\\n```\\nvar collaborators \\u003d SitesApp.getSite('example.com', 'mysite').getCollaborators();\\nfor(var i in collaborators) {\\n  Logger.log(collaborators[i].getEmail())\\n}\\n```\\n@deprecated\\n@return an array containing [`User`](https://developers.google.com/apps-script/reference/sites/../base/user.html) instances representing collaborators*/getCollaborators():User[];\\n/**Retrieves a list of comments for the given Google Site.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar comments \\u003d site.getComments();\\nfor(var i in comments) {\\n  Logger.log(comments[i].getContent());\\n}\\n```\\n@deprecated\\n@return an array of ~~[`Comment`](https://developers.google.com/apps-script/reference/sites/comment.html)~~ instances*/getComments():SitesApp.Comment[];\\n/**Gets the list of editors for this ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~.\\n@return An array of users with edit permission.*/getEditors():User[];\\n/**Retrieves a list of File Cabinet pages for the given Google Site.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar pages \\u003d site.getFileCabinetPages();\\nfor(var i in pages) {\\n  Logger.log(pages[i].getTitle());\\n}\\n```\\n@deprecated\\n@return an array of ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~ instances*/getFileCabinetPages():SitesApp.Page[];\\n/**Retrieves a list of site List items for the given Google Site.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar listItems \\u003d site.getListItems();\\nfor(var i in listItems) {\\n  Logger.log(listItems[i].getLastUpdated());\\n}\\n```\\n@deprecated\\n@return an array of ~~[`ListItem`](https://developers.google.com/apps-script/reference/sites/list-item.html)~~ instances*/getListItems():SitesApp.ListItem[];\\n/**Retrieves a list of site List pages for the given Google Site.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar pages \\u003d site.getListPages();\\nfor(var i in pages) {\\n  Logger.log(pages[i].getTitle());\\n}\\n```\\n@deprecated\\n@return an array of ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~ instances*/getListPages():SitesApp.Page[];\\n/**Return the name of the site\\n\\n```\\nvar name \\u003d SitesApp.getSite('example.com', 'mysite').getName();\\n```\\n@deprecated\\n@return the name of this Site instance*/getName():string;\\n/**Retrieves list of owners for the site\\n\\n```\\nvar owners \\u003d SitesApp.getSite('example.com', 'mysite').getOwners();\\nfor(var i in owners) {\\n  Logger.log(owners[i].getEmail())\\n}\\n```\\n@deprecated\\n@return an array containing [`User`](https://developers.google.com/apps-script/reference/sites/../base/user.html) instances representing owners*/getOwners():User[];\\n/**Retrieves the feed url of this Site.\\n\\n```\\nvar site \\u003d SitesApp.getSite('example.com', 'mysite');\\nvar url \\u003d site.getSelfLink();\\n```\\n@deprecated\\n@return the url of this Site's feed*/getSelfLink():string;\\n/**Return the siteName of the site\\n\\n```\\nvar site \\u003d SitesApp.getSite('example.com', 'mysite');\\nvar url \\u003d site.getSelfLink();\\n```\\n@deprecated\\n@return the siteName of the site*/getSiteName():string;\\n/**Return the summary of the web site\\n\\n```\\nvar summary \\u003d SitesApp.getSite('example.com', 'mysite').getSummary();\\n```\\n@deprecated\\n@return the summary of this site*/getSummary():string;\\n/**Returns all template pages.\\n\\n```\\nvar templates \\u003d SitesApp.getSite('example.com', 'mysite').getTemplates();\\nfor(var i in templates) {\\n  Logger.log(templates[i].getName())\\n}\\n```\\n@deprecated\\n@return an array containing ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~ instances representing templates*/getTemplates():SitesApp.Page[];\\n/**Gets the theme of the site\\n\\n```\\nvar theme \\u003d SitesApp.getSite('example.com', 'mysite').getTheme();\\n```\\n@deprecated\\n@return the theme of this site*/getTheme():string;\\n/**Return the title of the site\\n\\n```\\nvar title \\u003d SitesApp.getSite('example.com', 'mysite').getTitle();\\n```\\n@deprecated\\n@return the title of this site*/getTitle():string;\\n/**Retrieves the url of this Site.\\n\\n```\\nvar url \\u003d SitesApp.getSite('example.com', 'mysite').getUrl();\\n```\\n@deprecated\\n@return the url of this Site instance*/getUrl():string;\\n/**Gets the list of viewers and commenters for this ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~.\\n@return An array of users with view or comment permission.*/getViewers():User[];\\n/**Retrieves a list of web attachments for the given Google Site.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar attachments \\u003d site.getWebAttachments();\\nfor(var i in attachments) {\\n  // Only web attachments have URLs\\n  Logger.log(attachments[i].getUrl());\\n}\\n```\\n@deprecated\\n@return an array of ~~[`Attachment`](https://developers.google.com/apps-script/reference/sites/attachment.html)~~ instances*/getWebAttachments():SitesApp.Attachment[];\\n/**Retrieves a list of web pages for the given Google Site.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar pages \\u003d site.getWebPages();\\nfor(var i in pages) {\\n  Logger.log(pages[i].getTitle());\\n}\\n```\\n@deprecated\\n@return an array of ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~ instances*/getWebPages():SitesApp.Page[];\\n/**Removes a collaborator from the site by user email\\n\\n```\\n// This snippet removes the user with the given email from the collaborators list\\nvar site \\u003d SitesApp.getSite('example.com', 'mysite');\\nsite.removeCollaborator(\\\"eric@example.com\\\");\\n```\\n@deprecated\\n@param email The email of the user to remove from the collaborators\\n@return the site instance for method chaining*/removeCollaborator(email:string):SitesApp.Site;\\n/**Removes a collaborator from the site\\n\\n```\\n// This snippet removes the current user from the list of collaborators\\nvar site \\u003d SitesApp.getSite('example.com', 'mysite');\\nsite.removeCollaborator(Session.getActiveUser());\\n```\\n@deprecated\\n@param user A user to remove from the list of collaborators\\n@return the site instance for method chaining*/removeCollaborator(user:User):SitesApp.Site;\\n/**Removes the given user from the list of editors for the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~. This method doesn't\\nblock users from accessing the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ if they belong to a class of users who have\\ngeneral access—for example, if the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ is shared with the user's entire\\ndomain, or if the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param emailAddress The email address of the user to remove.\\n@return This ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~, for chaining.*/removeEditor(emailAddress:string):SitesApp.Site;\\n/**Removes the given user from the list of editors for the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~. This method doesn't\\nblock users from accessing the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ if they belong to a class of users who have\\ngeneral access—for example, if the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ is shared with the user's entire\\ndomain, or if the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param user A representation of the user to remove.\\n@return This ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~, for chaining.*/removeEditor(user:User):SitesApp.Site;\\n/**Removes owner from the site by user email\\n\\n```\\n// This snippet removes the user with the given email from the owners list\\nvar site \\u003d SitesApp.getSite('example.com', 'mysite');\\nsite.removeOwner(\\\"eric@example.com\\\");\\n```\\n@deprecated\\n@param email The email of the user to remove from the owners\\n@return the site instance for method chaining*/removeOwner(email:string):SitesApp.Site;\\n/**Removes owner from the site\\n\\n```\\n// This snippet removes the current user from the list of owners\\nvar site \\u003d SitesApp.getSite('example.com', 'mysite');\\nsite.removeOwner(Session.getActiveUser());\\n```\\n@deprecated\\n@param user A user to remove from the list of owners\\n@return the site instance for method chaining*/removeOwner(user:User):SitesApp.Site;\\n/**Removes the given user from the list of viewers and commenters for the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~. This\\nmethod has no effect if the user is an editor, not a viewer or commenter. This method also\\ndoesn't block users from accessing the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ if they belong to a class of users who\\nhave general access—for example, if the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ is shared with the user's\\nentire domain, or if the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param emailAddress The email address of the user to remove.\\n@return This ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ for chaining.*/removeViewer(emailAddress:string):SitesApp.Site;\\n/**Removes the given user from the list of viewers and commenters for the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~. This\\nmethod has no effect if the user is an editor, not a viewer. This method also doesn't block\\nusers from accessing the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ if they belong to a class of users who have general\\naccess—for example, if the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ is shared with the user's entire domain, or\\nif the ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param user A representation of the user to remove.\\n@return This ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~ for chaining.*/removeViewer(user:User):SitesApp.Site;\\n/**Gets an array of descendant pages that match a search query, up to a limit of 200 pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar matches \\u003d site.search(\\\"targetText\\\");\\n\\nfor(var i in matches) {\\n  Logger.log(matches[i].getName());\\n}\\n```\\n@deprecated\\n@param query the full text search query to match\\n@return an array of direct and indirect child pages of the given type*/search(query:string):SitesApp.Page[];\\n/**Gets an array of descendant pages that match a search query, with optional advanced arguments.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar childPages \\u003d site.getChildren({\\n  type: SitesApp.PageType.WEB_PAGE,\\n  start: 0,\\n  max: 25,\\n  includeDrafts: false,\\n  includeDeleted: true,\\n  search: \\\"target\\\"\\n});\\n\\nfor(var i in childPages) {\\n  Logger.log(childPages[i].getName());\\n}\\n```\\n@deprecated\\n@param query the full text search query to match\\n@param options JavaScript object fields defined in the Advanced Arguments section below\\n@return an array of direct and indirect child pages of the given type*/search(query:string,options:Object):SitesApp.Page[];\\n/**Set the summary of the web site\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n// All of the setter methods return the site instance so setters\\n// can be chained\\nsite.setTitle(\\\"My Site\\\")\\n    .setSummary(\\\"This is my site\\\")\\n    .setTheme(\\\"simple\\\");\\n```\\n@deprecated\\n@param summary A string summary describing the site\\n@return the site for method chaining*/setSummary(summary:string):SitesApp.Site;\\n/**Sets the theme of the site\\n\\nTheme must be a valid theme string. For an exhaustive list, write a test method and pass an\\ninvalid value to setTheme(). The script will throw a Service error and return an exhaustive\\nlist of available themes. The list of available themes is also available under Manage\\nSite-\\u003eThemes. Theme name strings are generally the same as the theme name on the Themes page in\\nlower cases with spaces and special characters removed. For example, the string for \\\"Terra:\\nWater\\\" would be \\\"terrawater\\\".\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n// All of the setter methods return the site instance so setters\\n// can be chained\\nsite.setTitle(\\\"My Site\\\")\\n    .setSummary(\\\"This is my site\\\")\\n    .setTheme(\\\"simple\\\");\\n```\\n@deprecated\\n@param theme a string name for the theme to set for this ~~[`Site`](https://developers.google.com/apps-script/reference/sites/site.html)~~\\n@return the site for method chaining*/setTheme(theme:string):SitesApp.Site;\\n/**Set the title of the site\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n// All of the setter methods return the site instance so setters\\n// can be chained\\nsite.setTitle(\\\"My Site\\\")\\n    .setSummary(\\\"This is my site\\\")\\n    .setTheme(\\\"simple\\\");\\n```\\n@deprecated\\n@param title the new title of the site\\n@return the site for method chaining*/setTitle(title:string):SitesApp.Site;}interface PageType{}interface _PageType{ANNOUNCEMENT:PageType;ANNOUNCEMENTS_PAGE:PageType;FILE_CABINET_PAGE:PageType;LIST_PAGE:PageType;WEB_PAGE:PageType;}interface Page{\\n/**Add a new column to the list. Only valid for list pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar page \\u003d site.getChildByName(\\\"listpage\\\");\\n// Only valid on List pages. Check for the type like so:\\n//     if(page.getPageType() \\u003d\\u003d SitesApp.PageType.LIST_PAGE))\\nvar columns \\u003d page.addColumn(\\\"new-column\\\");\\n```\\n@deprecated\\n@param name the new column's name\\n@return the newly created column*/addColumn(name:string):SitesApp.Column;\\n/**Deprecated. Add a comment to the page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\npage.addComment(\\\"This is a comment created automatically by a script using the account \\\" +\\n                \\\"of the user running the script\\\");\\n```\\n@deprecated\\n@param content the comment content\\n@return the newly created comment*/addComment(content:string):SitesApp.Comment;\\n/**Add an attachment to the page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\n// Create a new blob and attach it. Many useful functions also return\\n// blobs file uploads, URLFetch\\nvar blob \\u003d Utilities.newBlob(\\\"Here is some data\\\", \\\"text/plain\\\", \\\"data.txt\\\");\\n\\n// Note that the filename must be unique or this call will fail\\npage.addHostedAttachment(blob);\\n```\\n@deprecated\\n@param blob the data for the attachment\\n@return the newly created attachment*/addHostedAttachment(blob:BlobSource):SitesApp.Attachment;\\n/**Add an attachment to the page. This version of the function allows for a description.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\n// Create a new blob and attach it. Many useful: functions also return\\n// blobs file uploads, URLFetch\\nvar blob \\u003d Utilities.newBlob(\\\"Here is some data\\\", \\\"text/plain\\\", \\\"data.txt\\\");\\n\\n// Note that the filename must be unique or this call will fail\\npage.addHostedAttachment(blob, \\\"Some newly created data\\\");\\n```\\n@deprecated\\n@param blob the data for the attachment\\n@param description a description of the attachment\\n@return the newly created attachment*/addHostedAttachment(blob:BlobSource,description:string):SitesApp.Attachment;\\n/**Add a list item to the list. Only valid for list pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar page \\u003d site.getChildByName(\\\"listpage\\\");\\n// Only valid on List pages. Check for the type like so:\\n//     if(page.getPageType() \\u003d\\u003d SitesApp.PageType.LIST_PAGE))\\n// Returns only one item\\npage.addListItem([ \\\"John\\\", \\\"Smith\\\", \\\"123 Main St\\\"]);\\n```\\n@deprecated\\n@param values the values for each column\\n@return the newly created ~~[`ListItem`](https://developers.google.com/apps-script/reference/sites/list-item.html)~~*/addListItem(values:string[]):SitesApp.ListItem;\\n/**Add a web attachment to the page. Only valid for file cabinet pages.\\n\\nWeb attachments are links - they are not actually hosted by Google Sites.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n// fetch the child - this must be a File Cabinet page\\n// to programmatically check this, do a comparison:\\n//    if(page.getPageType() \\u003d\\u003d SitesApp.PageType.FILE_CABINET_PAGE)\\nvar page \\u003d site.getChildByName(\\\"files\\\");\\npage.addWebAttachment(\\\"Google Robots file\\\",\\n                      \\\"This is Google's robots.txt file\\\",\\n                      \\\"http://www.google.com/robots.txt\\\");\\n```\\n@deprecated\\n@param title the title of the attachment\\n@param description a description of the attachment\\n@param url the url of the file being attached\\n@return the newly created attachment*/addWebAttachment(title:string,description:string,url:string):SitesApp.Attachment;\\n/**Create an announcements for this page. Only valid for announcement pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\n// This snippet will only work with announcement pages - this is different\\n// from a page that is an announcement (individual announcements). To check\\n// if this method can be called:\\n//    if(page.getPageType() \\u003d\\u003d SitesApp.PageType.ANNOUNCEMENTS_PAGE))\\nvar page \\u003d site.getChildByName(\\\"news\\\");\\npage.createAnnouncement(\\\"Breaking news!\\\", \\\"\\u003ch1\\u003eApps Script rocks!\\u003c/h1\\u003e\\\");\\n```\\n@deprecated\\n@param title the page title\\n@param html the page content\\n@return the newly created Announcements*/createAnnouncement(title:string,html:string):SitesApp.Page;\\n/**Create an announcements for this page. Only valid for announcement pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\n// This snippet will only work with announcement pages - this is different\\n// from a page that is an announcement (individual announcements). To check\\n// if this method can be called:\\n//    if(page.getPageType() \\u003d\\u003d SitesApp.PageType.ANNOUNCEMENTS_PAGE))\\nvar page \\u003d site.getChildByName(\\\"news\\\");\\npage.createAnnouncement(\\\"Breaking news!\\\",\\n                        \\\"\\u003ch1\\u003eApps Script rocks!\\u003c/h1\\u003e\\\",\\n                        true);\\n```\\n@deprecated\\n@param title the page title\\n@param html the page content\\n@param asDraft whether to make the announcement a draft\\n@return the newly created Announcements*/createAnnouncement(title:string,html:string,asDraft:boolean):SitesApp.Page;\\n/**Create a new announcements page. Note that a parent site or page cannot have more than 500\\nchild pages.\\n\\n```\\n// This method can be called from both a Site instance\\n// as well as a Page instance\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nsite.createAnnouncementsPage(\\\"New Announcement\\\",\\n                             \\\"new-announcement\\\",\\n                             \\\"\\u003ch1\\u003eYour announcement goes here\\u003c/h1\\u003e\\\");\\n\\npage.createAnnouncementsPage(\\\"New Announcement\\\",\\n                             \\\"new-announcement-child\\\",\\n                             \\\"\\u003ch1\\u003eYour announcement goes here\\u003c/h1\\u003e\\\");\\n```\\n@deprecated\\n@param title the page title\\n@param name the page name\\n@param html the page content\\n@return the newly created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createAnnouncementsPage(title:string,name:string,html:string):SitesApp.Page;\\n/**Create a new file-cabinet page. Note that a parent site or page cannot have more than 500 child\\npages.\\n\\n```\\n// This method can be called from either a site or a page.\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nsite.createFileCabinetPage(\\\"New File Cabinet\\\",\\n                           \\\"new-file-cabinet\\\",\\n                           \\\"\\u003ch1\\u003eYour HTML here\\u003c/h1\\u003e\\\");\\n\\npage.createFileCabinetPage(\\\"New File Cabinet\\\",\\n                             \\\"new-file-cabinet-child\\\",\\n                             \\\"\\u003ch1\\u003eYour HTML here\\u003c/h1\\u003e\\\");\\n```\\n@deprecated\\n@param title the page title\\n@param name the page name\\n@param html the page content\\n@return The newly created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createFileCabinetPage(title:string,name:string,html:string):SitesApp.Page;\\n/**Create a new list page. Note that a parent site or page cannot have more than 500 child pages.\\n\\n```\\n// This method can be called from either a site or a page.\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nsite.createListPage(\\\"New List Page\\\",\\n                    \\\"new-list-page\\\",\\n                    \\\"\\u003ch1\\u003eYour List Page HTML here\\u003c/h1\\u003e\\\",\\n                    [ \\\"col1\\\", \\\"col2\\\" ]);\\n\\npage.createListPage(\\\"New List Page\\\",\\n                    \\\"new-list-page-child\\\",\\n                    \\\"\\u003ch1\\u003eYour List Page HTML here\\u003c/h1\\u003e\\\",\\n                    [ \\\"col1\\\", \\\"col2\\\" ]);\\n```\\n@deprecated\\n@param title the page title\\n@param name the page name\\n@param html the page content\\n@param columnNames the column names used for the list\\n@return The newly created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createListPage(title:string,name:string,html:string,columnNames:string[]):SitesApp.Page;\\n/**Create a new page from a template. Note that a parent site or page cannot have more than 500\\nchild pages.\\n\\n```\\n// This method can be called from either a site or a page.\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar template \\u003d site.getTemplates()[0];\\n\\n// If an invalid template is passed, this will throw an \\\"Invalid Argument\\\" error.\\nsite.createPageFromTemplate(\\\"ClonedPage\\\", \\\"cloned-page\\\", template);\\n```\\n@deprecated\\n@param title the page title\\n@param name the page name\\n@param template the template page\\n@return the newly created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createPageFromTemplate(title:string,name:string,template:SitesApp.Page):SitesApp.Page;\\n/**Create a new web page. Note that a parent site or page cannot have more than 500 child pages.\\n\\n```\\n// This method can be called from either a site or a page.\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nsite.createAnnouncementsPage(\\\"New Announcement\\\",\\n                             \\\"new-announcement\\\",\\n                             \\\"\\u003ch1\\u003eYour announcement goes here\\u003c/h1\\u003e\\\");\\n\\npage.createAnnouncementsPage(\\\"New Announcement\\\",\\n                             \\\"new-announcement-child\\\",\\n                             \\\"\\u003ch1\\u003eYour announcement goes here\\u003c/h1\\u003e\\\");\\n```\\n@deprecated\\n@param title the page title\\n@param name the page name\\n@param html the page content\\n@return The newly created ~~[`Page`](https://developers.google.com/apps-script/reference/sites/page.html)~~*/createWebPage(title:string,name:string,html:string):SitesApp.Page;\\n/**Deletes this page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\n// Delete ALL the pages!\\nvar pages \\u003d site.getAllDescendants();\\nfor(var i in pages) {\\n  pages[i].deletePage();\\n}\\n```\\n@deprecated*/deletePage():void;\\n/**Gets an array of descendant pages (direct and indirect), up to a limit of 200 pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar pages \\u003d site.getAllDescendants();\\n```\\n@deprecated\\n@return an array of direct and indirect child pages*/getAllDescendants():SitesApp.Page[];\\n/**Gets an array of descendant pages, with optional advanced arguments.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar descendants \\u003d site.getAllDescendants({\\n  type: SitesApp.PageType.WEB_PAGE,\\n  start: 0,\\n  max: 25,\\n  includeDrafts: false,\\n  includeDeleted: true,\\n  search: \\\"target\\\"\\n});\\n\\nfor(var i in descendants) {\\n  Logger.log(descendants[i].getName());\\n}\\n```\\n@deprecated\\n@param options JavaScript object fields defined in the Advanced Arguments section below\\n@return an array of direct and indirect child pages of the given type*/getAllDescendants(options:Object):SitesApp.Page[];\\n/**Get the announcements for this page. Only valid for announcement pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\n// This snippet will only work with announcement pages - this is different\\n// from a page that is an announcement (individual announcements). To check\\n// if this method can be called:\\n//    if(page.getPageType() \\u003d\\u003d SitesApp.PageType.ANNOUNCEMENTS_PAGE))\\nvar page \\u003d site.getChildByName(\\\"news\\\");\\nvar announcements \\u003d page.getAnnouncements();\\n\\nfor(var i in announcements) {\\n  Logger.log(announcements[i].getHtmlContent());\\n}\\n```\\n@deprecated\\n@return an array of Announcements*/getAnnouncements():SitesApp.Page[];\\n/**Get the announcements for this page. Only valid for announcement pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\n// This snippet will only work with announcement pages - this is different\\n// from a page that is an announcement (individual announcements). To check\\n// if this method can be called:\\n//    if(page.getPageType() \\u003d\\u003d SitesApp.PageType.ANNOUNCEMENTS_PAGE))\\nvar page \\u003d site.getChildByName(\\\"news\\\");\\nvar announcements \\u003d page.getAnnouncements({ start: 0,\\n                                            max: 20,\\n                                            includeDrafts: false,\\n                                            includeDeleted: false,\\n                                            search: \\\"Breaking\\\" });\\n\\nfor(var i in announcements) {\\n  Logger.log(announcements[i].getHtmlContent());\\n}\\n```\\n@deprecated\\n@param optOptions A JavaScript object containing advanced parameters\\n@return an array of Announcements*/getAnnouncements(optOptions:Object):SitesApp.Page[];\\n/**Get the attachments for this page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nvar attachments \\u003d page.getAttachments();\\nfor(var i in attachments) {\\n  Logger.log(attachments[i].getTitle());\\n}\\n```\\n@deprecated\\n@return an array of Attachments*/getAttachments():SitesApp.Attachment[];\\n/**Get the attachments for this page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\n// This returns only one attachment\\nvar attachments \\u003d page.getAttachments({ start: 0, max: 1});\\nfor(var i in attachments) {\\n  Logger.log(attachments[i].getTitle());\\n}\\n```\\n@deprecated\\n@param optOptions a JavaScript object containing optional parameters\\n@return an array of Attachments*/getAttachments(optOptions:Object):SitesApp.Attachment[];\\n/**Get the emails of the authors of the page\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nvar authors \\u003d page.getAuthors();\\n\\nfor(var i in authors) {\\n  Logger.log(authors[i]);\\n}\\n```\\n@deprecated\\n@return an array of author email addresses*/getAuthors():string[];\\n/**Gets a particular child page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar pages \\u003d site.getChildByName(\\\"childPage\\\");\\n```\\n@deprecated\\n@param name the child page name\\n@return the child page*/getChildByName(name:string):SitesApp.Page;\\n/**Gets an array of child pages, up to a limit of 200 pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar pages \\u003d site.getChildren();\\n```\\n@deprecated\\n@return an array of direct child pages*/getChildren():SitesApp.Page[];\\n/**Gets an array of child pages, with optional advanced arguments.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar childPages \\u003d site.getChildren({\\n  type: SitesApp.PageType.WEB_PAGE,\\n  start: 0,\\n  max: 25,\\n  includeDrafts: false,\\n  includeDeleted: true,\\n  search: \\\"target\\\"\\n});\\n\\nfor(var i in childPages) {\\n  Logger.log(childPages[i].getName());\\n}\\n```\\n@deprecated\\n@param options JavaScript object fields defined in the Advanced Arguments section below\\n@return an array of direct child pages of the given type*/getChildren(options:Object):SitesApp.Page[];\\n/**Get the columns for the list. Only valid for list pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar page \\u003d site.getChildByName(\\\"listpage\\\");\\n// Only valid on List pages. Check for the type like so:\\n//     if(page.getPageType() \\u003d\\u003d SitesApp.PageType.LIST_PAGE))\\nvar columns \\u003d page.getColumns();\\n\\nfor(var i in columns) {\\n  Logger.log(columns[i].getName());\\n}\\n```\\n@deprecated\\n@return an array of ~~[`Column`](https://developers.google.com/apps-script/reference/sites/column.html)~~ instances*/getColumns():SitesApp.Column[];\\n/**Deprecated. Get the comments for this page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nvar comments \\u003d page.getComments();\\nfor(var i in comments) {\\n  Logger.log(comments[i].getContent());\\n}\\n```\\n@deprecated\\n@return an array of Comments.*/getComments():SitesApp.Comment[];\\n/**Deprecated. Get the comments for this page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\n// Return only one comment\\nvar comments \\u003d page.getComments({ start:0, max: 1});\\nfor(var i in comments) {\\n  Logger.log(comments[i].getContent());\\n}\\n```\\n@deprecated\\n@param optOptions a JavaScript object containing optional parameters\\n@return an array of Comments.*/getComments(optOptions:Object):SitesApp.Comment[];\\n/**Return the date this page was first published.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getName() + \\\" was published \\\" + page.getDatePublished());\\n```\\n@deprecated\\n@return the date of original publication*/getDatePublished():Date;\\n/**Get the HTML content of the page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getHtmlContent());\\n```\\n@deprecated\\n@return the html content*/getHtmlContent():string;\\n/**Returns whether the page is in draft mode. Only valid for announcements.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\nLogger.log(\\\"Is this Announcement Page a draft?\\\", page.getIsDraft());\\n```\\n@deprecated\\n@return whether the page is in draft mode*/getIsDraft():boolean;\\n/**Return the last edit date, which includes only content edits.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getName() + \\\" was last updated \\\" + page.getLastEdited());\\n```\\n@deprecated\\n@return the date the page was last updated, including only content edits*/getLastEdited():Date;\\n/**Return the last updated date, which includes non-content changes like moving.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getName() + \\\" was last updated \\\" + page.getLastUpdated());\\n```\\n@deprecated\\n@return the date the page was last updated with non-content changes*/getLastUpdated():Date;\\n/**Get the list items for the list. Only valid for list pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar page \\u003d site.getChildByName(\\\"listpage\\\");\\n// Only valid on List pages. Check for the type like so:\\n//     if(page.getPageType() \\u003d\\u003d SitesApp.PageType.LIST_PAGE))\\nvar items \\u003d page.getListItems();\\n\\nfor(var i in items) {\\n  Logger.log(items[i].getValueByName(\\\"Status\\\"));\\n}\\n```\\n@deprecated\\n@return an array of ~~[`ListItem`](https://developers.google.com/apps-script/reference/sites/list-item.html)~~ instances*/getListItems():SitesApp.ListItem[];\\n/**Get the list items for the list. Only valid for list pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\n\\nvar page \\u003d site.getChildByName(\\\"listpage\\\");\\n// Only valid on List pages. Check for the type like so:\\n//     if(page.getPageType() \\u003d\\u003d SitesApp.PageType.LIST_PAGE))\\n// Returns only one item\\nvar items \\u003d page.getListItems({ start:0, max: 1 });\\n\\nfor(var i in items) {\\n  Logger.log(items[i].getValueByName(\\\"Status\\\"));\\n}\\n```\\n@deprecated\\n@param optOptions A JavaScript object of optional parameters\\n@return an array of ~~[`ListItem`](https://developers.google.com/apps-script/reference/sites/list-item.html)~~ instances*/getListItems(optOptions:Object):SitesApp.ListItem[];\\n/**Return the page's name.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getName());\\n```\\n@deprecated\\n@return the name of this page*/getName():string;\\n/**Deprecated. Replaced with getName for consistency.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getPageName());\\n```\\n@deprecated\\n@return the name of this page*/getPageName():string;\\n/**Return the type of this page as a SitesApp.PageType enum.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nvar pageType \\u003d page.getPageType();\\nif(pageType \\u003d\\u003d SitesApp.PageType.WEB_PAGE) {\\n   Logger.log(page.getName() + \\\" is a Web Page\\\");\\n}\\n```\\n@deprecated\\n@return a PageType enum telling whether this is a Web, List, Announcement or File Cabinet Page*/getPageType():SitesApp.PageType;\\n/**Return the parent of this page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getName() + \\\" parent: \\\" + page.getParent().getName());\\n```\\n@deprecated\\n@return the parent page of this page*/getParent():SitesApp.Page;\\n/**Deprecated. Returns the gData feed link of this page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getSelfLink());\\n```\\n@deprecated\\n@return the gData feed link*/getSelfLink():string;\\n/**Returns the plain-text page content.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getName() + \\\" content: \\\" + page.getTextContent());\\n```\\n@deprecated\\n@return the plain-text content of the page*/getTextContent():string;\\n/**Return the page's title.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getTitle());\\n```\\n@deprecated\\n@return the title of this page*/getTitle():string;\\n/**Get the url of the page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\nLogger.log(page.getUrl());\\n```\\n@deprecated\\n@return the url of the page*/getUrl():string;\\n/**Returns whether a page has been deleted.\\n@deprecated\\n@return whether the page has been deleted*/isDeleted():boolean;\\n/**Returns whether this page is a copyable template.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar firstTemplate \\u003d site.getTemplates()[0];\\nif(firstTemplate.isTemplate()) {\\n  Logger.log(\\\"This will always return true\\\");\\n}\\n```\\n@deprecated\\n@return whether this page is a template*/isTemplate():boolean;\\n/**Publish this page as a copyable template.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\n// Turn this page into a publishable template\\npage.publishedAsTemplate(\\\"template-name\\\");\\n```\\n@deprecated\\n@param name The name of the new template\\n@return the newly published template*/publishAsTemplate(name:string):SitesApp.Page;\\n/**Gets an array of descendant pages that match a search query, up to a limit of 200 pages.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar matches \\u003d site.search(\\\"targetText\\\");\\n\\nfor(var i in matches) {\\n  Logger.log(matches[i].getName());\\n}\\n```\\n@deprecated\\n@param query the full text search query to match\\n@return an array of direct and indirect child pages of the given type*/search(query:string):SitesApp.Page[];\\n/**Gets an array of descendant pages that match a search query, with optional advanced arguments.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar childPages \\u003d site.getChildren({\\n  type: SitesApp.PageType.WEB_PAGE,\\n  start: 0,\\n  max: 25,\\n  includeDrafts: false,\\n  includeDeleted: true,\\n  search: \\\"target\\\"\\n});\\n\\nfor(var i in childPages) {\\n  Logger.log(childPages[i].getName());\\n}\\n```\\n@deprecated\\n@param query the full text search query to match\\n@param options JavaScript object fields defined in the Advanced Arguments section below\\n@return an array of direct and indirect child pages of the given type*/search(query:string,options:Object):SitesApp.Page[];\\n/**Set the HTML content of the page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\npage.setHtmlContent(\\\"\\u003ch1\\u003eNew Page Content\\u003c/h1\\u003e\\\");\\n```\\n@deprecated\\n@param html the new content\\n@return this Page for chaining*/setHtmlContent(html:string):SitesApp.Page;\\n/**Sets whether the page is in draft mode. Only valid for announcements.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\n\\n// Take the page out of draft mode\\npage.setIsDraft(false);\\n```\\n@deprecated\\n@param draft the new status\\n@return this Page for chaining*/setIsDraft(draft:boolean):SitesApp.Page;\\n/**Set this page's name.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\npage.setName(\\\"new-name\\\");\\n```\\n@deprecated\\n@param name the new name\\n@return this Page for chaining*/setName(name:string):SitesApp.Page;\\n/**Set the parent of this page.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar child \\u003d site.getChildByName(\\\"childToBeMoved\\\");\\nvar parent \\u003d site.getChildByName(\\\"newParent\\\");\\nchild.setParent(parent);\\n```\\n@deprecated\\n@param parent the new parent\\n@return this Page for chaining*/setParent(parent:SitesApp.Page):SitesApp.Page;\\n/**Set the page's title.\\n\\n```\\nvar site \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\");\\nvar page \\u003d site.getChildren()[0];\\npage.setTitle(\\\"New Title\\\");\\n```\\n@deprecated\\n@param title the new title\\n@return this Page for chaining*/setTitle(title:string):SitesApp.Page;}interface ListItem{\\n/**Deletes this list item.\\n\\n```\\n// This code sample deletes all list items from a List page\\n// Running this code sample against a Page that is a standard web page will\\n// cause getListItems() to throw an exception\\nvar page \\u003d SitesApp.getSite('demositeappsscript').getChildByName('mylistpage');\\nvar items \\u003d page.getListItems();\\nfor(var i \\u003d 0; i \\u003c items.length; i++) {\\n  items[i].deleteListItem();\\n}\\n```\\n@deprecated*/deleteListItem():void;\\n/**Return the date this list item was first published.\\n\\n```\\nvar page \\u003d SitesApp.getSite('example.com', 'mysite').getChildByName('mylistpage');\\nvar items \\u003d page.getListItems();\\nvar date \\u003d items[0].getDatePublished();\\n```\\n@deprecated\\n@return the date of original publication*/getDatePublished():Date;\\n/**Return the date this comment was last updated.\\n\\n```\\nvar page \\u003d SitesApp.getSite('example.com', 'mysite').getChildByName('mylistpage');\\nvar items \\u003d page.getListItems();\\nvar date \\u003d items[0].getLastUpdated();\\n```\\n@deprecated\\n@return the last updated date*/getLastUpdated():Date;\\n/**Get the parent page of this list item.\\n\\n```\\nvar page \\u003d SitesApp.getSite('example.com', 'mysite').getChildByName('mylistpage');\\nvar items \\u003d page.getListItems();\\n// parentPage will equal page\\nvar parentPage \\u003d items[0].getParent();\\n```\\n@deprecated\\n@return the parent page*/getParent():SitesApp.Page;\\n/**Get the value of this ListItem for a numbered column.\\n\\n```\\nvar page \\u003d SitesApp.getSite(\\\"demositeappsscript\\\").getChildByName(\\\"mylistpage\\\");\\nvar listItem \\u003d page.getListItems()[0];\\n\\n// Remember that rows are 0 indexed. This returns the item in the first column\\n// of the list. If an index that is greater than the number of columns is used,\\n// the script will throw an \\\"InvalidArgument: index\\\" exception.\\nvar value \\u003d listItem.getValueByIndex(5);\\n```\\n@deprecated\\n@param index the column to get the value of\\n@return the value of that column*/getValueByIndex(index:Integer):string;\\n/**Get the value of this ListItem for a named column.\\n\\n```\\nvar page \\u003d SitesApp.getSite(\\\"demositeappsscript\\\").getChildByName(\\\"mylistpage\\\");\\nvar listItem \\u003d page.getListItems()[0];\\n\\n// Suppose we have a column named \\\"Owner\\\" - this will let us fetch the value\\n// for the list item\\nvar value \\u003d listItem.getValueByName(\\\"Owner\\\");\\nLogger.log(value);\\n```\\n@deprecated\\n@param name the column to get the value of\\n@return the value of that column*/getValueByName(name:string):string;\\n/**Set the parent page of this list item.\\n\\n```\\nvar page \\u003d SitesApp.getSite('example.com', 'mysite').getChildByName('mylistpage');\\nvar secondListPage \\u003d SitesApp.getSite('example.com', 'mysite')\\n                             .getChildByName('secondlistpage');\\nvar items \\u003d page.getListItems();\\n\\n// Returns secondListPage\\nvar parentPage \\u003d items[0].setParent(secondListPage).getParent();\\n```\\n@deprecated\\n@param parent the new parent\\n@return this ListItem for chaining*/setParent(parent:SitesApp.Page):SitesApp.ListItem;\\n/**Set the value of this ListItem for a numbered column. For URL columns the value must be an\\nXHTML anchor tag, with XML entities escaped.\\n\\n```\\nvar page \\u003d SitesApp.getSite(\\\"example.com\\\", \\\"mysite\\\").getChildByName(\\\"mylistpage\\\");\\nvar listItem \\u003d page.getListItems()[0];\\nlistItem.setValueByIndex(1, 'This is the new value');\\nlistItem.setValueByIndex(2, '\\u003ca href\\u003d\\\"http://www.example.com?a\\u003d1\\u0026amp;b\\u003d2\\\"\\u003eExample\\u003c/a\\u003e');\\n```\\n@deprecated\\n@param index the column to set the value of\\n@param value the new value\\n@return this ListItem for chaining*/setValueByIndex(index:Integer,value:string):SitesApp.ListItem;\\n/**Set the value of this ListItem for a numbered column. For URL columns the value must be an\\nXHTML anchor tag, with XML entities escaped.\\n\\n```\\nvar page \\u003d SitesApp.getSite(\\\"demositeappsscript\\\").getChildByName(\\\"mylistpage\\\");\\nvar listItem \\u003d page.getListItems()[0];\\nlistItem.setValueByName('Owner', 'Eric');\\nlistItem.setValueByName('Page', '\\u003ca href\\u003d\\\"http://www.example.com?a\\u003d1\\u0026amp;b\\u003d2\\\"\\u003eExample\\u003c/a\\u003e');\\n```\\n@deprecated\\n@param name the column to set the value of\\n@param value the new value\\n@return this ListItem for chaining*/setValueByName(name:string,value:string):SitesApp.ListItem;}interface Comment{\\n/**Deletes this comment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar comments \\u003d pages[0].getComments();\\n\\n// Let's delete all of Eric's comments\\nfor(var i \\u003d 0; i \\u003c comments.length; i++) {\\n  if(comments[i].getAuthorEmail() \\u003d\\u003d \\\"eric@example.com\\\") {\\n    comments[i].deleteComment();\\n  }\\n}\\n```\\n@deprecated*/deleteComment():void;\\n/**Gets the email address of the author of this comment.\\n@deprecated\\n@return the author's email*/getAuthorEmail():string;\\n/**Gets the name of the author of this comment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar comments \\u003d pages[0].getComments();\\nvar comment \\u003d comments[0];\\nvar authorEmail \\u003d comment.getAuthorEmail();\\n```\\n@deprecated\\n@return the author's name*/getAuthorName():string;\\n/**Return the content of this comment as a String.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar comments \\u003d pages[0].getComments();\\nvar content \\u003d comments[0].getContent()\\n```\\n@deprecated\\n@return the comment content*/getContent():string;\\n/**Return the date this comment was originally published.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar comments \\u003d pages[0].getComments();\\nvar date \\u003d comments[0].getDatePublished();\\n```\\n@deprecated\\n@return the date of original publication*/getDatePublished():Date;\\n/**Return the date this comment was last updated.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar comments \\u003d pages[0].getComments();\\nvar date \\u003d comments[0].getLastUpdated();\\n```\\n@deprecated\\n@return the last updated date*/getLastUpdated():Date;\\n/**Get the parent page of this comment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar comments \\u003d pages[0].getComments();\\nvar comment \\u003d comments[0];\\n\\n// parentPage should be the same page as pages[0]\\nvar parentPage \\u003d comment.getParent();\\n```\\n@deprecated\\n@return the parent page*/getParent():SitesApp.Page;\\n/**Set the content of this comment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar comments \\u003d pages[0].getComments();\\nvar comment \\u003d comments[0];\\n comment.setContent(\\\"New Content\\\");\\n\\n// Note that this returns a Comment, so you can chain the method calls\\nvar updatedContent \\u003d comment.setContent(\\\"New Content\\\")\\n                            .getContent();\\n```\\n@deprecated\\n@param content the new content\\n@return this Comment for chaining*/setContent(content:string):SitesApp.Comment;\\n/**Set the parent page of this comment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar comments \\u003d pages[0].getComments();\\nvar comment \\u003d comments[0];\\n\\n// Let's say we want to move the comment to its parent's next neighbor ..\\n// This will only work if the example site has multiple children\\nvar newParentPage \\u003d comment.setParent(pages[1]).getParent();\\n```\\n@deprecated\\n@param parent the new parent\\n@return this Comment for chaining*/setParent(parent:SitesApp.Page):SitesApp.Comment;}interface Column{\\n/**Deletes this column.\\n\\n```\\nvar page \\u003d SitesApp.getSite('example.com', 'mysite').getChildByName('mylistpage');\\nvar columns \\u003d page.getColumns();\\ncolumns[0].deleteColumn();\\n```\\n@deprecated*/deleteColumn():void;\\n/**Gets the name of this column.\\n\\n```\\nvar page \\u003d SitesApp.getSite('example.com', 'mysite').getChildByName('mylistpage');\\nvar columns \\u003d page.getColumns();\\nvar name \\u003d columns[0].getName();\\n```\\n@deprecated\\n@return the column name*/getName():string;\\n/**Returns the List Page this column belongs to.\\n\\n```\\nvar page \\u003d SitesApp.getSite('example.com', 'mysite').getChildByName('mylistpage');\\nvar columns \\u003d page.getColumns();\\n\\n// This returns a reference to page\\nvar parentPage \\u003d columns[0].getParent();\\n```\\n@deprecated\\n@return the page this column belongs to*/getParent():SitesApp.Page;\\n/**Sets the name of this column.\\n\\n```\\nvar page \\u003d SitesApp.getSite('example.com', 'mysite').getChildByName('mylistpage');\\nvar columns \\u003d page.getColumns();\\ncolumns[0].setName(\\\"New Name\\\");\\n```\\n@deprecated\\n@param name the new name\\n@return this Column for chaining*/setName(name:string):SitesApp.Column;}interface AttachmentType{}interface _AttachmentType{HOSTED:AttachmentType;WEB:AttachmentType;}interface Attachment{\\n/**Deletes this attachment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\nattachments[0].deleteAttachment();\\n```\\n@deprecated*/deleteAttachment():void;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Return the type of this attachment (HOSTED or WEB).\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\nvar attType \\u003d attachments[0].getAttachmentType();\\n\\n// This will log \\\"Hosted\\\"\\nLogger.log(attType);\\n\\n// Since this returns an AttachmentType and not a String, for the\\n// purposes of equivalence we want to either do this or cast the\\n// type to a String\\nif(attType \\u003d\\u003d  SitesService.AttachmentType.HOSTED) {\\n  Logger.log(\\\"This is a match\\\");\\n}\\n\\n// The above is the same as\\nif(String(attType) \\u003d\\u003d \\\"Hosted\\\") {\\n   Logger.log(\\\"This is also a match\\\");\\n}\\n```\\n@deprecated\\n@return the attachment type*/getAttachmentType():SitesApp.AttachmentType;\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;\\n/**Return the mime type of this attachment. Fails for web attachments.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\nvar contentType \\u003d attachments[0].getContentType();\\n```\\n@deprecated\\n@return the attachment mime type*/getContentType():string;\\n/**Return the date this attachment was first published.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\nvar date \\u003d attachments[0].getDatePublished();\\n```\\n@deprecated\\n@return the date of original publication*/getDatePublished():Date;\\n/**Return the description of this attachment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\nvar description \\u003d attachments[0].getDescription();\\n```\\n@deprecated\\n@return the attachment description*/getDescription():string;\\n/**Return the date this attachment was last updated.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\nvar date \\u003d attachments[0].getLastUpdated();\\n```\\n@deprecated\\n@return the last updated date*/getLastUpdated():Date;\\n/**Get the parent page of this attachment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\n\\n// This is equal to pages[0]\\nvar parent \\u003d attachments[0].getParent();\\n```\\n@deprecated\\n@return the parent page*/getParent():SitesApp.Page;\\n/**Return the title of this attachment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\nvar title \\u003d attachments[0].getTitle();\\n```\\n@deprecated\\n@return the attachment title*/getTitle():string;\\n/**Return the download url for this attachment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\nvar url \\u003d attachments[0].getUrl();\\n```\\n@deprecated\\n@return the download url*/getUrl():string;\\n/**Set the mime type of this attachment. Fails for web attachments.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\nattachments[0].setContentType(\\\"text/plain\\\");\\n```\\n@deprecated\\n@param contentType the new mime type\\n@return this Attachment for chaining*/setContentType(contentType:string):SitesApp.Attachment;\\n/**Set the descripton of this attachment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\n\\n// This is an example of chaining in action\\nattachments[0].setTitle(\\\"New Title\\\")\\n              .setDescription(\\\"New Description\\\");\\n```\\n@deprecated\\n@param description the new description\\n@return this Attachment for chaining*/setDescription(description:string):SitesApp.Attachment;\\n/**Set the actual data of this attachment. Fails for web attachments.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('demositeappsscript').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\n\\n// This snippet demonstrates how to create a new text blob and attach it\\n// to the page\\nvar blob \\u003d Utilities.newBlob(\\\"This data is now the attachment content\\\");\\n\\n// We must set a filename since we created the blob from String data\\n// instead of something like a URL source\\nblob.setName(\\\"attachment.txt\\\");\\nattachments[0].setTitle(\\\"New Title\\\")\\n              .setDescription(\\\"New Description\\\")\\n              .setContentType(\\\"text/plain\\\")\\n              .setFrom(blob);\\n```\\n@deprecated\\n@param blob the new data\\n@return this Attachment for chaining*/setFrom(blob:BlobSource):SitesApp.Attachment;\\n/**Set the parent page of this attachment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\n// Sets the parent page to be the next sibling\\nattachments[0].setParent(pages[1]);\\n```\\n@deprecated\\n@param parent the new parent\\n@return this Attachment for chaining*/setParent(parent:SitesApp.Page):SitesApp.Attachment;\\n/**Set the title of this attachment.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('example.com', 'mysite').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\n\\n// This is an example of chaining in action\\nattachments[0].setTitle(\\\"New Title\\\")\\n              .setDescription(\\\"New Description\\\");\\n```\\n@deprecated\\n@param title the new title\\n@return this Attachment for chaining*/setTitle(title:string):SitesApp.Attachment;\\n/**Sets the download url for this attachment. Only valid for web attachments.\\n\\n```\\nvar pages \\u003d SitesApp.getSite('demositeappsscript').getChildren();\\nvar attachments \\u003d pages[0].getAttachments();\\n\\nattachments[0].setTitle(\\\"New Web Attachment\\\")\\n              .setDescription(\\\"New Description\\\")\\n              .setUrl(\\\"http://example.com/files/your_file.txt\\\");\\n```\\n@deprecated\\n@return this Attachment for chaining*/setUrl(url:string):SitesApp.Attachment;}}const SitesApp:SitesApp;\"],[\"slides-app.d.ts\",\"interface SlidesApp{\\n/**An enumeration of the types of alignment positions.*/AlignmentPosition:SlidesApp._AlignmentPosition;\\n/**An enumeration of the different arrow styles that a [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) can have.*/ArrowStyle:SlidesApp._ArrowStyle;\\n/**An enumeration of the types of auto text.*/AutoTextType:SlidesApp._AutoTextType;\\n/**An enumeration of autofit types.*/AutofitType:SlidesApp._AutofitType;\\n/**An enumeration of the different merge states of a table cell.*/CellMergeState:SlidesApp._CellMergeState;\\n/**An enumeration of color types.*/ColorType:_ColorType;\\n/**An enumeration of values used to specify content alignment.*/ContentAlignment:SlidesApp._ContentAlignment;\\n/**An enumeration of the different dash styles that a [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) can have.*/DashStyle:SlidesApp._DashStyle;\\n/**An enumeration of fill types.*/FillType:SlidesApp._FillType;\\n/**An enumeration of the categories of [`Line`](https://developers.google.com/apps-script/reference/slides/line.html).*/LineCategory:SlidesApp._LineCategory;\\n/**An enumeration of the types of [`LineFill`](https://developers.google.com/apps-script/reference/slides/line-fill.html).*/LineFillType:SlidesApp._LineFillType;\\n/**An enumeration of the types of [`Line`](https://developers.google.com/apps-script/reference/slides/line.html).*/LineType:SlidesApp._LineType;\\n/**An enumeration of the types of links.*/LinkType:SlidesApp._LinkType;\\n/**An enumeration of the types of list presets.*/ListPreset:SlidesApp._ListPreset;\\n/**An enumeration of the types of page backgrounds.*/PageBackgroundType:SlidesApp._PageBackgroundType;\\n/**An enumeration of the types of page elements.*/PageElementType:SlidesApp._PageElementType;\\n/**An enumeration of the types of pages.*/PageType:SlidesApp._PageType;\\n/**An enumeration of the types of paragraph alignment.*/ParagraphAlignment:SlidesApp._ParagraphAlignment;\\n/**An enumeration of the types of placeholders.*/PlaceholderType:SlidesApp._PlaceholderType;\\n/**An enumeration of the predefined layouts.*/PredefinedLayout:SlidesApp._PredefinedLayout;\\n/**An enumeration of the types of selections.*/SelectionType:SlidesApp._SelectionType;\\n/**An enumeration of the types of shapes.*/ShapeType:SlidesApp._ShapeType;\\n/**An enumeration of Sheets chart embed types.*/SheetsChartEmbedType:SlidesApp._SheetsChartEmbedType;\\n/**An enumeration of the ways Slides can be linked.*/SlideLinkingMode:SlidesApp._SlideLinkingMode;\\n/**An enumeration of the types of slide positions.*/SlidePosition:SlidesApp._SlidePosition;\\n/**An enumeration of the types of spacing modes.*/SpacingMode:SlidesApp._SpacingMode;\\n/**An enumeration of the types of text baseline offset.*/TextBaselineOffset:SlidesApp._TextBaselineOffset;\\n/**An enumeration of the types of text directions.*/TextDirection:SlidesApp._TextDirection;\\n/**An enumeration of theme colors.*/ThemeColorType:SlidesApp._ThemeColorType;\\n/**An enumeration of the types of video source.*/VideoSourceType:SlidesApp._VideoSourceType;\\n/**Creates and opens a new [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html).\\n@param name The name to be given to the created presentation.\\n@return the presentation with the given name.*/create(name:string):SlidesApp.Presentation;\\n/**Returns the currently active presentation to which the script is [container-bound](/apps-script/scripts_containers), or `null` if there is no\\nactive presentation. To interact with a presentation to which the script is not\\ncontainer-bound, use [`openById(id)`](https://developers.google.com/apps-script/reference/slides/slides-app.html#openById(String)) instead.\\n\\n```\\n// Get the current presentation to which this script is bound.\\nvar presentation \\u003d SlidesApp.getActivePresentation();\\n```\\n\\nIf the presentation is already open, the same presentation instance is returned.*/getActivePresentation():SlidesApp.Presentation;\\n/**Returns an instance of the presentation's user-interface environment that allows the script to\\nadd features like menus, dialogs, and sidebars. A script can only interact with the UI for the\\ncurrent instance of an open presentation, and only if the script is [bound](/apps-script/scripts_containers) to the presentation. For more information, see\\nthe guides to [menus](/apps-script/guides/menus) and [dialogs and sidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Add a custom menu to the active presentation, including a separator and a sub-menu.\\nfunction onOpen(e) {\\n  SlidesApp.getUi()\\n      .createMenu('My Menu')\\n      .addItem('My menu item', 'myFunction')\\n      .addSeparator()\\n      .addSubMenu(SlidesApp.getUi().createMenu('My sub-menu')\\n          .addItem('One sub-menu item', 'mySecondFunction')\\n          .addItem('Another sub-menu item', 'myThirdFunction'))\\n      .addToUi();\\n}\\n```*/getUi():Ui;\\n/**Returns a new [`AffineTransformBuilder`](https://developers.google.com/apps-script/reference/slides/affine-transform-builder.html) to build an [`AffineTransform`](https://developers.google.com/apps-script/reference/slides/affine-transform.html). The builder\\nis preset with the identity affine transform.*/newAffineTransformBuilder():SlidesApp.AffineTransformBuilder;\\n/**Opens the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) with the given ID.\\n\\n```\\n// Open a presentation by ID.\\nvar presentation \\u003d SlidesApp.openById('docId');\\n```\\n\\nIf the presentation is already open, the same presentation instance is returned.\\n@return the presentation with the given ID*/openById(id:string):SlidesApp.Presentation;\\n/**Opens the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) with the given URL.\\n\\n```\\n// Open a presentation by URL.\\nvar presentation \\u003d SlidesApp.openByUrl('https://docs.google.com/presentation/d/docId/edit');\\n```\\n\\nIf the presentation is already open, the same presentation instance is returned.\\n@return the presentation with the given URL*/openByUrl(url:string):SlidesApp.Presentation;}module SlidesApp{interface WordArt{\\n/**Aligns the element to the specified alignment position on the page.\\n@param alignmentPosition The position to align this page element to on the page.\\n@return This page element, for chaining.*/alignOnPage(alignmentPosition:SlidesApp.AlignmentPosition):SlidesApp.WordArt;\\n/**Brings the page element forward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringForward():SlidesApp.WordArt;\\n/**Brings the page element to the front of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringToFront():SlidesApp.WordArt;\\n/**Duplicates the page element.\\n\\nThe duplicate page element is placed on the same page at the same position as the original.\\n@return The new duplicate of this page element.*/duplicate():SlidesApp.PageElement;\\n/**Returns the list of `ConnectionSite`s on the page element, or an empty list if the page\\nelement does not have any connection sites.\\n@return The connection sites list, which may be empty if this element has no connection sites.*/getConnectionSites():SlidesApp.ConnectionSite[];\\n/**Returns the page element's alt text description. The description is combined with the title to\\ndisplay and read alt text.\\n@return The page element's alt text description.*/getDescription():string;\\n/**Gets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getHeight():number;\\n/**Returns the element's inherent height in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getInherentHeight():number;\\n/**Returns the element's inherent width in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getInherentWidth():number;\\n/**Returns the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@return This element's horizontal position in points, from the upper-left corner of the page.*/getLeft():number;\\n/**Returns the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) or `null` if there is no link.\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null) {\\n  Logger.log('Shape has a link of type: ' + link.getLinkType());\\n}\\n```*/getLink():SlidesApp.Link;\\n/**Returns the unique ID for this object. Object IDs used by pages and page elements share the\\nsame namespace.\\n@return The unique ID for this object.*/getObjectId():string;\\n/**Returns the page element's type, represented as a [`PageElementType`](https://developers.google.com/apps-script/reference/slides/page-element-type.html) enum.\\n@return The page element's type.*/getPageElementType():SlidesApp.PageElementType;\\n/**Returns the group this page element belongs to, or `null` if the element is not in a\\ngroup.\\n@return The group this page element belongs to, or `null`.*/getParentGroup():SlidesApp.Group;\\n/**Returns the page this page element is on.\\n@return The page this element resides on.*/getParentPage():SlidesApp.Page;\\n/**Gets the text that is rendered as word art.\\n@return The text that is rendered as this word art.*/getRenderedText():string;\\n/**Returns the element's clockwise rotation angle around its center in degrees, where zero degrees\\nmeans no rotation.\\n@return The rotation angle in degrees between 0 (inclusive) and 360 (exclusive).*/getRotation():number;\\n/**Returns the page element's alt text title. The title is combined with the description to\\ndisplay and read alt text.\\n@return The page element's alt text title.*/getTitle():string;\\n/**Gets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@return This element's vertical position in points, from the upper-left corner of the page.*/getTop():number;\\n/**Returns the page element's transform.\\n\\nThe visual appearance of the page element is determined by its absolute transform. To\\ncompute the absolute transform, preconcatenate a page element's transform with the transforms\\nof all of its parent groups. If the page element is not in a group, its absolute transform is\\nthe same as the value in this field.\\n@return The page element's transform.*/getTransform():SlidesApp.AffineTransform;\\n/**Returns the element's width in points, which is the width of the element's bounding box when\\nthe element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getWidth():number;\\n/**Preconcatenates the provided transform to the existing transform of the page element.\\n\\n```\\nnewTransform \\u003d argument * existingTransform\\n```\\n\\nFor example, to move a page elements 36 points to the left:\\n\\n```\\nelement.preconcatenateTransform(SlidesApp.newAffineTransformBuilder()\\n    .setTranslateX(-36.0)\\n    .build());\\n```\\n\\nYou can also replace the page element's transform with [`setTransform(transform)`](https://developers.google.com/apps-script/reference/slides/word-art.html#setTransform(AffineTransform)).\\n@param transform The transform to preconcatenate onto this page element's transform.\\n@return This page element, for chaining.*/preconcatenateTransform(transform:SlidesApp.AffineTransform):SlidesApp.WordArt;\\n/**Removes the page element.\\n\\nIf after a remove operation, a `Group` contains only one or no page elements, the\\ngroup itself is also removed.\\n\\nIf a placeholder `PageElement` is removed on a master or layout, any empty inheriting\\nplaceholders are also removed.*/remove():void;\\n/**Removes a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html).\\n\\n```\\nshape.removeLink();\\n```*/removeLink():void;\\n/**Scales the element's height by the specified ratio. The element's height is the height of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's height by.\\n@return This page element, for chaining.*/scaleHeight(ratio:number):SlidesApp.WordArt;\\n/**Scales the element's width by the specified ratio. The element's width is the width of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's width by.\\n@return This page element, for chaining.*/scaleWidth(ratio:number):SlidesApp.WordArt;\\n/**Selects only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation and removes any previous\\nselection. This is the same as calling [`select(replace)`](https://developers.google.com/apps-script/reference/slides/word-art.html#select(Boolean)) with `true`.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThis sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d slide.getPageElements()[0];\\n// Only select this page element and replace any previous selection.\\npageElement.select();\\n```*/select():void;\\n/**Selects the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nPass `true` to this method to select only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) and remove any\\nprevious selection. This also sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the\\n[`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\nPass `false` to select multiple [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects. The [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html)\\nobjects must be in the same [`Page`](https://developers.google.com/apps-script/reference/slides/page.html).\\n\\nThe following conditions must be met while selecting a page element using a `false`\\nparameter:\\n\\n  1. The parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object must be the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n  1. There should not be multiple [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) objects selected.\\n\\nTo make sure that’s the case the preferred approach is to select the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html)\\nfirst using [`Page.selectAsCurrentPage()`](https://developers.google.com/apps-script/reference/slides/page.html#selectAsCurrentPage()) and then select the page elements in that page.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// First select the slide page, as the current page selection.\\nslide.selectAsCurrentPage();\\n// Then select all the page elements in the selected slide page.\\nvar pageElements \\u003d slide.getPageElements();\\nfor (var i \\u003d 0; i \\u003c pageElements.length; i++) {\\n  pageElements[i].select(false);\\n}\\n```\\n@param replace If `true`, the selection replaces any previous selection; otherwise the\\n    selection is added to any previous selection.*/select(replace:boolean):void;\\n/**Sends the page element backward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendBackward():SlidesApp.WordArt;\\n/**Sends the page element to the back of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendToBack():SlidesApp.WordArt;\\n/**Sets the page element's alt text description.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text description to \\\"new alt text description\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setDescription('new alt text description');\\nLogger.log(pageElement.getDescription());\\n```\\n@param description The string to set the alt text description to.\\n@return This page element.*/setDescription(description:string):SlidesApp.WordArt;\\n/**Sets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param height The new height of this page element to set, in points.\\n@return This page element, for chaining.*/setHeight(height:number):SlidesApp.WordArt;\\n/**Sets the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@param left The new horizontal position to set, in points.\\n@return This page element, for chaining.*/setLeft(left:number):SlidesApp.WordArt;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the zero-based index of the slide.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nshape.setLinkSlide(0);\\n```\\n@param slideIndex The zero-based index to the slide.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slideIndex:Integer):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html), the link is set by the given slide ID.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nvar slide \\u003d presentation.getSlides()[0];\\nshape.setLinkSlide(slide);\\n```\\n@param slide The [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) to be linked.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slide:SlidesApp.Slide):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the relative position of the slide.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nshape.setLinkSlide(SlideApp.SlidePosition.FIRST_SLIDE);\\n```\\n@param slidePosition The relative [`SlidePosition`](https://developers.google.com/apps-script/reference/slides/slide-position.html).\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slidePosition:SlidesApp.SlidePosition):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given non-empty URL string.\\n\\n```\\n// Set a link to the URL.\\nshape.setLinkUrl(\\\"https://slides.google.com\\\");\\n```\\n@param url The URL string.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkUrl(url:string):SlidesApp.Link;\\n/**Sets the element's clockwise rotation angle around its center in degrees.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param angle The new clockwise rotation angle to set, in degrees.\\n@return This page element, for chaining.*/setRotation(angle:number):SlidesApp.WordArt;\\n/**Sets the page element's alt text title.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text title to \\\"new alt text title\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setTitle('new alt text title');\\nLogger.log(pageElement.getTitle());\\n```\\n@param title The string to set the alt text title to.\\n@return This page element.*/setTitle(title:string):SlidesApp.WordArt;\\n/**Sets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@param top The new vertical position to set, in points.\\n@return This page element, for chaining.*/setTop(top:number):SlidesApp.WordArt;\\n/**Sets the transform of the page element with the provided transform.\\n\\nUpdating the transform of a group changes the absolute transform of the page elements in\\nthat group, which can change their visual appearance.\\n\\nUpdating the transform of a page element that is in a group only changes the transform of\\nthat page element; it doesn't affect the transforms of the group or other page elements in the\\ngroup.\\n\\nFor details on how transforms impact the visual appearance of page elements, see [`getTransform()`](https://developers.google.com/apps-script/reference/slides/word-art.html#getTransform()).\\n@param transform The transform that is set for this page element.\\n@return This element, for chaining.*/setTransform(transform:SlidesApp.AffineTransform):SlidesApp.WordArt;\\n/**Sets the element's width in points, which is the width of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param width The new width of this page element to set, in points.\\n@return This page element, for chaining.*/setWidth(width:number):SlidesApp.WordArt;}interface VideoSourceType{}interface _VideoSourceType{\\n/**A video source type that is not supported.*/UNSUPPORTED:VideoSourceType;\\n/**YouTube video.*/YOUTUBE:VideoSourceType;}interface Video{\\n/**Aligns the element to the specified alignment position on the page.\\n@param alignmentPosition The position to align this page element to on the page.\\n@return This page element, for chaining.*/alignOnPage(alignmentPosition:SlidesApp.AlignmentPosition):SlidesApp.Video;\\n/**Brings the page element forward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringForward():SlidesApp.Video;\\n/**Brings the page element to the front of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringToFront():SlidesApp.Video;\\n/**Duplicates the page element.\\n\\nThe duplicate page element is placed on the same page at the same position as the original.\\n@return The new duplicate of this page element.*/duplicate():SlidesApp.PageElement;\\n/**Returns the [`Border`](https://developers.google.com/apps-script/reference/slides/border.html) of the video.\\n@return The border setting for this video.*/getBorder():SlidesApp.Border;\\n/**Returns the list of `ConnectionSite`s on the page element, or an empty list if the page\\nelement does not have any connection sites.\\n@return The connection sites list, which may be empty if this element has no connection sites.*/getConnectionSites():SlidesApp.ConnectionSite[];\\n/**Returns the page element's alt text description. The description is combined with the title to\\ndisplay and read alt text.\\n@return The page element's alt text description.*/getDescription():string;\\n/**Gets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getHeight():number;\\n/**Returns the element's inherent height in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getInherentHeight():number;\\n/**Returns the element's inherent width in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getInherentWidth():number;\\n/**Returns the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@return This element's horizontal position in points, from the upper-left corner of the page.*/getLeft():number;\\n/**Returns the unique ID for this object. Object IDs used by pages and page elements share the\\nsame namespace.\\n@return The unique ID for this object.*/getObjectId():string;\\n/**Returns the page element's type, represented as a [`PageElementType`](https://developers.google.com/apps-script/reference/slides/page-element-type.html) enum.\\n@return The page element's type.*/getPageElementType():SlidesApp.PageElementType;\\n/**Returns the group this page element belongs to, or `null` if the element is not in a\\ngroup.\\n@return The group this page element belongs to, or `null`.*/getParentGroup():SlidesApp.Group;\\n/**Returns the page this page element is on.\\n@return The page this element resides on.*/getParentPage():SlidesApp.Page;\\n/**Returns the element's clockwise rotation angle around its center in degrees, where zero degrees\\nmeans no rotation.\\n@return The rotation angle in degrees between 0 (inclusive) and 360 (exclusive).*/getRotation():number;\\n/**Gets the video source.\\n@return The source of this video.*/getSource():SlidesApp.VideoSourceType;\\n/**Gets an URL to the video thumbnail. This URL is tagged with the account of the requester.\\nAnyone with the URL effectively accesses the thumbnail as the original requester. Access to the\\nthumbnail may be lost if the presentation's sharing settings change. The URL expires after a\\nshort period of time.\\n@return The URL of the video thumbnail.*/getThumbnailUrl():string;\\n/**Returns the page element's alt text title. The title is combined with the description to\\ndisplay and read alt text.\\n@return The page element's alt text title.*/getTitle():string;\\n/**Gets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@return This element's vertical position in points, from the upper-left corner of the page.*/getTop():number;\\n/**Returns the page element's transform.\\n\\nThe visual appearance of the page element is determined by its absolute transform. To\\ncompute the absolute transform, preconcatenate a page element's transform with the transforms\\nof all of its parent groups. If the page element is not in a group, its absolute transform is\\nthe same as the value in this field.\\n@return The page element's transform.*/getTransform():SlidesApp.AffineTransform;\\n/**Gets an URL to the video. The URL is valid as long as the source video exists and sharing\\nsettings do not change. Returns `null` when the video source is not supported.\\n@return The URL of this video, or `null` if the video source is not supported.*/getUrl():string;\\n/**Gets the video source's unique identifier for this video.\\n@return The source ID for this video.*/getVideoId():string;\\n/**Returns the element's width in points, which is the width of the element's bounding box when\\nthe element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getWidth():number;\\n/**Preconcatenates the provided transform to the existing transform of the page element.\\n\\n```\\nnewTransform \\u003d argument * existingTransform\\n```\\n\\nFor example, to move a page elements 36 points to the left:\\n\\n```\\nelement.preconcatenateTransform(SlidesApp.newAffineTransformBuilder()\\n    .setTranslateX(-36.0)\\n    .build());\\n```\\n\\nYou can also replace the page element's transform with [`setTransform(transform)`](https://developers.google.com/apps-script/reference/slides/video.html#setTransform(AffineTransform)).\\n@param transform The transform to preconcatenate onto this page element's transform.\\n@return This page element, for chaining.*/preconcatenateTransform(transform:SlidesApp.AffineTransform):SlidesApp.Video;\\n/**Removes the page element.\\n\\nIf after a remove operation, a `Group` contains only one or no page elements, the\\ngroup itself is also removed.\\n\\nIf a placeholder `PageElement` is removed on a master or layout, any empty inheriting\\nplaceholders are also removed.*/remove():void;\\n/**Scales the element's height by the specified ratio. The element's height is the height of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's height by.\\n@return This page element, for chaining.*/scaleHeight(ratio:number):SlidesApp.Video;\\n/**Scales the element's width by the specified ratio. The element's width is the width of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's width by.\\n@return This page element, for chaining.*/scaleWidth(ratio:number):SlidesApp.Video;\\n/**Selects only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation and removes any previous\\nselection. This is the same as calling [`select(replace)`](https://developers.google.com/apps-script/reference/slides/video.html#select(Boolean)) with `true`.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThis sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d slide.getPageElements()[0];\\n// Only select this page element and replace any previous selection.\\npageElement.select();\\n```*/select():void;\\n/**Selects the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nPass `true` to this method to select only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) and remove any\\nprevious selection. This also sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the\\n[`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\nPass `false` to select multiple [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects. The [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html)\\nobjects must be in the same [`Page`](https://developers.google.com/apps-script/reference/slides/page.html).\\n\\nThe following conditions must be met while selecting a page element using a `false`\\nparameter:\\n\\n  1. The parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object must be the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n  1. There should not be multiple [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) objects selected.\\n\\nTo make sure that’s the case the preferred approach is to select the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html)\\nfirst using [`Page.selectAsCurrentPage()`](https://developers.google.com/apps-script/reference/slides/page.html#selectAsCurrentPage()) and then select the page elements in that page.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// First select the slide page, as the current page selection.\\nslide.selectAsCurrentPage();\\n// Then select all the page elements in the selected slide page.\\nvar pageElements \\u003d slide.getPageElements();\\nfor (var i \\u003d 0; i \\u003c pageElements.length; i++) {\\n  pageElements[i].select(false);\\n}\\n```\\n@param replace If `true`, the selection replaces any previous selection; otherwise the\\n    selection is added to any previous selection.*/select(replace:boolean):void;\\n/**Sends the page element backward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendBackward():SlidesApp.Video;\\n/**Sends the page element to the back of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendToBack():SlidesApp.Video;\\n/**Sets the page element's alt text description.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text description to \\\"new alt text description\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setDescription('new alt text description');\\nLogger.log(pageElement.getDescription());\\n```\\n@param description The string to set the alt text description to.\\n@return This page element.*/setDescription(description:string):SlidesApp.Video;\\n/**Sets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param height The new height of this page element to set, in points.\\n@return This page element, for chaining.*/setHeight(height:number):SlidesApp.Video;\\n/**Sets the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@param left The new horizontal position to set, in points.\\n@return This page element, for chaining.*/setLeft(left:number):SlidesApp.Video;\\n/**Sets the element's clockwise rotation angle around its center in degrees.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param angle The new clockwise rotation angle to set, in degrees.\\n@return This page element, for chaining.*/setRotation(angle:number):SlidesApp.Video;\\n/**Sets the page element's alt text title.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text title to \\\"new alt text title\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setTitle('new alt text title');\\nLogger.log(pageElement.getTitle());\\n```\\n@param title The string to set the alt text title to.\\n@return This page element.*/setTitle(title:string):SlidesApp.Video;\\n/**Sets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@param top The new vertical position to set, in points.\\n@return This page element, for chaining.*/setTop(top:number):SlidesApp.Video;\\n/**Sets the transform of the page element with the provided transform.\\n\\nUpdating the transform of a group changes the absolute transform of the page elements in\\nthat group, which can change their visual appearance.\\n\\nUpdating the transform of a page element that is in a group only changes the transform of\\nthat page element; it doesn't affect the transforms of the group or other page elements in the\\ngroup.\\n\\nFor details on how transforms impact the visual appearance of page elements, see [`getTransform()`](https://developers.google.com/apps-script/reference/slides/video.html#getTransform()).\\n@param transform The transform that is set for this page element.\\n@return This element, for chaining.*/setTransform(transform:SlidesApp.AffineTransform):SlidesApp.Video;\\n/**Sets the element's width in points, which is the width of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param width The new width of this page element to set, in points.\\n@return This page element, for chaining.*/setWidth(width:number):SlidesApp.Video;}interface ThemeColorType{}interface _ThemeColorType{\\n/**Represents the first accent color.*/ACCENT1:ThemeColorType;\\n/**Represents the second accent color.*/ACCENT2:ThemeColorType;\\n/**Represents the third accent color.*/ACCENT3:ThemeColorType;\\n/**Represents the fourth accent color.*/ACCENT4:ThemeColorType;\\n/**Represents the fifth accent color.*/ACCENT5:ThemeColorType;\\n/**Represents the sixth accent color.*/ACCENT6:ThemeColorType;\\n/**Represents the first dark color.*/DARK1:ThemeColorType;\\n/**Represents the second dark color.*/DARK2:ThemeColorType;\\n/**Represents the color to use for visited hyperlinks.*/FOLLOWED_HYPERLINK:ThemeColorType;\\n/**Represents the color to use for hyperlinks.*/HYPERLINK:ThemeColorType;\\n/**Represents the first light color.*/LIGHT1:ThemeColorType;\\n/**Represents the second light color.*/LIGHT2:ThemeColorType;\\n/**Represents a theme color that is not supported.*/UNSUPPORTED:ThemeColorType;}interface ThemeColor{\\n/**Get the type of this color.\\n@return The color type.*/getColorType():ColorType;\\n/**Get the theme color type of this color.*/getThemeColorType():SlidesApp.ThemeColorType;}interface TextStyle{\\n/**Returns the background color of the text, or `null` if there are multiple styles on the\\ntext.*/getBackgroundColor():SlidesApp.Color;\\n/**Returns the vertical offset of text from its normal position, or `null` if there are\\nmultiple styles on the text.*/getBaselineOffset():SlidesApp.TextBaselineOffset;\\n/**Returns the font family of the text, or `null` if there are multiple styles on the text.*/getFontFamily():string;\\n/**Returns the font size of the text in points, or `null` if there are multiple styles on\\nthe text.*/getFontSize():number;\\n/**Returns the font weight of the text, or `null` if there are multiple styles on the text.\\n\\nThe weight is a multiple of 100 between 100 and 900, inclusive. This range corresponds to\\nthe numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with\\nnon-numerical values disallowed. Weights greater than or equal to 700 are considered bold, in\\nwhich case [`isBold()`](https://developers.google.com/apps-script/reference/slides/text-style.html#isBold()) returns `true`. The default value is 400\\n(\\\"normal\\\").*/getFontWeight():Integer;\\n/**Returns the foreground color of the text, or `null` if there are multiple styles on the\\ntext.*/getForegroundColor():SlidesApp.Color;\\n/**Returns the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) on the text, or `null` if there is no link or if the link is on\\npart of the text or if there are multiple links. Call [`hasLink()`](https://developers.google.com/apps-script/reference/slides/text-style.html#hasLink()) to determine whether\\nthe text has no link.\\n\\n```\\nvar textLink \\u003d shape.getText().getTextStyle().getLink();\\nif (textLink !\\u003d null) {\\n  Logger.log('Shape text has a link of type: ' + textLink.getLinkType());\\n}\\n```*/getLink():SlidesApp.Link;\\n/**Returns `true` if there is link on the text, `false` if not, or `null` if the\\nlink is on part of the text or there are multiple links.\\n\\nLinks cannot be set on newline characters. Therefore, if the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) contains a\\nnewline character, this method always returns either `null` or `false`.*/hasLink():boolean;\\n/**Returns `true` if the background of the text is transparent, `false` if not, or\\n`null` if there are multiple styles on the text.*/isBackgroundTransparent():boolean;\\n/**Returns `true` if the text is rendered as bold, `false` if not, or `null` if\\nthere are multiple styles on the text.*/isBold():boolean;\\n/**Returns `true` if the text is italicized, `false` if not, or `null` if there\\nare multiple styles on the text.*/isItalic():boolean;\\n/**Returns `true` if the text is in small capital letters, `false` if not, or `null` if there are multiple styles on the text.*/isSmallCaps():boolean;\\n/**Returns `true` if the text is struck through, `false` if not, or `null` if\\nthere are multiple styles on the text.*/isStrikethrough():boolean;\\n/**Returns `true` if the text is underlined, `false` if not, or `null` if there\\nare multiple styles on the text.*/isUnderline():boolean;\\n/**Removes a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html).\\n\\nRemoving a link removes the hyperlink foreground color and underline style on the text. If\\npossible, these styles are applied to match the text preceding the link.\\n\\n```\\ntext.getTextStyle().removeLink();\\n```*/removeLink():SlidesApp.TextStyle;\\n/**Sets the background color of the text to the given RGB values from 0 to 255.*/setBackgroundColor(red:Integer,green:Integer,blue:Integer):SlidesApp.TextStyle;\\n/**Sets the background color of the text.*/setBackgroundColor(color:SlidesApp.Color):SlidesApp.TextStyle;\\n/**Sets the background color of the text to the given [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html).*/setBackgroundColor(color:SlidesApp.ThemeColorType):SlidesApp.TextStyle;\\n/**Sets the background color of the text to the given hex color string.\\n\\nThe hex string must be in the format '#RRGGBB'. For example, pink would be represented as\\n'#FFC0CB'.*/setBackgroundColor(hexColor:string):SlidesApp.TextStyle;\\n/**Sets the background color of the text to transparent.*/setBackgroundColorTransparent():SlidesApp.TextStyle;\\n/**Sets the vertical offset of the text relative to its normal position.*/setBaselineOffset(offset:SlidesApp.TextBaselineOffset):SlidesApp.TextStyle;\\n/**Sets whether the text should be rendered as bold.\\n\\nChanging the text's boldness updates the font weight used to render the text.*/setBold(bold:boolean):SlidesApp.TextStyle;\\n/**Sets the font family of the text .*/setFontFamily(fontFamily:string):SlidesApp.TextStyle;\\n/**Sets the font family and weight of the text.\\n\\nThe weight is a multiple of 100 between 100 and 900, inclusive. This range corresponds to\\nthe numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with\\nnon-numerical values disallowed. Weights greater than or equal to 700 are considered bold, in\\nwhich case [`isBold()`](https://developers.google.com/apps-script/reference/slides/text-style.html#isBold()) returns `true`. The default value is 400\\n(\\\"normal\\\").*/setFontFamilyAndWeight(fontFamily:string,fontWeight:Integer):SlidesApp.TextStyle;\\n/**Sets the font size of the text, in points.*/setFontSize(fontSize:number):SlidesApp.TextStyle;\\n/**Sets the foreground color of the text to the given RGB values from 0 to 255.*/setForegroundColor(red:Integer,green:Integer,blue:Integer):SlidesApp.TextStyle;\\n/**Sets the foreground color of the text.*/setForegroundColor(foregroundColor:SlidesApp.Color):SlidesApp.TextStyle;\\n/**Sets the foreground color of the text to the given [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html).*/setForegroundColor(color:SlidesApp.ThemeColorType):SlidesApp.TextStyle;\\n/**Sets the foreground color of the text to the given hex color string.\\n\\nThe hex string must be in the format '#RRGGBB'. For example, pink would be represented as\\n'#FFC0CB'.*/setForegroundColor(hexColor:string):SlidesApp.TextStyle;\\n/**Sets the whether the text is italicized.*/setItalic(italic:boolean):SlidesApp.TextStyle;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the zero-based index of the slide.\\n\\nSetting a link changes the style of the text to be underlined and to have a [`ThemeColorType.HYPERLINK`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html#HYPERLINK) foreground color. This can be changed via [`setForegroundColor(hexColor)`](https://developers.google.com/apps-script/reference/slides/text-style.html#setForegroundColor(String)) and [`setUnderline(underline)`](https://developers.google.com/apps-script/reference/slides/text-style.html#setUnderline(Boolean)).\\n\\nSince links cannot be set on newline characters, newline characters in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html)\\nare ignored.\\n\\n```\\n// Set a link to the first slide of the presentation.\\ntext.getTextStyle().setLinkSlide(0);\\n```\\n@param slideIndex The zero-based index to the slide.*/setLinkSlide(slideIndex:Integer):SlidesApp.TextStyle;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html), the link is set by the given slide ID.\\n\\nSetting a link changes the style of the text to be underlined and to have a [`ThemeColorType.HYPERLINK`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html#HYPERLINK) foreground color. This can be changed via [`setForegroundColor(hexColor)`](https://developers.google.com/apps-script/reference/slides/text-style.html#setForegroundColor(String)) and [`setUnderline(underline)`](https://developers.google.com/apps-script/reference/slides/text-style.html#setUnderline(Boolean)).\\n\\nSince links cannot be set on newline characters, newline characters in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html)\\nare ignored.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nvar slide \\u003d presentation.getSlides()[0];\\ntext.getTextStyle().setLinkSlide(slide);\\n```\\n@param slide The [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) to be linked.*/setLinkSlide(slide:SlidesApp.Slide):SlidesApp.TextStyle;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the relative position of the slide.\\n\\nSetting a link changes the style of the text to be underlined and to have a [`ThemeColorType.HYPERLINK`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html#HYPERLINK) foreground color. This can be changed via [`setForegroundColor(hexColor)`](https://developers.google.com/apps-script/reference/slides/text-style.html#setForegroundColor(String)) and [`setUnderline(underline)`](https://developers.google.com/apps-script/reference/slides/text-style.html#setUnderline(Boolean)).\\n\\nSince links cannot be set on newline characters, newline characters in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html)\\nare ignored.\\n\\n```\\n// Set a link to the first slide of the presentation.\\ntext.getTextStyle().setLinkSlide(SlidesApp.SlidePosition.FIRST_SLIDE);\\n```\\n@param slidePosition The relative [`SlidePosition`](https://developers.google.com/apps-script/reference/slides/slide-position.html).*/setLinkSlide(slidePosition:SlidesApp.SlidePosition):SlidesApp.TextStyle;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given non-empty URL string.\\n\\nSetting a link changes the style of the text to be underlined and to have a [`ThemeColorType.HYPERLINK`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html#HYPERLINK) foreground color. This can be changed via [`setForegroundColor(hexColor)`](https://developers.google.com/apps-script/reference/slides/text-style.html#setForegroundColor(String)) and [`setUnderline(underline)`](https://developers.google.com/apps-script/reference/slides/text-style.html#setUnderline(Boolean)).\\n\\nSince links cannot be set on newline characters, newline characters in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html)\\nare ignored.\\n\\n```\\n// Set a link to the URL.\\ntext.getTextStyle().setLinkUrl(\\\"https://slides.google.com\\\");\\n```\\n@param url The URL string.*/setLinkUrl(url:string):SlidesApp.TextStyle;\\n/**Sets whether the text is rendered in small capital letters.*/setSmallCaps(smallCaps:boolean):SlidesApp.TextStyle;\\n/**Sets whether the text is struck through.*/setStrikethrough(strikethrough:boolean):SlidesApp.TextStyle;\\n/**Sets whether the text is underlined.*/setUnderline(underline:boolean):SlidesApp.TextStyle;}interface TextRange{\\n/**Appends a paragraph at the end of the text range. The paragraph maintains the styling of the\\nend of the current text range.\\n\\nThe provided text string is appended as a paragraph by adding at least one surrounding\\nnewline character to the string.\\n\\nWhen the provided text string contains newline characters (thus consisting of multiple\\nparagraphs), the final paragraph added is returned.\\n@param text The string to append as a paragraph.\\n@return the appended [`Paragraph`](https://developers.google.com/apps-script/reference/slides/paragraph.html).*/appendParagraph(text:string):SlidesApp.Paragraph;\\n/**Appends a copy of the provided text range to the end of the current text range.\\n\\nThe formatting of the inserted text will match that of the source text.\\n@param textRange The text range to append.\\n@return the text range representing the appended text*/appendRange(textRange:SlidesApp.TextRange):SlidesApp.TextRange;\\n/**Appends a copy of the provided text range to the end of the current text range.\\n\\nIf set to match the formatting of the destination text, [`AutoText`](https://developers.google.com/apps-script/reference/slides/auto-text.html) within the provided\\ntext range are replaced with their rendered values. Furthermore, any non-text elements within\\nthe provided text range are not appended.\\n@param textRange The text range to append.\\n@param matchSourceFormatting If `true`, match the formatting of the source text; if\\n    `false`, match the formatting of the destination text.\\n@return the text range representing the appended text*/appendRange(textRange:SlidesApp.TextRange,matchSourceFormatting:boolean):SlidesApp.TextRange;\\n/**Appends text at the end of the text range. The text maintains the styling of the end of the\\nexisting text.\\n@param text The string to append.\\n@return the text range representing the appended text.*/appendText(text:string):SlidesApp.TextRange;\\n/**Returns the rendered text bounded by this range of the associated shape or table cell in a\\nformat appropriate to display to end users.\\n\\nAutoText elements, such as generated slide numbers, are replaced with their rendered values.\\nAny non-text elements in the range are omitted.*/asRenderedString():string;\\n/**Returns the raw text bounded by this range of the associated shape or table cell.\\n\\nAutoText elements such as generated slide numbers and any non-text elements in the range are\\nreplaced with the Unicode character U+E907.*/asString():string;\\n/**Clears the text bounded by this range.\\n\\nSince the entire text in a Shape or TableCell must end in a newline, the final newline in\\nthe text is not removed.*/clear():void;\\n/**Clears the text bounded by the start and end offsets in the range.\\n\\nSince the text must end in a newline, the final newline in text is not removed even if it's\\ncovered by the given offsets.\\n@param startOffset The number of characters past the start index of the current text range used\\n    to determine the inclusive start index of the range to clear. The start offset must be\\n    equal to or greater than 0 and less than or equal to `endOffset`. `startOffset`\\n    must also be less than the length of the current range.\\n@param endOffset The number of characters past the start index of the current text range used\\n    to determine the exclusive end index of the range to clear. The `endOffset` must be\\n    equal to or greater than `startOffset`. `endOffset` must also be less than or\\n    equal to the length of the current range.*/clear(startOffset:Integer,endOffset:Integer):void;\\n/**Returns all the ranges matching the search pattern in the current text range. The search is\\ncase sensitive.\\n@param pattern The regular expression pattern to search; any backslashes in the pattern should\\n    be escaped.*/find(pattern:string):SlidesApp.TextRange[];\\n/**Returns all the ranges matching the search pattern in the current text range starting from the\\nstart offset. The search is case sensitive.\\n@param pattern The regular expression pattern to search; any backslashes in the pattern should\\n    be escaped.\\n@param startOffset The number of characters past the start index of the current text range used\\n    to determine the inclusive start index of the range to search. `startOffset` must\\n    also be less than the length of the current range.*/find(pattern:string,startOffset:Integer):SlidesApp.TextRange[];\\n/**Returns the auto texts within the current text range.*/getAutoTexts():SlidesApp.AutoText[];\\n/**Returns the exclusive, 0-based index for the last character in this range. If the start and end\\nindices are equal, the range is considered to be empty.*/getEndIndex():Integer;\\n/**Returns the number of characters in this range.*/getLength():Integer;\\n/**Returns a collection of text ranges that correspond to all [`Link`](https://developers.google.com/apps-script/reference/slides/link.html)s within the current\\ntext range or overlapping the current text range.\\n\\nEach returned range is guaranteed to span one link when it is created. Text modifications\\ncan cause it to no longer represent exactly one link.\\n\\nEach [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) on the returned ranges can be accessed via [`TextStyle.getLink()`](https://developers.google.com/apps-script/reference/slides/text-style.html#getLink()).\\n\\n```\\n// Accesses the first link on a TextRange object.\\nvar linkTextRange \\u003d textRange.getLinks()[0];\\nvar textStyle \\u003d linkTextRange.getTextStyle();\\nLogger.log(textStyle.hasLink()); // logs 'true'\\nvar link \\u003d textStyle.getLink();  // Link object\\n```*/getLinks():SlidesApp.TextRange[];\\n/**Returns the paragraphs in lists that overlap the current text range.*/getListParagraphs():SlidesApp.Paragraph[];\\n/**Returns the [`ListStyle`](https://developers.google.com/apps-script/reference/slides/list-style.html) of the current text range.*/getListStyle():SlidesApp.ListStyle;\\n/**Returns the [`ParagraphStyle`](https://developers.google.com/apps-script/reference/slides/paragraph-style.html) of the current text range.*/getParagraphStyle():SlidesApp.ParagraphStyle;\\n/**Returns the paragraphs that overlap the current text range.*/getParagraphs():SlidesApp.Paragraph[];\\n/**Returns a new [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) covering part of the range from which it is derived.\\n@param startOffset The number of characters past the start index of the current text range used\\n    to determine the inclusive start index of the returned range. The start offset must be\\n    equal to or greater than 0 and less than or equal to `endOffset`. `startOffset`\\n    must also be less than the length of the current range.\\n@param endOffset The number of characters past the start index of the current text range used\\n    to determine the exclusive end index of the returned range. The `endOffset` must be\\n    equal to or greater than `startOffset`. `endOffset` must also be less than or\\n    equal to the length of the current range.*/getRange(startOffset:Integer,endOffset:Integer):SlidesApp.TextRange;\\n/**Returns the text runs that overlap the current text range. A text run is a segment of text\\nwhere all the characters have the same text style.\\n\\nEach returned range is only guaranteed to span one run when it is created. Text or style\\nmodifications can cause it to no longer represent exactly one run.*/getRuns():SlidesApp.TextRange[];\\n/**Returns the inclusive, 0-based index for the first character in this range. If the start and\\nend indices are equal, the range is considered to be empty.*/getStartIndex():Integer;\\n/**Returns the text style of the range, or `null` if the range is empty.*/getTextStyle():SlidesApp.TextStyle;\\n/**Inserts a paragraph at the start offset. The paragraph maintains the styling of the current\\ntext range at the start offset.\\n\\nThe provided text string is inserted as a paragraph by adding at least one surrounding\\nnewline character to the string.\\n\\nWhen the provided text string contains newline characters (thus consisting of multiple\\nparagraphs), the final paragraph added is returned.\\n@param startOffset The number of characters past the start index of the current text range used\\n    to determine the inclusive start index of the text to insert.\\n@param text The string to insert.\\n@return the inserted [`Paragraph`](https://developers.google.com/apps-script/reference/slides/paragraph.html).*/insertParagraph(startOffset:Integer,text:string):SlidesApp.Paragraph;\\n/**Inserts a copy of the provided text range at the start offset.\\n\\nThe formatting of the inserted text will match that of the source text.\\n@param startOffset The number of characters past the start index of the current text range used\\n    to determine the inclusive start index of the text to insert.\\n@param textRange The text range to insert.\\n@return the text range representing the inserted text*/insertRange(startOffset:Integer,textRange:SlidesApp.TextRange):SlidesApp.TextRange;\\n/**Inserts a copy of the provided text range at the start offset.\\n\\nIf set to match the formatting of the destination text, [`AutoText`](https://developers.google.com/apps-script/reference/slides/auto-text.html) within the provided\\ntext range are replaced with their rendered values. Furthermore, any non-text elements within\\nthe provided text range are not inserted.\\n@param startOffset The number of characters past the start index of the current text range used\\n    to determine the inclusive start index of the text to insert.\\n@param textRange The text range to insert.\\n@param matchSourceFormatting If `true`, match the formatting of the source text; if\\n    `false`, match the formatting of the destination text.\\n@return the text range representing the inserted text*/insertRange(startOffset:Integer,textRange:SlidesApp.TextRange,matchSourceFormatting:boolean):SlidesApp.TextRange;\\n/**Inserts text at the start offset. The text maintains the styling of the existing text at the\\nstart offset.\\n@param startOffset The number of characters past the start index of the current text range used\\n    to determine the inclusive start index of the text to insert.\\n@param text The string to insert.\\n@return the text range representing the inserted text.*/insertText(startOffset:Integer,text:string):SlidesApp.TextRange;\\n/**Returns `true` if there are no characters in this range, and returns `false`\\notherwise.*/isEmpty():boolean;\\n/**Replaces all instances of text matching find text with replace text. The search is case\\ninsensitive.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string):Integer;\\n/**Replaces all instances of text matching find text with replace text.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@param matchCase If `true`, the search is case sensitive; if `false`, the search is\\n    case insensitive.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string,matchCase:boolean):Integer;\\n/**Selects only the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in the active presentation and removes any previous\\nselection.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThe parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the corresponding [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) or the [`TableCell`](https://developers.google.com/apps-script/reference/slides/table-cell.html) is set\\nas the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()). The [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) or the [`TableCell`](https://developers.google.com/apps-script/reference/slides/table-cell.html) is set as the [`selected page element`](https://developers.google.com/apps-script/reference/slides/selection.html#getPageElementRange()).\\n\\n  The [`Selection`](https://developers.google.com/apps-script/reference/slides/selection.html) can be of two types:\\n  1. 1. Range of text, use select on a non-empty TextRange to select the range of the\\n      characters.\\n  1. 2. Cursor position, use an empty TextRange to place the cursor at the desired index.\\n\\n```\\nvar shape \\u003d SlidesApp.getActivePresentation().getSlides()[0].getShapes()[0];\\nshape.getText().setText(\\\"Hello\\\");\\n// Range selection: Select the text range \\\"He\\\".\\nshape.getText().getRange(0, 2).select();\\n// Cursor selection: Place the cursor after \\\"H\\\" like \\\"H|ello\\\".\\nshape.getText().getRange(1, 1).select();\\n```*/select():void;\\n/**Sets the text bounded by this range of the associated shape or table cell. The text maintains\\nthe styling of the start of the existing text.\\n@param newText The string to set as the new text.\\n@return the text range representing the set text*/setText(newText:string):SlidesApp.TextRange;}interface TextDirection{}interface _TextDirection{\\n/**The text goes from left to right.*/LEFT_TO_RIGHT:TextDirection;\\n/**The text goes from right to left.*/RIGHT_TO_LEFT:TextDirection;\\n/**A text direction that is not supported.*/UNSUPPORTED:TextDirection;}interface TextBaselineOffset{}interface _TextBaselineOffset{\\n/**The text is not vertically offset.*/NONE:TextBaselineOffset;\\n/**The text is vertically offset downwards.*/SUBSCRIPT:TextBaselineOffset;\\n/**The text is vertically offset upwards.*/SUPERSCRIPT:TextBaselineOffset;\\n/**An text baseline offset that is not supported.*/UNSUPPORTED:TextBaselineOffset;}interface TableRow{\\n/**Returns the cell at the specified index.\\n@param cellIndex The 0-based index of the cell to retrieve.\\n@return the cell.*/getCell(cellIndex:Integer):SlidesApp.TableCell;\\n/**Returns the 0-based index of the row.*/getIndex():Integer;\\n/**Returns the minimum height of the row in points. The actual height depends on the length of the\\ncontent of the cell.*/getMinimumHeight():number;\\n/**Returns the number of cells in this row.*/getNumCells():Integer;\\n/**Returns the table containing the current row.*/getParentTable():SlidesApp.Table;\\n/**Removes the table row.\\n\\nIf all the cells in the row are merged with other rows, the common rows spanned by these\\ncells are removed.\\n\\nIf no rows remain in the table after this removal, the whole table is removed.*/remove():void;}interface TableColumn{\\n/**Returns the cell at the specified index.\\n@param cellIndex The 0-based index of the cell to retrieve.*/getCell(cellIndex:Integer):SlidesApp.TableCell;\\n/**Returns the 0-based index of the column.*/getIndex():Integer;\\n/**Returns the number of cells in this column.*/getNumCells():Integer;\\n/**Returns the table containing the current column.*/getParentTable():SlidesApp.Table;\\n/**Returns the width of the column in points.*/getWidth():number;\\n/**Removes the table column.\\n\\nIf all the cells in the column are merged with other columns, the common columns spanned by\\nthese cells are removed.\\n\\nIf no columns remain in the table after this removal, the whole table is removed.*/remove():void;}interface TableCellRange{\\n/**Returns the list of [`TableCell`](https://developers.google.com/apps-script/reference/slides/table-cell.html) instances.*/getTableCells():SlidesApp.TableCell[];}interface TableCell{\\n/**Returns the 0-based column index of the table cell.*/getColumnIndex():Integer;\\n/**Returns the column span of the table cell.*/getColumnSpan():Integer;\\n/**Returns the [`ContentAlignment`](https://developers.google.com/apps-script/reference/slides/content-alignment.html) of the text in the table cell.*/getContentAlignment():SlidesApp.ContentAlignment;\\n/**Returns the fill of the table cell.*/getFill():SlidesApp.Fill;\\n/**Returns the head cell of this table cell. Returns `null` if this cell has not been merged\\nor if this cell is the head cell.*/getHeadCell():SlidesApp.TableCell;\\n/**Returns the merge state of the table cell.*/getMergeState():SlidesApp.CellMergeState;\\n/**Returns the table column containing the current cell.*/getParentColumn():SlidesApp.TableColumn;\\n/**Returns the table row containing the current cell.*/getParentRow():SlidesApp.TableRow;\\n/**Returns the table containing the current cell.*/getParentTable():SlidesApp.Table;\\n/**Returns the 0-based row index of the table cell.*/getRowIndex():Integer;\\n/**Returns the row span of the table cell.*/getRowSpan():Integer;\\n/**Returns the text content of the table cell. Returns `null` if the cell is merged but is\\nnot a head cell.\\n\\nText within a table cell always terminates with a newline character.*/getText():SlidesApp.TextRange;\\n/**Sets the [`ContentAlignment`](https://developers.google.com/apps-script/reference/slides/content-alignment.html) of the text in the table cell.*/setContentAlignment(contentAlignment:SlidesApp.ContentAlignment):SlidesApp.TableCell;}interface Table{\\n/**Aligns the element to the specified alignment position on the page.\\n@param alignmentPosition The position to align this page element to on the page.\\n@return This page element, for chaining.*/alignOnPage(alignmentPosition:SlidesApp.AlignmentPosition):SlidesApp.Table;\\n/**Appends a new column to the right of the last column of the table.\\n@return The new appended column.*/appendColumn():SlidesApp.TableColumn;\\n/**Appends a new row below the last row of the table.\\n@return The new appended row.*/appendRow():SlidesApp.TableRow;\\n/**Brings the page element forward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringForward():SlidesApp.Table;\\n/**Brings the page element to the front of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringToFront():SlidesApp.Table;\\n/**Duplicates the page element.\\n\\nThe duplicate page element is placed on the same page at the same position as the original.\\n@return The new duplicate of this page element.*/duplicate():SlidesApp.PageElement;\\n/**Returns the specified cell in the table.\\n@param rowIndex The row index of the cell to retrieve.\\n@param columnIndex The column index of the cell to retrieve.\\n@return The table cell retrieved.*/getCell(rowIndex:Integer,columnIndex:Integer):SlidesApp.TableCell;\\n/**Returns the specified column in the table.\\n@param columnIndex The 0-based column index.\\n@return The table column retrieved.*/getColumn(columnIndex:Integer):SlidesApp.TableColumn;\\n/**Returns the list of `ConnectionSite`s on the page element, or an empty list if the page\\nelement does not have any connection sites.\\n@return The connection sites list, which may be empty if this element has no connection sites.*/getConnectionSites():SlidesApp.ConnectionSite[];\\n/**Returns the page element's alt text description. The description is combined with the title to\\ndisplay and read alt text.\\n@return The page element's alt text description.*/getDescription():string;\\n/**Gets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getHeight():number;\\n/**Returns the element's inherent height in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getInherentHeight():number;\\n/**Returns the element's inherent width in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getInherentWidth():number;\\n/**Returns the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@return This element's horizontal position in points, from the upper-left corner of the page.*/getLeft():number;\\n/**Returns the number of columns in the table.\\n@return The number fo columns in this table.*/getNumColumns():Integer;\\n/**Returns the number of rows in the table.\\n@return The number of rows in this table.*/getNumRows():Integer;\\n/**Returns the unique ID for this object. Object IDs used by pages and page elements share the\\nsame namespace.\\n@return The unique ID for this object.*/getObjectId():string;\\n/**Returns the page element's type, represented as a [`PageElementType`](https://developers.google.com/apps-script/reference/slides/page-element-type.html) enum.\\n@return The page element's type.*/getPageElementType():SlidesApp.PageElementType;\\n/**Returns the group this page element belongs to, or `null` if the element is not in a\\ngroup.\\n@return The group this page element belongs to, or `null`.*/getParentGroup():SlidesApp.Group;\\n/**Returns the page this page element is on.\\n@return The page this element resides on.*/getParentPage():SlidesApp.Page;\\n/**Returns the element's clockwise rotation angle around its center in degrees, where zero degrees\\nmeans no rotation.\\n@return The rotation angle in degrees between 0 (inclusive) and 360 (exclusive).*/getRotation():number;\\n/**Returns the specified row in the table.\\n@param rowIndex The index of the row to retrieve.\\n@return The table row retrieved.*/getRow(rowIndex:Integer):SlidesApp.TableRow;\\n/**Returns the page element's alt text title. The title is combined with the description to\\ndisplay and read alt text.\\n@return The page element's alt text title.*/getTitle():string;\\n/**Gets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@return This element's vertical position in points, from the upper-left corner of the page.*/getTop():number;\\n/**Returns the page element's transform.\\n\\nThe visual appearance of the page element is determined by its absolute transform. To\\ncompute the absolute transform, preconcatenate a page element's transform with the transforms\\nof all of its parent groups. If the page element is not in a group, its absolute transform is\\nthe same as the value in this field.\\n@return The page element's transform.*/getTransform():SlidesApp.AffineTransform;\\n/**Returns the element's width in points, which is the width of the element's bounding box when\\nthe element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getWidth():number;\\n/**Inserts a new column at the specified index of the table.\\n\\nIf all the cells in the column to the left of the specified index are merged with other\\ncolumns, the new column is inserted to the right of the common columns spanned by these cells.\\n@param index The index at which to insert a new column.\\n@return The new inserted column.*/insertColumn(index:Integer):SlidesApp.TableColumn;\\n/**Inserts a new row at the specified index of the table.\\n\\nIf all the cells in the row above the specified index are merged with other rows, the new\\nrow is inserted below the common rows spanned by these cells.\\n@param index The index at which to insert a new row.\\n@return The new inserted row.*/insertRow(index:Integer):SlidesApp.TableRow;\\n/**Preconcatenates the provided transform to the existing transform of the page element.\\n\\n```\\nnewTransform \\u003d argument * existingTransform\\n```\\n\\nFor example, to move a page elements 36 points to the left:\\n\\n```\\nelement.preconcatenateTransform(SlidesApp.newAffineTransformBuilder()\\n    .setTranslateX(-36.0)\\n    .build());\\n```\\n\\nYou can also replace the page element's transform with [`setTransform(transform)`](https://developers.google.com/apps-script/reference/slides/table.html#setTransform(AffineTransform)).\\n@param transform The transform to preconcatenate onto this page element's transform.\\n@return This page element, for chaining.*/preconcatenateTransform(transform:SlidesApp.AffineTransform):SlidesApp.Table;\\n/**Removes the page element.\\n\\nIf after a remove operation, a `Group` contains only one or no page elements, the\\ngroup itself is also removed.\\n\\nIf a placeholder `PageElement` is removed on a master or layout, any empty inheriting\\nplaceholders are also removed.*/remove():void;\\n/**Scales the element's height by the specified ratio. The element's height is the height of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's height by.\\n@return This page element, for chaining.*/scaleHeight(ratio:number):SlidesApp.Table;\\n/**Scales the element's width by the specified ratio. The element's width is the width of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's width by.\\n@return This page element, for chaining.*/scaleWidth(ratio:number):SlidesApp.Table;\\n/**Selects only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation and removes any previous\\nselection. This is the same as calling [`select(replace)`](https://developers.google.com/apps-script/reference/slides/table.html#select(Boolean)) with `true`.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThis sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d slide.getPageElements()[0];\\n// Only select this page element and replace any previous selection.\\npageElement.select();\\n```*/select():void;\\n/**Selects the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nPass `true` to this method to select only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) and remove any\\nprevious selection. This also sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the\\n[`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\nPass `false` to select multiple [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects. The [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html)\\nobjects must be in the same [`Page`](https://developers.google.com/apps-script/reference/slides/page.html).\\n\\nThe following conditions must be met while selecting a page element using a `false`\\nparameter:\\n\\n  1. The parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object must be the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n  1. There should not be multiple [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) objects selected.\\n\\nTo make sure that’s the case the preferred approach is to select the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html)\\nfirst using [`Page.selectAsCurrentPage()`](https://developers.google.com/apps-script/reference/slides/page.html#selectAsCurrentPage()) and then select the page elements in that page.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// First select the slide page, as the current page selection.\\nslide.selectAsCurrentPage();\\n// Then select all the page elements in the selected slide page.\\nvar pageElements \\u003d slide.getPageElements();\\nfor (var i \\u003d 0; i \\u003c pageElements.length; i++) {\\n  pageElements[i].select(false);\\n}\\n```\\n@param replace If `true`, the selection replaces any previous selection; otherwise the\\n    selection is added to any previous selection.*/select(replace:boolean):void;\\n/**Sends the page element backward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendBackward():SlidesApp.Table;\\n/**Sends the page element to the back of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendToBack():SlidesApp.Table;\\n/**Sets the page element's alt text description.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text description to \\\"new alt text description\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setDescription('new alt text description');\\nLogger.log(pageElement.getDescription());\\n```\\n@param description The string to set the alt text description to.\\n@return This page element.*/setDescription(description:string):SlidesApp.Table;\\n/**Sets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param height The new height of this page element to set, in points.\\n@return This page element, for chaining.*/setHeight(height:number):SlidesApp.Table;\\n/**Sets the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@param left The new horizontal position to set, in points.\\n@return This page element, for chaining.*/setLeft(left:number):SlidesApp.Table;\\n/**Sets the element's clockwise rotation angle around its center in degrees.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param angle The new clockwise rotation angle to set, in degrees.\\n@return This page element, for chaining.*/setRotation(angle:number):SlidesApp.Table;\\n/**Sets the page element's alt text title.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text title to \\\"new alt text title\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setTitle('new alt text title');\\nLogger.log(pageElement.getTitle());\\n```\\n@param title The string to set the alt text title to.\\n@return This page element.*/setTitle(title:string):SlidesApp.Table;\\n/**Sets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@param top The new vertical position to set, in points.\\n@return This page element, for chaining.*/setTop(top:number):SlidesApp.Table;\\n/**Sets the transform of the page element with the provided transform.\\n\\nUpdating the transform of a group changes the absolute transform of the page elements in\\nthat group, which can change their visual appearance.\\n\\nUpdating the transform of a page element that is in a group only changes the transform of\\nthat page element; it doesn't affect the transforms of the group or other page elements in the\\ngroup.\\n\\nFor details on how transforms impact the visual appearance of page elements, see [`getTransform()`](https://developers.google.com/apps-script/reference/slides/table.html#getTransform()).\\n@param transform The transform that is set for this page element.\\n@return This element, for chaining.*/setTransform(transform:SlidesApp.AffineTransform):SlidesApp.Table;\\n/**Sets the element's width in points, which is the width of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param width The new width of this page element to set, in points.\\n@return This page element, for chaining.*/setWidth(width:number):SlidesApp.Table;}interface SpeakerSpotlight{\\n/**Aligns the element to the specified alignment position on the page.\\n@param alignmentPosition The position to align this page element to on the page.\\n@return This page element, for chaining.*/alignOnPage(alignmentPosition:SlidesApp.AlignmentPosition):SlidesApp.SpeakerSpotlight;\\n/**Brings the page element forward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringForward():SlidesApp.SpeakerSpotlight;\\n/**Brings the page element to the front of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringToFront():SlidesApp.SpeakerSpotlight;\\n/**Duplicates the page element.\\n\\nThe duplicate page element is placed on the same page at the same position as the original.\\n@return The new duplicate of this page element.*/duplicate():SlidesApp.PageElement;\\n/**Returns the [`Border`](https://developers.google.com/apps-script/reference/slides/border.html) of the speaker spotlight.\\n\\n```\\n// Gets the first element on the page, which in\\n// this example is of type speaker spotlight.\\nconst speakerSpotlight \\u003d slide.getPageElements()[0];\\n// Gets the border of the speaker spotlight.\\nconst border \\u003d speakerSpotlight.getBorder();\\n```\\n@return The border of the speaker spotlight.*/getBorder():SlidesApp.Border;\\n/**Returns the list of `ConnectionSite`s on the page element, or an empty list if the page\\nelement does not have any connection sites.\\n@return The connection sites list, which may be empty if this element has no connection sites.*/getConnectionSites():SlidesApp.ConnectionSite[];\\n/**Returns the page element's alt text description. The description is combined with the title to\\ndisplay and read alt text.\\n@return The page element's alt text description.*/getDescription():string;\\n/**Gets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getHeight():number;\\n/**Returns the element's inherent height in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getInherentHeight():number;\\n/**Returns the element's inherent width in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getInherentWidth():number;\\n/**Returns the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@return This element's horizontal position in points, from the upper-left corner of the page.*/getLeft():number;\\n/**Returns the [`ShapeType`](https://developers.google.com/apps-script/reference/slides/shape-type.html) of the mask applied to the speaker spotlight, or `null` if\\nthere is no mask.\\n\\n```\\n// Gets the first element on the page, which in\\n// this example is of type speaker spotlight.\\nconst speakerSpotlight \\u003d slide.getPageElements()[0];\\n// Gets the shape type of the mask on the speaker spotlight.\\nconst maskShapeType \\u003d speakerSpotlight.getMaskShapeType();\\n```\\n@return The shape type of the speaker spotlight mask.*/getMaskShapeType():SlidesApp.ShapeType;\\n/**Returns the unique ID for this object. Object IDs used by pages and page elements share the\\nsame namespace.\\n@return The unique ID for this object.*/getObjectId():string;\\n/**Returns the page element's type, represented as a [`PageElementType`](https://developers.google.com/apps-script/reference/slides/page-element-type.html) enum.\\n@return The page element's type.*/getPageElementType():SlidesApp.PageElementType;\\n/**Returns the group this page element belongs to, or `null` if the element is not in a\\ngroup.\\n@return The group this page element belongs to, or `null`.*/getParentGroup():SlidesApp.Group;\\n/**Returns the page this page element is on.\\n@return The page this element resides on.*/getParentPage():SlidesApp.Page;\\n/**Returns the element's clockwise rotation angle around its center in degrees, where zero degrees\\nmeans no rotation.\\n@return The rotation angle in degrees between 0 (inclusive) and 360 (exclusive).*/getRotation():number;\\n/**Returns the page element's alt text title. The title is combined with the description to\\ndisplay and read alt text.\\n@return The page element's alt text title.*/getTitle():string;\\n/**Gets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@return This element's vertical position in points, from the upper-left corner of the page.*/getTop():number;\\n/**Returns the page element's transform.\\n\\nThe visual appearance of the page element is determined by its absolute transform. To\\ncompute the absolute transform, preconcatenate a page element's transform with the transforms\\nof all of its parent groups. If the page element is not in a group, its absolute transform is\\nthe same as the value in this field.\\n@return The page element's transform.*/getTransform():SlidesApp.AffineTransform;\\n/**Returns the element's width in points, which is the width of the element's bounding box when\\nthe element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getWidth():number;\\n/**Preconcatenates the provided transform to the existing transform of the page element.\\n\\n```\\nnewTransform \\u003d argument * existingTransform\\n```\\n\\nFor example, to move a page elements 36 points to the left:\\n\\n```\\nelement.preconcatenateTransform(SlidesApp.newAffineTransformBuilder()\\n    .setTranslateX(-36.0)\\n    .build());\\n```\\n\\nYou can also replace the page element's transform with [`setTransform(transform)`](https://developers.google.com/apps-script/reference/slides/speaker-spotlight.html#setTransform(AffineTransform)).\\n@param transform The transform to preconcatenate onto this page element's transform.\\n@return This page element, for chaining.*/preconcatenateTransform(transform:SlidesApp.AffineTransform):SlidesApp.SpeakerSpotlight;\\n/**Removes the page element.\\n\\nIf after a remove operation, a `Group` contains only one or no page elements, the\\ngroup itself is also removed.\\n\\nIf a placeholder `PageElement` is removed on a master or layout, any empty inheriting\\nplaceholders are also removed.*/remove():void;\\n/**Scales the element's height by the specified ratio. The element's height is the height of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's height by.\\n@return This page element, for chaining.*/scaleHeight(ratio:number):SlidesApp.SpeakerSpotlight;\\n/**Scales the element's width by the specified ratio. The element's width is the width of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's width by.\\n@return This page element, for chaining.*/scaleWidth(ratio:number):SlidesApp.SpeakerSpotlight;\\n/**Selects only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation and removes any previous\\nselection. This is the same as calling [`select(replace)`](https://developers.google.com/apps-script/reference/slides/speaker-spotlight.html#select(Boolean)) with `true`.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThis sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d slide.getPageElements()[0];\\n// Only select this page element and replace any previous selection.\\npageElement.select();\\n```*/select():void;\\n/**Selects the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nPass `true` to this method to select only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) and remove any\\nprevious selection. This also sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the\\n[`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\nPass `false` to select multiple [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects. The [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html)\\nobjects must be in the same [`Page`](https://developers.google.com/apps-script/reference/slides/page.html).\\n\\nThe following conditions must be met while selecting a page element using a `false`\\nparameter:\\n\\n  1. The parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object must be the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n  1. There should not be multiple [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) objects selected.\\n\\nTo make sure that’s the case the preferred approach is to select the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html)\\nfirst using [`Page.selectAsCurrentPage()`](https://developers.google.com/apps-script/reference/slides/page.html#selectAsCurrentPage()) and then select the page elements in that page.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// First select the slide page, as the current page selection.\\nslide.selectAsCurrentPage();\\n// Then select all the page elements in the selected slide page.\\nvar pageElements \\u003d slide.getPageElements();\\nfor (var i \\u003d 0; i \\u003c pageElements.length; i++) {\\n  pageElements[i].select(false);\\n}\\n```\\n@param replace If `true`, the selection replaces any previous selection; otherwise the\\n    selection is added to any previous selection.*/select(replace:boolean):void;\\n/**Sends the page element backward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendBackward():SlidesApp.SpeakerSpotlight;\\n/**Sends the page element to the back of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendToBack():SlidesApp.SpeakerSpotlight;\\n/**Sets the page element's alt text description.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text description to \\\"new alt text description\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setDescription('new alt text description');\\nLogger.log(pageElement.getDescription());\\n```\\n@param description The string to set the alt text description to.\\n@return This page element.*/setDescription(description:string):SlidesApp.SpeakerSpotlight;\\n/**Sets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param height The new height of this page element to set, in points.\\n@return This page element, for chaining.*/setHeight(height:number):SlidesApp.SpeakerSpotlight;\\n/**Sets the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@param left The new horizontal position to set, in points.\\n@return This page element, for chaining.*/setLeft(left:number):SlidesApp.SpeakerSpotlight;\\n/**Sets the element's clockwise rotation angle around its center in degrees.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param angle The new clockwise rotation angle to set, in degrees.\\n@return This page element, for chaining.*/setRotation(angle:number):SlidesApp.SpeakerSpotlight;\\n/**Sets the page element's alt text title.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text title to \\\"new alt text title\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setTitle('new alt text title');\\nLogger.log(pageElement.getTitle());\\n```\\n@param title The string to set the alt text title to.\\n@return This page element.*/setTitle(title:string):SlidesApp.SpeakerSpotlight;\\n/**Sets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@param top The new vertical position to set, in points.\\n@return This page element, for chaining.*/setTop(top:number):SlidesApp.SpeakerSpotlight;\\n/**Sets the transform of the page element with the provided transform.\\n\\nUpdating the transform of a group changes the absolute transform of the page elements in\\nthat group, which can change their visual appearance.\\n\\nUpdating the transform of a page element that is in a group only changes the transform of\\nthat page element; it doesn't affect the transforms of the group or other page elements in the\\ngroup.\\n\\nFor details on how transforms impact the visual appearance of page elements, see [`getTransform()`](https://developers.google.com/apps-script/reference/slides/speaker-spotlight.html#getTransform()).\\n@param transform The transform that is set for this page element.\\n@return This element, for chaining.*/setTransform(transform:SlidesApp.AffineTransform):SlidesApp.SpeakerSpotlight;\\n/**Sets the element's width in points, which is the width of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param width The new width of this page element to set, in points.\\n@return This page element, for chaining.*/setWidth(width:number):SlidesApp.SpeakerSpotlight;}interface SpacingMode{}interface _SpacingMode{\\n/**Paragraph spacing is skipped between list elements.*/COLLAPSE_LISTS:SpacingMode;\\n/**Paragraph spacing is always rendered.*/NEVER_COLLAPSE:SpacingMode;\\n/**A spacing mode that is not supported.*/UNSUPPORTED:SpacingMode;}interface SolidFill{\\n/**Get the opacity of the color, in the interval from [0, 1.0], where 1.0 means fully opaque.*/getAlpha():number;\\n/**Get the color of the fill.*/getColor():SlidesApp.Color;}interface SlidePosition{}interface _SlidePosition{\\n/**The first slide in the presentation.*/FIRST_SLIDE:SlidePosition;\\n/**The last slide in the presentation.*/LAST_SLIDE:SlidePosition;\\n/**The next slide.*/NEXT_SLIDE:SlidePosition;\\n/**The previous slide.*/PREVIOUS_SLIDE:SlidePosition;}interface SlideLinkingMode{}interface _SlideLinkingMode{\\n/**Indicates that slides are linked.*/LINKED:SlideLinkingMode;\\n/**Indicates that slides aren't linked.*/NOT_LINKED:SlideLinkingMode;\\n/**A slide linking mode that isn't supported.*/UNSUPPORTED:SlideLinkingMode;}interface Slide{\\n/**Duplicates the slide.\\n\\nThe duplicate slide is created immediately following the original.\\n@return The duplicated slide.*/duplicate():SlidesApp.Slide;\\n/**Gets the page's background.\\n@return The page's background.*/getBackground():SlidesApp.PageBackground;\\n/**Gets the [`ColorScheme`](https://developers.google.com/apps-script/reference/slides/color-scheme.html) associated with the page.\\n@return The page's color scheme.*/getColorScheme():SlidesApp.ColorScheme;\\n/**Returns the list of [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) objects on the page.*/getGroups():SlidesApp.Group[];\\n/**Returns the list of [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) objects on the page.*/getImages():SlidesApp.Image[];\\n/**Gets the layout that the slide is based on or `null` if the slide is not based on a\\nlayout.*/getLayout():SlidesApp.Layout;\\n/**Returns the list of [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) objects on the page.*/getLines():SlidesApp.Line[];\\n/**Returns the notes page associated with the slide.*/getNotesPage():SlidesApp.NotesPage;\\n/**Gets the unique ID for the page. Object IDs used by pages and page elements share the same\\nnamespace.*/getObjectId():string;\\n/**Returns the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) on the page with the given ID, or `null` if none exists.\\n@param id The ID of the page element that is being retrieved.\\n@return The page element with the given ID.*/getPageElementById(id:string):SlidesApp.PageElement;\\n/**Returns the list of [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects rendered on the page.*/getPageElements():SlidesApp.PageElement[];\\n/**Gets the type of the page.\\n@return The page type.*/getPageType():SlidesApp.PageType;\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) or\\n`null` if a matching placeholder is not present.\\n\\nIf there are multiple placeholders with the same type, it returns the one with minimal\\nplaceholder index. If there are multiple matching placeholders with the same index, it returns\\nthe first placeholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType):SlidesApp.PageElement;\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) and\\na placeholder index, or `null` if the placeholder is not present.\\n\\nIf there are multiple placeholders with the same type and index, it returns the first\\nplaceholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE, 0);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType,placeholderIndex:Integer):SlidesApp.PageElement;\\n/**Returns the list of placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects in the page.\\n\\n```\\nvar master \\u003d SlidesApp.getActivePresentation().getMasters()[0];\\nLogger.log('Number of placeholders in the master: ' + master.getPlaceholders().length);\\n```*/getPlaceholders():SlidesApp.PageElement[];\\n/**Returns the list of [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) objects on the page.*/getShapes():SlidesApp.Shape[];\\n/**Returns the list of [`SheetsChart`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html) objects on the page.*/getSheetsCharts():SlidesApp.SheetsChart[];\\n/**Returns a [`SlideLinkingMode`](https://developers.google.com/apps-script/reference/slides/slide-linking-mode.html) indicating if the slide is linked to another slide.\\n@return The slide linking mode.*/getSlideLinkingMode():SlidesApp.SlideLinkingMode;\\n/**Returns the source [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) ID or `null` if the slide is not linked.\\n\\nA slide only has a source [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) ID when it is linked to a slide within\\nanother presentation.\\n@return The source presentation ID or `null`.*/getSourcePresentationId():string;\\n/**Returns the source slide ID or `null` if the slide is not linked.\\n\\nA slide only has a source slide ID when it is linked to a slide within another presentation.\\n@return The source slide ID or `null`.*/getSourceSlideObjectId():string;\\n/**Returns the list of [`Table`](https://developers.google.com/apps-script/reference/slides/table.html) objects on the page.*/getTables():SlidesApp.Table[];\\n/**Returns the list of [`Video`](https://developers.google.com/apps-script/reference/slides/video.html) objects on the page.*/getVideos():SlidesApp.Video[];\\n/**Returns the list of [`WordArt`](https://developers.google.com/apps-script/reference/slides/word-art.html) objects on the page.*/getWordArts():SlidesApp.WordArt[];\\n/**Groups all the specified page elements.\\n\\nThere should be at least two page elements on the same page that are not already in another\\ngroup. Some page elements, such as [`Videos`](https://developers.google.com/apps-script/reference/slides/video.html), [`Tables`](https://developers.google.com/apps-script/reference/slides/table.html) and [`placeholder Shapes`](https://developers.google.com/apps-script/reference/slides/shape.html#getPlaceholderType()) cannot be grouped.\\n@param pageElements The elements to group together.\\n@return The new group.*/group(pageElements:SlidesApp.PageElement[]):SlidesApp.Group;\\n/**Inserts a copy of the provided [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a group between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar group \\u003d otherPresentationSlide.getGroups()[0];\\ncurrentPresentationSlide.insertGroup(group); // Also available for Layout, Master, and Page.\\n```\\n@param group The group to be copied and inserted.\\n@return The inserted group.*/insertGroup(group:SlidesApp.Group):SlidesApp.Group;\\n/**Inserts an image at the top left corner of the page with a default size from the specified\\nimage blob.\\n\\nInserting the image fetches it from the [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once and a copy is stored for\\ndisplay inside the presentation. Images must be less than 50MB in size, cannot exceed 25\\nmegapixels, and must be in either in PNG, JPEG, or GIF format.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// Get the Drive image file with the given ID.\\nvar image \\u003d DriveApp.getFileById(fileId);\\nslide.insertImage(image);\\n```\\n@param blobSource The image data.\\n@return The inserted image.*/insertImage(blobSource:BlobSource):SlidesApp.Image;\\n/**Inserts an image on the page with the provided position and size from the specified image blob.\\n\\nThe image is fetched from the provided [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once at insertion time and a copy\\nis stored for display inside the presentation. Images must be less than 50MB in size, cannot\\nexceed 25 megapixels, and must be in either in PNG, JPEG, or GIF format.\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the provided size.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// Get the Drive image file with the given ID.\\nvar image \\u003d DriveApp.getFileById(fileId);\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 300, height: 100};\\nslide.insertImage(image, position.left, position.top, size.width, size.height);\\n```\\n@param blobSource The image data.\\n@param left The horizontal position of the image in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the image in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the image in points.\\n@param height The height of the image in points.\\n@return The inserted image.*/insertImage(blobSource:BlobSource,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a copy of the provided [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page.\\n\\nThe inserted images's position on this page is determined from the source image's position\\non its respective page.\\n\\nIf the provided image is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted image.\\n\\nIf the provided image is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the image from the source\\npresentation. If the copied placeholder image is empty, nothing is inserted in the destination\\npresentation.\\n\\n```\\n// Copy an image between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar image \\u003d otherPresentationSlide.getImages[0];\\ncurrentPresentationSlide.insertImage(image);\\n```\\n@param image The image to be copied and inserted.\\n@return The inserted image.*/insertImage(image:SlidesApp.Image):SlidesApp.Image;\\n/**Inserts an image at the top left corner of the page with a default size from the provided URL.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`Image.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n@param imageUrl The image URL.\\n@return The inserted image.*/insertImage(imageUrl:string):SlidesApp.Image;\\n/**Inserts an image on the page with the provided position and size from the provided URL.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`Image.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the provided size.\\n@param imageUrl The image URL.\\n@param left The horizontal position of the image in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the image in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the image in points.\\n@param height The height of the image in points.\\n@return The inserted image.*/insertImage(imageUrl:string,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a copy of the provided [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a line between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar line \\u003d otherPresentationSlide.getLines[0];\\ncurrentPresentationSlide.insertLine(line);\\n```\\n@param line The line to be copied and inserted.\\n@return The inserted line.*/insertLine(line:SlidesApp.Line):SlidesApp.Line;\\n/**Inserts a line on the page.\\n\\n```\\n// Insert a line in the first slide of the presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar startPoint \\u003d {left: 10, top: 10};\\nvar endPoint \\u003d {left: 40, top: 40};\\nslide.insertLine(\\n    SlidesApp.LineCategory.STRAIGHT,\\n    startPoint.left,\\n    startPoint.top,\\n    endPoint.left,\\n    endPoint.top);\\n```\\n@param lineCategory The category of the line to insert.\\n@param startLeft The horizontal position of the start point of the line, measured in points\\n    from the upper left corner of the page.\\n@param startTop The vertical position of the start point of the line, measured in points from\\n    the upper left corner of the page.\\n@param endLeft The horizontal position of the end point of the line, measured in points from\\n    the upper left corner of the page.\\n@param endTop The vertical position of the end point of the line, measured in points from the\\n    upper left corner of the page.\\n@return The inserted line.*/insertLine(lineCategory:SlidesApp.LineCategory,startLeft:number,startTop:number,endLeft:number,endTop:number):SlidesApp.Line;\\n/**Inserts a line on the page connecting two [`connection sites`](https://developers.google.com/apps-script/reference/slides/connection-site.html). The two\\nconnection sites must be on this page.\\n\\n```\\n// Insert a line in the first slide of the presentation connecting two shapes.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar shape1 \\u003d slide.insertShape(SlidesApp.ShapeType.RECTANGLE);\\nvar shape2 \\u003d slide.insertShape(SlidesApp.ShapeType.CLOUD);\\nslide.insertLine(\\n    SlidesApp.LineCategory.BENT,\\n    shape1.getConnectionSites()[0],\\n    shape2.getConnectionSites()[1]);\\n```\\n@param lineCategory The category of the line to insert.\\n@param startConnectionSite The connection site where the start of the line is to be connected.\\n@param endConnectionSite The connection site where the end of the line is to be connected.\\n@return The inserted line.*/insertLine(lineCategory:SlidesApp.LineCategory,startConnectionSite:SlidesApp.ConnectionSite,endConnectionSite:SlidesApp.ConnectionSite):SlidesApp.Line;\\n/**Inserts a copy of the provided [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a page element between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d otherPresentationSlide.getPageElements()[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertPageElement(pageElement);\\n```\\n@param pageElement The page element to be copied and inserted.\\n@return The inserted page element.*/insertPageElement(pageElement:SlidesApp.PageElement):SlidesApp.PageElement;\\n/**Inserts a copy of the provided [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a shape between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar shape \\u003d otherPresentationSlide.getShapes[0];\\ncurrentPresentationSlide.insertShape(shape); // Also available for Layout, Master, and Page.\\n```\\n@param shape The shape to be copied and inserted.\\n@return The inserted shape.*/insertShape(shape:SlidesApp.Shape):SlidesApp.Shape;\\n/**Inserts a shape on the page.\\n\\nThe shape is inserted with a default size at the top left corner of the page.\\n\\n```\\n// Insert a shape in the first slide of the presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertShape(SlidesApp.ShapeType.RECTANGLE);\\n```\\n@param shapeType The type of shape to insert.\\n@return The inserted shape.*/insertShape(shapeType:SlidesApp.ShapeType):SlidesApp.Shape;\\n/**Inserts a shape on the page.\\n@param shapeType The type of shape to insert.\\n@param left The horizontal position of the shape, measured from the upper left corner of the\\n    page.\\n@param top The vertical position of the shape, measured from the upper left corner of the page.\\n@param width The width of the shape.\\n@param height The height of the shape.\\n@return The inserted shape.*/insertShape(shapeType:SlidesApp.ShapeType,left:number,top:number,width:number,height:number):SlidesApp.Shape;\\n/**Inserts a copy of the provided [`SheetsChart`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a sheets chart between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar sheetsChart \\u003d otherPresentationSlide.getSheetsCharts[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertSheetsChart(sheetsChart);\\n```\\n@param sheetsChart The sheets chart to be copied and inserted.\\n@return The inserted sheets chart.*/insertSheetsChart(sheetsChart:SlidesApp.SheetsChart):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart on the page.\\n\\nThe chart is inserted with a default size at the top left corner of the page.\\n\\nThe inserted chart is linked with the source Google Sheets chart which allows it to be\\nupdated. Other collaborators can see the link to the source spreadsheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertSheetsChart(chart);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@return The inserted chart in the page.*/insertSheetsChart(sourceChart:SpreadsheetApp.EmbeddedChart):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart on the page with the provided position and size.\\n\\nIn order to maintain the chart's aspect ratio, the chart is scaled and centered with respect\\nto the provided size.\\n\\nThe inserted chart is linked with the source Google Sheets chart which allows it to be\\nupdated. Other collaborators can see the link to the source spreadsheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 200, height: 200};\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertSheetsChart(\\n    chart,\\n    position.left,\\n    position.top,\\n    size.width,\\n    size.height);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@param left The horizontal position of the chart in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the chart in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the chart in points.\\n@param height The height of the chart in points.\\n@return The inserted chart in the page.*/insertSheetsChart(sourceChart:SpreadsheetApp.EmbeddedChart,left:number,top:number,width:number,height:number):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart as an [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page.\\n\\nThe image of the chart is inserted with a default size at the top left corner of the page.\\n\\nThe inserted image of chart is not linked with the source Google Sheets chart.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertSheetsChartAsImage(chart); // Also available for Layout, Master, and Page.\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@return The inserted image of the chart in the page.*/insertSheetsChartAsImage(sourceChart:SpreadsheetApp.EmbeddedChart):SlidesApp.Image;\\n/**Inserts a Google Sheets chart as an [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page with the provided position and\\nsize.\\n\\nIn order to maintain the chart image's aspect ratio, the image is scaled and centered with\\nrespect to the provided size.\\n\\nThe inserted image of the chart is not linked with the source Google Sheets chart.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 200, height: 200};\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertSheetsChartAsImage(\\n    chart,\\n    position.left,\\n    position.right,\\n    size.width,\\n    size.height);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@param left The horizontal position of the chart in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the chart in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the chart in points.\\n@param height The height of the chart in points.\\n@return The inserted image of the chart in the page.*/insertSheetsChartAsImage(sourceChart:SpreadsheetApp.EmbeddedChart,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a table on the page.\\n\\nThe table is centered on the page with default size and evenly distributed rows and columns.\\n@param numRows The number of rows in the table.\\n@param numColumns The number of columns in the table.\\n@return The inserted table.*/insertTable(numRows:Integer,numColumns:Integer):SlidesApp.Table;\\n/**Inserts a table on the page with the provided position and size.\\n\\nRows and columns are evenly distributed in the created table.\\n@param numRows The number of rows in the table.\\n@param numColumns The number of columns in the table.\\n@param left The horizontal position of the table, measured from the upper left corner of the\\n    page.\\n@param top The vertical position of the table, measured from the upper left corner of the page.\\n@param width The width of the table.\\n@param height The minimum height of the table. The actual height of the rendered table depends\\n    on factors such as text font size.\\n@return The inserted table.*/insertTable(numRows:Integer,numColumns:Integer,left:number,top:number,width:number,height:number):SlidesApp.Table;\\n/**Inserts a copy of the provided [`Table`](https://developers.google.com/apps-script/reference/slides/table.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a table between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar table \\u003d otherPresentationSlide.getTables[0];\\ncurrentPresentationSlide.insertTable(table); // Also available for Layout, Master, and Page.\\n```\\n@param table The table to be copied and inserted.\\n@return The inserted table.*/insertTable(table:SlidesApp.Table):SlidesApp.Table;\\n/**Inserts a text box [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) containing the provided string on the page.\\n\\nThe text box shape is inserted with a default size at the top left corner of the page.\\n\\n```\\n// Insert text box with \\\"Hello\\\" on the first slide of presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertTextBox('Hello'); // Also available for Layout, Master, and Page.\\n```\\n@param text The string the text box shape should contain.\\n@return The inserted text box shape.*/insertTextBox(text:string):SlidesApp.Shape;\\n/**Inserts a text box [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) containing the provided string on the page.\\n\\n```\\n// Insert text box with \\\"Hello\\\" on the first slide of presentation. This text box is a square\\n// with a length of 10 points on each side.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertTextBox('Hello', 0, 0, 10, 10); // Also available for Layout, Master, and Page.\\n```\\n@param text The string the text box shape should contain.\\n@param left The horizontal position of the text box shape, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the text box shape, measured from the upper left corner of\\n    the page.\\n@param width The width of the text box shape.\\n@param height The height of the text box shape.\\n@return The inserted text box shape.*/insertTextBox(text:string,left:number,top:number,width:number,height:number):SlidesApp.Shape;\\n/**Inserts a copy of the provided [`Video`](https://developers.google.com/apps-script/reference/slides/video.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a video between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar video \\u003d otherPresentationSlide.getVideos[0];\\ncurrentPresentationSlide.insertVideo(video); // Also available for Layout, Master, and Page.\\n```\\n@param video The video to be copied and inserted.\\n@return The inserted video.*/insertVideo(video:SlidesApp.Video):SlidesApp.Video;\\n/**Inserts a video at the top left corner of the page with a default size.\\n\\nOnly YouTube videos are currently supported.\\n@param videoUrl The URL of the video to insert.\\n@return The inserted video.*/insertVideo(videoUrl:string):SlidesApp.Video;\\n/**Inserts a video on the page with the provided position and size.\\n\\nOnly YouTube videos are currently supported.\\n@param videoUrl The URL of the video to insert.\\n@param left The horizontal position of the video in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the video in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the video in points.\\n@param height The height of the video in points.\\n@return The inserted video.*/insertVideo(videoUrl:string,left:number,top:number,width:number,height:number):SlidesApp.Video;\\n/**Inserts a copy of the provided [`WordArt`](https://developers.google.com/apps-script/reference/slides/word-art.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a word art between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar wordArt \\u003d otherPresentationSlide.getWordArts[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertWordArt(wordArt);\\n```\\n@param wordArt The group to be copied and inserted.\\n@return The inserted word art.*/insertWordArt(wordArt:SlidesApp.WordArt):SlidesApp.WordArt;\\n/**Returns whether the slide is skipped in the presentation mode.\\n@return `True` if the slide is skipped in the presentation mode.*/isSkipped():boolean;\\n/**Move the slide to the specified index.\\n@param index The index where the slide should be moved to, based on the slide arrangement\\n    before the move. The index should be between zero and the number of slides in the\\n    presentation, inclusive.*/move(index:Integer):void;\\n/**Refreshes the slide to reflect any changes made to the linked source slide. If this slide is\\nnot linked, returns without making any changes.\\n\\nThe `refreshSlide` method copies the linked source slide's corresponding master and\\nlayout pages into the slide's presentation if they do not already exist. If they do already\\nexist, they are likewise updated to reflect any changes made to the source.\\n\\n__Note__: The refresh overwrites any changes made to the current\\nslide in order to reflect the state of the source slide.\\n\\n```\\nvar currentPresentation \\u003d SlidesApp.getActivePresentation();\\nvar sourcePresentation \\u003d SlidesApp.openById('sourcePresentationId');\\nvar sourceSlide \\u003d sourcePresentation.getSlides()[0];\\nvar linkedSlide \\u003d currentPresentation.append(sourceSlide, SlidesApp.SlideLinkingMode.LINKED);\\n\\nsourceSlide.insertText('hello world'); // Only the source slide has the text box.\\n\\nlinkedSlide.refreshSlide(); // The linked slide now has the text box.\\n```*/refreshSlide():void;\\n/**Removes the page.*/remove():void;\\n/**Replaces all instances of text matching find text with replace text. The search is case\\ninsensitive.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string):Integer;\\n/**Replaces all instances of text matching find text with replace text.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@param matchCase If `true`, the search is case sensitive; if `false`, the search is\\n    case insensitive.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string,matchCase:boolean):Integer;\\n/**Selects the [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) in the active presentation as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()) and removes any previous selection.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\n```\\n// Select the first slide as the current page selection and replace any previous selection.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.selectAsCurrentPage(); // Also available for Layout, Master, and Page.\\n```*/selectAsCurrentPage():void;\\n/**Sets whether the slide is skipped in the presentation mode.\\n@param isSkipped `True` to skip the slide in the presentation mode.*/setSkipped(isSkipped:boolean):void;\\n/**Unlinks the current [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) from its source slide. If this slide is not linked, returns\\nwithout making any changes.\\n\\n```\\nvar currentPresentation \\u003d SlidesApp.getActivePresentation();\\nvar sourcePresentation \\u003d SlidesApp.openById('sourcePresentationId');\\nvar sourceSlide \\u003d sourcePresentation.getSlides()[0];\\nvar linkedSlide \\u003d currentPresentation.append(sourceSlide, SlidesApp.SlideLinkingMode.LINKED);\\n\\nlinkedSlide.unlink();\\n\\nlinkedSlide.getSourcePresentationId(); // returns null\\nlinkedSlide.getSourceSlideObjectId();  // returns null\\nlinkedSlide.getSlideLinkingMode();     // returns SlidesApp.SlideLinkingMode.NOT_LINKED\\n```*/unlink():void;}interface SheetsChartEmbedType{}interface _SheetsChartEmbedType{\\n/**Indicates that the chart is embedded as an image.*/IMAGE:SheetsChartEmbedType;\\n/**Represents a chart that is not supported and cannot be further classified.*/UNSUPPORTED:SheetsChartEmbedType;}interface SheetsChart{\\n/**Aligns the element to the specified alignment position on the page.\\n@param alignmentPosition The position to align this page element to on the page.\\n@return This page element, for chaining.*/alignOnPage(alignmentPosition:SlidesApp.AlignmentPosition):SlidesApp.SheetsChart;\\n/**Returns the chart as an image or `null` if the chart is not an embedded image.\\n@return This chart as an image, or `null` if the chart is not an embedded image.*/asImage():SlidesApp.Image;\\n/**Brings the page element forward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringForward():SlidesApp.SheetsChart;\\n/**Brings the page element to the front of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringToFront():SlidesApp.SheetsChart;\\n/**Duplicates the page element.\\n\\nThe duplicate page element is placed on the same page at the same position as the original.\\n@return The new duplicate of this page element.*/duplicate():SlidesApp.PageElement;\\n/**Gets the ID of the specific chart in the Google Sheets spreadsheet that is embedded.\\n@return The ID of the embedded chart.*/getChartId():Integer;\\n/**Returns the list of `ConnectionSite`s on the page element, or an empty list if the page\\nelement does not have any connection sites.\\n@return The connection sites list, which may be empty if this element has no connection sites.*/getConnectionSites():SlidesApp.ConnectionSite[];\\n/**Returns the page element's alt text description. The description is combined with the title to\\ndisplay and read alt text.\\n@return The page element's alt text description.*/getDescription():string;\\n/**Returns the embed type of the Sheets chart.\\n@return The embed type of this chart.*/getEmbedType():SlidesApp.SheetsChartEmbedType;\\n/**Gets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getHeight():number;\\n/**Returns the element's inherent height in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getInherentHeight():number;\\n/**Returns the element's inherent width in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getInherentWidth():number;\\n/**Returns the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@return This element's horizontal position in points, from the upper-left corner of the page.*/getLeft():number;\\n/**Returns the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) or `null` if there is no link.\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null) {\\n  Logger.log('Shape has a link of type: ' + link.getLinkType());\\n}\\n```*/getLink():SlidesApp.Link;\\n/**Returns the unique ID for this object. Object IDs used by pages and page elements share the\\nsame namespace.\\n@return The unique ID for this object.*/getObjectId():string;\\n/**Returns the page element's type, represented as a [`PageElementType`](https://developers.google.com/apps-script/reference/slides/page-element-type.html) enum.\\n@return The page element's type.*/getPageElementType():SlidesApp.PageElementType;\\n/**Returns the group this page element belongs to, or `null` if the element is not in a\\ngroup.\\n@return The group this page element belongs to, or `null`.*/getParentGroup():SlidesApp.Group;\\n/**Returns the page this page element is on.\\n@return The page this element resides on.*/getParentPage():SlidesApp.Page;\\n/**Returns the element's clockwise rotation angle around its center in degrees, where zero degrees\\nmeans no rotation.\\n@return The rotation angle in degrees between 0 (inclusive) and 360 (exclusive).*/getRotation():number;\\n/**Gets the ID of the Google Sheets spreadsheet that contains the source chart.\\n@return The ID of the spreadsheet that contains the source chart.*/getSpreadsheetId():string;\\n/**Returns the page element's alt text title. The title is combined with the description to\\ndisplay and read alt text.\\n@return The page element's alt text title.*/getTitle():string;\\n/**Gets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@return This element's vertical position in points, from the upper-left corner of the page.*/getTop():number;\\n/**Returns the page element's transform.\\n\\nThe visual appearance of the page element is determined by its absolute transform. To\\ncompute the absolute transform, preconcatenate a page element's transform with the transforms\\nof all of its parent groups. If the page element is not in a group, its absolute transform is\\nthe same as the value in this field.\\n@return The page element's transform.*/getTransform():SlidesApp.AffineTransform;\\n/**Returns the element's width in points, which is the width of the element's bounding box when\\nthe element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getWidth():number;\\n/**Preconcatenates the provided transform to the existing transform of the page element.\\n\\n```\\nnewTransform \\u003d argument * existingTransform\\n```\\n\\nFor example, to move a page elements 36 points to the left:\\n\\n```\\nelement.preconcatenateTransform(SlidesApp.newAffineTransformBuilder()\\n    .setTranslateX(-36.0)\\n    .build());\\n```\\n\\nYou can also replace the page element's transform with [`setTransform(transform)`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html#setTransform(AffineTransform)).\\n@param transform The transform to preconcatenate onto this page element's transform.\\n@return This page element, for chaining.*/preconcatenateTransform(transform:SlidesApp.AffineTransform):SlidesApp.SheetsChart;\\n/**Refreshes the chart by replacing it with the latest version of the chart from Google Sheets. If\\nthe chart is already up to date, does not make any change to the chart in the presentation.*/refresh():void;\\n/**Removes the page element.\\n\\nIf after a remove operation, a `Group` contains only one or no page elements, the\\ngroup itself is also removed.\\n\\nIf a placeholder `PageElement` is removed on a master or layout, any empty inheriting\\nplaceholders are also removed.*/remove():void;\\n/**Removes a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html).\\n\\n```\\nshape.removeLink();\\n```*/removeLink():void;\\n/**Scales the element's height by the specified ratio. The element's height is the height of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's height by.\\n@return This page element, for chaining.*/scaleHeight(ratio:number):SlidesApp.SheetsChart;\\n/**Scales the element's width by the specified ratio. The element's width is the width of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's width by.\\n@return This page element, for chaining.*/scaleWidth(ratio:number):SlidesApp.SheetsChart;\\n/**Selects only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation and removes any previous\\nselection. This is the same as calling [`select(replace)`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html#select(Boolean)) with `true`.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThis sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d slide.getPageElements()[0];\\n// Only select this page element and replace any previous selection.\\npageElement.select();\\n```*/select():void;\\n/**Selects the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nPass `true` to this method to select only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) and remove any\\nprevious selection. This also sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the\\n[`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\nPass `false` to select multiple [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects. The [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html)\\nobjects must be in the same [`Page`](https://developers.google.com/apps-script/reference/slides/page.html).\\n\\nThe following conditions must be met while selecting a page element using a `false`\\nparameter:\\n\\n  1. The parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object must be the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n  1. There should not be multiple [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) objects selected.\\n\\nTo make sure that’s the case the preferred approach is to select the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html)\\nfirst using [`Page.selectAsCurrentPage()`](https://developers.google.com/apps-script/reference/slides/page.html#selectAsCurrentPage()) and then select the page elements in that page.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// First select the slide page, as the current page selection.\\nslide.selectAsCurrentPage();\\n// Then select all the page elements in the selected slide page.\\nvar pageElements \\u003d slide.getPageElements();\\nfor (var i \\u003d 0; i \\u003c pageElements.length; i++) {\\n  pageElements[i].select(false);\\n}\\n```\\n@param replace If `true`, the selection replaces any previous selection; otherwise the\\n    selection is added to any previous selection.*/select(replace:boolean):void;\\n/**Sends the page element backward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendBackward():SlidesApp.SheetsChart;\\n/**Sends the page element to the back of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendToBack():SlidesApp.SheetsChart;\\n/**Sets the page element's alt text description.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text description to \\\"new alt text description\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setDescription('new alt text description');\\nLogger.log(pageElement.getDescription());\\n```\\n@param description The string to set the alt text description to.\\n@return This page element.*/setDescription(description:string):SlidesApp.SheetsChart;\\n/**Sets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param height The new height of this page element to set, in points.\\n@return This page element, for chaining.*/setHeight(height:number):SlidesApp.SheetsChart;\\n/**Sets the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@param left The new horizontal position to set, in points.\\n@return This page element, for chaining.*/setLeft(left:number):SlidesApp.SheetsChart;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the zero-based index of the slide.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nshape.setLinkSlide(0);\\n```\\n@param slideIndex The zero-based index to the slide.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slideIndex:Integer):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html), the link is set by the given slide ID.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nvar slide \\u003d presentation.getSlides()[0];\\nshape.setLinkSlide(slide);\\n```\\n@param slide The [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) to be linked.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slide:SlidesApp.Slide):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the relative position of the slide.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nshape.setLinkSlide(SlideApp.SlidePosition.FIRST_SLIDE);\\n```\\n@param slidePosition The relative [`SlidePosition`](https://developers.google.com/apps-script/reference/slides/slide-position.html).\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slidePosition:SlidesApp.SlidePosition):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given non-empty URL string.\\n\\n```\\n// Set a link to the URL.\\nshape.setLinkUrl(\\\"https://slides.google.com\\\");\\n```\\n@param url The URL string.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkUrl(url:string):SlidesApp.Link;\\n/**Sets the element's clockwise rotation angle around its center in degrees.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param angle The new clockwise rotation angle to set, in degrees.\\n@return This page element, for chaining.*/setRotation(angle:number):SlidesApp.SheetsChart;\\n/**Sets the page element's alt text title.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text title to \\\"new alt text title\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setTitle('new alt text title');\\nLogger.log(pageElement.getTitle());\\n```\\n@param title The string to set the alt text title to.\\n@return This page element.*/setTitle(title:string):SlidesApp.SheetsChart;\\n/**Sets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@param top The new vertical position to set, in points.\\n@return This page element, for chaining.*/setTop(top:number):SlidesApp.SheetsChart;\\n/**Sets the transform of the page element with the provided transform.\\n\\nUpdating the transform of a group changes the absolute transform of the page elements in\\nthat group, which can change their visual appearance.\\n\\nUpdating the transform of a page element that is in a group only changes the transform of\\nthat page element; it doesn't affect the transforms of the group or other page elements in the\\ngroup.\\n\\nFor details on how transforms impact the visual appearance of page elements, see [`getTransform()`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html#getTransform()).\\n@param transform The transform that is set for this page element.\\n@return This element, for chaining.*/setTransform(transform:SlidesApp.AffineTransform):SlidesApp.SheetsChart;\\n/**Sets the element's width in points, which is the width of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param width The new width of this page element to set, in points.\\n@return This page element, for chaining.*/setWidth(width:number):SlidesApp.SheetsChart;}interface ShapeType{}interface _ShapeType{\\n/**Curved arc shape. Corresponds to ECMA-376 ST_ShapeType 'arc'.*/ARC:ShapeType;\\n/**East arrow shape.*/ARROW_EAST:ShapeType;\\n/**North arrow shape.*/ARROW_NORTH:ShapeType;\\n/**Northeast arrow shape.*/ARROW_NORTH_EAST:ShapeType;\\n/**Bent arrow shape. Corresponds to ECMA-376 ST_ShapeType 'bentArrow'.*/BENT_ARROW:ShapeType;\\n/**Bent up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'bentUpArrow'.*/BENT_UP_ARROW:ShapeType;\\n/**Bevel shape. Corresponds to ECMA-376 ST_ShapeType 'bevel'.*/BEVEL:ShapeType;\\n/**Block arc shape. Corresponds to ECMA-376 ST_ShapeType 'blockArc'.*/BLOCK_ARC:ShapeType;\\n/**Brace pair shape. Corresponds to ECMA-376 ST_ShapeType 'bracePair'.*/BRACE_PAIR:ShapeType;\\n/**Bracket pair shape. Corresponds to ECMA-376 ST_ShapeType 'bracketPair'.*/BRACKET_PAIR:ShapeType;\\n/**Can shape. Corresponds to ECMA-376 ST_ShapeType 'can'.*/CAN:ShapeType;\\n/**Chevron shape. Corresponds to ECMA-376 ST_ShapeType 'chevron'.*/CHEVRON:ShapeType;\\n/**Chord shape. Corresponds to ECMA-376 ST_ShapeType 'chord'.*/CHORD:ShapeType;\\n/**Cloud shape. Corresponds to ECMA-376 ST_ShapeType 'cloud'.*/CLOUD:ShapeType;\\n/**Callout cloud shape. Corresponds to ECMA-376 ST_ShapeType 'cloudCallout'.*/CLOUD_CALLOUT:ShapeType;\\n/**Corner shape. Corresponds to ECMA-376 ST_ShapeType 'corner'.*/CORNER:ShapeType;\\n/**Cube shape. Corresponds to ECMA-376 ST_ShapeType 'cube'.*/CUBE:ShapeType;\\n/**Curved down arrow shape. Corresponds to ECMA-376 ST_ShapeType 'curvedDownArrow'.*/CURVED_DOWN_ARROW:ShapeType;\\n/**Curved left arrow shape. Corresponds to ECMA-376 ST_ShapeType 'curvedLeftArrow'.*/CURVED_LEFT_ARROW:ShapeType;\\n/**Curved right arrow shape. Corresponds to ECMA-376 ST_ShapeType 'curvedRightArrow'.*/CURVED_RIGHT_ARROW:ShapeType;\\n/**Curved up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'curvedUpArrow'.*/CURVED_UP_ARROW:ShapeType;\\n/**Custom shape.*/CUSTOM:ShapeType;\\n/**Decagon shape. Corresponds to ECMA-376 ST_ShapeType 'decagon'.*/DECAGON:ShapeType;\\n/**Diagonal stripe shape. Corresponds to ECMA-376 ST_ShapeType 'diagStripe'.*/DIAGONAL_STRIPE:ShapeType;\\n/**Diamond shape. Corresponds to ECMA-376 ST_ShapeType 'diamond'.*/DIAMOND:ShapeType;\\n/**Dodecagon shape. Corresponds to ECMA-376 ST_ShapeType 'dodecagon'.*/DODECAGON:ShapeType;\\n/**Donut shape. Corresponds to ECMA-376 ST_ShapeType 'donut'.*/DONUT:ShapeType;\\n/**Double wave shape. Corresponds to ECMA-376 ST_ShapeType 'doubleWave'.*/DOUBLE_WAVE:ShapeType;\\n/**Down arrow shape. Corresponds to ECMA-376 ST_ShapeType 'downArrow'.*/DOWN_ARROW:ShapeType;\\n/**Callout down arrow shape. Corresponds to ECMA-376 ST_ShapeType 'downArrowCallout'.*/DOWN_ARROW_CALLOUT:ShapeType;\\n/**Ellipse shape. Corresponds to ECMA-376 ST_ShapeType 'ellipse'.*/ELLIPSE:ShapeType;\\n/**Ellipse ribbon shape. Corresponds to ECMA-376 ST_ShapeType 'ellipseRibbon'.*/ELLIPSE_RIBBON:ShapeType;\\n/**Ellipse ribbon 2 shape. Corresponds to ECMA-376 ST_ShapeType 'ellipseRibbon2'.*/ELLIPSE_RIBBON_2:ShapeType;\\n/**Alternate process flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartAlternateProcess'.*/FLOW_CHART_ALTERNATE_PROCESS:ShapeType;\\n/**Collate flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartCollate'.*/FLOW_CHART_COLLATE:ShapeType;\\n/**Connector flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartConnector'.*/FLOW_CHART_CONNECTOR:ShapeType;\\n/**Decision flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartDecision'.*/FLOW_CHART_DECISION:ShapeType;\\n/**Delay flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartDelay'.*/FLOW_CHART_DELAY:ShapeType;\\n/**Display flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartDisplay'.*/FLOW_CHART_DISPLAY:ShapeType;\\n/**Document flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartDocument'.*/FLOW_CHART_DOCUMENT:ShapeType;\\n/**Extract flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartExtract'.*/FLOW_CHART_EXTRACT:ShapeType;\\n/**Input output flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartInputOutput'.*/FLOW_CHART_INPUT_OUTPUT:ShapeType;\\n/**Internal storage flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartInternalStorage'.*/FLOW_CHART_INTERNAL_STORAGE:ShapeType;\\n/**Magnetic disk flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartMagneticDisk'.*/FLOW_CHART_MAGNETIC_DISK:ShapeType;\\n/**Magnetic drum flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartMagneticDrum'.*/FLOW_CHART_MAGNETIC_DRUM:ShapeType;\\n/**Magnetic tape flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartMagneticTape'.*/FLOW_CHART_MAGNETIC_TAPE:ShapeType;\\n/**Manual input flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartManualInput'.*/FLOW_CHART_MANUAL_INPUT:ShapeType;\\n/**Manual operation flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartManualOperation'.*/FLOW_CHART_MANUAL_OPERATION:ShapeType;\\n/**Merge flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartMerge'.*/FLOW_CHART_MERGE:ShapeType;\\n/**Multi-document flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartMultidocument'.*/FLOW_CHART_MULTIDOCUMENT:ShapeType;\\n/**Offline storage flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartOfflineStorage'.*/FLOW_CHART_OFFLINE_STORAGE:ShapeType;\\n/**Off-page connector flow shape. Corresponds to ECMA-376 ST_ShapeType\\n'flowChartOffpageConnector'.*/FLOW_CHART_OFFPAGE_CONNECTOR:ShapeType;\\n/**Online storage flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartOnlineStorage'.*/FLOW_CHART_ONLINE_STORAGE:ShapeType;\\n/**Or flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartOr'.*/FLOW_CHART_OR:ShapeType;\\n/**Predefined process flow shape. Corresponds to ECMA-376 ST_ShapeType\\n'flowChartPredefinedProcess'.*/FLOW_CHART_PREDEFINED_PROCESS:ShapeType;\\n/**Preparation flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartPreparation'.*/FLOW_CHART_PREPARATION:ShapeType;\\n/**Process flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartProcess'.*/FLOW_CHART_PROCESS:ShapeType;\\n/**Punched card flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartPunchedCard'.*/FLOW_CHART_PUNCHED_CARD:ShapeType;\\n/**Punched tape flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartPunchedTape'.*/FLOW_CHART_PUNCHED_TAPE:ShapeType;\\n/**Sort flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartSort'.*/FLOW_CHART_SORT:ShapeType;\\n/**Summing junction flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartSummingJunction'.*/FLOW_CHART_SUMMING_JUNCTION:ShapeType;\\n/**Terminator flow shape. Corresponds to ECMA-376 ST_ShapeType 'flowChartTerminator'.*/FLOW_CHART_TERMINATOR:ShapeType;\\n/**Folded corner shape. Corresponds to ECMA-376 ST_ShapeType 'foldedCorner'.*/FOLDED_CORNER:ShapeType;\\n/**Frame shape. Corresponds to ECMA-376 ST_ShapeType 'frame'.*/FRAME:ShapeType;\\n/**Half frame shape. Corresponds to ECMA-376 ST_ShapeType 'halfFrame'.*/HALF_FRAME:ShapeType;\\n/**Heart shape. Corresponds to ECMA-376 ST_ShapeType 'heart'.*/HEART:ShapeType;\\n/**Heptagon shape. Corresponds to ECMA-376 ST_ShapeType 'heptagon'.*/HEPTAGON:ShapeType;\\n/**Hexagon shape. Corresponds to ECMA-376 ST_ShapeType 'hexagon'.*/HEXAGON:ShapeType;\\n/**Home plate shape. Corresponds to ECMA-376 ST_ShapeType 'homePlate'.*/HOME_PLATE:ShapeType;\\n/**Horizontal scroll shape. Corresponds to ECMA-376 ST_ShapeType 'horizontalScroll'.*/HORIZONTAL_SCROLL:ShapeType;\\n/**Irregular seal 1 shape. Corresponds to ECMA-376 ST_ShapeType 'irregularSeal1'.*/IRREGULAR_SEAL_1:ShapeType;\\n/**Irregular seal 2 shape. Corresponds to ECMA-376 ST_ShapeType 'irregularSeal2'.*/IRREGULAR_SEAL_2:ShapeType;\\n/**Left arrow shape. Corresponds to ECMA-376 ST_ShapeType 'leftArrow'.*/LEFT_ARROW:ShapeType;\\n/**Callout left arrow shape. Corresponds to ECMA-376 ST_ShapeType 'leftArrowCallout'.*/LEFT_ARROW_CALLOUT:ShapeType;\\n/**Left brace shape. Corresponds to ECMA-376 ST_ShapeType 'leftBrace'.*/LEFT_BRACE:ShapeType;\\n/**Left bracket shape. Corresponds to ECMA-376 ST_ShapeType 'leftBracket'.*/LEFT_BRACKET:ShapeType;\\n/**Left right arrow shape. Corresponds to ECMA-376 ST_ShapeType 'leftRightArrow'.*/LEFT_RIGHT_ARROW:ShapeType;\\n/**Callout left right arrow shape. Corresponds to ECMA-376 ST_ShapeType 'leftRightArrowCallout'.*/LEFT_RIGHT_ARROW_CALLOUT:ShapeType;\\n/**Left right up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'leftRightUpArrow'.*/LEFT_RIGHT_UP_ARROW:ShapeType;\\n/**Left up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'leftUpArrow'.*/LEFT_UP_ARROW:ShapeType;\\n/**Lightning bolt shape. Corresponds to ECMA-376 ST_ShapeType 'lightningBolt'.*/LIGHTNING_BOLT:ShapeType;\\n/**Divide math shape. Corresponds to ECMA-376 ST_ShapeType 'mathDivide'.*/MATH_DIVIDE:ShapeType;\\n/**Equal math shape. Corresponds to ECMA-376 ST_ShapeType 'mathEqual'.*/MATH_EQUAL:ShapeType;\\n/**Minus math shape. Corresponds to ECMA-376 ST_ShapeType 'mathMinus'.*/MATH_MINUS:ShapeType;\\n/**Multiply math shape. Corresponds to ECMA-376 ST_ShapeType 'mathMultiply'.*/MATH_MULTIPLY:ShapeType;\\n/**Not equal math shape. Corresponds to ECMA-376 ST_ShapeType 'mathNotEqual'.*/MATH_NOT_EQUAL:ShapeType;\\n/**Plus math shape. Corresponds to ECMA-376 ST_ShapeType 'mathPlus'.*/MATH_PLUS:ShapeType;\\n/**Moon shape. Corresponds to ECMA-376 ST_ShapeType 'moon'.*/MOON:ShapeType;\\n/**Notched right arrow shape. Corresponds to ECMA-376 ST_ShapeType 'notchedRightArrow'.*/NOTCHED_RIGHT_ARROW:ShapeType;\\n/**No smoking shape. Corresponds to ECMA-376 ST_ShapeType 'noSmoking'.*/NO_SMOKING:ShapeType;\\n/**Octagon shape. Corresponds to ECMA-376 ST_ShapeType 'octagon'.*/OCTAGON:ShapeType;\\n/**Parallelogram shape. Corresponds to ECMA-376 ST_ShapeType 'parallelogram'.*/PARALLELOGRAM:ShapeType;\\n/**Pentagon shape. Corresponds to ECMA-376 ST_ShapeType 'pentagon'.*/PENTAGON:ShapeType;\\n/**Pie shape. Corresponds to ECMA-376 ST_ShapeType 'pie'.*/PIE:ShapeType;\\n/**Plaque shape. Corresponds to ECMA-376 ST_ShapeType 'plaque'.*/PLAQUE:ShapeType;\\n/**Plus shape. Corresponds to ECMA-376 ST_ShapeType 'plus'.*/PLUS:ShapeType;\\n/**Quad-arrow shape. Corresponds to ECMA-376 ST_ShapeType 'quadArrow'.*/QUAD_ARROW:ShapeType;\\n/**Callout quad-arrow shape. Corresponds to ECMA-376 ST_ShapeType 'quadArrowCallout'.*/QUAD_ARROW_CALLOUT:ShapeType;\\n/**Rectangle shape. Corresponds to ECMA-376 ST_ShapeType 'rect'.*/RECTANGLE:ShapeType;\\n/**Ribbon shape. Corresponds to ECMA-376 ST_ShapeType 'ribbon'.*/RIBBON:ShapeType;\\n/**Ribbon 2 shape. Corresponds to ECMA-376 ST_ShapeType 'ribbon2'.*/RIBBON_2:ShapeType;\\n/**Right arrow shape. Corresponds to ECMA-376 ST_ShapeType 'rightArrow'.*/RIGHT_ARROW:ShapeType;\\n/**Callout right arrow shape. Corresponds to ECMA-376 ST_ShapeType 'rightArrowCallout'.*/RIGHT_ARROW_CALLOUT:ShapeType;\\n/**Right brace shape. Corresponds to ECMA-376 ST_ShapeType 'rightBrace'.*/RIGHT_BRACE:ShapeType;\\n/**Right bracket shape. Corresponds to ECMA-376 ST_ShapeType 'rightBracket'.*/RIGHT_BRACKET:ShapeType;\\n/**Right triangle shape. Corresponds to ECMA-376 ST_ShapeType 'rtTriangle'.*/RIGHT_TRIANGLE:ShapeType;\\n/**One round corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType 'round1Rect'.*/ROUND_1_RECTANGLE:ShapeType;\\n/**Two diagonal round corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType\\n'round2DiagRect'.*/ROUND_2_DIAGONAL_RECTANGLE:ShapeType;\\n/**Two same-side round corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType\\n'round2SameRect'.*/ROUND_2_SAME_RECTANGLE:ShapeType;\\n/**Round corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType 'roundRect'.*/ROUND_RECTANGLE:ShapeType;\\n/**Smiley face shape. Corresponds to ECMA-376 ST_ShapeType 'smileyFace'.*/SMILEY_FACE:ShapeType;\\n/**One snip corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType 'snip1Rect'.*/SNIP_1_RECTANGLE:ShapeType;\\n/**Two diagonal snip corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType 'snip2DiagRect'.*/SNIP_2_DIAGONAL_RECTANGLE:ShapeType;\\n/**Two same-side snip corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType\\n'snip2SameRect'.*/SNIP_2_SAME_RECTANGLE:ShapeType;\\n/**One snip one round corner rectangle shape. Corresponds to ECMA-376 ST_ShapeType\\n'snipRoundRect'.*/SNIP_ROUND_RECTANGLE:ShapeType;\\n/**Speech shape.*/SPEECH:ShapeType;\\n/**Star burst shape.*/STARBURST:ShapeType;\\n/**Ten pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star10'.*/STAR_10:ShapeType;\\n/**Twelve pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star12'.*/STAR_12:ShapeType;\\n/**Sixteen pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star16'.*/STAR_16:ShapeType;\\n/**Twenty four pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star24'.*/STAR_24:ShapeType;\\n/**Thirty two pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star32'.*/STAR_32:ShapeType;\\n/**Four pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star4'.*/STAR_4:ShapeType;\\n/**Five pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star5'.*/STAR_5:ShapeType;\\n/**Six pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star6'.*/STAR_6:ShapeType;\\n/**Seven pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star7'.*/STAR_7:ShapeType;\\n/**Eight pointed star shape. Corresponds to ECMA-376 ST_ShapeType 'star8'.*/STAR_8:ShapeType;\\n/**Striped right arrow shape. Corresponds to ECMA-376 ST_ShapeType 'stripedRightArrow'.*/STRIPED_RIGHT_ARROW:ShapeType;\\n/**Sun shape. Corresponds to ECMA-376 ST_ShapeType 'sun'.*/SUN:ShapeType;\\n/**Teardrop shape. Corresponds to ECMA-376 ST_ShapeType 'teardrop'.*/TEARDROP:ShapeType;\\n/**Text box shape.*/TEXT_BOX:ShapeType;\\n/**Trapezoid shape. Corresponds to ECMA-376 ST_ShapeType 'trapezoid'.*/TRAPEZOID:ShapeType;\\n/**Triangle shape. Corresponds to ECMA-376 ST_ShapeType 'triangle'.*/TRIANGLE:ShapeType;\\n/**A shape type that is not supported.*/UNSUPPORTED:ShapeType;\\n/**Up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'upArrow'.*/UP_ARROW:ShapeType;\\n/**Callout up arrow shape. Corresponds to ECMA-376 ST_ShapeType 'upArrowCallout'.*/UP_ARROW_CALLOUT:ShapeType;\\n/**Up down arrow shape. Corresponds to ECMA-376 ST_ShapeType 'upDownArrow'.*/UP_DOWN_ARROW:ShapeType;\\n/**U-turn arrow shape. Corresponds to ECMA-376 ST_ShapeType 'uturnArrow'.*/UTURN_ARROW:ShapeType;\\n/**Vertical scroll shape. Corresponds to ECMA-376 ST_ShapeType 'verticalScroll'.*/VERTICAL_SCROLL:ShapeType;\\n/**Wave shape. Corresponds to ECMA-376 ST_ShapeType 'wave'.*/WAVE:ShapeType;\\n/**Callout wedge ellipse shape. Corresponds to ECMA-376 ST_ShapeType 'wedgeEllipseCallout'.*/WEDGE_ELLIPSE_CALLOUT:ShapeType;\\n/**Callout wedge rectangle shape. Corresponds to ECMA-376 ST_ShapeType 'wedgeRectCallout'.*/WEDGE_RECTANGLE_CALLOUT:ShapeType;\\n/**Callout wedge round rectangle shape. Corresponds to ECMA-376 ST_ShapeType\\n'wedgeRoundRectCallout'.*/WEDGE_ROUND_RECTANGLE_CALLOUT:ShapeType;}interface Shape{\\n/**Aligns the element to the specified alignment position on the page.\\n@param alignmentPosition The position to align this page element to on the page.\\n@return This page element, for chaining.*/alignOnPage(alignmentPosition:SlidesApp.AlignmentPosition):SlidesApp.Shape;\\n/**Brings the page element forward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringForward():SlidesApp.Shape;\\n/**Brings the page element to the front of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringToFront():SlidesApp.Shape;\\n/**Duplicates the page element.\\n\\nThe duplicate page element is placed on the same page at the same position as the original.\\n@return The new duplicate of this page element.*/duplicate():SlidesApp.PageElement;\\n/**Returns the [`Autofit`](https://developers.google.com/apps-script/reference/slides/autofit.html) of the text within this shape. This is `null` if the shape\\ndoesn't allow text.\\n@return The autofit of the text within this shape.*/getAutofit():SlidesApp.Autofit;\\n/**Returns the [`Border`](https://developers.google.com/apps-script/reference/slides/border.html) of the shape.\\n@return The border setting of this shape.*/getBorder():SlidesApp.Border;\\n/**Returns the list of `ConnectionSite`s on the page element, or an empty list if the page\\nelement does not have any connection sites.\\n@return The connection sites list, which may be empty if this element has no connection sites.*/getConnectionSites():SlidesApp.ConnectionSite[];\\n/**Returns the [`ContentAlignment`](https://developers.google.com/apps-script/reference/slides/content-alignment.html) of the text in the shape.\\n@return The alignment of text within this shape.*/getContentAlignment():SlidesApp.ContentAlignment;\\n/**Returns the page element's alt text description. The description is combined with the title to\\ndisplay and read alt text.\\n@return The page element's alt text description.*/getDescription():string;\\n/**Returns the [`Fill`](https://developers.google.com/apps-script/reference/slides/fill.html) of the shape.\\n@return The fill setting of this shape.*/getFill():SlidesApp.Fill;\\n/**Gets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getHeight():number;\\n/**Returns the element's inherent height in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getInherentHeight():number;\\n/**Returns the element's inherent width in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getInherentWidth():number;\\n/**Returns the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@return This element's horizontal position in points, from the upper-left corner of the page.*/getLeft():number;\\n/**Returns the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) or `null` if there is no link.\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null) {\\n  Logger.log('Shape has a link of type: ' + link.getLinkType());\\n}\\n```*/getLink():SlidesApp.Link;\\n/**Returns the unique ID for this object. Object IDs used by pages and page elements share the\\nsame namespace.\\n@return The unique ID for this object.*/getObjectId():string;\\n/**Returns the page element's type, represented as a [`PageElementType`](https://developers.google.com/apps-script/reference/slides/page-element-type.html) enum.\\n@return The page element's type.*/getPageElementType():SlidesApp.PageElementType;\\n/**Returns the group this page element belongs to, or `null` if the element is not in a\\ngroup.\\n@return The group this page element belongs to, or `null`.*/getParentGroup():SlidesApp.Group;\\n/**Returns the page this page element is on.\\n@return The page this element resides on.*/getParentPage():SlidesApp.Page;\\n/**Returns the parent page element of the placeholder. Returns `null` if the shape is not a\\nplaceholder or has no parent.\\n@return The parent page element of this shape placeholder, or `null` if this shape is not\\n    a placeholder or doesn't have a parent.*/getParentPlaceholder():SlidesApp.PageElement;\\n/**Returns the placeholder index of the shape. If two or more instances of the same placeholder\\ntypes are present in the same page, they each have their own unique index value. Returns `null` if the shape is not a placeholder.\\n@return This shape's placeholder index, or `null` if the shape is not a placeholder.*/getPlaceholderIndex():Integer;\\n/**Returns the placeholder type of the shape, or `PlaceholderType.NONE` if the shape is not\\na placeholder.\\n@return The placeholder type of this shape.*/getPlaceholderType():SlidesApp.PlaceholderType;\\n/**Returns the element's clockwise rotation angle around its center in degrees, where zero degrees\\nmeans no rotation.\\n@return The rotation angle in degrees between 0 (inclusive) and 360 (exclusive).*/getRotation():number;\\n/**Returns the type of the shape.\\n@return The type of this shape.*/getShapeType():SlidesApp.ShapeType;\\n/**Returns the text content of the shape.\\n\\nText within a shape always terminates with a newline character.\\n@return The text content of this shape.*/getText():SlidesApp.TextRange;\\n/**Returns the page element's alt text title. The title is combined with the description to\\ndisplay and read alt text.\\n@return The page element's alt text title.*/getTitle():string;\\n/**Gets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@return This element's vertical position in points, from the upper-left corner of the page.*/getTop():number;\\n/**Returns the page element's transform.\\n\\nThe visual appearance of the page element is determined by its absolute transform. To\\ncompute the absolute transform, preconcatenate a page element's transform with the transforms\\nof all of its parent groups. If the page element is not in a group, its absolute transform is\\nthe same as the value in this field.\\n@return The page element's transform.*/getTransform():SlidesApp.AffineTransform;\\n/**Returns the element's width in points, which is the width of the element's bounding box when\\nthe element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getWidth():number;\\n/**Preconcatenates the provided transform to the existing transform of the page element.\\n\\n```\\nnewTransform \\u003d argument * existingTransform\\n```\\n\\nFor example, to move a page elements 36 points to the left:\\n\\n```\\nelement.preconcatenateTransform(SlidesApp.newAffineTransformBuilder()\\n    .setTranslateX(-36.0)\\n    .build());\\n```\\n\\nYou can also replace the page element's transform with [`setTransform(transform)`](https://developers.google.com/apps-script/reference/slides/shape.html#setTransform(AffineTransform)).\\n@param transform The transform to preconcatenate onto this page element's transform.\\n@return This page element, for chaining.*/preconcatenateTransform(transform:SlidesApp.AffineTransform):SlidesApp.Shape;\\n/**Removes the page element.\\n\\nIf after a remove operation, a `Group` contains only one or no page elements, the\\ngroup itself is also removed.\\n\\nIf a placeholder `PageElement` is removed on a master or layout, any empty inheriting\\nplaceholders are also removed.*/remove():void;\\n/**Removes a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html).\\n\\n```\\nshape.removeLink();\\n```*/removeLink():void;\\n/**Replaces this shape with an image provided by a [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html).\\n\\nThe image is fetched from the provided [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once at insertion time and a copy\\nis stored for display inside the presentation. Images must be less than 50MB in size, cannot\\nexceed 25 megapixels, and must be in PNG, JPEG, or GIF format.\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the size of the existing shape.\\n\\n```\\nvar shape \\u003d SlidesApp.getActivePresentation().getSlides()[0].getShapes()[0];\\n// Get the Drive image file with the given ID.\\nvar driveImage \\u003d DriveApp.getFileById(fileId);\\nshape.replaceWithImage(driveImage);\\n```\\n@param blobSource The image data.\\n@return The [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) that replaced the shape.*/replaceWithImage(blobSource:BlobSource):SlidesApp.Image;\\n/**Replaces this shape with an image provided by a [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html).\\n\\nInserting the image fetches it from the [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once and a copy is stored for\\ndisplay inside the presentation. Images must be less than 50MB in size, cannot exceed 25\\nmegapixels, and must be in either in PNG, JPEG, or GIF format.\\n\\n```\\nvar shape \\u003d SlidesApp.getActivePresentation().getSlides()[0].getShapes()[0];\\n// Get the Drive image file with the given ID.\\nvar driveImage \\u003d DriveApp.getFileById(fileId);\\n// Replace and crop the replaced image.\\nshape.replaceWithImage(driveImage, true);\\n```\\n@param blobSource The image data.\\n@param crop If `true`, crops the image to fit the existing shape's size. Otherwise, the\\n    image is scaled and centered.\\n@return The [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) that replaced the shape.*/replaceWithImage(blobSource:BlobSource,crop:boolean):SlidesApp.Image;\\n/**Replaces this shape with an image.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`Image.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the size of the existing shape.\\n@param imageUrl The image URL to download the image from.\\n@return The [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) that replaced the shape.*/replaceWithImage(imageUrl:string):SlidesApp.Image;\\n/**Replaces this shape with an image.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be no larger than 2kB. The URL itself is saved with the image and\\nexposed via [`Image.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n@param imageUrl The image URL to download the image from.\\n@param crop If `true`, crops the image to fit the existing shape's size. Otherwise, the\\n    image is scaled and centered.\\n@return The [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) that replaced the shape.*/replaceWithImage(imageUrl:string,crop:boolean):SlidesApp.Image;\\n/**Replaces this shape with a Google Sheets chart.\\n\\nThe chart is linked with the source Google Sheets chart which allows it to be updated. Other\\ncollaborators can see the link to the source spreadsheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Replace the shape with the Sheets chart.\\nvar shape \\u003d SlidesApp.getActivePresentation().getSlides()[0].getShapes()[0];\\nshape.replaceWithSheetsChart(chart);\\n```\\n@param sourceChart The chart in a spreadsheet that replaces the shape.\\n@return The chart that replaced the shape.*/replaceWithSheetsChart(sourceChart:SpreadsheetApp.EmbeddedChart):SlidesApp.SheetsChart;\\n/**Replaces this shape with an image of a Google Sheets chart.\\n\\nIn order to maintain the Google Sheets chart's aspect ratio, the chart image is scaled and\\ncentered with respect to the size of the existing shape.\\n\\nThe image of the chart is not linked with the source Google Sheets chart.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Replace the shape with the Sheets chart as an image.\\nvar shape \\u003d SlidesApp.getActivePresentation().getSlides()[0].getShapes()[0];\\nshape.replaceWithSheetsChartAsImage(chart);\\n```\\n@param sourceChart The chart in a spreadsheet that replaces the shape.\\n@return The image of the chart that replaced the shape.*/replaceWithSheetsChartAsImage(sourceChart:SpreadsheetApp.EmbeddedChart):SlidesApp.Image;\\n/**Scales the element's height by the specified ratio. The element's height is the height of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's height by.\\n@return This page element, for chaining.*/scaleHeight(ratio:number):SlidesApp.Shape;\\n/**Scales the element's width by the specified ratio. The element's width is the width of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's width by.\\n@return This page element, for chaining.*/scaleWidth(ratio:number):SlidesApp.Shape;\\n/**Selects only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation and removes any previous\\nselection. This is the same as calling [`select(replace)`](https://developers.google.com/apps-script/reference/slides/shape.html#select(Boolean)) with `true`.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThis sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d slide.getPageElements()[0];\\n// Only select this page element and replace any previous selection.\\npageElement.select();\\n```*/select():void;\\n/**Selects the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nPass `true` to this method to select only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) and remove any\\nprevious selection. This also sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the\\n[`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\nPass `false` to select multiple [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects. The [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html)\\nobjects must be in the same [`Page`](https://developers.google.com/apps-script/reference/slides/page.html).\\n\\nThe following conditions must be met while selecting a page element using a `false`\\nparameter:\\n\\n  1. The parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object must be the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n  1. There should not be multiple [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) objects selected.\\n\\nTo make sure that’s the case the preferred approach is to select the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html)\\nfirst using [`Page.selectAsCurrentPage()`](https://developers.google.com/apps-script/reference/slides/page.html#selectAsCurrentPage()) and then select the page elements in that page.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// First select the slide page, as the current page selection.\\nslide.selectAsCurrentPage();\\n// Then select all the page elements in the selected slide page.\\nvar pageElements \\u003d slide.getPageElements();\\nfor (var i \\u003d 0; i \\u003c pageElements.length; i++) {\\n  pageElements[i].select(false);\\n}\\n```\\n@param replace If `true`, the selection replaces any previous selection; otherwise the\\n    selection is added to any previous selection.*/select(replace:boolean):void;\\n/**Sends the page element backward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendBackward():SlidesApp.Shape;\\n/**Sends the page element to the back of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendToBack():SlidesApp.Shape;\\n/**Sets the [`ContentAlignment`](https://developers.google.com/apps-script/reference/slides/content-alignment.html) of the text in the shape.\\n\\nThis method automatically deactivates text autofit properties on the updated shapes.\\n@param contentAlignment The alignment to set.\\n@return This shape, for chaining.*/setContentAlignment(contentAlignment:SlidesApp.ContentAlignment):SlidesApp.Shape;\\n/**Sets the page element's alt text description.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text description to \\\"new alt text description\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setDescription('new alt text description');\\nLogger.log(pageElement.getDescription());\\n```\\n@param description The string to set the alt text description to.\\n@return This page element.*/setDescription(description:string):SlidesApp.Shape;\\n/**Sets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param height The new height of this page element to set, in points.\\n@return This page element, for chaining.*/setHeight(height:number):SlidesApp.Shape;\\n/**Sets the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@param left The new horizontal position to set, in points.\\n@return This page element, for chaining.*/setLeft(left:number):SlidesApp.Shape;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the zero-based index of the slide.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nshape.setLinkSlide(0);\\n```\\n@param slideIndex The zero-based index to the slide.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slideIndex:Integer):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html), the link is set by the given slide ID.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nvar slide \\u003d presentation.getSlides()[0];\\nshape.setLinkSlide(slide);\\n```\\n@param slide The [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) to be linked.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slide:SlidesApp.Slide):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the relative position of the slide.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nshape.setLinkSlide(SlideApp.SlidePosition.FIRST_SLIDE);\\n```\\n@param slidePosition The relative [`SlidePosition`](https://developers.google.com/apps-script/reference/slides/slide-position.html).\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slidePosition:SlidesApp.SlidePosition):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given non-empty URL string.\\n\\n```\\n// Set a link to the URL.\\nshape.setLinkUrl(\\\"https://slides.google.com\\\");\\n```\\n@param url The URL string.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkUrl(url:string):SlidesApp.Link;\\n/**Sets the element's clockwise rotation angle around its center in degrees.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param angle The new clockwise rotation angle to set, in degrees.\\n@return This page element, for chaining.*/setRotation(angle:number):SlidesApp.Shape;\\n/**Sets the page element's alt text title.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text title to \\\"new alt text title\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setTitle('new alt text title');\\nLogger.log(pageElement.getTitle());\\n```\\n@param title The string to set the alt text title to.\\n@return This page element.*/setTitle(title:string):SlidesApp.Shape;\\n/**Sets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@param top The new vertical position to set, in points.\\n@return This page element, for chaining.*/setTop(top:number):SlidesApp.Shape;\\n/**Sets the transform of the page element with the provided transform.\\n\\nUpdating the transform of a group changes the absolute transform of the page elements in\\nthat group, which can change their visual appearance.\\n\\nUpdating the transform of a page element that is in a group only changes the transform of\\nthat page element; it doesn't affect the transforms of the group or other page elements in the\\ngroup.\\n\\nFor details on how transforms impact the visual appearance of page elements, see [`getTransform()`](https://developers.google.com/apps-script/reference/slides/shape.html#getTransform()).\\n@param transform The transform that is set for this page element.\\n@return This element, for chaining.*/setTransform(transform:SlidesApp.AffineTransform):SlidesApp.Shape;\\n/**Sets the element's width in points, which is the width of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param width The new width of this page element to set, in points.\\n@return This page element, for chaining.*/setWidth(width:number):SlidesApp.Shape;}interface SelectionType{}interface _SelectionType{\\n/**Current page selection.*/CURRENT_PAGE:SelectionType;\\n/**No selection.*/NONE:SelectionType;\\n/**Page selection in the thumbnail flimstrip.*/PAGE:SelectionType;\\n/**Page element selection.*/PAGE_ELEMENT:SelectionType;\\n/**Table cell selection.*/TABLE_CELL:SelectionType;\\n/**Text selection.*/TEXT:SelectionType;\\n/**A selection type that is not supported.*/UNSUPPORTED:SelectionType;}interface Selection{\\n/**Returns the currently active [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) or `null` if there is no active page.\\n\\n```\\nvar selection \\u003d SlidesApp.getActivePresentation().getSelection();\\nvar currentPage \\u003d selection.getCurrentPage();\\nif (currentPage !\\u003d null) {\\n  Logger.log('Selected current active page ID: ' + currentPage.getObjectId());\\n}\\n```*/getCurrentPage():SlidesApp.Page;\\n/**Returns the [`PageElementRange`](https://developers.google.com/apps-script/reference/slides/page-element-range.html) collection of [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) instances that are\\nselected or `null` if there are no [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) instances selected.\\n\\n```\\nvar selection \\u003d SlidesApp.getActivePresentation().getSelection();\\nvar selectionType \\u003d selection.getSelectionType();\\nif (selectionType \\u003d\\u003d SlidesApp.SelectionType.PAGE_ELEMENT) {\\n  var currentPage \\u003d selection.getCurrentPage();\\n  var pageElements \\u003d selection.getPageElementRange().getPageElements();\\n  Logger.log('Number of page elements selected: ' + pageElements.length);\\n}\\n```*/getPageElementRange():SlidesApp.PageElementRange;\\n/**Returns the [`PageRange`](https://developers.google.com/apps-script/reference/slides/page-range.html) a collection of [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) instances in the flimstrip that are\\nselected or `null` if the selection is not of type [`SelectionType.PAGE`](https://developers.google.com/apps-script/reference/slides/selection-type.html#PAGE).\\n\\n```\\nvar selection \\u003d SlidesApp.getActivePresentation().getSelection();\\nvar selectionType \\u003d selection.getSelectionType();\\nif (selectionType \\u003d\\u003d SlidesApp.SelectionType.PAGE) {\\n  var pageRange \\u003d selection.getPageRange();\\n  Logger.log('Number of pages in the flimstrip selected: ' + pageRange.getPages().length);\\n}\\n}```*/getPageRange():SlidesApp.PageRange;\\n/**Returns the [`SelectionType`](https://developers.google.com/apps-script/reference/slides/selection-type.html).\\n\\n```\\nvar selection \\u003d SlidesApp.getActivePresentation().getSelection();\\nvar selectionType \\u003d selection.getSelectionType();\\nif (selectionType \\u003d\\u003d SlidesApp.SelectionType.CURRENT_PAGE) {\\n  var currentPage \\u003d selection.getCurrentPage();\\n  Logger.log('Selected current active page ID: ' + currentPage.getObjectId());\\n}\\n```*/getSelectionType():SlidesApp.SelectionType;\\n/**Returns the [`TableCellRange`](https://developers.google.com/apps-script/reference/slides/table-cell-range.html) collection of [`TableCell`](https://developers.google.com/apps-script/reference/slides/table-cell.html) instances that are selected\\nor `null` if there are no [`TableCell`](https://developers.google.com/apps-script/reference/slides/table-cell.html) instances selected.\\n\\n```\\nvar selection \\u003d SlidesApp.getActivePresentation().getSelection();\\nvar selectionType \\u003d selection.getSelectionType();\\nif (selectionType \\u003d\\u003d SlidesApp.SelectionType.TABLE_CELL) {\\n  var currentPage \\u003d selection.getCurrentPage();\\n  var tableCells \\u003d selection.getTableCellRange().getTableCells();\\n  var table \\u003d tableCells[0].getParentTable();\\n  Logger.log('Number of table cells selected: ' + tableCells.length);\\n}\\n```*/getTableCellRange():SlidesApp.TableCellRange;\\n/**Returns the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) that is selected or `null` if the selection is not of type\\n[`SelectionType.TEXT`](https://developers.google.com/apps-script/reference/slides/selection-type.html#TEXT).\\n\\nThe [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) represents two scenarios:\\n\\n1. Range of text selected. For example if a shape has text \\\"Hello\\\", and \\\"He\\\" is selected,\\nthe returned range has [`TextRange.getStartIndex()`](https://developers.google.com/apps-script/reference/slides/text-range.html#getStartIndex()) \\u003d 0, and [`TextRange.getEndIndex()`](https://developers.google.com/apps-script/reference/slides/text-range.html#getEndIndex()) \\u003d\\n2.\\n\\n2. Cursor position. For example if a shape has text \\\"Hello\\\", and cursor is after \\\"H\\\",\\n(\\\"H|ello\\\"), the returned range has [`TextRange.getStartIndex()`](https://developers.google.com/apps-script/reference/slides/text-range.html#getStartIndex()) \\u003d 1 and [`TextRange.getEndIndex()`](https://developers.google.com/apps-script/reference/slides/text-range.html#getEndIndex()) \\u003d 1.\\n\\n```\\nvar selection \\u003d SlidesApp.getActivePresentation().getSelection();\\nvar selectionType \\u003d selection.getSelectionType();\\nif (selectionType \\u003d\\u003d SlidesApp.SelectionType.TEXT) {\\n  var currentPage \\u003d selection.getCurrentPage();\\n  var pageElement \\u003d selection.getPageElementRange().getPageElements()[0];\\n  var textRange \\u003d selection.getTextRange();\\n  Logger.log('Text selected: ' + textRange.asString());\\n}\\n```*/getTextRange():SlidesApp.TextRange;}interface Presentation{\\n/**Adds the given user to the list of editors for the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param emailAddress The email address of the user to add.\\n@return This [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html), for chaining.*/addEditor(emailAddress:string):SlidesApp.Presentation;\\n/**Adds the given user to the list of editors for the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param user A representation of the user to add.\\n@return This [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html), for chaining.*/addEditor(user:User):SlidesApp.Presentation;\\n/**Adds the given array of users to the list of editors for the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html). If any of the\\nusers were already on the list of viewers, this method promotes them out of the list of\\nviewers.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html), for chaining.*/addEditors(emailAddresses:string[]):SlidesApp.Presentation;\\n/**Adds the given user to the list of viewers for the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html). If the user was already\\non the list of editors, this method has no effect.\\n@param emailAddress The email address of the user to add.\\n@return This [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html), for chaining.*/addViewer(emailAddress:string):SlidesApp.Presentation;\\n/**Adds the given user to the list of viewers for the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html). If the user was already\\non the list of editors, this method has no effect.\\n@param user A representation of the user to add.\\n@return This [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html), for chaining.*/addViewer(user:User):SlidesApp.Presentation;\\n/**Adds the given array of users to the list of viewers for the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html). If any of the\\nusers were already on the list of editors, this method has no effect for them.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html), for chaining.*/addViewers(emailAddresses:string[]):SlidesApp.Presentation;\\n/**Appends a slide to the end of the presentation using the [`PredefinedLayout.BLANK`](https://developers.google.com/apps-script/reference/slides/predefined-layout.html#BLANK)\\npredefined layout based on the current master. The current master is one of the following:\\n\\n  + The master of the current last slide.\\n  + The first master in the presentation, if there is no slide.\\n@return The new slide that is appended.*/appendSlide():SlidesApp.Slide;\\n/**Appends a slide to the end of the presentation using the specified layout based on the current\\nmaster. The current master is one of the following:\\n\\n  + The master of the current last slide.\\n  + The first master in the presentation, if there is no slide.\\n@param layout The layout to use for the new slide; it should be present in the current master.\\n@return The new slide that is appended.*/appendSlide(layout:SlidesApp.Layout):SlidesApp.Slide;\\n/**Appends a slide to the end of the presentation using the specified predefined layout based on\\nthe current master. The current master is one of the following:\\n\\n  + The master of the current last slide.\\n  + The first master in the presentation, if there is no slide.\\n@param predefinedLayout The predefined layout to use for the new slide; it should be present in\\n    the current master.\\n@return The new slide that is appended.*/appendSlide(predefinedLayout:SlidesApp.PredefinedLayout):SlidesApp.Slide;\\n/**Appends a copy of the provided [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) to the end of the presentation.\\n\\nIf the slide being copied is from a different presentation, the parent master and layout\\npages are copied as well if they do not already exist in this presentation.\\n\\n```\\n// Copy a slide from another presentation and appends it.\\nvar otherPresentation \\u003d SlidesApp.openById('presentationId');\\nvar currentPresentation \\u003d SlidesApp.getActivePresentation();\\nvar slide \\u003d otherPresentation.getSlides()[0];\\ncurrentPresentation.appendSlide(slide);\\n```\\n@param slide The slide to be copied and appended.\\n@return The new slide that is appended.*/appendSlide(slide:SlidesApp.Slide):SlidesApp.Slide;\\n/**Appends a copy of the provided [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) from the source presentation to the end of the\\ncurrent presentation, and sets the slide link as specified by the [`SlideLinkingMode`](https://developers.google.com/apps-script/reference/slides/slide-linking-mode.html).\\n\\nIf the slide being copied is from a different presentation, the parent master and layout\\npages are copied as well if they do not already exist in the current presentation.\\n\\nIf the link mode is [`SlideLinkingMode.LINKED`](https://developers.google.com/apps-script/reference/slides/slide-linking-mode.html#LINKED), the appended slide can be updated to\\nmatch the provided source slide when [`Slide.refreshSlide()`](https://developers.google.com/apps-script/reference/slides/slide.html#refreshSlide()) is called. Other collaborators\\ncan see the link to the source slide. [`SlideLinkingMode.LINKED`](https://developers.google.com/apps-script/reference/slides/slide-linking-mode.html#LINKED) cannot be used with\\nsource slides from the current presentation.\\n\\n```\\n// Copy a slide from another presentation, then append and link it.\\nvar sourcePresentation \\u003d SlidesApp.openById('presentationId');\\nvar currentPresentation \\u003d SlidesApp.getActivePresentation();\\nvar slide \\u003d sourcePresentation.getSlides()[0];\\nvar appendedSlide \\u003d currentPresentation.appendSlide(slide, SlidesApp.SlideLinkingMode.LINKED);\\n```\\n@param slide The slide to be copied, appended, and linked.\\n@param linkingMode The link mode to use.\\n@return The new slide.*/appendSlide(slide:SlidesApp.Slide,linkingMode:SlidesApp.SlideLinkingMode):SlidesApp.Slide;\\n/**Gets the list of editors for this [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html).\\n@return An array of users with edit permission.*/getEditors():User[];\\n/**Gets the presentation's unique identifier. The presentation ID is used with `SlidesApp.openById()` to open a specific presentation instance.\\n@return The ID of this presentation.*/getId():string;\\n/**Gets the layouts in the presentation.\\n@return The list of layouts in this presentation.*/getLayouts():SlidesApp.Layout[];\\n/**Gets the masters in the presentation.\\n@return The list of masters in this presentation.*/getMasters():SlidesApp.Master[];\\n/**Gets the name or title of the presentation.\\n@return The title of this presentation.*/getName():string;\\n/**Gets the notes master of the presentation.\\n@return The notes master of the presentation.*/getNotesMaster():SlidesApp.NotesMaster;\\n/**Gets the page height of the notes master and notes pages in the presentation in points. They\\nall have the same page height.\\n@return The notes page height in points.*/getNotesPageHeight():number;\\n/**Gets the page width of the notes master and notes pages in the presentation in points. They all\\nhave the same page width.\\n@return The notes page width in points.*/getNotesPageWidth():number;\\n/**Returns the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) with the given ID, or `null` if none exists.\\n@param id The ID of the page element that is being retrieved.\\n@return The page element with the given ID.*/getPageElementById(id:string):SlidesApp.PageElement;\\n/**Gets the page height of the slides, layouts, and masters in the presentation in points. They\\nall have the same page height.\\n@return The page height in points.*/getPageHeight():number;\\n/**Gets the page width of the slides, layouts, and masters in the presentation in points. They all\\nhave the same page width.\\n@return The page width in points.*/getPageWidth():number;\\n/**Gets the user’s selection in the active presentation. A script can only access the selection of\\nthe user who is running the script, and only if the script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nNote that the selection returned is the current effective selection. As the script performs\\nvarious changes to the presentation, the selection is transformed to take them into account.\\nFor example if two shapes A and B are selected, and then the script removes shape B, the\\nreturned selection object is implicitly updated such that only shape A is selected.\\n\\n```\\n// Gets the current active page that is selected in the active presentation.\\nvar selection \\u003d SlidesApp.getActivePresentation().getSelection();\\nvar currentPage \\u003d selection.getCurrentPage();\\n```\\n@return A representation of the user's selection, or `null` if the script is not bound to\\n    the presentation or if there is no valid user selection.*/getSelection():SlidesApp.Selection;\\n/**Returns the [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) with the given ID, or `null` if none exists.\\n@param id The ID of the slide that is being retrieved.\\n@return The slide with the given ID.*/getSlideById(id:string):SlidesApp.Slide;\\n/**Gets the slides in the presentation.\\n@return The list of slides in this presentation.*/getSlides():SlidesApp.Slide[];\\n/**Retrieves the URL to access this presentation.\\n\\n```\\nvar presentation \\u003d SlidesApp.getActivePresentation();\\n\\n// Send out the link to open the presentation.\\nMailApp.sendEmail(\\\"\\u003cemail-address\\u003e\\\", presentation.getName(), presentation.getUrl());\\n```\\n@return The URL to access the current presentation.*/getUrl():string;\\n/**Gets the list of viewers and commenters for this [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html).\\n@return An array of users with view or comment permission.*/getViewers():User[];\\n/**Inserts a slide at the specified index in the presentation using the [`PredefinedLayout.BLANK`](https://developers.google.com/apps-script/reference/slides/predefined-layout.html#BLANK) predefined layout based on the current master. The current master is\\none of the following:\\n\\n  + The master of the previous slide.\\n  + The master of the first slide, if the insertionIndex is zero.\\n  + The first master in the presentation, if there is no slide.\\n@param insertionIndex The zero-based index indicating where to insert the slide.\\n@return The new slide that is inserted.*/insertSlide(insertionIndex:Integer):SlidesApp.Slide;\\n/**Inserts a slide at the specified index in the presentation using the specified layout based on\\nthe current master. The current master is one of the following:\\n\\n  + The master of the previous slide.\\n  + The master of the first slide, if the insertionIndex is zero.\\n  + The first master in the presentation, if there is no slide.\\n@param insertionIndex The zero-based index indicating where to insert the slide.\\n@param layout The layout to use for the new slide; it should be present in the current master.\\n@return The new slide that is inserted.*/insertSlide(insertionIndex:Integer,layout:SlidesApp.Layout):SlidesApp.Slide;\\n/**Inserts a slide at the specified index in the presentation using the specified predefined\\nlayout based on the current master. The current master is one of the following:\\n\\n  + The master of the previous slide.\\n  + The master of the first slide, if the insertionIndex is zero.\\n  + The first master in the presentation, if there is no slide.\\n@param insertionIndex The zero-based index indicating where to insert the slide.\\n@param predefinedLayout The predefined layout to use for the new slide; it should be present in\\n    the current master.\\n@return The new slide that is inserted.*/insertSlide(insertionIndex:Integer,predefinedLayout:SlidesApp.PredefinedLayout):SlidesApp.Slide;\\n/**Inserts a copy of the provided [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) at the specified index in the presentation.\\n\\nIf the slide being copied is from a different presentation, the parent master and layout\\npages are copied as well if they do not already exist in this presentation.\\n\\n```\\n// Copy a slide from another presentation and inserts it.\\nvar otherPresentation \\u003d SlidesApp.openById('presentationId');\\nvar currentPresentation \\u003d SlidesApp.getActivePresentation();\\nvar slide \\u003d otherPresentation.getSlides()[0];\\nvar insertionIndex \\u003d 1;\\ncurrentPresentation.insertSlide(insertionIndex, slide);\\n```\\n@param insertionIndex The zero-based index indicating where to insert the slide.\\n@param slide The slide to be copied and inserted.\\n@return The new slide that is inserted.*/insertSlide(insertionIndex:Integer,slide:SlidesApp.Slide):SlidesApp.Slide;\\n/**Inserts a copy of the provided [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) from the source presentation into the specified\\nindex in the current presentation, and sets the slide link as specified by the [`SlideLinkingMode`](https://developers.google.com/apps-script/reference/slides/slide-linking-mode.html).\\n\\nIf the slide being copied is from a different presentation, the parent master and layout\\npages are copied as well if they do not already exist in the current presentation.\\n\\nIf the link mode is [`SlideLinkingMode.LINKED`](https://developers.google.com/apps-script/reference/slides/slide-linking-mode.html#LINKED), the inserted slide can be updated to\\nmatch the provided source slide when [`Slide.refreshSlide()`](https://developers.google.com/apps-script/reference/slides/slide.html#refreshSlide()) is called. Other collaborators\\ncan see the link to the source slide. [`SlideLinkingMode.LINKED`](https://developers.google.com/apps-script/reference/slides/slide-linking-mode.html#LINKED) cannot be used with\\nsource slides from the current presentation.\\n\\n```\\n// Copy a slide from another presentation, then insert and link it.\\nvar sourcePresentation \\u003d SlidesApp.openById('presentationId');\\nvar currentPresentation \\u003d SlidesApp.getActivePresentation();\\nvar slide \\u003d sourcePresentation.getSlides()[0];\\nvar insertionIndex \\u003d 1;\\nvar insertedSlide \\u003d\\n    currentPresentation.insertSlide(\\n    insertionIndex, slide, SlidesApp.SlideLinkingMode.LINKED);\\n```\\n@param insertionIndex The zero-based index indicating where to insert the slide.\\n@param slide The slide to be copied and inserted.\\n@param linkingMode The link mode to use.\\n@return The new slide.*/insertSlide(insertionIndex:Integer,slide:SlidesApp.Slide,linkingMode:SlidesApp.SlideLinkingMode):SlidesApp.Slide;\\n/**Removes the given user from the list of editors for the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html). This method doesn't\\nblock users from accessing the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) is shared with the user's entire\\ndomain, or if the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param emailAddress The email address of the user to remove.\\n@return This [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html), for chaining.*/removeEditor(emailAddress:string):SlidesApp.Presentation;\\n/**Removes the given user from the list of editors for the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html). This method doesn't\\nblock users from accessing the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) is shared with the user's entire\\ndomain, or if the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param user A representation of the user to remove.\\n@return This [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html), for chaining.*/removeEditor(user:User):SlidesApp.Presentation;\\n/**Removes the given user from the list of viewers and commenters for the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html). This\\nmethod has no effect if the user is an editor, not a viewer or commenter. This method also\\ndoesn't block users from accessing the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) if they belong to a class of users who\\nhave general access—for example, if the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) is shared with the user's\\nentire domain, or if the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param emailAddress The email address of the user to remove.\\n@return This [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) for chaining.*/removeViewer(emailAddress:string):SlidesApp.Presentation;\\n/**Removes the given user from the list of viewers and commenters for the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html). This\\nmethod has no effect if the user is an editor, not a viewer. This method also doesn't block\\nusers from accessing the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) if they belong to a class of users who have general\\naccess—for example, if the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) is shared with the user's entire domain, or\\nif the [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param user A representation of the user to remove.\\n@return This [`Presentation`](https://developers.google.com/apps-script/reference/slides/presentation.html) for chaining.*/removeViewer(user:User):SlidesApp.Presentation;\\n/**Replaces all instances of text matching find text with replace text. The search is case\\ninsensitive.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string):Integer;\\n/**Replaces all instances of text matching find text with replace text.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@param matchCase If `true`, the search is case sensitive; if `false`, the search is\\n    case insensitive.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string,matchCase:boolean):Integer;\\n/**Saves the current `Presentation`. Causes pending updates to be flushed and applied.\\n\\nThe `saveAndClose()` method is automatically invoked at the end of script execution\\nfor each open `Presentation`, even if the script execution terminated with an error.\\n\\nA closed `Presentation` cannot be edited. Use one of the open methods on `SlidesApp` to reopen a given presentation for editing.*/saveAndClose():void;\\n/**Sets the name or title of the presentation.\\n@param name The name to set for this presentation.*/setName(name:string):void;}interface PredefinedLayout{}interface _PredefinedLayout{\\n/**Layout with a big number heading.*/BIG_NUMBER:PredefinedLayout;\\n/**Blank layout, with no placeholders.*/BLANK:PredefinedLayout;\\n/**Layout with a caption at the bottom.*/CAPTION_ONLY:PredefinedLayout;\\n/**Layout with a main point.*/MAIN_POINT:PredefinedLayout;\\n/**Layout with one title and one body, arranged in a single column.*/ONE_COLUMN_TEXT:PredefinedLayout;\\n/**Layout with a section title.*/SECTION_HEADER:PredefinedLayout;\\n/**Layout with a title and subtitle on one side and description on the other.*/SECTION_TITLE_AND_DESCRIPTION:PredefinedLayout;\\n/**Layout with a title and a subtitle.*/TITLE:PredefinedLayout;\\n/**Layout with a title and body.*/TITLE_AND_BODY:PredefinedLayout;\\n/**Layout with a title and two columns.*/TITLE_AND_TWO_COLUMNS:PredefinedLayout;\\n/**Layout with only a title.*/TITLE_ONLY:PredefinedLayout;\\n/**A layout that is not supported.*/UNSUPPORTED:PredefinedLayout;}interface Point{\\n/**Gets the horizontal coordinate, measured in points.*/getX():number;\\n/**Gets the vertical coordinate, measured in points.*/getY():number;}interface PlaceholderType{}interface _PlaceholderType{\\n/**Body text.*/BODY:PlaceholderType;\\n/**Title centered.*/CENTERED_TITLE:PlaceholderType;\\n/**Chart or graph.*/CHART:PlaceholderType;\\n/**Clip art image.*/CLIP_ART:PlaceholderType;\\n/**Date and time.*/DATE_AND_TIME:PlaceholderType;\\n/**Diagram.*/DIAGRAM:PlaceholderType;\\n/**Footer text.*/FOOTER:PlaceholderType;\\n/**Header text.*/HEADER:PlaceholderType;\\n/**Multimedia.*/MEDIA:PlaceholderType;\\n/**Not a Placeholder.*/NONE:PlaceholderType;\\n/**Any content type.*/OBJECT:PlaceholderType;\\n/**Picture.*/PICTURE:PlaceholderType;\\n/**Slide image.*/SLIDE_IMAGE:PlaceholderType;\\n/**Number of a slide.*/SLIDE_NUMBER:PlaceholderType;\\n/**Subtitle.*/SUBTITLE:PlaceholderType;\\n/**Table.*/TABLE:PlaceholderType;\\n/**Slide title.*/TITLE:PlaceholderType;\\n/**A placeholder type that is not supported.*/UNSUPPORTED:PlaceholderType;}interface PictureFill{\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;\\n/**Gets a URL to the image.\\n\\nThis URL is tagged with the account of the requester, so anyone with the URL effectively\\naccesses the image as the original requester. Access to the image may be lost if the\\npresentation's sharing settings change. The URL expires after a short period of time.*/getContentUrl():string;\\n/**Gets the image's source URL, if available.\\n\\nWhen an image is inserted by URL, returns the URL provided during image insertion.\\n@return the image URL or `null` if the image does not have a source URL*/getSourceUrl():string;}interface ParagraphStyle{\\n/**Returns the text end indentation for paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in points, or `null` if there are multiple paragraph styles on the given text.\\n\\nThe side that corresponds to the end of the text is based on the current text direction.*/getIndentEnd():number;\\n/**Returns the indentation for the first line of paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in points, or\\n`null` if there are multiple paragraph styles on the given text.*/getIndentFirstLine():number;\\n/**Returns the text start indentation for paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in points, or `null` if there are multiple paragraph styles on the given text.\\n\\nThe side that corresponds to the start of the text is based on the current text direction.*/getIndentStart():number;\\n/**Returns the line spacing, or `null` if there are multiple paragraph styles on the given\\ntext.\\n\\nThis is a value that corresponds to the space between lines, as a percentage of normal.\\nNormal is represented as 100.0.*/getLineSpacing():number;\\n/**Returns the [`ParagraphAlignment`](https://developers.google.com/apps-script/reference/slides/paragraph-alignment.html) of paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html), or `null`\\nif there are multiple paragraph styles on the given text.*/getParagraphAlignment():SlidesApp.ParagraphAlignment;\\n/**Returns the extra space above paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in points, or `null` if\\nthere are multiple paragraph styles on the given text.*/getSpaceAbove():number;\\n/**Returns the extra space below paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in points, or `null` if\\nthere are multiple paragraph styles on the given text.*/getSpaceBelow():number;\\n/**Returns the [`SpacingMode`](https://developers.google.com/apps-script/reference/slides/spacing-mode.html) for paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html), or `null` if\\nthere are multiple paragraph styles on the given text.*/getSpacingMode():SlidesApp.SpacingMode;\\n/**Returns the [`TextDirection`](https://developers.google.com/apps-script/reference/slides/text-direction.html) for paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html), or `null` if\\nthere are multiple paragraph styles on the given text.*/getTextDirection():SlidesApp.TextDirection;\\n/**Sets the text end indentation for paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in points.\\n\\nThe side that corresponds to the end of the text is based on the current text direction.*/setIndentEnd(indent:number):SlidesApp.ParagraphStyle;\\n/**Sets the indentation for the first line of paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in points.*/setIndentFirstLine(indent:number):SlidesApp.ParagraphStyle;\\n/**Sets the text start indentation for paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in points.\\n\\nThe side that corresponds to the start of the text is based on the current text direction.*/setIndentStart(indent:number):SlidesApp.ParagraphStyle;\\n/**Sets the line spacing.\\n\\nThis is a value that corresponds to the space between lines, as a percentage of normal.\\nNormal is represented as 100.0.*/setLineSpacing(spacing:number):SlidesApp.ParagraphStyle;\\n/**Sets the [`ParagraphAlignment`](https://developers.google.com/apps-script/reference/slides/paragraph-alignment.html) of paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html).*/setParagraphAlignment(alignment:SlidesApp.ParagraphAlignment):SlidesApp.ParagraphStyle;\\n/**Sets the extra space above paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in points.*/setSpaceAbove(space:number):SlidesApp.ParagraphStyle;\\n/**Sets the extra space below paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) in points.*/setSpaceBelow(space:number):SlidesApp.ParagraphStyle;\\n/**Sets the [`SpacingMode`](https://developers.google.com/apps-script/reference/slides/spacing-mode.html) for paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html).*/setSpacingMode(mode:SlidesApp.SpacingMode):SlidesApp.ParagraphStyle;\\n/**Sets the [`TextDirection`](https://developers.google.com/apps-script/reference/slides/text-direction.html) for paragraphs in the [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html).*/setTextDirection(direction:SlidesApp.TextDirection):SlidesApp.ParagraphStyle;}interface ParagraphAlignment{}interface _ParagraphAlignment{\\n/**The paragraph is centered.*/CENTER:ParagraphAlignment;\\n/**The paragraph is aligned to the end of the line. Right-aligned for left-to-right text,\\nleft-aligned otherwise.*/END:ParagraphAlignment;\\n/**The paragraph is justified.*/JUSTIFIED:ParagraphAlignment;\\n/**The paragraph is aligned to the start of the line. Left-aligned for left-to-right text,\\nright-aligned otherwise.*/START:ParagraphAlignment;\\n/**A paragraph alignment that is not supported.*/UNSUPPORTED:ParagraphAlignment;}interface Paragraph{\\n/**Returns the index of the paragraph's newline. Returns `null` if the newline has been\\ndeleted.*/getIndex():Integer;\\n/**Returns a [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) spanning the text in the paragraph ended by this object's newline\\ncharacter. Returns `null` if the paragraph's newline has been deleted.*/getRange():SlidesApp.TextRange;}interface PageType{}interface _PageType{\\n/**A layout page.*/LAYOUT:PageType;\\n/**A master page.*/MASTER:PageType;\\n/**A slide page.*/SLIDE:PageType;\\n/**A page type that is not supported.*/UNSUPPORTED:PageType;}interface PageRange{\\n/**Returns the list of [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) instances.*/getPages():SlidesApp.Page[];}interface PageElementType{}interface _PageElementType{\\n/**Represents a collection of page elements joined as a single unit.*/GROUP:PageElementType;\\n/**Represents an image.*/IMAGE:PageElementType;\\n/**Represents a line.*/LINE:PageElementType;\\n/**Represents a generic shape that does not have a more specific classification.*/SHAPE:PageElementType;\\n/**Represents a linked chart embedded from Google Sheets.*/SHEETS_CHART:PageElementType;\\n/**Represents a speaker spotlight.*/SPEAKER_SPOTLIGHT:PageElementType;\\n/**Represents a table.*/TABLE:PageElementType;\\n/**Represents a page element that is not supported and cannot be further classified.*/UNSUPPORTED:PageElementType;\\n/**Represents a video.*/VIDEO:PageElementType;\\n/**Represents word art.*/WORD_ART:PageElementType;}interface PageElementRange{\\n/**Returns the list of [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) instances.*/getPageElements():SlidesApp.PageElement[];}interface PageElement{\\n/**Aligns the element to the specified alignment position on the page.\\n@param alignmentPosition The position to align this page element to on the page.\\n@return This page element, for chaining.*/alignOnPage(alignmentPosition:SlidesApp.AlignmentPosition):SlidesApp.PageElement;\\n/**Returns the page element as a group.\\n@return This page element as a group.*/asGroup():SlidesApp.Group;\\n/**Returns the page element as an image.\\n@return This page element as an image.*/asImage():SlidesApp.Image;\\n/**Returns the page element as a line.\\n@return This page element as a line.*/asLine():SlidesApp.Line;\\n/**Returns the page element as a shape.\\n@return This page element as a shape.*/asShape():SlidesApp.Shape;\\n/**Returns the page element as a linked chart embedded from Google Sheets.\\n@return The page element as a chart.*/asSheetsChart():SlidesApp.SheetsChart;\\n/**Returns the page element as a speaker spotlight.\\n\\n```\\nconst pageElement \\u003d slide.getPageElements()[0];\\npageElement.asSpeakerSpotlight();\\n```\\n@return The page element as a speaker spotlight.*/asSpeakerSpotlight():SlidesApp.SpeakerSpotlight;\\n/**Returns the page element as a table.\\n@return This page element as a table.*/asTable():SlidesApp.Table;\\n/**Returns the page element as a video.\\n@return This page element as a video.*/asVideo():SlidesApp.Video;\\n/**Returns the page element as word art.\\n@return This page element as word art.*/asWordArt():SlidesApp.WordArt;\\n/**Brings the page element forward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringForward():SlidesApp.PageElement;\\n/**Brings the page element to the front of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringToFront():SlidesApp.PageElement;\\n/**Duplicates the page element.\\n\\nThe duplicate page element is placed on the same page at the same position as the original.\\n@return The new duplicate of this page element.*/duplicate():SlidesApp.PageElement;\\n/**Returns the list of `ConnectionSite`s on the page element, or an empty list if the page\\nelement does not have any connection sites.\\n@return The connection sites list, which may be empty if this element has no connection sites.*/getConnectionSites():SlidesApp.ConnectionSite[];\\n/**Returns the page element's alt text description. The description is combined with the title to\\ndisplay and read alt text.\\n@return The page element's alt text description.*/getDescription():string;\\n/**Gets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getHeight():number;\\n/**Returns the element's inherent height in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getInherentHeight():number;\\n/**Returns the element's inherent width in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getInherentWidth():number;\\n/**Returns the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@return This element's horizontal position in points, from the upper-left corner of the page.*/getLeft():number;\\n/**Returns the unique ID for this object. Object IDs used by pages and page elements share the\\nsame namespace.\\n@return The unique ID for this object.*/getObjectId():string;\\n/**Returns the page element's type, represented as a [`PageElementType`](https://developers.google.com/apps-script/reference/slides/page-element-type.html) enum.\\n@return The page element's type.*/getPageElementType():SlidesApp.PageElementType;\\n/**Returns the group this page element belongs to, or `null` if the element is not in a\\ngroup.\\n@return The group this page element belongs to, or `null`.*/getParentGroup():SlidesApp.Group;\\n/**Returns the page this page element is on.\\n@return The page this element resides on.*/getParentPage():SlidesApp.Page;\\n/**Returns the element's clockwise rotation angle around its center in degrees, where zero degrees\\nmeans no rotation.\\n@return The rotation angle in degrees between 0 (inclusive) and 360 (exclusive).*/getRotation():number;\\n/**Returns the page element's alt text title. The title is combined with the description to\\ndisplay and read alt text.\\n@return The page element's alt text title.*/getTitle():string;\\n/**Gets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@return This element's vertical position in points, from the upper-left corner of the page.*/getTop():number;\\n/**Returns the page element's transform.\\n\\nThe visual appearance of the page element is determined by its absolute transform. To\\ncompute the absolute transform, preconcatenate a page element's transform with the transforms\\nof all of its parent groups. If the page element is not in a group, its absolute transform is\\nthe same as the value in this field.\\n@return The page element's transform.*/getTransform():SlidesApp.AffineTransform;\\n/**Returns the element's width in points, which is the width of the element's bounding box when\\nthe element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getWidth():number;\\n/**Preconcatenates the provided transform to the existing transform of the page element.\\n\\n```\\nnewTransform \\u003d argument * existingTransform\\n```\\n\\nFor example, to move a page elements 36 points to the left:\\n\\n```\\nelement.preconcatenateTransform(SlidesApp.newAffineTransformBuilder()\\n    .setTranslateX(-36.0)\\n    .build());\\n```\\n\\nYou can also replace the page element's transform with [`setTransform(transform)`](https://developers.google.com/apps-script/reference/slides/page-element.html#setTransform(AffineTransform)).\\n@param transform The transform to preconcatenate onto this page element's transform.\\n@return This page element, for chaining.*/preconcatenateTransform(transform:SlidesApp.AffineTransform):SlidesApp.PageElement;\\n/**Removes the page element.\\n\\nIf after a remove operation, a `Group` contains only one or no page elements, the\\ngroup itself is also removed.\\n\\nIf a placeholder `PageElement` is removed on a master or layout, any empty inheriting\\nplaceholders are also removed.*/remove():void;\\n/**Scales the element's height by the specified ratio. The element's height is the height of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's height by.\\n@return This page element, for chaining.*/scaleHeight(ratio:number):SlidesApp.PageElement;\\n/**Scales the element's width by the specified ratio. The element's width is the width of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's width by.\\n@return This page element, for chaining.*/scaleWidth(ratio:number):SlidesApp.PageElement;\\n/**Selects only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation and removes any previous\\nselection. This is the same as calling [`select(replace)`](https://developers.google.com/apps-script/reference/slides/page-element.html#select(Boolean)) with `true`.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThis sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d slide.getPageElements()[0];\\n// Only select this page element and replace any previous selection.\\npageElement.select();\\n```*/select():void;\\n/**Selects the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nPass `true` to this method to select only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) and remove any\\nprevious selection. This also sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the\\n[`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\nPass `false` to select multiple [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects. The [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html)\\nobjects must be in the same [`Page`](https://developers.google.com/apps-script/reference/slides/page.html).\\n\\nThe following conditions must be met while selecting a page element using a `false`\\nparameter:\\n\\n  1. The parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object must be the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n  1. There should not be multiple [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) objects selected.\\n\\nTo make sure that’s the case the preferred approach is to select the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html)\\nfirst using [`Page.selectAsCurrentPage()`](https://developers.google.com/apps-script/reference/slides/page.html#selectAsCurrentPage()) and then select the page elements in that page.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// First select the slide page, as the current page selection.\\nslide.selectAsCurrentPage();\\n// Then select all the page elements in the selected slide page.\\nvar pageElements \\u003d slide.getPageElements();\\nfor (var i \\u003d 0; i \\u003c pageElements.length; i++) {\\n  pageElements[i].select(false);\\n}\\n```\\n@param replace If `true`, the selection replaces any previous selection; otherwise the\\n    selection is added to any previous selection.*/select(replace:boolean):void;\\n/**Sends the page element backward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendBackward():SlidesApp.PageElement;\\n/**Sends the page element to the back of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendToBack():SlidesApp.PageElement;\\n/**Sets the page element's alt text description.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text description to \\\"new alt text description\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setDescription('new alt text description');\\nLogger.log(pageElement.getDescription());\\n```\\n@param description The string to set the alt text description to.\\n@return This page element.*/setDescription(description:string):SlidesApp.PageElement;\\n/**Sets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param height The new height of this page element to set, in points.\\n@return This page element, for chaining.*/setHeight(height:number):SlidesApp.PageElement;\\n/**Sets the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@param left The new horizontal position to set, in points.\\n@return This page element, for chaining.*/setLeft(left:number):SlidesApp.PageElement;\\n/**Sets the element's clockwise rotation angle around its center in degrees.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param angle The new clockwise rotation angle to set, in degrees.\\n@return This page element, for chaining.*/setRotation(angle:number):SlidesApp.PageElement;\\n/**Sets the page element's alt text title.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text title to \\\"new alt text title\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setTitle('new alt text title');\\nLogger.log(pageElement.getTitle());\\n```\\n@param title The string to set the alt text title to.\\n@return This page element.*/setTitle(title:string):SlidesApp.PageElement;\\n/**Sets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@param top The new vertical position to set, in points.\\n@return This page element, for chaining.*/setTop(top:number):SlidesApp.PageElement;\\n/**Sets the transform of the page element with the provided transform.\\n\\nUpdating the transform of a group changes the absolute transform of the page elements in\\nthat group, which can change their visual appearance.\\n\\nUpdating the transform of a page element that is in a group only changes the transform of\\nthat page element; it doesn't affect the transforms of the group or other page elements in the\\ngroup.\\n\\nFor details on how transforms impact the visual appearance of page elements, see [`getTransform()`](https://developers.google.com/apps-script/reference/slides/page-element.html#getTransform()).\\n@param transform The transform that is set for this page element.\\n@return This element, for chaining.*/setTransform(transform:SlidesApp.AffineTransform):SlidesApp.PageElement;\\n/**Sets the element's width in points, which is the width of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param width The new width of this page element to set, in points.\\n@return This page element, for chaining.*/setWidth(width:number):SlidesApp.PageElement;}interface PageBackgroundType{}interface _PageBackgroundType{\\n/**No fill, so the background is rendered white.*/NONE:PageBackgroundType;\\n/**A picture that is stretched to fill the page.*/PICTURE:PageBackgroundType;\\n/**A solid color fill.*/SOLID:PageBackgroundType;\\n/**A page background type that is not supported.*/UNSUPPORTED:PageBackgroundType;}interface PageBackground{\\n/**Get the stretched picture fill of this background, or `null` if the background fill type\\nis not [`PageBackgroundType.PICTURE`](https://developers.google.com/apps-script/reference/slides/page-background-type.html#PICTURE).*/getPictureFill():SlidesApp.PictureFill;\\n/**Get the solid fill of this background, or `null` if the background fill type is not\\n[`PageBackgroundType.SOLID`](https://developers.google.com/apps-script/reference/slides/page-background-type.html#SOLID).*/getSolidFill():SlidesApp.SolidFill;\\n/**Get the type of this page background.*/getType():SlidesApp.PageBackgroundType;\\n/**Whether the background is visible.*/isVisible():boolean;\\n/**Sets an image from the specified image blob as the page background. The image is stretched to\\nmatch the dimensions of the page.\\n\\nInserting the image fetches it from the [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once and a copy is stored for\\ndisplay inside the presentation. Images must be less than 50MB in size, cannot exceed 25\\nmegapixels, and must be in either in PNG, JPEG, or GIF format.\\n@param blobSource The image data.*/setPictureFill(blobSource:BlobSource):void;\\n/**Sets the image at the provided URL as the page background. The image is stretched to match the\\ndimensions of the page.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`PictureFill.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/picture-fill.html#getSourceUrl()).\\n@param imageUrl The URL to download the image from.*/setPictureFill(imageUrl:string):void;\\n/**Sets the solid fill to the given RGB values.*/setSolidFill(red:Integer,green:Integer,blue:Integer):void;\\n/**Sets the solid fill to the given alpha and RGB values.*/setSolidFill(red:Integer,green:Integer,blue:Integer,alpha:number):void;\\n/**Sets the solid fill to the given [`Color`](https://developers.google.com/apps-script/reference/slides/color.html).*/setSolidFill(color:SlidesApp.Color):void;\\n/**Sets the solid fill to the given alpha and [`Color`](https://developers.google.com/apps-script/reference/slides/color.html).*/setSolidFill(color:SlidesApp.Color,alpha:number):void;\\n/**Sets the solid fill to the given [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html).*/setSolidFill(color:SlidesApp.ThemeColorType):void;\\n/**Sets the solid fill to the given alpha and [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html).*/setSolidFill(color:SlidesApp.ThemeColorType,alpha:number):void;\\n/**Sets the solid fill to the given hex color string.\\n\\nThe hex string must be in the format '#RRGGBB'. For example, pink would be represented as\\n'#FFC0CB'.*/setSolidFill(hexString:string):void;\\n/**Sets the solid fill to the given alpha and hex color string.\\n\\nThe hex string must be in the format '#RRGGBB'. For example, pink would be represented as\\n'#FFC0CB'.*/setSolidFill(hexString:string,alpha:number):void;\\n/**Sets the background to transparent.*/setTransparent():void;}interface Page{\\n/**Returns the page as a layout.\\n@return The page as a layout.*/asLayout():SlidesApp.Layout;\\n/**Returns the page as a master.\\n@return The page as a master.*/asMaster():SlidesApp.Master;\\n/**Returns the page as a slide.\\n@return The page as a slide.*/asSlide():SlidesApp.Slide;\\n/**Gets the page's background.\\n@return The page's background.*/getBackground():SlidesApp.PageBackground;\\n/**Gets the [`ColorScheme`](https://developers.google.com/apps-script/reference/slides/color-scheme.html) associated with the page.\\n@return The page's color scheme.*/getColorScheme():SlidesApp.ColorScheme;\\n/**Returns the list of [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) objects on the page.*/getGroups():SlidesApp.Group[];\\n/**Returns the list of [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) objects on the page.*/getImages():SlidesApp.Image[];\\n/**Returns the list of [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) objects on the page.*/getLines():SlidesApp.Line[];\\n/**Gets the unique ID for the page. Object IDs used by pages and page elements share the same\\nnamespace.*/getObjectId():string;\\n/**Returns the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) on the page with the given ID, or `null` if none exists.\\n@param id The ID of the page element that is being retrieved.\\n@return The page element with the given ID.*/getPageElementById(id:string):SlidesApp.PageElement;\\n/**Returns the list of [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects rendered on the page.*/getPageElements():SlidesApp.PageElement[];\\n/**Gets the type of the page.\\n@return The page type.*/getPageType():SlidesApp.PageType;\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) or\\n`null` if a matching placeholder is not present.\\n\\nIf there are multiple placeholders with the same type, it returns the one with minimal\\nplaceholder index. If there are multiple matching placeholders with the same index, it returns\\nthe first placeholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType):SlidesApp.PageElement;\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) and\\na placeholder index, or `null` if the placeholder is not present.\\n\\nIf there are multiple placeholders with the same type and index, it returns the first\\nplaceholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE, 0);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType,placeholderIndex:Integer):SlidesApp.PageElement;\\n/**Returns the list of placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects in the page.\\n\\n```\\nvar master \\u003d SlidesApp.getActivePresentation().getMasters()[0];\\nLogger.log('Number of placeholders in the master: ' + master.getPlaceholders().length);\\n```*/getPlaceholders():SlidesApp.PageElement[];\\n/**Returns the list of [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) objects on the page.*/getShapes():SlidesApp.Shape[];\\n/**Returns the list of [`SheetsChart`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html) objects on the page.*/getSheetsCharts():SlidesApp.SheetsChart[];\\n/**Returns the list of [`Table`](https://developers.google.com/apps-script/reference/slides/table.html) objects on the page.*/getTables():SlidesApp.Table[];\\n/**Returns the list of [`Video`](https://developers.google.com/apps-script/reference/slides/video.html) objects on the page.*/getVideos():SlidesApp.Video[];\\n/**Returns the list of [`WordArt`](https://developers.google.com/apps-script/reference/slides/word-art.html) objects on the page.*/getWordArts():SlidesApp.WordArt[];\\n/**Groups all the specified page elements.\\n\\nThere should be at least two page elements on the same page that are not already in another\\ngroup. Some page elements, such as [`Videos`](https://developers.google.com/apps-script/reference/slides/video.html), [`Tables`](https://developers.google.com/apps-script/reference/slides/table.html) and [`placeholder Shapes`](https://developers.google.com/apps-script/reference/slides/shape.html#getPlaceholderType()) cannot be grouped.\\n@param pageElements The elements to group together.\\n@return The new group.*/group(pageElements:SlidesApp.PageElement[]):SlidesApp.Group;\\n/**Inserts a copy of the provided [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a group between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar group \\u003d otherPresentationSlide.getGroups()[0];\\ncurrentPresentationSlide.insertGroup(group); // Also available for Layout, Master, and Page.\\n```\\n@param group The group to be copied and inserted.\\n@return The inserted group.*/insertGroup(group:SlidesApp.Group):SlidesApp.Group;\\n/**Inserts an image at the top left corner of the page with a default size from the specified\\nimage blob.\\n\\nInserting the image fetches it from the [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once and a copy is stored for\\ndisplay inside the presentation. Images must be less than 50MB in size, cannot exceed 25\\nmegapixels, and must be in either in PNG, JPEG, or GIF format.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// Get the Drive image file with the given ID.\\nvar image \\u003d DriveApp.getFileById(fileId);\\nslide.insertImage(image);\\n```\\n@param blobSource The image data.\\n@return The inserted image.*/insertImage(blobSource:BlobSource):SlidesApp.Image;\\n/**Inserts an image on the page with the provided position and size from the specified image blob.\\n\\nThe image is fetched from the provided [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once at insertion time and a copy\\nis stored for display inside the presentation. Images must be less than 50MB in size, cannot\\nexceed 25 megapixels, and must be in either in PNG, JPEG, or GIF format.\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the provided size.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// Get the Drive image file with the given ID.\\nvar image \\u003d DriveApp.getFileById(fileId);\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 300, height: 100};\\nslide.insertImage(image, position.left, position.top, size.width, size.height);\\n```\\n@param blobSource The image data.\\n@param left The horizontal position of the image in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the image in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the image in points.\\n@param height The height of the image in points.\\n@return The inserted image.*/insertImage(blobSource:BlobSource,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a copy of the provided [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page.\\n\\nThe inserted images's position on this page is determined from the source image's position\\non its respective page.\\n\\nIf the provided image is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted image.\\n\\nIf the provided image is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the image from the source\\npresentation. If the copied placeholder image is empty, nothing is inserted in the destination\\npresentation.\\n\\n```\\n// Copy an image between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar image \\u003d otherPresentationSlide.getImages[0];\\ncurrentPresentationSlide.insertImage(image);\\n```\\n@param image The image to be copied and inserted.\\n@return The inserted image.*/insertImage(image:SlidesApp.Image):SlidesApp.Image;\\n/**Inserts an image at the top left corner of the page with a default size from the provided URL.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`Image.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n@param imageUrl The image URL.\\n@return The inserted image.*/insertImage(imageUrl:string):SlidesApp.Image;\\n/**Inserts an image on the page with the provided position and size from the provided URL.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`Image.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the provided size.\\n@param imageUrl The image URL.\\n@param left The horizontal position of the image in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the image in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the image in points.\\n@param height The height of the image in points.\\n@return The inserted image.*/insertImage(imageUrl:string,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a copy of the provided [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a line between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar line \\u003d otherPresentationSlide.getLines[0];\\ncurrentPresentationSlide.insertLine(line);\\n```\\n@param line The line to be copied and inserted.\\n@return The inserted line.*/insertLine(line:SlidesApp.Line):SlidesApp.Line;\\n/**Inserts a line on the page.\\n\\n```\\n// Insert a line in the first slide of the presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar startPoint \\u003d {left: 10, top: 10};\\nvar endPoint \\u003d {left: 40, top: 40};\\nslide.insertLine(\\n    SlidesApp.LineCategory.STRAIGHT,\\n    startPoint.left,\\n    startPoint.top,\\n    endPoint.left,\\n    endPoint.top);\\n```\\n@param lineCategory The category of the line to insert.\\n@param startLeft The horizontal position of the start point of the line, measured in points\\n    from the upper left corner of the page.\\n@param startTop The vertical position of the start point of the line, measured in points from\\n    the upper left corner of the page.\\n@param endLeft The horizontal position of the end point of the line, measured in points from\\n    the upper left corner of the page.\\n@param endTop The vertical position of the end point of the line, measured in points from the\\n    upper left corner of the page.\\n@return The inserted line.*/insertLine(lineCategory:SlidesApp.LineCategory,startLeft:number,startTop:number,endLeft:number,endTop:number):SlidesApp.Line;\\n/**Inserts a line on the page connecting two [`connection sites`](https://developers.google.com/apps-script/reference/slides/connection-site.html). The two\\nconnection sites must be on this page.\\n\\n```\\n// Insert a line in the first slide of the presentation connecting two shapes.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar shape1 \\u003d slide.insertShape(SlidesApp.ShapeType.RECTANGLE);\\nvar shape2 \\u003d slide.insertShape(SlidesApp.ShapeType.CLOUD);\\nslide.insertLine(\\n    SlidesApp.LineCategory.BENT,\\n    shape1.getConnectionSites()[0],\\n    shape2.getConnectionSites()[1]);\\n```\\n@param lineCategory The category of the line to insert.\\n@param startConnectionSite The connection site where the start of the line is to be connected.\\n@param endConnectionSite The connection site where the end of the line is to be connected.\\n@return The inserted line.*/insertLine(lineCategory:SlidesApp.LineCategory,startConnectionSite:SlidesApp.ConnectionSite,endConnectionSite:SlidesApp.ConnectionSite):SlidesApp.Line;\\n/**Inserts a copy of the provided [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a page element between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d otherPresentationSlide.getPageElements()[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertPageElement(pageElement);\\n```\\n@param pageElement The page element to be copied and inserted.\\n@return The inserted page element.*/insertPageElement(pageElement:SlidesApp.PageElement):SlidesApp.PageElement;\\n/**Inserts a copy of the provided [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a shape between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar shape \\u003d otherPresentationSlide.getShapes[0];\\ncurrentPresentationSlide.insertShape(shape); // Also available for Layout, Master, and Page.\\n```\\n@param shape The shape to be copied and inserted.\\n@return The inserted shape.*/insertShape(shape:SlidesApp.Shape):SlidesApp.Shape;\\n/**Inserts a shape on the page.\\n\\nThe shape is inserted with a default size at the top left corner of the page.\\n\\n```\\n// Insert a shape in the first slide of the presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertShape(SlidesApp.ShapeType.RECTANGLE);\\n```\\n@param shapeType The type of shape to insert.\\n@return The inserted shape.*/insertShape(shapeType:SlidesApp.ShapeType):SlidesApp.Shape;\\n/**Inserts a shape on the page.\\n@param shapeType The type of shape to insert.\\n@param left The horizontal position of the shape, measured from the upper left corner of the\\n    page.\\n@param top The vertical position of the shape, measured from the upper left corner of the page.\\n@param width The width of the shape.\\n@param height The height of the shape.\\n@return The inserted shape.*/insertShape(shapeType:SlidesApp.ShapeType,left:number,top:number,width:number,height:number):SlidesApp.Shape;\\n/**Inserts a copy of the provided [`SheetsChart`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a sheets chart between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar sheetsChart \\u003d otherPresentationSlide.getSheetsCharts[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertSheetsChart(sheetsChart);\\n```\\n@param sheetsChart The sheets chart to be copied and inserted.\\n@return The inserted sheets chart.*/insertSheetsChart(sheetsChart:SlidesApp.SheetsChart):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart on the page.\\n\\nThe chart is inserted with a default size at the top left corner of the page.\\n\\nThe inserted chart is linked with the source Google Sheets chart which allows it to be\\nupdated. Other collaborators can see the link to the source spreadsheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertSheetsChart(chart);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@return The inserted chart in the page.*/insertSheetsChart(sourceChart:SpreadsheetApp.EmbeddedChart):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart on the page with the provided position and size.\\n\\nIn order to maintain the chart's aspect ratio, the chart is scaled and centered with respect\\nto the provided size.\\n\\nThe inserted chart is linked with the source Google Sheets chart which allows it to be\\nupdated. Other collaborators can see the link to the source spreadsheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 200, height: 200};\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertSheetsChart(\\n    chart,\\n    position.left,\\n    position.top,\\n    size.width,\\n    size.height);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@param left The horizontal position of the chart in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the chart in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the chart in points.\\n@param height The height of the chart in points.\\n@return The inserted chart in the page.*/insertSheetsChart(sourceChart:SpreadsheetApp.EmbeddedChart,left:number,top:number,width:number,height:number):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart as an [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page.\\n\\nThe image of the chart is inserted with a default size at the top left corner of the page.\\n\\nThe inserted image of chart is not linked with the source Google Sheets chart.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertSheetsChartAsImage(chart); // Also available for Layout, Master, and Page.\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@return The inserted image of the chart in the page.*/insertSheetsChartAsImage(sourceChart:SpreadsheetApp.EmbeddedChart):SlidesApp.Image;\\n/**Inserts a Google Sheets chart as an [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page with the provided position and\\nsize.\\n\\nIn order to maintain the chart image's aspect ratio, the image is scaled and centered with\\nrespect to the provided size.\\n\\nThe inserted image of the chart is not linked with the source Google Sheets chart.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 200, height: 200};\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertSheetsChartAsImage(\\n    chart,\\n    position.left,\\n    position.right,\\n    size.width,\\n    size.height);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@param left The horizontal position of the chart in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the chart in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the chart in points.\\n@param height The height of the chart in points.\\n@return The inserted image of the chart in the page.*/insertSheetsChartAsImage(sourceChart:SpreadsheetApp.EmbeddedChart,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a table on the page.\\n\\nThe table is centered on the page with default size and evenly distributed rows and columns.\\n@param numRows The number of rows in the table.\\n@param numColumns The number of columns in the table.\\n@return The inserted table.*/insertTable(numRows:Integer,numColumns:Integer):SlidesApp.Table;\\n/**Inserts a table on the page with the provided position and size.\\n\\nRows and columns are evenly distributed in the created table.\\n@param numRows The number of rows in the table.\\n@param numColumns The number of columns in the table.\\n@param left The horizontal position of the table, measured from the upper left corner of the\\n    page.\\n@param top The vertical position of the table, measured from the upper left corner of the page.\\n@param width The width of the table.\\n@param height The minimum height of the table. The actual height of the rendered table depends\\n    on factors such as text font size.\\n@return The inserted table.*/insertTable(numRows:Integer,numColumns:Integer,left:number,top:number,width:number,height:number):SlidesApp.Table;\\n/**Inserts a copy of the provided [`Table`](https://developers.google.com/apps-script/reference/slides/table.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a table between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar table \\u003d otherPresentationSlide.getTables[0];\\ncurrentPresentationSlide.insertTable(table); // Also available for Layout, Master, and Page.\\n```\\n@param table The table to be copied and inserted.\\n@return The inserted table.*/insertTable(table:SlidesApp.Table):SlidesApp.Table;\\n/**Inserts a text box [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) containing the provided string on the page.\\n\\nThe text box shape is inserted with a default size at the top left corner of the page.\\n\\n```\\n// Insert text box with \\\"Hello\\\" on the first slide of presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertTextBox('Hello'); // Also available for Layout, Master, and Page.\\n```\\n@param text The string the text box shape should contain.\\n@return The inserted text box shape.*/insertTextBox(text:string):SlidesApp.Shape;\\n/**Inserts a text box [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) containing the provided string on the page.\\n\\n```\\n// Insert text box with \\\"Hello\\\" on the first slide of presentation. This text box is a square\\n// with a length of 10 points on each side.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertTextBox('Hello', 0, 0, 10, 10); // Also available for Layout, Master, and Page.\\n```\\n@param text The string the text box shape should contain.\\n@param left The horizontal position of the text box shape, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the text box shape, measured from the upper left corner of\\n    the page.\\n@param width The width of the text box shape.\\n@param height The height of the text box shape.\\n@return The inserted text box shape.*/insertTextBox(text:string,left:number,top:number,width:number,height:number):SlidesApp.Shape;\\n/**Inserts a copy of the provided [`Video`](https://developers.google.com/apps-script/reference/slides/video.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a video between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar video \\u003d otherPresentationSlide.getVideos[0];\\ncurrentPresentationSlide.insertVideo(video); // Also available for Layout, Master, and Page.\\n```\\n@param video The video to be copied and inserted.\\n@return The inserted video.*/insertVideo(video:SlidesApp.Video):SlidesApp.Video;\\n/**Inserts a video at the top left corner of the page with a default size.\\n\\nOnly YouTube videos are currently supported.\\n@param videoUrl The URL of the video to insert.\\n@return The inserted video.*/insertVideo(videoUrl:string):SlidesApp.Video;\\n/**Inserts a video on the page with the provided position and size.\\n\\nOnly YouTube videos are currently supported.\\n@param videoUrl The URL of the video to insert.\\n@param left The horizontal position of the video in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the video in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the video in points.\\n@param height The height of the video in points.\\n@return The inserted video.*/insertVideo(videoUrl:string,left:number,top:number,width:number,height:number):SlidesApp.Video;\\n/**Inserts a copy of the provided [`WordArt`](https://developers.google.com/apps-script/reference/slides/word-art.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a word art between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar wordArt \\u003d otherPresentationSlide.getWordArts[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertWordArt(wordArt);\\n```\\n@param wordArt The group to be copied and inserted.\\n@return The inserted word art.*/insertWordArt(wordArt:SlidesApp.WordArt):SlidesApp.WordArt;\\n/**Removes the page.*/remove():void;\\n/**Replaces all instances of text matching find text with replace text. The search is case\\ninsensitive.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string):Integer;\\n/**Replaces all instances of text matching find text with replace text.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@param matchCase If `true`, the search is case sensitive; if `false`, the search is\\n    case insensitive.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string,matchCase:boolean):Integer;\\n/**Selects the [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) in the active presentation as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()) and removes any previous selection.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\n```\\n// Select the first slide as the current page selection and replace any previous selection.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.selectAsCurrentPage(); // Also available for Layout, Master, and Page.\\n```*/selectAsCurrentPage():void;}interface NotesPage{\\n/**Returns the list of [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) objects on the page.*/getGroups():SlidesApp.Group[];\\n/**Returns the list of [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) objects on the page.*/getImages():SlidesApp.Image[];\\n/**Returns the list of [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) objects on the page.*/getLines():SlidesApp.Line[];\\n/**Gets the unique ID for the page. Object IDs used by pages and page elements share the same\\nnamespace.*/getObjectId():string;\\n/**Returns the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) on the page with the given ID, or `null` if none exists.\\n@param id The ID of the page element that is being retrieved.\\n@return The page element with the given ID.*/getPageElementById(id:string):SlidesApp.PageElement;\\n/**Returns the list of [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects rendered on the page.*/getPageElements():SlidesApp.PageElement[];\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) or\\n`null` if a matching placeholder is not present.\\n\\nIf there are multiple placeholders with the same type, it returns the one with minimal\\nplaceholder index. If there are multiple matching placeholders with the same index, it returns\\nthe first placeholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType):SlidesApp.PageElement;\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) and\\na placeholder index, or `null` if the placeholder is not present.\\n\\nIf there are multiple placeholders with the same type and index, it returns the first\\nplaceholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE, 0);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType,placeholderIndex:Integer):SlidesApp.PageElement;\\n/**Returns the list of placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects in the page.\\n\\n```\\nvar master \\u003d SlidesApp.getActivePresentation().getMasters()[0];\\nLogger.log('Number of placeholders in the master: ' + master.getPlaceholders().length);\\n```*/getPlaceholders():SlidesApp.PageElement[];\\n/**Returns the list of [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) objects on the page.*/getShapes():SlidesApp.Shape[];\\n/**Returns the list of [`SheetsChart`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html) objects on the page.*/getSheetsCharts():SlidesApp.SheetsChart[];\\n/**Gets the shape containing the speaker notes on the page.*/getSpeakerNotesShape():SlidesApp.Shape;\\n/**Returns the list of [`Table`](https://developers.google.com/apps-script/reference/slides/table.html) objects on the page.*/getTables():SlidesApp.Table[];\\n/**Returns the list of [`Video`](https://developers.google.com/apps-script/reference/slides/video.html) objects on the page.*/getVideos():SlidesApp.Video[];\\n/**Returns the list of [`WordArt`](https://developers.google.com/apps-script/reference/slides/word-art.html) objects on the page.*/getWordArts():SlidesApp.WordArt[];\\n/**Replaces all instances of text matching find text with replace text. The search is case\\ninsensitive.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string):Integer;\\n/**Replaces all instances of text matching find text with replace text.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@param matchCase If `true`, the search is case sensitive; if `false`, the search is\\n    case insensitive.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string,matchCase:boolean):Integer;}interface NotesMaster{\\n/**Returns the list of [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) objects on the page.*/getGroups():SlidesApp.Group[];\\n/**Returns the list of [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) objects on the page.*/getImages():SlidesApp.Image[];\\n/**Returns the list of [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) objects on the page.*/getLines():SlidesApp.Line[];\\n/**Gets the unique ID for the page. Object IDs used by pages and page elements share the same\\nnamespace.*/getObjectId():string;\\n/**Returns the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) on the page with the given ID, or `null` if none exists.\\n@param id The ID of the page element that is being retrieved.\\n@return The page element with the given ID.*/getPageElementById(id:string):SlidesApp.PageElement;\\n/**Returns the list of [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects rendered on the page.*/getPageElements():SlidesApp.PageElement[];\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) or\\n`null` if a matching placeholder is not present.\\n\\nIf there are multiple placeholders with the same type, it returns the one with minimal\\nplaceholder index. If there are multiple matching placeholders with the same index, it returns\\nthe first placeholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType):SlidesApp.PageElement;\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) and\\na placeholder index, or `null` if the placeholder is not present.\\n\\nIf there are multiple placeholders with the same type and index, it returns the first\\nplaceholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE, 0);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType,placeholderIndex:Integer):SlidesApp.PageElement;\\n/**Returns the list of placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects in the page.\\n\\n```\\nvar master \\u003d SlidesApp.getActivePresentation().getMasters()[0];\\nLogger.log('Number of placeholders in the master: ' + master.getPlaceholders().length);\\n```*/getPlaceholders():SlidesApp.PageElement[];\\n/**Returns the list of [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) objects on the page.*/getShapes():SlidesApp.Shape[];\\n/**Returns the list of [`SheetsChart`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html) objects on the page.*/getSheetsCharts():SlidesApp.SheetsChart[];\\n/**Returns the list of [`Table`](https://developers.google.com/apps-script/reference/slides/table.html) objects on the page.*/getTables():SlidesApp.Table[];\\n/**Returns the list of [`Video`](https://developers.google.com/apps-script/reference/slides/video.html) objects on the page.*/getVideos():SlidesApp.Video[];\\n/**Returns the list of [`WordArt`](https://developers.google.com/apps-script/reference/slides/word-art.html) objects on the page.*/getWordArts():SlidesApp.WordArt[];}interface Master{\\n/**Gets the page's background.\\n@return The page's background.*/getBackground():SlidesApp.PageBackground;\\n/**Gets the [`ColorScheme`](https://developers.google.com/apps-script/reference/slides/color-scheme.html) associated with the page.\\n@return The page's color scheme.*/getColorScheme():SlidesApp.ColorScheme;\\n/**Returns the list of [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) objects on the page.*/getGroups():SlidesApp.Group[];\\n/**Returns the list of [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) objects on the page.*/getImages():SlidesApp.Image[];\\n/**Gets this master's layouts.*/getLayouts():SlidesApp.Layout[];\\n/**Returns the list of [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) objects on the page.*/getLines():SlidesApp.Line[];\\n/**Gets the unique ID for the page. Object IDs used by pages and page elements share the same\\nnamespace.*/getObjectId():string;\\n/**Returns the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) on the page with the given ID, or `null` if none exists.\\n@param id The ID of the page element that is being retrieved.\\n@return The page element with the given ID.*/getPageElementById(id:string):SlidesApp.PageElement;\\n/**Returns the list of [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects rendered on the page.*/getPageElements():SlidesApp.PageElement[];\\n/**Gets the type of the page.\\n@return The page type.*/getPageType():SlidesApp.PageType;\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) or\\n`null` if a matching placeholder is not present.\\n\\nIf there are multiple placeholders with the same type, it returns the one with minimal\\nplaceholder index. If there are multiple matching placeholders with the same index, it returns\\nthe first placeholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType):SlidesApp.PageElement;\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) and\\na placeholder index, or `null` if the placeholder is not present.\\n\\nIf there are multiple placeholders with the same type and index, it returns the first\\nplaceholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE, 0);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType,placeholderIndex:Integer):SlidesApp.PageElement;\\n/**Returns the list of placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects in the page.\\n\\n```\\nvar master \\u003d SlidesApp.getActivePresentation().getMasters()[0];\\nLogger.log('Number of placeholders in the master: ' + master.getPlaceholders().length);\\n```*/getPlaceholders():SlidesApp.PageElement[];\\n/**Returns the list of [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) objects on the page.*/getShapes():SlidesApp.Shape[];\\n/**Returns the list of [`SheetsChart`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html) objects on the page.*/getSheetsCharts():SlidesApp.SheetsChart[];\\n/**Returns the list of [`Table`](https://developers.google.com/apps-script/reference/slides/table.html) objects on the page.*/getTables():SlidesApp.Table[];\\n/**Returns the list of [`Video`](https://developers.google.com/apps-script/reference/slides/video.html) objects on the page.*/getVideos():SlidesApp.Video[];\\n/**Returns the list of [`WordArt`](https://developers.google.com/apps-script/reference/slides/word-art.html) objects on the page.*/getWordArts():SlidesApp.WordArt[];\\n/**Groups all the specified page elements.\\n\\nThere should be at least two page elements on the same page that are not already in another\\ngroup. Some page elements, such as [`Videos`](https://developers.google.com/apps-script/reference/slides/video.html), [`Tables`](https://developers.google.com/apps-script/reference/slides/table.html) and [`placeholder Shapes`](https://developers.google.com/apps-script/reference/slides/shape.html#getPlaceholderType()) cannot be grouped.\\n@param pageElements The elements to group together.\\n@return The new group.*/group(pageElements:SlidesApp.PageElement[]):SlidesApp.Group;\\n/**Inserts a copy of the provided [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a group between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar group \\u003d otherPresentationSlide.getGroups()[0];\\ncurrentPresentationSlide.insertGroup(group); // Also available for Layout, Master, and Page.\\n```\\n@param group The group to be copied and inserted.\\n@return The inserted group.*/insertGroup(group:SlidesApp.Group):SlidesApp.Group;\\n/**Inserts an image at the top left corner of the page with a default size from the specified\\nimage blob.\\n\\nInserting the image fetches it from the [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once and a copy is stored for\\ndisplay inside the presentation. Images must be less than 50MB in size, cannot exceed 25\\nmegapixels, and must be in either in PNG, JPEG, or GIF format.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// Get the Drive image file with the given ID.\\nvar image \\u003d DriveApp.getFileById(fileId);\\nslide.insertImage(image);\\n```\\n@param blobSource The image data.\\n@return The inserted image.*/insertImage(blobSource:BlobSource):SlidesApp.Image;\\n/**Inserts an image on the page with the provided position and size from the specified image blob.\\n\\nThe image is fetched from the provided [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once at insertion time and a copy\\nis stored for display inside the presentation. Images must be less than 50MB in size, cannot\\nexceed 25 megapixels, and must be in either in PNG, JPEG, or GIF format.\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the provided size.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// Get the Drive image file with the given ID.\\nvar image \\u003d DriveApp.getFileById(fileId);\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 300, height: 100};\\nslide.insertImage(image, position.left, position.top, size.width, size.height);\\n```\\n@param blobSource The image data.\\n@param left The horizontal position of the image in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the image in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the image in points.\\n@param height The height of the image in points.\\n@return The inserted image.*/insertImage(blobSource:BlobSource,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a copy of the provided [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page.\\n\\nThe inserted images's position on this page is determined from the source image's position\\non its respective page.\\n\\nIf the provided image is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted image.\\n\\nIf the provided image is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the image from the source\\npresentation. If the copied placeholder image is empty, nothing is inserted in the destination\\npresentation.\\n\\n```\\n// Copy an image between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar image \\u003d otherPresentationSlide.getImages[0];\\ncurrentPresentationSlide.insertImage(image);\\n```\\n@param image The image to be copied and inserted.\\n@return The inserted image.*/insertImage(image:SlidesApp.Image):SlidesApp.Image;\\n/**Inserts an image at the top left corner of the page with a default size from the provided URL.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`Image.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n@param imageUrl The image URL.\\n@return The inserted image.*/insertImage(imageUrl:string):SlidesApp.Image;\\n/**Inserts an image on the page with the provided position and size from the provided URL.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`Image.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the provided size.\\n@param imageUrl The image URL.\\n@param left The horizontal position of the image in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the image in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the image in points.\\n@param height The height of the image in points.\\n@return The inserted image.*/insertImage(imageUrl:string,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a copy of the provided [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a line between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar line \\u003d otherPresentationSlide.getLines[0];\\ncurrentPresentationSlide.insertLine(line);\\n```\\n@param line The line to be copied and inserted.\\n@return The inserted line.*/insertLine(line:SlidesApp.Line):SlidesApp.Line;\\n/**Inserts a line on the page.\\n\\n```\\n// Insert a line in the first slide of the presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar startPoint \\u003d {left: 10, top: 10};\\nvar endPoint \\u003d {left: 40, top: 40};\\nslide.insertLine(\\n    SlidesApp.LineCategory.STRAIGHT,\\n    startPoint.left,\\n    startPoint.top,\\n    endPoint.left,\\n    endPoint.top);\\n```\\n@param lineCategory The category of the line to insert.\\n@param startLeft The horizontal position of the start point of the line, measured in points\\n    from the upper left corner of the page.\\n@param startTop The vertical position of the start point of the line, measured in points from\\n    the upper left corner of the page.\\n@param endLeft The horizontal position of the end point of the line, measured in points from\\n    the upper left corner of the page.\\n@param endTop The vertical position of the end point of the line, measured in points from the\\n    upper left corner of the page.\\n@return The inserted line.*/insertLine(lineCategory:SlidesApp.LineCategory,startLeft:number,startTop:number,endLeft:number,endTop:number):SlidesApp.Line;\\n/**Inserts a line on the page connecting two [`connection sites`](https://developers.google.com/apps-script/reference/slides/connection-site.html). The two\\nconnection sites must be on this page.\\n\\n```\\n// Insert a line in the first slide of the presentation connecting two shapes.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar shape1 \\u003d slide.insertShape(SlidesApp.ShapeType.RECTANGLE);\\nvar shape2 \\u003d slide.insertShape(SlidesApp.ShapeType.CLOUD);\\nslide.insertLine(\\n    SlidesApp.LineCategory.BENT,\\n    shape1.getConnectionSites()[0],\\n    shape2.getConnectionSites()[1]);\\n```\\n@param lineCategory The category of the line to insert.\\n@param startConnectionSite The connection site where the start of the line is to be connected.\\n@param endConnectionSite The connection site where the end of the line is to be connected.\\n@return The inserted line.*/insertLine(lineCategory:SlidesApp.LineCategory,startConnectionSite:SlidesApp.ConnectionSite,endConnectionSite:SlidesApp.ConnectionSite):SlidesApp.Line;\\n/**Inserts a copy of the provided [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a page element between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d otherPresentationSlide.getPageElements()[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertPageElement(pageElement);\\n```\\n@param pageElement The page element to be copied and inserted.\\n@return The inserted page element.*/insertPageElement(pageElement:SlidesApp.PageElement):SlidesApp.PageElement;\\n/**Inserts a copy of the provided [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a shape between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar shape \\u003d otherPresentationSlide.getShapes[0];\\ncurrentPresentationSlide.insertShape(shape); // Also available for Layout, Master, and Page.\\n```\\n@param shape The shape to be copied and inserted.\\n@return The inserted shape.*/insertShape(shape:SlidesApp.Shape):SlidesApp.Shape;\\n/**Inserts a shape on the page.\\n\\nThe shape is inserted with a default size at the top left corner of the page.\\n\\n```\\n// Insert a shape in the first slide of the presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertShape(SlidesApp.ShapeType.RECTANGLE);\\n```\\n@param shapeType The type of shape to insert.\\n@return The inserted shape.*/insertShape(shapeType:SlidesApp.ShapeType):SlidesApp.Shape;\\n/**Inserts a shape on the page.\\n@param shapeType The type of shape to insert.\\n@param left The horizontal position of the shape, measured from the upper left corner of the\\n    page.\\n@param top The vertical position of the shape, measured from the upper left corner of the page.\\n@param width The width of the shape.\\n@param height The height of the shape.\\n@return The inserted shape.*/insertShape(shapeType:SlidesApp.ShapeType,left:number,top:number,width:number,height:number):SlidesApp.Shape;\\n/**Inserts a copy of the provided [`SheetsChart`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a sheets chart between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar sheetsChart \\u003d otherPresentationSlide.getSheetsCharts[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertSheetsChart(sheetsChart);\\n```\\n@param sheetsChart The sheets chart to be copied and inserted.\\n@return The inserted sheets chart.*/insertSheetsChart(sheetsChart:SlidesApp.SheetsChart):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart on the page.\\n\\nThe chart is inserted with a default size at the top left corner of the page.\\n\\nThe inserted chart is linked with the source Google Sheets chart which allows it to be\\nupdated. Other collaborators can see the link to the source spreadsheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertSheetsChart(chart);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@return The inserted chart in the page.*/insertSheetsChart(sourceChart:SpreadsheetApp.EmbeddedChart):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart on the page with the provided position and size.\\n\\nIn order to maintain the chart's aspect ratio, the chart is scaled and centered with respect\\nto the provided size.\\n\\nThe inserted chart is linked with the source Google Sheets chart which allows it to be\\nupdated. Other collaborators can see the link to the source spreadsheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 200, height: 200};\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertSheetsChart(\\n    chart,\\n    position.left,\\n    position.top,\\n    size.width,\\n    size.height);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@param left The horizontal position of the chart in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the chart in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the chart in points.\\n@param height The height of the chart in points.\\n@return The inserted chart in the page.*/insertSheetsChart(sourceChart:SpreadsheetApp.EmbeddedChart,left:number,top:number,width:number,height:number):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart as an [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page.\\n\\nThe image of the chart is inserted with a default size at the top left corner of the page.\\n\\nThe inserted image of chart is not linked with the source Google Sheets chart.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertSheetsChartAsImage(chart); // Also available for Layout, Master, and Page.\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@return The inserted image of the chart in the page.*/insertSheetsChartAsImage(sourceChart:SpreadsheetApp.EmbeddedChart):SlidesApp.Image;\\n/**Inserts a Google Sheets chart as an [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page with the provided position and\\nsize.\\n\\nIn order to maintain the chart image's aspect ratio, the image is scaled and centered with\\nrespect to the provided size.\\n\\nThe inserted image of the chart is not linked with the source Google Sheets chart.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 200, height: 200};\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertSheetsChartAsImage(\\n    chart,\\n    position.left,\\n    position.right,\\n    size.width,\\n    size.height);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@param left The horizontal position of the chart in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the chart in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the chart in points.\\n@param height The height of the chart in points.\\n@return The inserted image of the chart in the page.*/insertSheetsChartAsImage(sourceChart:SpreadsheetApp.EmbeddedChart,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a table on the page.\\n\\nThe table is centered on the page with default size and evenly distributed rows and columns.\\n@param numRows The number of rows in the table.\\n@param numColumns The number of columns in the table.\\n@return The inserted table.*/insertTable(numRows:Integer,numColumns:Integer):SlidesApp.Table;\\n/**Inserts a table on the page with the provided position and size.\\n\\nRows and columns are evenly distributed in the created table.\\n@param numRows The number of rows in the table.\\n@param numColumns The number of columns in the table.\\n@param left The horizontal position of the table, measured from the upper left corner of the\\n    page.\\n@param top The vertical position of the table, measured from the upper left corner of the page.\\n@param width The width of the table.\\n@param height The minimum height of the table. The actual height of the rendered table depends\\n    on factors such as text font size.\\n@return The inserted table.*/insertTable(numRows:Integer,numColumns:Integer,left:number,top:number,width:number,height:number):SlidesApp.Table;\\n/**Inserts a copy of the provided [`Table`](https://developers.google.com/apps-script/reference/slides/table.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a table between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar table \\u003d otherPresentationSlide.getTables[0];\\ncurrentPresentationSlide.insertTable(table); // Also available for Layout, Master, and Page.\\n```\\n@param table The table to be copied and inserted.\\n@return The inserted table.*/insertTable(table:SlidesApp.Table):SlidesApp.Table;\\n/**Inserts a text box [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) containing the provided string on the page.\\n\\nThe text box shape is inserted with a default size at the top left corner of the page.\\n\\n```\\n// Insert text box with \\\"Hello\\\" on the first slide of presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertTextBox('Hello'); // Also available for Layout, Master, and Page.\\n```\\n@param text The string the text box shape should contain.\\n@return The inserted text box shape.*/insertTextBox(text:string):SlidesApp.Shape;\\n/**Inserts a text box [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) containing the provided string on the page.\\n\\n```\\n// Insert text box with \\\"Hello\\\" on the first slide of presentation. This text box is a square\\n// with a length of 10 points on each side.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertTextBox('Hello', 0, 0, 10, 10); // Also available for Layout, Master, and Page.\\n```\\n@param text The string the text box shape should contain.\\n@param left The horizontal position of the text box shape, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the text box shape, measured from the upper left corner of\\n    the page.\\n@param width The width of the text box shape.\\n@param height The height of the text box shape.\\n@return The inserted text box shape.*/insertTextBox(text:string,left:number,top:number,width:number,height:number):SlidesApp.Shape;\\n/**Inserts a copy of the provided [`Video`](https://developers.google.com/apps-script/reference/slides/video.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a video between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar video \\u003d otherPresentationSlide.getVideos[0];\\ncurrentPresentationSlide.insertVideo(video); // Also available for Layout, Master, and Page.\\n```\\n@param video The video to be copied and inserted.\\n@return The inserted video.*/insertVideo(video:SlidesApp.Video):SlidesApp.Video;\\n/**Inserts a video at the top left corner of the page with a default size.\\n\\nOnly YouTube videos are currently supported.\\n@param videoUrl The URL of the video to insert.\\n@return The inserted video.*/insertVideo(videoUrl:string):SlidesApp.Video;\\n/**Inserts a video on the page with the provided position and size.\\n\\nOnly YouTube videos are currently supported.\\n@param videoUrl The URL of the video to insert.\\n@param left The horizontal position of the video in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the video in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the video in points.\\n@param height The height of the video in points.\\n@return The inserted video.*/insertVideo(videoUrl:string,left:number,top:number,width:number,height:number):SlidesApp.Video;\\n/**Inserts a copy of the provided [`WordArt`](https://developers.google.com/apps-script/reference/slides/word-art.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a word art between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar wordArt \\u003d otherPresentationSlide.getWordArts[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertWordArt(wordArt);\\n```\\n@param wordArt The group to be copied and inserted.\\n@return The inserted word art.*/insertWordArt(wordArt:SlidesApp.WordArt):SlidesApp.WordArt;\\n/**Removes the page.*/remove():void;\\n/**Replaces all instances of text matching find text with replace text. The search is case\\ninsensitive.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string):Integer;\\n/**Replaces all instances of text matching find text with replace text.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@param matchCase If `true`, the search is case sensitive; if `false`, the search is\\n    case insensitive.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string,matchCase:boolean):Integer;\\n/**Selects the [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) in the active presentation as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()) and removes any previous selection.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\n```\\n// Select the first slide as the current page selection and replace any previous selection.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.selectAsCurrentPage(); // Also available for Layout, Master, and Page.\\n```*/selectAsCurrentPage():void;}interface ListStyle{\\n/**Applies the specified [`ListPreset`](https://developers.google.com/apps-script/reference/slides/list-preset.html) to all of the paragraphs that overlap with the text.\\n\\nThe nesting level of each paragraph is determined by counting leading tabs in front of each\\nparagraph. To avoid excess space between the glyphs and the corresponding paragraph, these\\nleading tabs are removed by this method.\\n\\nIf the paragraph immediately before paragraphs being updated is in a [`List`](https://developers.google.com/apps-script/reference/slides/list.html) with a\\nmatching list preset and the paragraphs being updated are not already in a different list, the\\nparagraphs being updated are added to that preceding list.*/applyListPreset(listPreset:SlidesApp.ListPreset):SlidesApp.ListStyle;\\n/**Returns the rendered glyph for the text. Returns `null` if the text spans more than one\\nparagraph or the text is not in a list.*/getGlyph():string;\\n/**Returns the [`List`](https://developers.google.com/apps-script/reference/slides/list.html) the text is in, or `null` if none of the text is in a list, or\\npart of the text is in a list, or the text is in multiple lists. Call [`isInList()`](https://developers.google.com/apps-script/reference/slides/list-style.html#isInList()) to\\ndetermine whether the text is in a list.*/getList():SlidesApp.List;\\n/**Returns the 0-based nesting level of the text. Returns `null` if the text is not in a\\nlist or there are mixed values.*/getNestingLevel():Integer;\\n/**Returns `true` if the text is in exactly one list, `false` if none of the text is\\nin a list, and `null` if only some of the text is in a list or if the text is in multiple\\nlists.*/isInList():boolean;\\n/**Removes the paragraphs that overlap with the text from any lists.\\n\\nThe nesting level of each paragraph is visually preserved by adding indent to the start of\\nthe corresponding paragraph.*/removeFromList():SlidesApp.ListStyle;}interface ListPreset{}interface _ListPreset{\\n/**A list with a `ARROW3D`, `CIRCLE` and `SQUARE` glyphs for the first 3 list nesting levels.*/ARROW3D_CIRCLE_SQUARE:ListPreset;\\n/**A list with a `ARROW`, `DIAMOND` and `DISC` glyphs for the first 3 list nesting levels.*/ARROW_DIAMOND_DISC:ListPreset;\\n/**A list with `CHECKBOX` glyphs for all list nesting levels.*/CHECKBOX:ListPreset;\\n/**A list with a `DIAMONDX`, `ARROW3D` and `SQUARE` glyphs for the first 3 list nesting levels.*/DIAMONDX_ARROW3D_SQUARE:ListPreset;\\n/**A list with a `DIAMONDX`, `HOLLOWDIAMOND` and `SQUARE` glyphs for the first 3 list nesting\\nlevels.*/DIAMONDX_HOLLOWDIAMOND_SQUARE:ListPreset;\\n/**A list with a `DIAMOND`, `CIRCLE` and `SQUARE` glyphs for the first 3 list nesting levels.*/DIAMOND_CIRCLE_SQUARE:ListPreset;\\n/**A list with `DIGIT`, `ALPHA` and `ROMAN` glyphs for the first 3 list nesting levels, followed\\nby periods.*/DIGIT_ALPHA_ROMAN:ListPreset;\\n/**A list with `DIGIT`, `ALPHA` and `ROMAN` glyphs for the first 3 list nesting levels, followed\\nby parenthesis.*/DIGIT_ALPHA_ROMAN_PARENS:ListPreset;\\n/**A list with `DIGIT` glyphs separated by periods, where each nesting level uses the previous\\nnesting level's glyph as a prefix. For example: '1.', '1.1.', '2.', '2.2.'.*/DIGIT_NESTED:ListPreset;\\n/**A list with a `DISC`, `CIRCLE` and `SQUARE` glyphs for the first 3 list nesting levels.*/DISC_CIRCLE_SQUARE:ListPreset;\\n/**A list with a `LEFTTRIANGLE`, `DIAMOND` and `DISC` glyphs for the first 3 list nesting levels.*/LEFTTRIANGLE_DIAMOND_DISC:ListPreset;\\n/**A list with a `STAR`, `CIRCLE` and `SQUARE` glyphs for the first 3 list nesting levels.*/STAR_CIRCLE_SQUARE:ListPreset;\\n/**A list with `UPPERALPHA`, `ALPHA` and `ROMAN` glyphs for the first 3 list nesting levels,\\nfollowed by periods.*/UPPERALPHA_ALPHA_ROMAN:ListPreset;\\n/**A list with `UPPERROMAN`, `UPPERALPHA` and `DIGIT` glyphs for the first 3 list nesting levels,\\nfollowed by periods.*/UPPERROMAN_UPPERALPHA_DIGIT:ListPreset;\\n/**A list with `ZERODIGIT`, `ALPHA` and `ROMAN` glyphs for the first 3 list nesting levels,\\nfollowed by periods.*/ZERODIGIT_ALPHA_ROMAN:ListPreset;}interface List{\\n/**Returns the ID of the list.*/getListId():string;\\n/**Returns all the [`Paragraphs`](https://developers.google.com/apps-script/reference/slides/paragraph.html) in the list.*/getListParagraphs():SlidesApp.Paragraph[];}interface LinkType{}interface _LinkType{\\n/**A link to a specific slide in this presentation, addressed by its ID.*/SLIDE_ID:LinkType;\\n/**A link to a specific slide in this presentation, addressed by its zero-based index.*/SLIDE_INDEX:LinkType;\\n/**A link to a specific slide in this presentation, addressed by its position.*/SLIDE_POSITION:LinkType;\\n/**A link type that is not supported.*/UNSUPPORTED:LinkType;\\n/**A link to an external web page.*/URL:LinkType;}interface Link{\\n/**Returns the [`LinkType`](https://developers.google.com/apps-script/reference/slides/link-type.html).\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null) {\\n  Logger.log('Shape has a link of type: ' + link.getLinkType());\\n}\\n```*/getLinkType():SlidesApp.LinkType;\\n/**Returns the linked [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) for non-URL links types, if it exists. Returns `null` if\\nthe slide doesn't exist in the presentation, or if the [`LinkType`](https://developers.google.com/apps-script/reference/slides/link-type.html) is [`LinkType.URL`](https://developers.google.com/apps-script/reference/slides/link-type.html#URL).\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null \\u0026\\u0026 link.getLinkType() !\\u003d SlidesApp.LinkType.URL) {\\n  Logger.log('Shape has link to slide: ' + link.getLinkedSlide());\\n}\\n```*/getLinkedSlide():SlidesApp.Slide;\\n/**Returns the ID of the linked [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) or `null` if the [`LinkType`](https://developers.google.com/apps-script/reference/slides/link-type.html) is not\\n[`LinkType.SLIDE_ID`](https://developers.google.com/apps-script/reference/slides/link-type.html#SLIDE_ID).\\n\\nNote that the slide with the returned ID might not exist.\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null \\u0026\\u0026 link.getLinkType() \\u003d\\u003d SlidesApp.LinkType.SLIDE_ID) {\\n  Logger.log('Shape has link to slide with ID: ' + link.getSlideId());\\n}\\n```*/getSlideId():string;\\n/**Returns the zero-based index of the linked [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) or `null` if the [`LinkType`](https://developers.google.com/apps-script/reference/slides/link-type.html) is not [`LinkType.SLIDE_INDEX`](https://developers.google.com/apps-script/reference/slides/link-type.html#SLIDE_INDEX).\\n\\nNote that the slide at the returned index might not exist.\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null \\u0026\\u0026 link.getLinkType() \\u003d\\u003d SlidesApp.LinkType.SLIDE_INDEX) {\\n  Logger.log('Shape has link to slide with index: ' + link.getSlideIndex());\\n}\\n```*/getSlideIndex():Integer;\\n/**Returns the [`SlidePosition`](https://developers.google.com/apps-script/reference/slides/slide-position.html) of the linked [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) or `null` if the [`LinkType`](https://developers.google.com/apps-script/reference/slides/link-type.html) is not [`LinkType.SLIDE_POSITION`](https://developers.google.com/apps-script/reference/slides/link-type.html#SLIDE_POSITION).\\n\\nNote that the slide with the returned relative position might not exist.\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null \\u0026\\u0026 link.getLinkType() \\u003d\\u003d SlidesApp.LinkType.SLIDE_POSITION) {\\n  Logger.log('Shape has link to slide with relative position: ' + link.getSlidePosition());\\n}\\n```*/getSlidePosition():SlidesApp.SlidePosition;\\n/**Returns the URL to the external web page or `null` if the [`LinkType`](https://developers.google.com/apps-script/reference/slides/link-type.html) is not [`LinkType.URL`](https://developers.google.com/apps-script/reference/slides/link-type.html#URL).\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null \\u0026\\u0026 link.getLinkType() \\u003d\\u003d SlidesApp.LinkType.URL) {\\n  Logger.log('Shape has link to URL: ' + link.getUrl());\\n}\\n```*/getUrl():string;}interface LineType{}interface _LineType{\\n/**Bent connector 2 form. Corresponds to ECMA-376 ST_ShapeType 'bentConnector2'.*/BENT_CONNECTOR_2:LineType;\\n/**Bent connector 3 form. Corresponds to ECMA-376 ST_ShapeType 'bentConnector3'.*/BENT_CONNECTOR_3:LineType;\\n/**Bent connector 4 form. Corresponds to ECMA-376 ST_ShapeType 'bentConnector4'.*/BENT_CONNECTOR_4:LineType;\\n/**Bent connector 5 form. Corresponds to ECMA-376 ST_ShapeType 'bentConnector5'.*/BENT_CONNECTOR_5:LineType;\\n/**Curved connector 2 form. Corresponds to ECMA-376 ST_ShapeType 'curvedConnector2'.*/CURVED_CONNECTOR_2:LineType;\\n/**Curved connector 3 form. Corresponds to ECMA-376 ST_ShapeType 'curvedConnector3'.*/CURVED_CONNECTOR_3:LineType;\\n/**Curved connector 4 form. Corresponds to ECMA-376 ST_ShapeType 'curvedConnector4'.*/CURVED_CONNECTOR_4:LineType;\\n/**Curved connector 5 form. Corresponds to ECMA-376 ST_ShapeType 'curvedConnector5'.*/CURVED_CONNECTOR_5:LineType;\\n/**Straight connector 1 form. Corresponds to ECMA-376 ST_ShapeType 'straightConnector1'.*/STRAIGHT_CONNECTOR_1:LineType;\\n/**Straight line. Corresponds to ECMA-376 ST_ShapeType 'line'. This line type is not a connector.*/STRAIGHT_LINE:LineType;\\n/**A line type that is not supported.*/UNSUPPORTED:LineType;}interface LineFillType{}interface _LineFillType{\\n/**No fill, so the line or outline is transparent.*/NONE:LineFillType;\\n/**A solid color fill.*/SOLID:LineFillType;\\n/**A line fill type that is not supported.*/UNSUPPORTED:LineFillType;}interface LineFill{\\n/**Gets the type of the line fill.*/getFillType():SlidesApp.LineFillType;\\n/**Gets the solid fill of the line, or `null` if the fill type is not [`LineFillType.SOLID`](https://developers.google.com/apps-script/reference/slides/line-fill-type.html#SOLID).*/getSolidFill():SlidesApp.SolidFill;\\n/**Sets the solid fill to the given RGB values.*/setSolidFill(red:Integer,green:Integer,blue:Integer):void;\\n/**Sets the solid fill to the given alpha and RGB values.*/setSolidFill(red:Integer,green:Integer,blue:Integer,alpha:number):void;\\n/**Sets the solid fill to the given [`Color`](https://developers.google.com/apps-script/reference/slides/color.html).*/setSolidFill(color:SlidesApp.Color):void;\\n/**Sets the solid fill to the given alpha and [`Color`](https://developers.google.com/apps-script/reference/slides/color.html).*/setSolidFill(color:SlidesApp.Color,alpha:number):void;\\n/**Sets the solid fill to the given [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html).*/setSolidFill(color:SlidesApp.ThemeColorType):void;\\n/**Sets the solid fill to the given alpha and [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html).*/setSolidFill(color:SlidesApp.ThemeColorType,alpha:number):void;\\n/**Sets the solid fill to the given hex color string.\\n\\nThe hex string must be in the format '#RRGGBB'. For example, pink would be represented as\\n'#FFC0CB'.*/setSolidFill(hexString:string):void;\\n/**Sets the solid fill to the given alpha and hex color string.\\n\\nThe hex string must be in the format '#RRGGBB'. For example, pink would be represented as\\n'#FFC0CB'.*/setSolidFill(hexString:string,alpha:number):void;}interface LineCategory{}interface _LineCategory{\\n/**Bent connectors, including bent connector 2 to 5.*/BENT:LineCategory;\\n/**Curved connectors, including curved connector 2 to 5.*/CURVED:LineCategory;\\n/**Straight connectors, including straight connector 1.*/STRAIGHT:LineCategory;\\n/**A line category that is not supported.*/UNSUPPORTED:LineCategory;}interface Line{\\n/**Aligns the element to the specified alignment position on the page.\\n@param alignmentPosition The position to align this page element to on the page.\\n@return This page element, for chaining.*/alignOnPage(alignmentPosition:SlidesApp.AlignmentPosition):SlidesApp.Line;\\n/**Brings the page element forward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringForward():SlidesApp.Line;\\n/**Brings the page element to the front of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringToFront():SlidesApp.Line;\\n/**Duplicates the page element.\\n\\nThe duplicate page element is placed on the same page at the same position as the original.\\n@return The new duplicate of this page element.*/duplicate():SlidesApp.PageElement;\\n/**Returns the list of `ConnectionSite`s on the page element, or an empty list if the page\\nelement does not have any connection sites.\\n@return The connection sites list, which may be empty if this element has no connection sites.*/getConnectionSites():SlidesApp.ConnectionSite[];\\n/**Gets the [`DashStyle`](https://developers.google.com/apps-script/reference/slides/dash-style.html) of the line.\\n@return The style of the dashing used with this line.*/getDashStyle():SlidesApp.DashStyle;\\n/**Returns the page element's alt text description. The description is combined with the title to\\ndisplay and read alt text.\\n@return The page element's alt text description.*/getDescription():string;\\n/**Returns the end point of the line, measured from the upper-left corner of the page.\\n@return The ending point of the line.*/getEnd():SlidesApp.Point;\\n/**Gets the [`ArrowStyle`](https://developers.google.com/apps-script/reference/slides/arrow-style.html) of the arrow at the end of the line.\\n@return The style of the arrow at the end of this line.*/getEndArrow():SlidesApp.ArrowStyle;\\n/**Returns the connection at the end of the line, or `null` if there is no connection.\\n@return The connection at the end of the line.*/getEndConnection():SlidesApp.ConnectionSite;\\n/**Gets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getHeight():number;\\n/**Returns the element's inherent height in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getInherentHeight():number;\\n/**Returns the element's inherent width in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getInherentWidth():number;\\n/**Returns the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@return This element's horizontal position in points, from the upper-left corner of the page.*/getLeft():number;\\n/**Gets the [`LineCategory`](https://developers.google.com/apps-script/reference/slides/line-category.html) of the line.\\n@return The line category.*/getLineCategory():SlidesApp.LineCategory;\\n/**Gets the [`LineFill`](https://developers.google.com/apps-script/reference/slides/line-fill.html) of the line.\\n@return The fill setting of this line.*/getLineFill():SlidesApp.LineFill;\\n/**Gets the [`LineType`](https://developers.google.com/apps-script/reference/slides/line-type.html) of the line.\\n@return The type of this line.*/getLineType():SlidesApp.LineType;\\n/**Returns the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) or `null` if there is no link.\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null) {\\n  Logger.log('Shape has a link of type: ' + link.getLinkType());\\n}\\n```*/getLink():SlidesApp.Link;\\n/**Returns the unique ID for this object. Object IDs used by pages and page elements share the\\nsame namespace.\\n@return The unique ID for this object.*/getObjectId():string;\\n/**Returns the page element's type, represented as a [`PageElementType`](https://developers.google.com/apps-script/reference/slides/page-element-type.html) enum.\\n@return The page element's type.*/getPageElementType():SlidesApp.PageElementType;\\n/**Returns the group this page element belongs to, or `null` if the element is not in a\\ngroup.\\n@return The group this page element belongs to, or `null`.*/getParentGroup():SlidesApp.Group;\\n/**Returns the page this page element is on.\\n@return The page this element resides on.*/getParentPage():SlidesApp.Page;\\n/**Returns the element's clockwise rotation angle around its center in degrees, where zero degrees\\nmeans no rotation.\\n@return The rotation angle in degrees between 0 (inclusive) and 360 (exclusive).*/getRotation():number;\\n/**Returns the start point of the line, measured from the upper-left corner of the page.\\n@return The starting point of the line.*/getStart():SlidesApp.Point;\\n/**Gets the [`ArrowStyle`](https://developers.google.com/apps-script/reference/slides/arrow-style.html) of the arrow at the beginning of the line.\\n@return The style of the arrow at the beginning of this line.*/getStartArrow():SlidesApp.ArrowStyle;\\n/**Returns the connection at the beginning of the line, or `null` if there is no connection.\\n@return The connection at the beginning of the line.*/getStartConnection():SlidesApp.ConnectionSite;\\n/**Returns the page element's alt text title. The title is combined with the description to\\ndisplay and read alt text.\\n@return The page element's alt text title.*/getTitle():string;\\n/**Gets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@return This element's vertical position in points, from the upper-left corner of the page.*/getTop():number;\\n/**Returns the page element's transform.\\n\\nThe visual appearance of the page element is determined by its absolute transform. To\\ncompute the absolute transform, preconcatenate a page element's transform with the transforms\\nof all of its parent groups. If the page element is not in a group, its absolute transform is\\nthe same as the value in this field.\\n@return The page element's transform.*/getTransform():SlidesApp.AffineTransform;\\n/**Returns the thickness of the line in points.\\n@return The thickness of the line in points.*/getWeight():number;\\n/**Returns the element's width in points, which is the width of the element's bounding box when\\nthe element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getWidth():number;\\n/**Returns `true` if the line is a connector, or `false` if not.\\n\\nConnector is a type of line that is used to connect connections sites on applicable page\\nelements. Each end of the connector can be connected to at most one connection site.\\n@return `True` if the line is a connector, or `false` if not.*/isConnector():boolean;\\n/**Preconcatenates the provided transform to the existing transform of the page element.\\n\\n```\\nnewTransform \\u003d argument * existingTransform\\n```\\n\\nFor example, to move a page elements 36 points to the left:\\n\\n```\\nelement.preconcatenateTransform(SlidesApp.newAffineTransformBuilder()\\n    .setTranslateX(-36.0)\\n    .build());\\n```\\n\\nYou can also replace the page element's transform with [`setTransform(transform)`](https://developers.google.com/apps-script/reference/slides/line.html#setTransform(AffineTransform)).\\n@param transform The transform to preconcatenate onto this page element's transform.\\n@return This page element, for chaining.*/preconcatenateTransform(transform:SlidesApp.AffineTransform):SlidesApp.Line;\\n/**Removes the page element.\\n\\nIf after a remove operation, a `Group` contains only one or no page elements, the\\ngroup itself is also removed.\\n\\nIf a placeholder `PageElement` is removed on a master or layout, any empty inheriting\\nplaceholders are also removed.*/remove():void;\\n/**Removes a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html).\\n\\n```\\nshape.removeLink();\\n```*/removeLink():void;\\n/**Reroutes the start and end of the line to the closest two connection sites on the connected\\npage elements. The start and end of the line must be connected to different page elements.\\n@return The line.*/reroute():SlidesApp.Line;\\n/**Scales the element's height by the specified ratio. The element's height is the height of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's height by.\\n@return This page element, for chaining.*/scaleHeight(ratio:number):SlidesApp.Line;\\n/**Scales the element's width by the specified ratio. The element's width is the width of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's width by.\\n@return This page element, for chaining.*/scaleWidth(ratio:number):SlidesApp.Line;\\n/**Selects only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation and removes any previous\\nselection. This is the same as calling [`select(replace)`](https://developers.google.com/apps-script/reference/slides/line.html#select(Boolean)) with `true`.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThis sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d slide.getPageElements()[0];\\n// Only select this page element and replace any previous selection.\\npageElement.select();\\n```*/select():void;\\n/**Selects the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nPass `true` to this method to select only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) and remove any\\nprevious selection. This also sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the\\n[`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\nPass `false` to select multiple [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects. The [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html)\\nobjects must be in the same [`Page`](https://developers.google.com/apps-script/reference/slides/page.html).\\n\\nThe following conditions must be met while selecting a page element using a `false`\\nparameter:\\n\\n  1. The parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object must be the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n  1. There should not be multiple [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) objects selected.\\n\\nTo make sure that’s the case the preferred approach is to select the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html)\\nfirst using [`Page.selectAsCurrentPage()`](https://developers.google.com/apps-script/reference/slides/page.html#selectAsCurrentPage()) and then select the page elements in that page.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// First select the slide page, as the current page selection.\\nslide.selectAsCurrentPage();\\n// Then select all the page elements in the selected slide page.\\nvar pageElements \\u003d slide.getPageElements();\\nfor (var i \\u003d 0; i \\u003c pageElements.length; i++) {\\n  pageElements[i].select(false);\\n}\\n```\\n@param replace If `true`, the selection replaces any previous selection; otherwise the\\n    selection is added to any previous selection.*/select(replace:boolean):void;\\n/**Sends the page element backward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendBackward():SlidesApp.Line;\\n/**Sends the page element to the back of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendToBack():SlidesApp.Line;\\n/**Sets the [`DashStyle`](https://developers.google.com/apps-script/reference/slides/dash-style.html) of the line.\\n@param style The style of the dashing to set for this line.\\n@return This line, for chaining.*/setDashStyle(style:SlidesApp.DashStyle):SlidesApp.Line;\\n/**Sets the page element's alt text description.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text description to \\\"new alt text description\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setDescription('new alt text description');\\nLogger.log(pageElement.getDescription());\\n```\\n@param description The string to set the alt text description to.\\n@return This page element.*/setDescription(description:string):SlidesApp.Line;\\n/**Sets the position of the end point of the line.\\n\\nThe line path may be adjusted after the position changes.\\n@param left The horizontal position of the end point of the line, measured in points from the\\n    upper left corner of the page.\\n@param top The vertical position of the end point of the line, measured in points from the\\n    upper left corner of the page.\\n@return This line, for chaining.*/setEnd(left:number,top:number):SlidesApp.Line;\\n/**Sets the position of the end point of the line.\\n\\nThe line path may be adjusted after the position changes.\\n@param point The end point of the line, whose position is measured from the upper left corner\\n    of the page.\\n@return This line, for chaining.*/setEnd(point:SlidesApp.Point):SlidesApp.Line;\\n/**Sets the [`ArrowStyle`](https://developers.google.com/apps-script/reference/slides/arrow-style.html) of the arrow at the end of the line.\\n@param style The style to set.\\n@return This line, for chaining.*/setEndArrow(style:SlidesApp.ArrowStyle):SlidesApp.Line;\\n/**Sets the connection at the end of the line. It moves the end of the line to the specified\\nconnection site while keeping the other end intact.\\n@param connectionSite The connection site the end connection is updated to, or `null` if\\n    removing the end connection.\\n@return The line.*/setEndConnection(connectionSite:SlidesApp.ConnectionSite):SlidesApp.Line;\\n/**Sets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param height The new height of this page element to set, in points.\\n@return This page element, for chaining.*/setHeight(height:number):SlidesApp.Line;\\n/**Sets the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@param left The new horizontal position to set, in points.\\n@return This page element, for chaining.*/setLeft(left:number):SlidesApp.Line;\\n/**Sets the [`LineCategory`](https://developers.google.com/apps-script/reference/slides/line-category.html) of the line.\\n\\nYou can only set the category on [`connectors`](https://developers.google.com/apps-script/reference/slides/line.html#isConnector()). The connector may be\\nrerouted after changing its category.\\n@param lineCategory The line category to set.\\n@return The line.*/setLineCategory(lineCategory:SlidesApp.LineCategory):SlidesApp.Line;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the zero-based index of the slide.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nshape.setLinkSlide(0);\\n```\\n@param slideIndex The zero-based index to the slide.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slideIndex:Integer):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html), the link is set by the given slide ID.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nvar slide \\u003d presentation.getSlides()[0];\\nshape.setLinkSlide(slide);\\n```\\n@param slide The [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) to be linked.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slide:SlidesApp.Slide):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the relative position of the slide.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nshape.setLinkSlide(SlideApp.SlidePosition.FIRST_SLIDE);\\n```\\n@param slidePosition The relative [`SlidePosition`](https://developers.google.com/apps-script/reference/slides/slide-position.html).\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slidePosition:SlidesApp.SlidePosition):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given non-empty URL string.\\n\\n```\\n// Set a link to the URL.\\nshape.setLinkUrl(\\\"https://slides.google.com\\\");\\n```\\n@param url The URL string.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkUrl(url:string):SlidesApp.Link;\\n/**Sets the element's clockwise rotation angle around its center in degrees.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param angle The new clockwise rotation angle to set, in degrees.\\n@return This page element, for chaining.*/setRotation(angle:number):SlidesApp.Line;\\n/**Sets the position of the start point of the line.\\n\\nThe line path may be adjusted after the position changes.\\n@param left The horizontal position of the start point of the line, measured in points from the\\n    upper left corner of the page.\\n@param top The vertical position of the start point of the line, measured in points from the\\n    upper left corner of the page.\\n@return This line, for chaining.*/setStart(left:number,top:number):SlidesApp.Line;\\n/**Sets the position of the start point of the line.\\n\\nThe line path may be adjusted after the position changes.\\n@param point The start point of the line, whose position is measured from the upper left corner\\n    of the page.\\n@return This line, for chaining.*/setStart(point:SlidesApp.Point):SlidesApp.Line;\\n/**Sets the [`ArrowStyle`](https://developers.google.com/apps-script/reference/slides/arrow-style.html) of the arrow at the beginning of the line.\\n@param style The new arrow style to set.\\n@return This line, for chaining.*/setStartArrow(style:SlidesApp.ArrowStyle):SlidesApp.Line;\\n/**Sets the connection at the beginning of the line. It moves the start of the line to the\\nspecified connection site while keeping the other end intact.\\n@param connectionSite The connection site the start connection is updated to, or `null`\\n    if removing the start connection.\\n@return The line.*/setStartConnection(connectionSite:SlidesApp.ConnectionSite):SlidesApp.Line;\\n/**Sets the page element's alt text title.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text title to \\\"new alt text title\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setTitle('new alt text title');\\nLogger.log(pageElement.getTitle());\\n```\\n@param title The string to set the alt text title to.\\n@return This page element.*/setTitle(title:string):SlidesApp.Line;\\n/**Sets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@param top The new vertical position to set, in points.\\n@return This page element, for chaining.*/setTop(top:number):SlidesApp.Line;\\n/**Sets the transform of the page element with the provided transform.\\n\\nUpdating the transform of a group changes the absolute transform of the page elements in\\nthat group, which can change their visual appearance.\\n\\nUpdating the transform of a page element that is in a group only changes the transform of\\nthat page element; it doesn't affect the transforms of the group or other page elements in the\\ngroup.\\n\\nFor details on how transforms impact the visual appearance of page elements, see [`getTransform()`](https://developers.google.com/apps-script/reference/slides/line.html#getTransform()).\\n@param transform The transform that is set for this page element.\\n@return This element, for chaining.*/setTransform(transform:SlidesApp.AffineTransform):SlidesApp.Line;\\n/**Sets the thickness of the line in points.\\n@param points The new thickness of the line in points.\\n@return This line, for chaining.*/setWeight(points:number):SlidesApp.Line;\\n/**Sets the element's width in points, which is the width of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param width The new width of this page element to set, in points.\\n@return This page element, for chaining.*/setWidth(width:number):SlidesApp.Line;}interface Layout{\\n/**Gets the page's background.\\n@return The page's background.*/getBackground():SlidesApp.PageBackground;\\n/**Gets the [`ColorScheme`](https://developers.google.com/apps-script/reference/slides/color-scheme.html) associated with the page.\\n@return The page's color scheme.*/getColorScheme():SlidesApp.ColorScheme;\\n/**Returns the list of [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) objects on the page.*/getGroups():SlidesApp.Group[];\\n/**Returns the list of [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) objects on the page.*/getImages():SlidesApp.Image[];\\n/**Gets the name of the layout.*/getLayoutName():string;\\n/**Returns the list of [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) objects on the page.*/getLines():SlidesApp.Line[];\\n/**Gets the master that the layout is based on.*/getMaster():SlidesApp.Master;\\n/**Gets the unique ID for the page. Object IDs used by pages and page elements share the same\\nnamespace.*/getObjectId():string;\\n/**Returns the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) on the page with the given ID, or `null` if none exists.\\n@param id The ID of the page element that is being retrieved.\\n@return The page element with the given ID.*/getPageElementById(id:string):SlidesApp.PageElement;\\n/**Returns the list of [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects rendered on the page.*/getPageElements():SlidesApp.PageElement[];\\n/**Gets the type of the page.\\n@return The page type.*/getPageType():SlidesApp.PageType;\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) or\\n`null` if a matching placeholder is not present.\\n\\nIf there are multiple placeholders with the same type, it returns the one with minimal\\nplaceholder index. If there are multiple matching placeholders with the same index, it returns\\nthe first placeholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType):SlidesApp.PageElement;\\n/**Returns the placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object for a specified [`PlaceholderType`](https://developers.google.com/apps-script/reference/slides/placeholder-type.html) and\\na placeholder index, or `null` if the placeholder is not present.\\n\\nIf there are multiple placeholders with the same type and index, it returns the first\\nplaceholder from the page's page elements collection.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar placeholder \\u003d slide.getPlaceholder(SlidesApp.PlaceholderType.CENTERED_TITLE, 0);\\n```*/getPlaceholder(placeholderType:SlidesApp.PlaceholderType,placeholderIndex:Integer):SlidesApp.PageElement;\\n/**Returns the list of placeholder [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects in the page.\\n\\n```\\nvar master \\u003d SlidesApp.getActivePresentation().getMasters()[0];\\nLogger.log('Number of placeholders in the master: ' + master.getPlaceholders().length);\\n```*/getPlaceholders():SlidesApp.PageElement[];\\n/**Returns the list of [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) objects on the page.*/getShapes():SlidesApp.Shape[];\\n/**Returns the list of [`SheetsChart`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html) objects on the page.*/getSheetsCharts():SlidesApp.SheetsChart[];\\n/**Returns the list of [`Table`](https://developers.google.com/apps-script/reference/slides/table.html) objects on the page.*/getTables():SlidesApp.Table[];\\n/**Returns the list of [`Video`](https://developers.google.com/apps-script/reference/slides/video.html) objects on the page.*/getVideos():SlidesApp.Video[];\\n/**Returns the list of [`WordArt`](https://developers.google.com/apps-script/reference/slides/word-art.html) objects on the page.*/getWordArts():SlidesApp.WordArt[];\\n/**Groups all the specified page elements.\\n\\nThere should be at least two page elements on the same page that are not already in another\\ngroup. Some page elements, such as [`Videos`](https://developers.google.com/apps-script/reference/slides/video.html), [`Tables`](https://developers.google.com/apps-script/reference/slides/table.html) and [`placeholder Shapes`](https://developers.google.com/apps-script/reference/slides/shape.html#getPlaceholderType()) cannot be grouped.\\n@param pageElements The elements to group together.\\n@return The new group.*/group(pageElements:SlidesApp.PageElement[]):SlidesApp.Group;\\n/**Inserts a copy of the provided [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a group between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar group \\u003d otherPresentationSlide.getGroups()[0];\\ncurrentPresentationSlide.insertGroup(group); // Also available for Layout, Master, and Page.\\n```\\n@param group The group to be copied and inserted.\\n@return The inserted group.*/insertGroup(group:SlidesApp.Group):SlidesApp.Group;\\n/**Inserts an image at the top left corner of the page with a default size from the specified\\nimage blob.\\n\\nInserting the image fetches it from the [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once and a copy is stored for\\ndisplay inside the presentation. Images must be less than 50MB in size, cannot exceed 25\\nmegapixels, and must be in either in PNG, JPEG, or GIF format.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// Get the Drive image file with the given ID.\\nvar image \\u003d DriveApp.getFileById(fileId);\\nslide.insertImage(image);\\n```\\n@param blobSource The image data.\\n@return The inserted image.*/insertImage(blobSource:BlobSource):SlidesApp.Image;\\n/**Inserts an image on the page with the provided position and size from the specified image blob.\\n\\nThe image is fetched from the provided [`BlobSource`](https://developers.google.com/apps-script/reference/slides/../base/blob-source.html) once at insertion time and a copy\\nis stored for display inside the presentation. Images must be less than 50MB in size, cannot\\nexceed 25 megapixels, and must be in either in PNG, JPEG, or GIF format.\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the provided size.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// Get the Drive image file with the given ID.\\nvar image \\u003d DriveApp.getFileById(fileId);\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 300, height: 100};\\nslide.insertImage(image, position.left, position.top, size.width, size.height);\\n```\\n@param blobSource The image data.\\n@param left The horizontal position of the image in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the image in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the image in points.\\n@param height The height of the image in points.\\n@return The inserted image.*/insertImage(blobSource:BlobSource,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a copy of the provided [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page.\\n\\nThe inserted images's position on this page is determined from the source image's position\\non its respective page.\\n\\nIf the provided image is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted image.\\n\\nIf the provided image is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the image from the source\\npresentation. If the copied placeholder image is empty, nothing is inserted in the destination\\npresentation.\\n\\n```\\n// Copy an image between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar image \\u003d otherPresentationSlide.getImages[0];\\ncurrentPresentationSlide.insertImage(image);\\n```\\n@param image The image to be copied and inserted.\\n@return The inserted image.*/insertImage(image:SlidesApp.Image):SlidesApp.Image;\\n/**Inserts an image at the top left corner of the page with a default size from the provided URL.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`Image.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n@param imageUrl The image URL.\\n@return The inserted image.*/insertImage(imageUrl:string):SlidesApp.Image;\\n/**Inserts an image on the page with the provided position and size from the provided URL.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`Image.getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the provided size.\\n@param imageUrl The image URL.\\n@param left The horizontal position of the image in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the image in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the image in points.\\n@param height The height of the image in points.\\n@return The inserted image.*/insertImage(imageUrl:string,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a copy of the provided [`Line`](https://developers.google.com/apps-script/reference/slides/line.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a line between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar line \\u003d otherPresentationSlide.getLines[0];\\ncurrentPresentationSlide.insertLine(line);\\n```\\n@param line The line to be copied and inserted.\\n@return The inserted line.*/insertLine(line:SlidesApp.Line):SlidesApp.Line;\\n/**Inserts a line on the page.\\n\\n```\\n// Insert a line in the first slide of the presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar startPoint \\u003d {left: 10, top: 10};\\nvar endPoint \\u003d {left: 40, top: 40};\\nslide.insertLine(\\n    SlidesApp.LineCategory.STRAIGHT,\\n    startPoint.left,\\n    startPoint.top,\\n    endPoint.left,\\n    endPoint.top);\\n```\\n@param lineCategory The category of the line to insert.\\n@param startLeft The horizontal position of the start point of the line, measured in points\\n    from the upper left corner of the page.\\n@param startTop The vertical position of the start point of the line, measured in points from\\n    the upper left corner of the page.\\n@param endLeft The horizontal position of the end point of the line, measured in points from\\n    the upper left corner of the page.\\n@param endTop The vertical position of the end point of the line, measured in points from the\\n    upper left corner of the page.\\n@return The inserted line.*/insertLine(lineCategory:SlidesApp.LineCategory,startLeft:number,startTop:number,endLeft:number,endTop:number):SlidesApp.Line;\\n/**Inserts a line on the page connecting two [`connection sites`](https://developers.google.com/apps-script/reference/slides/connection-site.html). The two\\nconnection sites must be on this page.\\n\\n```\\n// Insert a line in the first slide of the presentation connecting two shapes.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar shape1 \\u003d slide.insertShape(SlidesApp.ShapeType.RECTANGLE);\\nvar shape2 \\u003d slide.insertShape(SlidesApp.ShapeType.CLOUD);\\nslide.insertLine(\\n    SlidesApp.LineCategory.BENT,\\n    shape1.getConnectionSites()[0],\\n    shape2.getConnectionSites()[1]);\\n```\\n@param lineCategory The category of the line to insert.\\n@param startConnectionSite The connection site where the start of the line is to be connected.\\n@param endConnectionSite The connection site where the end of the line is to be connected.\\n@return The inserted line.*/insertLine(lineCategory:SlidesApp.LineCategory,startConnectionSite:SlidesApp.ConnectionSite,endConnectionSite:SlidesApp.ConnectionSite):SlidesApp.Line;\\n/**Inserts a copy of the provided [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a page element between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d otherPresentationSlide.getPageElements()[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertPageElement(pageElement);\\n```\\n@param pageElement The page element to be copied and inserted.\\n@return The inserted page element.*/insertPageElement(pageElement:SlidesApp.PageElement):SlidesApp.PageElement;\\n/**Inserts a copy of the provided [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a shape between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar shape \\u003d otherPresentationSlide.getShapes[0];\\ncurrentPresentationSlide.insertShape(shape); // Also available for Layout, Master, and Page.\\n```\\n@param shape The shape to be copied and inserted.\\n@return The inserted shape.*/insertShape(shape:SlidesApp.Shape):SlidesApp.Shape;\\n/**Inserts a shape on the page.\\n\\nThe shape is inserted with a default size at the top left corner of the page.\\n\\n```\\n// Insert a shape in the first slide of the presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertShape(SlidesApp.ShapeType.RECTANGLE);\\n```\\n@param shapeType The type of shape to insert.\\n@return The inserted shape.*/insertShape(shapeType:SlidesApp.ShapeType):SlidesApp.Shape;\\n/**Inserts a shape on the page.\\n@param shapeType The type of shape to insert.\\n@param left The horizontal position of the shape, measured from the upper left corner of the\\n    page.\\n@param top The vertical position of the shape, measured from the upper left corner of the page.\\n@param width The width of the shape.\\n@param height The height of the shape.\\n@return The inserted shape.*/insertShape(shapeType:SlidesApp.ShapeType,left:number,top:number,width:number,height:number):SlidesApp.Shape;\\n/**Inserts a copy of the provided [`SheetsChart`](https://developers.google.com/apps-script/reference/slides/sheets-chart.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a sheets chart between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar sheetsChart \\u003d otherPresentationSlide.getSheetsCharts[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertSheetsChart(sheetsChart);\\n```\\n@param sheetsChart The sheets chart to be copied and inserted.\\n@return The inserted sheets chart.*/insertSheetsChart(sheetsChart:SlidesApp.SheetsChart):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart on the page.\\n\\nThe chart is inserted with a default size at the top left corner of the page.\\n\\nThe inserted chart is linked with the source Google Sheets chart which allows it to be\\nupdated. Other collaborators can see the link to the source spreadsheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertSheetsChart(chart);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@return The inserted chart in the page.*/insertSheetsChart(sourceChart:SpreadsheetApp.EmbeddedChart):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart on the page with the provided position and size.\\n\\nIn order to maintain the chart's aspect ratio, the chart is scaled and centered with respect\\nto the provided size.\\n\\nThe inserted chart is linked with the source Google Sheets chart which allows it to be\\nupdated. Other collaborators can see the link to the source spreadsheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 200, height: 200};\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertSheetsChart(\\n    chart,\\n    position.left,\\n    position.top,\\n    size.width,\\n    size.height);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@param left The horizontal position of the chart in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the chart in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the chart in points.\\n@param height The height of the chart in points.\\n@return The inserted chart in the page.*/insertSheetsChart(sourceChart:SpreadsheetApp.EmbeddedChart,left:number,top:number,width:number,height:number):SlidesApp.SheetsChart;\\n/**Inserts a Google Sheets chart as an [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page.\\n\\nThe image of the chart is inserted with a default size at the top left corner of the page.\\n\\nThe inserted image of chart is not linked with the source Google Sheets chart.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertSheetsChartAsImage(chart); // Also available for Layout, Master, and Page.\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@return The inserted image of the chart in the page.*/insertSheetsChartAsImage(sourceChart:SpreadsheetApp.EmbeddedChart):SlidesApp.Image;\\n/**Inserts a Google Sheets chart as an [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) on the page with the provided position and\\nsize.\\n\\nIn order to maintain the chart image's aspect ratio, the image is scaled and centered with\\nrespect to the provided size.\\n\\nThe inserted image of the chart is not linked with the source Google Sheets chart.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.openById('spreadsheetId').getSheets()[0];\\nvar chart \\u003d sheet.getCharts()[0];\\n// Insert the spreadsheet chart in the first slide.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar position \\u003d {left: 0, top: 0};\\nvar size \\u003d {width: 200, height: 200};\\n\\n// Also available for Layout, Master, and Page.\\nslide.insertSheetsChartAsImage(\\n    chart,\\n    position.left,\\n    position.right,\\n    size.width,\\n    size.height);\\n```\\n@param sourceChart The chart in a spreadsheet to be inserted in the page.\\n@param left The horizontal position of the chart in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the chart in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the chart in points.\\n@param height The height of the chart in points.\\n@return The inserted image of the chart in the page.*/insertSheetsChartAsImage(sourceChart:SpreadsheetApp.EmbeddedChart,left:number,top:number,width:number,height:number):SlidesApp.Image;\\n/**Inserts a table on the page.\\n\\nThe table is centered on the page with default size and evenly distributed rows and columns.\\n@param numRows The number of rows in the table.\\n@param numColumns The number of columns in the table.\\n@return The inserted table.*/insertTable(numRows:Integer,numColumns:Integer):SlidesApp.Table;\\n/**Inserts a table on the page with the provided position and size.\\n\\nRows and columns are evenly distributed in the created table.\\n@param numRows The number of rows in the table.\\n@param numColumns The number of columns in the table.\\n@param left The horizontal position of the table, measured from the upper left corner of the\\n    page.\\n@param top The vertical position of the table, measured from the upper left corner of the page.\\n@param width The width of the table.\\n@param height The minimum height of the table. The actual height of the rendered table depends\\n    on factors such as text font size.\\n@return The inserted table.*/insertTable(numRows:Integer,numColumns:Integer,left:number,top:number,width:number,height:number):SlidesApp.Table;\\n/**Inserts a copy of the provided [`Table`](https://developers.google.com/apps-script/reference/slides/table.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a table between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar table \\u003d otherPresentationSlide.getTables[0];\\ncurrentPresentationSlide.insertTable(table); // Also available for Layout, Master, and Page.\\n```\\n@param table The table to be copied and inserted.\\n@return The inserted table.*/insertTable(table:SlidesApp.Table):SlidesApp.Table;\\n/**Inserts a text box [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) containing the provided string on the page.\\n\\nThe text box shape is inserted with a default size at the top left corner of the page.\\n\\n```\\n// Insert text box with \\\"Hello\\\" on the first slide of presentation.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertTextBox('Hello'); // Also available for Layout, Master, and Page.\\n```\\n@param text The string the text box shape should contain.\\n@return The inserted text box shape.*/insertTextBox(text:string):SlidesApp.Shape;\\n/**Inserts a text box [`Shape`](https://developers.google.com/apps-script/reference/slides/shape.html) containing the provided string on the page.\\n\\n```\\n// Insert text box with \\\"Hello\\\" on the first slide of presentation. This text box is a square\\n// with a length of 10 points on each side.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.insertTextBox('Hello', 0, 0, 10, 10); // Also available for Layout, Master, and Page.\\n```\\n@param text The string the text box shape should contain.\\n@param left The horizontal position of the text box shape, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the text box shape, measured from the upper left corner of\\n    the page.\\n@param width The width of the text box shape.\\n@param height The height of the text box shape.\\n@return The inserted text box shape.*/insertTextBox(text:string,left:number,top:number,width:number,height:number):SlidesApp.Shape;\\n/**Inserts a copy of the provided [`Video`](https://developers.google.com/apps-script/reference/slides/video.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a video between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar video \\u003d otherPresentationSlide.getVideos[0];\\ncurrentPresentationSlide.insertVideo(video); // Also available for Layout, Master, and Page.\\n```\\n@param video The video to be copied and inserted.\\n@return The inserted video.*/insertVideo(video:SlidesApp.Video):SlidesApp.Video;\\n/**Inserts a video at the top left corner of the page with a default size.\\n\\nOnly YouTube videos are currently supported.\\n@param videoUrl The URL of the video to insert.\\n@return The inserted video.*/insertVideo(videoUrl:string):SlidesApp.Video;\\n/**Inserts a video on the page with the provided position and size.\\n\\nOnly YouTube videos are currently supported.\\n@param videoUrl The URL of the video to insert.\\n@param left The horizontal position of the video in points, measured from the upper left corner\\n    of the page.\\n@param top The vertical position of the video in points, measured from the upper left corner of\\n    the page.\\n@param width The width of the video in points.\\n@param height The height of the video in points.\\n@return The inserted video.*/insertVideo(videoUrl:string,left:number,top:number,width:number,height:number):SlidesApp.Video;\\n/**Inserts a copy of the provided [`WordArt`](https://developers.google.com/apps-script/reference/slides/word-art.html) on the page.\\n\\nThe inserted element's position on this page is determined from the source element's\\nposition on its respective page.\\n\\nIf the provided element is a placeholder being copied from within the current presentation,\\nproperties that inherit from master or layout pages also inherit on the inserted element.\\n\\nIf the provided element is a placeholder being copied from a different presentation,\\nproperties that inherit from master or layout pages are copied onto the element from the source\\npresentation.\\n\\n```\\n// Copy a word art between presentations.\\nvar otherPresentationSlide \\u003d SlidesApp.openById('presentationId').getSlides()[0];\\nvar currentPresentationSlide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar wordArt \\u003d otherPresentationSlide.getWordArts[0];\\n\\n// Also available for Layout, Master, and Page.\\ncurrentPresentationSlide.insertWordArt(wordArt);\\n```\\n@param wordArt The group to be copied and inserted.\\n@return The inserted word art.*/insertWordArt(wordArt:SlidesApp.WordArt):SlidesApp.WordArt;\\n/**Removes the page.*/remove():void;\\n/**Replaces all instances of text matching find text with replace text. The search is case\\ninsensitive.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string):Integer;\\n/**Replaces all instances of text matching find text with replace text.\\n@param findText The text to find.\\n@param replaceText The text to replace the matched text.\\n@param matchCase If `true`, the search is case sensitive; if `false`, the search is\\n    case insensitive.\\n@return the number of occurrences changed*/replaceAllText(findText:string,replaceText:string,matchCase:boolean):Integer;\\n/**Selects the [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) in the active presentation as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()) and removes any previous selection.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\n```\\n// Select the first slide as the current page selection and replace any previous selection.\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nslide.selectAsCurrentPage(); // Also available for Layout, Master, and Page.\\n```*/selectAsCurrentPage():void;}interface Image{\\n/**Aligns the element to the specified alignment position on the page.\\n@param alignmentPosition The position to align this page element to on the page.\\n@return This page element, for chaining.*/alignOnPage(alignmentPosition:SlidesApp.AlignmentPosition):SlidesApp.Image;\\n/**Brings the page element forward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringForward():SlidesApp.Image;\\n/**Brings the page element to the front of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringToFront():SlidesApp.Image;\\n/**Duplicates the page element.\\n\\nThe duplicate page element is placed on the same page at the same position as the original.\\n@return The new duplicate of this page element.*/duplicate():SlidesApp.PageElement;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Return the data inside this image as a blob.\\n@return The image data as a blob.*/getBlob():Blob;\\n/**Returns the [`Border`](https://developers.google.com/apps-script/reference/slides/border.html) of the image.\\n@return The border of the image.*/getBorder():SlidesApp.Border;\\n/**Returns the list of `ConnectionSite`s on the page element, or an empty list if the page\\nelement does not have any connection sites.\\n@return The connection sites list, which may be empty if this element has no connection sites.*/getConnectionSites():SlidesApp.ConnectionSite[];\\n/**Gets a URL to the image.\\n\\nThis URL is tagged with the account of the requester, so anyone with the URL effectively\\naccesses the image as the original requester. Access to the image may be lost if the\\npresentation's sharing settings change. The returned URL expires after a short period of time.*/getContentUrl():string;\\n/**Returns the page element's alt text description. The description is combined with the title to\\ndisplay and read alt text.\\n@return The page element's alt text description.*/getDescription():string;\\n/**Gets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getHeight():number;\\n/**Returns the element's inherent height in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getInherentHeight():number;\\n/**Returns the element's inherent width in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getInherentWidth():number;\\n/**Returns the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@return This element's horizontal position in points, from the upper-left corner of the page.*/getLeft():number;\\n/**Returns the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) or `null` if there is no link.\\n\\n```\\nvar link \\u003d shape.getLink();\\nif (link !\\u003d null) {\\n  Logger.log('Shape has a link of type: ' + link.getLinkType());\\n}\\n```*/getLink():SlidesApp.Link;\\n/**Returns the unique ID for this object. Object IDs used by pages and page elements share the\\nsame namespace.\\n@return The unique ID for this object.*/getObjectId():string;\\n/**Returns the page element's type, represented as a [`PageElementType`](https://developers.google.com/apps-script/reference/slides/page-element-type.html) enum.\\n@return The page element's type.*/getPageElementType():SlidesApp.PageElementType;\\n/**Returns the group this page element belongs to, or `null` if the element is not in a\\ngroup.\\n@return The group this page element belongs to, or `null`.*/getParentGroup():SlidesApp.Group;\\n/**Returns the page this page element is on.\\n@return The page this element resides on.*/getParentPage():SlidesApp.Page;\\n/**Returns the parent page element of the placeholder. Returns `null` if the image is not a\\nplaceholder or has no parent.\\n@return The parent page element of this image placeholder, or `null` if this image is not\\n    a placeholder or doesn't have a parent.*/getParentPlaceholder():SlidesApp.PageElement;\\n/**Returns the index of the placeholder image. If two or more placeholder images on the same page\\nare the same type, they each have a unique index value. Returns `null` if the image isn't\\na placeholder.\\n@return This image's placeholder index, or `null` if the image isn't a placeholder.*/getPlaceholderIndex():Integer;\\n/**Returns the placeholder type of the image, or `PlaceholderType.NONE` if the shape is not\\na placeholder.\\n@return The placeholder type of this image.*/getPlaceholderType():SlidesApp.PlaceholderType;\\n/**Returns the element's clockwise rotation angle around its center in degrees, where zero degrees\\nmeans no rotation.\\n@return The rotation angle in degrees between 0 (inclusive) and 360 (exclusive).*/getRotation():number;\\n/**Gets the image's source URL, if available.\\n\\nWhen an image is inserted by URL, returns the URL provided during image insertion.\\n@return The image URL or `null` if the image does not have a source URL.*/getSourceUrl():string;\\n/**Returns the page element's alt text title. The title is combined with the description to\\ndisplay and read alt text.\\n@return The page element's alt text title.*/getTitle():string;\\n/**Gets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@return This element's vertical position in points, from the upper-left corner of the page.*/getTop():number;\\n/**Returns the page element's transform.\\n\\nThe visual appearance of the page element is determined by its absolute transform. To\\ncompute the absolute transform, preconcatenate a page element's transform with the transforms\\nof all of its parent groups. If the page element is not in a group, its absolute transform is\\nthe same as the value in this field.\\n@return The page element's transform.*/getTransform():SlidesApp.AffineTransform;\\n/**Returns the element's width in points, which is the width of the element's bounding box when\\nthe element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getWidth():number;\\n/**Preconcatenates the provided transform to the existing transform of the page element.\\n\\n```\\nnewTransform \\u003d argument * existingTransform\\n```\\n\\nFor example, to move a page elements 36 points to the left:\\n\\n```\\nelement.preconcatenateTransform(SlidesApp.newAffineTransformBuilder()\\n    .setTranslateX(-36.0)\\n    .build());\\n```\\n\\nYou can also replace the page element's transform with [`setTransform(transform)`](https://developers.google.com/apps-script/reference/slides/image.html#setTransform(AffineTransform)).\\n@param transform The transform to preconcatenate onto this page element's transform.\\n@return This page element, for chaining.*/preconcatenateTransform(transform:SlidesApp.AffineTransform):SlidesApp.Image;\\n/**Removes the page element.\\n\\nIf after a remove operation, a `Group` contains only one or no page elements, the\\ngroup itself is also removed.\\n\\nIf a placeholder `PageElement` is removed on a master or layout, any empty inheriting\\nplaceholders are also removed.*/remove():void;\\n/**Removes a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html).\\n\\n```\\nshape.removeLink();\\n```*/removeLink():void;\\n/**Replaces this image with an image described by a [`BlobSource`](/apps-script/reference/base/blob-source) object.\\n\\nInserting the image fetches it from the [\\n`BlobSource`](/apps-script/reference/base/blob-source) once and a copy is stored for display inside the presentation.\\nImages must be less than 50MB in size, cannot exceed 25 megapixels, and must be in either in\\nPNG, JPEG, or GIF format.\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the size of the existing image.\\n\\n```\\nvar image \\u003d SlidesApp.getActivePresentation().getSlides()[0].getImages()[0];\\n// Get the Drive image file with the given ID.\\nvar driveImage \\u003d DriveApp.getFileById(fileId);\\nimage.replace(driveImage);\\n```\\n@param blobSource The image data.\\n@return This `Image` after the replacement.*/replace(blobSource:BlobSource):SlidesApp.Image;\\n/**Replaces this image with an image described by a [`Image`](https://developers.google.com/apps-script/reference/slides/image.html) object, optionally cropping\\nthe image to fit.\\n\\nInserting the image fetches it from the [\\n`BlobSource`](/apps-script/reference/base/blob-source) once and a copy is stored for display inside the presentation.\\nImages must be less than 50MB in size, cannot exceed 25 megapixels, and must be in either in\\nPNG, JPEG, or GIF format.\\n\\n```\\nvar image \\u003d SlidesApp.getActivePresentation().getSlides()[0].getImages()[0];\\n// Get the Drive image file with the given ID.\\nvar driveImage \\u003d DriveApp.getFileById(fileId);\\n// Replace and crop the drive image.\\nimage.replace(driveImage, true);\\n```\\n@param blobSource The image data.\\n@param crop If `true`, crops the image to fit the existing image's size. Otherwise, the\\n    image is scaled and centered.\\n@return This `Image` after the replacement.*/replace(blobSource:BlobSource,crop:boolean):SlidesApp.Image;\\n/**Replaces this image with another image downloaded from the provided URL.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be publicly accessible and no larger than 2kB. The URL itself is saved\\nwith the image and exposed via [`getSourceUrl()`](https://developers.google.com/apps-script/reference/slides/image.html#getSourceUrl()).\\n\\nIn order to maintain the image's aspect ratio, the image is scaled and centered with respect\\nto the size of the existing image.\\n@param imageUrl The URL to download the image from.\\n@return This `Image` after the replacement.*/replace(imageUrl:string):SlidesApp.Image;\\n/**Replaces this image with another image downloaded from the provided URL, optionally cropping\\nthe image to fit.\\n\\nInserting the image fetches it from the URL once and a copy is stored for display inside the\\npresentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be\\nin either in PNG, JPEG, or GIF format.\\n\\nThe provided URL must be no larger than 2kB.\\n@param imageUrl The URL to download the image from.\\n@param crop If `true`, crops the image to fit the existing image's size. Otherwise, the\\n    image is scaled and centered.\\n@return This `Image` after the replacement.*/replace(imageUrl:string,crop:boolean):SlidesApp.Image;\\n/**Scales the element's height by the specified ratio. The element's height is the height of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's height by.\\n@return This page element, for chaining.*/scaleHeight(ratio:number):SlidesApp.Image;\\n/**Scales the element's width by the specified ratio. The element's width is the width of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's width by.\\n@return This page element, for chaining.*/scaleWidth(ratio:number):SlidesApp.Image;\\n/**Selects only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation and removes any previous\\nselection. This is the same as calling [`select(replace)`](https://developers.google.com/apps-script/reference/slides/image.html#select(Boolean)) with `true`.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThis sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d slide.getPageElements()[0];\\n// Only select this page element and replace any previous selection.\\npageElement.select();\\n```*/select():void;\\n/**Selects the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nPass `true` to this method to select only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) and remove any\\nprevious selection. This also sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the\\n[`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\nPass `false` to select multiple [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects. The [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html)\\nobjects must be in the same [`Page`](https://developers.google.com/apps-script/reference/slides/page.html).\\n\\nThe following conditions must be met while selecting a page element using a `false`\\nparameter:\\n\\n  1. The parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object must be the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n  1. There should not be multiple [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) objects selected.\\n\\nTo make sure that’s the case the preferred approach is to select the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html)\\nfirst using [`Page.selectAsCurrentPage()`](https://developers.google.com/apps-script/reference/slides/page.html#selectAsCurrentPage()) and then select the page elements in that page.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// First select the slide page, as the current page selection.\\nslide.selectAsCurrentPage();\\n// Then select all the page elements in the selected slide page.\\nvar pageElements \\u003d slide.getPageElements();\\nfor (var i \\u003d 0; i \\u003c pageElements.length; i++) {\\n  pageElements[i].select(false);\\n}\\n```\\n@param replace If `true`, the selection replaces any previous selection; otherwise the\\n    selection is added to any previous selection.*/select(replace:boolean):void;\\n/**Sends the page element backward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendBackward():SlidesApp.Image;\\n/**Sends the page element to the back of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendToBack():SlidesApp.Image;\\n/**Sets the page element's alt text description.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text description to \\\"new alt text description\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setDescription('new alt text description');\\nLogger.log(pageElement.getDescription());\\n```\\n@param description The string to set the alt text description to.\\n@return This page element.*/setDescription(description:string):SlidesApp.Image;\\n/**Sets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param height The new height of this page element to set, in points.\\n@return This page element, for chaining.*/setHeight(height:number):SlidesApp.Image;\\n/**Sets the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@param left The new horizontal position to set, in points.\\n@return This page element, for chaining.*/setLeft(left:number):SlidesApp.Image;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the zero-based index of the slide.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nshape.setLinkSlide(0);\\n```\\n@param slideIndex The zero-based index to the slide.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slideIndex:Integer):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html), the link is set by the given slide ID.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nvar slide \\u003d presentation.getSlides()[0];\\nshape.setLinkSlide(slide);\\n```\\n@param slide The [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) to be linked.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slide:SlidesApp.Slide):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given [`Slide`](https://developers.google.com/apps-script/reference/slides/slide.html) using the relative position of the slide.\\n\\n```\\n// Set a link to the first slide of the presentation.\\nshape.setLinkSlide(SlideApp.SlidePosition.FIRST_SLIDE);\\n```\\n@param slidePosition The relative [`SlidePosition`](https://developers.google.com/apps-script/reference/slides/slide-position.html).\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkSlide(slidePosition:SlidesApp.SlidePosition):SlidesApp.Link;\\n/**Sets a [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) to the given non-empty URL string.\\n\\n```\\n// Set a link to the URL.\\nshape.setLinkUrl(\\\"https://slides.google.com\\\");\\n```\\n@param url The URL string.\\n@return the [`Link`](https://developers.google.com/apps-script/reference/slides/link.html) that was set*/setLinkUrl(url:string):SlidesApp.Link;\\n/**Sets the element's clockwise rotation angle around its center in degrees.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param angle The new clockwise rotation angle to set, in degrees.\\n@return This page element, for chaining.*/setRotation(angle:number):SlidesApp.Image;\\n/**Sets the page element's alt text title.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text title to \\\"new alt text title\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setTitle('new alt text title');\\nLogger.log(pageElement.getTitle());\\n```\\n@param title The string to set the alt text title to.\\n@return This page element.*/setTitle(title:string):SlidesApp.Image;\\n/**Sets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@param top The new vertical position to set, in points.\\n@return This page element, for chaining.*/setTop(top:number):SlidesApp.Image;\\n/**Sets the transform of the page element with the provided transform.\\n\\nUpdating the transform of a group changes the absolute transform of the page elements in\\nthat group, which can change their visual appearance.\\n\\nUpdating the transform of a page element that is in a group only changes the transform of\\nthat page element; it doesn't affect the transforms of the group or other page elements in the\\ngroup.\\n\\nFor details on how transforms impact the visual appearance of page elements, see [`getTransform()`](https://developers.google.com/apps-script/reference/slides/image.html#getTransform()).\\n@param transform The transform that is set for this page element.\\n@return This element, for chaining.*/setTransform(transform:SlidesApp.AffineTransform):SlidesApp.Image;\\n/**Sets the element's width in points, which is the width of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param width The new width of this page element to set, in points.\\n@return This page element, for chaining.*/setWidth(width:number):SlidesApp.Image;}interface Group{\\n/**Aligns the element to the specified alignment position on the page.\\n@param alignmentPosition The position to align this page element to on the page.\\n@return This page element, for chaining.*/alignOnPage(alignmentPosition:SlidesApp.AlignmentPosition):SlidesApp.Group;\\n/**Brings the page element forward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringForward():SlidesApp.Group;\\n/**Brings the page element to the front of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/bringToFront():SlidesApp.Group;\\n/**Duplicates the page element.\\n\\nThe duplicate page element is placed on the same page at the same position as the original.\\n@return The new duplicate of this page element.*/duplicate():SlidesApp.PageElement;\\n/**Gets the collection of page elements in the group. The minimum size of a group is 2.\\n@return The list of page elements in this group.*/getChildren():SlidesApp.PageElement[];\\n/**Returns the list of `ConnectionSite`s on the page element, or an empty list if the page\\nelement does not have any connection sites.\\n@return The connection sites list, which may be empty if this element has no connection sites.*/getConnectionSites():SlidesApp.ConnectionSite[];\\n/**Returns the page element's alt text description. The description is combined with the title to\\ndisplay and read alt text.\\n@return The page element's alt text description.*/getDescription():string;\\n/**Gets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getHeight():number;\\n/**Returns the element's inherent height in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent height in points, or `null` if the page element does\\n    not have a height.*/getInherentHeight():number;\\n/**Returns the element's inherent width in points.\\n\\nThe page element's transform is relative to its inherent size. Use the inherent size in\\nconjunction with the element's transform to determine the element's final visual appearance.\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getInherentWidth():number;\\n/**Returns the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@return This element's horizontal position in points, from the upper-left corner of the page.*/getLeft():number;\\n/**Returns the unique ID for this object. Object IDs used by pages and page elements share the\\nsame namespace.\\n@return The unique ID for this object.*/getObjectId():string;\\n/**Returns the page element's type, represented as a [`PageElementType`](https://developers.google.com/apps-script/reference/slides/page-element-type.html) enum.\\n@return The page element's type.*/getPageElementType():SlidesApp.PageElementType;\\n/**Returns the group this page element belongs to, or `null` if the element is not in a\\ngroup.\\n@return The group this page element belongs to, or `null`.*/getParentGroup():SlidesApp.Group;\\n/**Returns the page this page element is on.\\n@return The page this element resides on.*/getParentPage():SlidesApp.Page;\\n/**Returns the element's clockwise rotation angle around its center in degrees, where zero degrees\\nmeans no rotation.\\n@return The rotation angle in degrees between 0 (inclusive) and 360 (exclusive).*/getRotation():number;\\n/**Returns the page element's alt text title. The title is combined with the description to\\ndisplay and read alt text.\\n@return The page element's alt text title.*/getTitle():string;\\n/**Gets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@return This element's vertical position in points, from the upper-left corner of the page.*/getTop():number;\\n/**Gets the page element's transform.\\n\\nThe initial transform for a newly created [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) is always the identity transform:\\n1.0 scale parameters, and 0.0 shear and translate parameters.\\n@return The page element's transform.*/getTransform():SlidesApp.AffineTransform;\\n/**Returns the element's width in points, which is the width of the element's bounding box when\\nthe element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@return The page element's inherent width in points, or `null` if the page element does\\n    not have a width.*/getWidth():number;\\n/**Preconcatenates the provided transform to the existing transform of the page element.\\n\\n```\\nnewTransform \\u003d argument * existingTransform\\n```\\n\\nFor example, to move a page elements 36 points to the left:\\n\\n```\\nelement.preconcatenateTransform(SlidesApp.newAffineTransformBuilder()\\n    .setTranslateX(-36.0)\\n    .build());\\n```\\n\\nYou can also replace the page element's transform with [`setTransform(transform)`](https://developers.google.com/apps-script/reference/slides/group.html#setTransform(AffineTransform)).\\n@param transform The transform to preconcatenate onto this page element's transform.\\n@return This page element, for chaining.*/preconcatenateTransform(transform:SlidesApp.AffineTransform):SlidesApp.Group;\\n/**Removes the page element.\\n\\nIf after a remove operation, a `Group` contains only one or no page elements, the\\ngroup itself is also removed.\\n\\nIf a placeholder `PageElement` is removed on a master or layout, any empty inheriting\\nplaceholders are also removed.*/remove():void;\\n/**Scales the element's height by the specified ratio. The element's height is the height of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's height by.\\n@return This page element, for chaining.*/scaleHeight(ratio:number):SlidesApp.Group;\\n/**Scales the element's width by the specified ratio. The element's width is the width of its\\nbounding box when the element has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param ratio The ratio to scale this page element's width by.\\n@return This page element, for chaining.*/scaleWidth(ratio:number):SlidesApp.Group;\\n/**Selects only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation and removes any previous\\nselection. This is the same as calling [`select(replace)`](https://developers.google.com/apps-script/reference/slides/group.html#select(Boolean)) with `true`.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nThis sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\nvar pageElement \\u003d slide.getPageElements()[0];\\n// Only select this page element and replace any previous selection.\\npageElement.select();\\n```*/select():void;\\n/**Selects the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) in the active presentation.\\n\\nA script can only access the selection of the user who is running the script, and only if\\nthe script is [bound](/apps-script/scripts_containers) to the presentation.\\n\\nPass `true` to this method to select only the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) and remove any\\nprevious selection. This also sets the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) as the\\n[`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n\\nPass `false` to select multiple [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) objects. The [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html)\\nobjects must be in the same [`Page`](https://developers.google.com/apps-script/reference/slides/page.html).\\n\\nThe following conditions must be met while selecting a page element using a `false`\\nparameter:\\n\\n  1. The parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) of the [`PageElement`](https://developers.google.com/apps-script/reference/slides/page-element.html) object must be the [`current page selection`](https://developers.google.com/apps-script/reference/slides/selection.html#getCurrentPage()).\\n  1. There should not be multiple [`Page`](https://developers.google.com/apps-script/reference/slides/page.html) objects selected.\\n\\nTo make sure that’s the case the preferred approach is to select the parent [`Page`](https://developers.google.com/apps-script/reference/slides/page.html)\\nfirst using [`Page.selectAsCurrentPage()`](https://developers.google.com/apps-script/reference/slides/page.html#selectAsCurrentPage()) and then select the page elements in that page.\\n\\n```\\nvar slide \\u003d SlidesApp.getActivePresentation().getSlides()[0];\\n// First select the slide page, as the current page selection.\\nslide.selectAsCurrentPage();\\n// Then select all the page elements in the selected slide page.\\nvar pageElements \\u003d slide.getPageElements();\\nfor (var i \\u003d 0; i \\u003c pageElements.length; i++) {\\n  pageElements[i].select(false);\\n}\\n```\\n@param replace If `true`, the selection replaces any previous selection; otherwise the\\n    selection is added to any previous selection.*/select(replace:boolean):void;\\n/**Sends the page element backward on the page by one element.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendBackward():SlidesApp.Group;\\n/**Sends the page element to the back of the page.\\n\\nThe page element must not be in a group.\\n@return This page element, for chaining.*/sendToBack():SlidesApp.Group;\\n/**Sets the page element's alt text description.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text description to \\\"new alt text description\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setDescription('new alt text description');\\nLogger.log(pageElement.getDescription());\\n```\\n@param description The string to set the alt text description to.\\n@return This page element.*/setDescription(description:string):SlidesApp.Group;\\n/**Sets the element's height in points, which is the height of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param height The new height of this page element to set, in points.\\n@return This page element, for chaining.*/setHeight(height:number):SlidesApp.Group;\\n/**Sets the element's horizontal position in points, measured from the upper-left corner of the\\npage when the element has no rotation.\\n@param left The new horizontal position to set, in points.\\n@return This page element, for chaining.*/setLeft(left:number):SlidesApp.Group;\\n/**Sets the element's clockwise rotation angle around its center in degrees.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param angle The new clockwise rotation angle to set, in degrees.\\n@return This page element, for chaining.*/setRotation(angle:number):SlidesApp.Group;\\n/**Sets the page element's alt text title.\\n\\nThe method is not supported for [`Group`](https://developers.google.com/apps-script/reference/slides/group.html) elements.\\n\\n```\\n// Set the first page element's alt text title to \\\"new alt text title\\\".\\nvar pageElement \\u003d SlidesApp.getActivePresentation().getSlides()[0].getPageElements()[0];\\npageElement.setTitle('new alt text title');\\nLogger.log(pageElement.getTitle());\\n```\\n@param title The string to set the alt text title to.\\n@return This page element.*/setTitle(title:string):SlidesApp.Group;\\n/**Sets the element's vertical position in points, measured from the upper-left corner of the page\\nwhen the element has no rotation.\\n@param top The new vertical position to set, in points.\\n@return This page element, for chaining.*/setTop(top:number):SlidesApp.Group;\\n/**Sets the transform of the page element with the provided transform.\\n\\nUpdating the transform of a group changes the absolute transform of the page elements in\\nthat group, which can change their visual appearance.\\n\\nUpdating the transform of a page element that is in a group only changes the transform of\\nthat page element; it doesn't affect the transforms of the group or other page elements in the\\ngroup.\\n\\nFor details on how transforms impact the visual appearance of page elements, see [`getTransform()`](https://developers.google.com/apps-script/reference/slides/group.html#getTransform()).\\n@param transform The transform that is set for this page element.\\n@return This element, for chaining.*/setTransform(transform:SlidesApp.AffineTransform):SlidesApp.Group;\\n/**Sets the element's width in points, which is the width of the element's bounding box when the\\nelement has no rotation.\\n\\nThis method isn't compatible with all page elements. To learn which page elements aren't\\ncompatible with this method, refer to the [\\nsizing and positioning limitations](https://developers.google.com/apps-script/guides/slides/moving-elements#limitations).\\n@param width The new width of this page element to set, in points.\\n@return This page element, for chaining.*/setWidth(width:number):SlidesApp.Group;\\n/**Ungroups the elements of the group.\\n\\nThe group itself is removed.\\n\\nGroups inside other groups cannot be ungrouped.*/ungroup():void;}interface FillType{}interface _FillType{\\n/**No fill, so the background is transparent.*/NONE:FillType;\\n/**A solid color fill.*/SOLID:FillType;\\n/**A fill type that is not supported.*/UNSUPPORTED:FillType;}interface Fill{\\n/**Get the solid fill of this background, or `null` if the fill type is not [`FillType.SOLID`](https://developers.google.com/apps-script/reference/slides/fill-type.html#SOLID).\\n@return The solid fill setting, or `null` if this fill type is not solid.*/getSolidFill():SlidesApp.SolidFill;\\n/**Get the type of this fill.\\n@return The type of this fill.*/getType():SlidesApp.FillType;\\n/**Whether the background is visible.\\n@return `true` if the background is visible; `false` otherwise.*/isVisible():boolean;\\n/**Sets the solid fill to the given RGB values.*/setSolidFill(red:Integer,green:Integer,blue:Integer):void;\\n/**Sets the solid fill to the given alpha and RGB values.*/setSolidFill(red:Integer,green:Integer,blue:Integer,alpha:number):void;\\n/**Sets the solid fill to the given [`Color`](https://developers.google.com/apps-script/reference/slides/color.html).*/setSolidFill(color:SlidesApp.Color):void;\\n/**Sets the solid fill to the given alpha and [`Color`](https://developers.google.com/apps-script/reference/slides/color.html).*/setSolidFill(color:SlidesApp.Color,alpha:number):void;\\n/**Sets the solid fill to the given [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html).*/setSolidFill(color:SlidesApp.ThemeColorType):void;\\n/**Sets the solid fill to the given alpha and [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html).*/setSolidFill(color:SlidesApp.ThemeColorType,alpha:number):void;\\n/**Sets the solid fill to the given hex color string.\\n\\nThe hex string must be in the format '#RRGGBB'. For example, pink would be represented as\\n'#FFC0CB'.*/setSolidFill(hexString:string):void;\\n/**Sets the solid fill to the given alpha and hex color string.\\n\\nThe hex string must be in the format '#RRGGBB'. For example, pink would be represented as\\n'#FFC0CB'.*/setSolidFill(hexString:string,alpha:number):void;\\n/**Sets the background to transparent.*/setTransparent():void;}interface DashStyle{}interface _DashStyle{\\n/**Dashed line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'.*/DASH:DashStyle;\\n/**Alternating dashes and dots. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dashDot'.*/DASH_DOT:DashStyle;\\n/**Dotted line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'.*/DOT:DashStyle;\\n/**Line with large dashes. Corresponds to ECMA-376 ST_PresetLineDashVal value 'lgDash'.*/LONG_DASH:DashStyle;\\n/**Alternating large dashes and dots. Corresponds to ECMA-376 ST_PresetLineDashVal value\\n'lgDashDot'.*/LONG_DASH_DOT:DashStyle;\\n/**Solid line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'. This is the default\\ndash style.*/SOLID:DashStyle;\\n/**A dash style that is not supported.*/UNSUPPORTED:DashStyle;}interface ContentAlignment{}interface _ContentAlignment{\\n/**Aligns the content to the bottom of the content holder. Corresponds to ECMA-376\\nST_TextAnchoringType 'b'.*/BOTTOM:ContentAlignment;\\n/**Aligns the content to the middle of the content holder. Corresponds to ECMA-376\\nST_TextAnchoringType 'ctr'.*/MIDDLE:ContentAlignment;\\n/**Aligns the content to the top of the content holder. Corresponds to ECMA-376\\nST_TextAnchoringType 't'.*/TOP:ContentAlignment;\\n/**A content alignment that is not supported.*/UNSUPPORTED:ContentAlignment;}interface ConnectionSite{\\n/**Returns the index of the connection site. The index is unique among all the connection sites on\\nthe same page element.\\n\\nIn most cases, it corresponds to the predefined connection site index from the ECMA-376\\nstandard. More information on those connection sites can be found in the description of the\\n\\\"cnx\\\" attribute in section 20.1.9.9 and Annex H. \\\"Predefined DrawingML Shape and Text\\nGeometries\\\" of \\\"Office Open XML File Formats-Fundamentals and Markup Language Reference\\\", part\\n1 of [ECMA-376\\n5th edition](http://www.ecma-international.org/publications/standards/Ecma-376.htm).\\n@return The index of the connection site.*/getIndex():Integer;\\n/**Returns the `PageElement` that the connection site is on.\\n@return The page element of the connection site.*/getPageElement():SlidesApp.PageElement;}interface ColorScheme{\\n/**Returns the concrete [`Color`](https://developers.google.com/apps-script/reference/slides/color.html) associated with the [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html) in this color\\nscheme.\\n\\nThe returned color is guaranteed to not be an instance of [`ThemeColor`](https://developers.google.com/apps-script/reference/slides/theme-color.html).\\n@param theme The theme color to derive the concrete color from.\\n@return The concrete color corresponding the theme color type in this scheme.*/getConcreteColor(theme:SlidesApp.ThemeColorType):SlidesApp.Color;\\n/**Returns a list of all possible theme color types in a color scheme.\\n@return The possible theme color types in this scheme.*/getThemeColors():SlidesApp.ThemeColorType[];\\n/**Sets the concrete color associated with the [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html) in this color scheme to the\\ngiven color in RGB format.\\n@param type The theme color type.\\n@param red The red value of the color to set the theme color type to (between 0 and 255).\\n@param green The green value of the color to set the theme color type to (between 0 and 255).\\n@param blue The blue value of the color to set the theme color type to (between 0 and 255).\\n@return This color scheme, for chaining.*/setConcreteColor(type:SlidesApp.ThemeColorType,red:Integer,green:Integer,blue:Integer):SlidesApp.ColorScheme;\\n/**Sets the concrete color associated with the [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html) in this color scheme to the\\ngiven color.\\n@param type The theme color type.\\n@param color The color to set the theme color type to.\\n@return This color scheme, for chaining.*/setConcreteColor(type:SlidesApp.ThemeColorType,color:SlidesApp.Color):SlidesApp.ColorScheme;\\n/**Sets the concrete color associated with the [`ThemeColorType`](https://developers.google.com/apps-script/reference/slides/theme-color-type.html) in this color scheme to the\\ngiven color in HEX format.\\n\\nThe hex string must be in the format '#RRGGBB'.\\n@param type The theme color type.\\n@param hexColor The hex color to set the theme color type to, such as '#F304a7'.\\n@return This color scheme, for chaining.*/setConcreteColor(type:SlidesApp.ThemeColorType,hexColor:string):SlidesApp.ColorScheme;}interface Color{\\n/**Converts this color to an [`RgbColor`](https://developers.google.com/apps-script/reference/slides/../base/rgb-color.html).*/asRgbColor():RgbColor;\\n/**Converts this color to a [`ThemeColor`](https://developers.google.com/apps-script/reference/slides/theme-color.html).*/asThemeColor():SlidesApp.ThemeColor;\\n/**Get the type of this color.\\n@return The color type.*/getColorType():ColorType;}interface CellMergeState{}interface _CellMergeState{\\n/**The cell is merged and it is the head (i.e. upper left) cell within the merged set of cells.\\n\\nAs an example, assume the following table.\\n\\n```\\n-------------------\\n|(0,0)|(0,1)|(0,2)|\\n-------------------\\n```\\n\\nIf the first two cells are merged to form the following table, cell (0,0) is the head cell and\\n(0,1) is a merged cell.\\n\\n```\\n-------------------\\n|(0,0)      |(0,2)|\\n-------------------\\n```*/HEAD:CellMergeState;\\n/**The cell is merged but is not the head (i.e. upper left) cell.\\n\\nAs an example, assume the following table.\\n\\n```\\n-------------------\\n|(0,0)|(0,1)|(0,2)|\\n-------------------\\n```\\n\\nIf the first two cells are merged to form the following table, cell (0,0) is the head cell and\\n(0,1) is a merged cell.\\n\\n```\\n-------------------\\n|(0,0)      |(0,2)|\\n-------------------\\n```*/MERGED:CellMergeState;\\n/**The cell is not merged.*/NORMAL:CellMergeState;}interface Border{\\n/**Gets the [`DashStyle`](https://developers.google.com/apps-script/reference/slides/dash-style.html) of the border.*/getDashStyle():SlidesApp.DashStyle;\\n/**Gets the [`LineFill`](https://developers.google.com/apps-script/reference/slides/line-fill.html) of the border.*/getLineFill():SlidesApp.LineFill;\\n/**Gets the thickness of the border in points. Returns `null` if the element does not have a\\nborder.*/getWeight():number;\\n/**Gets whether the border is visible or not.*/isVisible():boolean;\\n/**Sets the [`DashStyle`](https://developers.google.com/apps-script/reference/slides/dash-style.html) of the border.\\n\\nSetting a [`DashStyle`](https://developers.google.com/apps-script/reference/slides/dash-style.html) on a transparent border makes it visible.*/setDashStyle(style:SlidesApp.DashStyle):SlidesApp.Border;\\n/**Sets the border to be transparent.*/setTransparent():SlidesApp.Border;\\n/**Sets the thickness of the border in points.\\n\\nSetting a weight on a transparent border makes it visible.*/setWeight(points:number):SlidesApp.Border;}interface AutofitType{}interface _AutofitType{\\n/**Autofit isn't applied.*/NONE:AutofitType;\\n/**Resizes the shape to fit the text.*/SHAPE_AUTOFIT:AutofitType;\\n/**Shrinks the text on overflow.*/TEXT_AUTOFIT:AutofitType;\\n/**An autofit type that is not supported.*/UNSUPPORTED:AutofitType;}interface Autofit{\\n/**Sets the [`AutofitType`](https://developers.google.com/apps-script/reference/slides/autofit-type.html) of a shape to [`AutofitType.NONE`](https://developers.google.com/apps-script/reference/slides/autofit-type.html#NONE).\\n@return The autofit, for chaining.*/disableAutofit():SlidesApp.Autofit;\\n/**Gets the [`AutofitType`](https://developers.google.com/apps-script/reference/slides/autofit-type.html) of the shape.\\n@return The autofit type.*/getAutofitType():SlidesApp.AutofitType;\\n/**Gets the font scale applied to the shape. For shapes with [`AutofitType`](https://developers.google.com/apps-script/reference/slides/autofit-type.html) [`AutofitType.NONE`](https://developers.google.com/apps-script/reference/slides/autofit-type.html#NONE) or [`AutofitType.SHAPE_AUTOFIT`](https://developers.google.com/apps-script/reference/slides/autofit-type.html#SHAPE_AUTOFIT), this value is the default value of 1.\\nFor [`AutofitType.TEXT_AUTOFIT`](https://developers.google.com/apps-script/reference/slides/autofit-type.html#TEXT_AUTOFIT), the value returned is what the original font size is\\nmultiplied by to fit within the shape.\\n@return The font scale.*/getFontScale():number;\\n/**Gets the line spacing reduction applied to the shape. For shapes with [`AutofitType`](https://developers.google.com/apps-script/reference/slides/autofit-type.html)\\n[`AutofitType.NONE`](https://developers.google.com/apps-script/reference/slides/autofit-type.html#NONE) or [`AutofitType.SHAPE_AUTOFIT`](https://developers.google.com/apps-script/reference/slides/autofit-type.html#SHAPE_AUTOFIT), this value is the default value\\nof 0. For [`AutofitType.TEXT_AUTOFIT`](https://developers.google.com/apps-script/reference/slides/autofit-type.html#TEXT_AUTOFIT), the returned value is the amount of spacing\\nsubtracted from the original spacing to make the text fit within the shape.\\n@return The line spacing.*/getLineSpacingReduction():number;}interface AutoTextType{}interface _AutoTextType{\\n/**A slide number.*/SLIDE_NUMBER:AutoTextType;\\n/**An auto text type that is not supported.*/UNSUPPORTED:AutoTextType;}interface AutoText{\\n/**Returns the type of auto text. Returns `null` if the auto text has been deleted.*/getAutoTextType():SlidesApp.AutoTextType;\\n/**Returns the index of the auto text. Returns `null` if the auto text has been deleted.*/getIndex():Integer;\\n/**Returns a [`TextRange`](https://developers.google.com/apps-script/reference/slides/text-range.html) spanning the auto text. Returns `null` if the auto text has\\nbeen deleted.*/getRange():SlidesApp.TextRange;}interface ArrowStyle{}interface _ArrowStyle{\\n/**Filled arrow. Corresponds to ECMA-376 ST_LineEndType value 'triangle'.*/FILL_ARROW:ArrowStyle;\\n/**Filled circle. Corresponds to ECMA-376 ST_LineEndType value 'oval'.*/FILL_CIRCLE:ArrowStyle;\\n/**Filled diamond. Corresponds to ECMA-376 ST_LineEndType value 'diamond'.*/FILL_DIAMOND:ArrowStyle;\\n/**Filled square.*/FILL_SQUARE:ArrowStyle;\\n/**No arrow.*/NONE:ArrowStyle;\\n/**Hollow arrow.*/OPEN_ARROW:ArrowStyle;\\n/**Hollow circle.*/OPEN_CIRCLE:ArrowStyle;\\n/**Hollow diamond.*/OPEN_DIAMOND:ArrowStyle;\\n/**Hollow square.*/OPEN_SQUARE:ArrowStyle;\\n/**Arrow with notched back. Corresponds to ECMA-376 ST_LineEndType value 'stealth'.*/STEALTH_ARROW:ArrowStyle;\\n/**An arrow style that is not supported.*/UNSUPPORTED:ArrowStyle;}interface AlignmentPosition{}interface _AlignmentPosition{\\n/**Align to the center.*/CENTER:AlignmentPosition;\\n/**Align to the horizontal center.*/HORIZONTAL_CENTER:AlignmentPosition;\\n/**Align to the vertical center.*/VERTICAL_CENTER:AlignmentPosition;}interface AffineTransformBuilder{\\n/**Creates an [`AffineTransform`](https://developers.google.com/apps-script/reference/slides/affine-transform.html) object initialized with the elements set in the builder.*/build():SlidesApp.AffineTransform;\\n/**Sets the X coordinate scaling element and returns the builder.*/setScaleX(scaleX:number):SlidesApp.AffineTransformBuilder;\\n/**Sets the Y coordinate scaling element and returns the builder.*/setScaleY(scaleY:number):SlidesApp.AffineTransformBuilder;\\n/**Sets the X coordinate shearing element and returns the builder.*/setShearX(shearX:number):SlidesApp.AffineTransformBuilder;\\n/**Sets the Y coordinate shearing element and returns the builder.*/setShearY(shearY:number):SlidesApp.AffineTransformBuilder;\\n/**Sets the X coordinate translation element in points, and returns the builder.*/setTranslateX(translateX:number):SlidesApp.AffineTransformBuilder;\\n/**Sets the Y coordinate translation element in points, and returns the builder.*/setTranslateY(translateY:number):SlidesApp.AffineTransformBuilder;}interface AffineTransform{\\n/**Gets the X coordinate scaling element.*/getScaleX():number;\\n/**Gets the Y coordinate scaling element.*/getScaleY():number;\\n/**Gets the X coordinate shearing element.*/getShearX():number;\\n/**Gets the Y coordinate shearing element.*/getShearY():number;\\n/**Gets the X coordinate translation element in points.*/getTranslateX():number;\\n/**Gets the Y coordinate translation element in points.*/getTranslateY():number;\\n/**Returns a new [`AffineTransformBuilder`](https://developers.google.com/apps-script/reference/slides/affine-transform-builder.html) based on this transform.*/toBuilder():SlidesApp.AffineTransformBuilder;}}const SlidesApp:SlidesApp;\"],[\"spreadsheet-app.d.ts\",\"interface SpreadsheetApp{\\n/**An enumeration of the types of series used to calculate auto-filled values.*/AutoFillSeries:SpreadsheetApp._AutoFillSeries;\\n/**An enumeration of the possible banding themes.*/BandingTheme:SpreadsheetApp._BandingTheme;\\n/**An enumeration of conditional formatting boolean criteria.*/BooleanCriteria:SpreadsheetApp._BooleanCriteria;\\n/**An enumeration of the valid styles for setting borders on a [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html).*/BorderStyle:SpreadsheetApp._BorderStyle;\\n/**An enumeration of possible color types.*/ColorType:_ColorType;\\n/**An enumeration of the possible paste types.*/CopyPasteType:SpreadsheetApp._CopyPasteType;\\n/**An enumeration of the possible data execution error codes.*/DataExecutionErrorCode:SpreadsheetApp._DataExecutionErrorCode;\\n/**An enumeration of the possible data execution states.*/DataExecutionState:SpreadsheetApp._DataExecutionState;\\n/**An enumeration of the possible data source parameter types.*/DataSourceParameterType:SpreadsheetApp._DataSourceParameterType;\\n/**An enumeration of possible data source refresh scopes.*/DataSourceRefreshScope:SpreadsheetApp._DataSourceRefreshScope;\\n/**An enumeration of the possible data source types.*/DataSourceType:SpreadsheetApp._DataSourceType;\\n/**An enumeration representing the data validation criteria that can be set on a range.*/DataValidationCriteria:SpreadsheetApp._DataValidationCriteria;\\n/**An enumeration of date time grouping rule.*/DateTimeGroupingRuleType:SpreadsheetApp._DateTimeGroupingRuleType;\\n/**An enumeration of possible developer metadata location types.*/DeveloperMetadataLocationType:SpreadsheetApp._DeveloperMetadataLocationType;\\n/**An enumeration of the possible developer metadata visibilities.*/DeveloperMetadataVisibility:SpreadsheetApp._DeveloperMetadataVisibility;\\n/**An enumeration of the possible dimensions of a spreadsheet.*/Dimension:SpreadsheetApp._Dimension;\\n/**A enumeration of the possible directions that one can move within a spreadsheet using the arrow\\nkeys.*/Direction:SpreadsheetApp._Direction;\\n/**An enumeration of possible frequency types.*/FrequencyType:SpreadsheetApp._FrequencyType;\\n/**An enumeration of the positions that the group control toggle can be in.*/GroupControlTogglePosition:SpreadsheetApp._GroupControlTogglePosition;\\n/**An enumeration of conditional format gradient interpolation types.*/InterpolationType:SpreadsheetApp._InterpolationType;\\n/**An enumeration of the functions that may be used to summarize values in a pivot table.*/PivotTableSummarizeFunction:SpreadsheetApp._PivotTableSummarizeFunction;\\n/**An enumeration of the ways that a pivot value may be displayed.*/PivotValueDisplayType:SpreadsheetApp._PivotValueDisplayType;\\n/**An enumeration representing the parts of a spreadsheet that can be protected from edits.*/ProtectionType:SpreadsheetApp._ProtectionType;\\n/**An enumeration of the possible intervals that can be used in spreadsheet recalculation.*/RecalculationInterval:SpreadsheetApp._RecalculationInterval;\\n/**An enumeration of relative date options for calculating a value to be used in date-based [`BooleanCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-criteria.html).*/RelativeDate:SpreadsheetApp._RelativeDate;\\n/**An enumeration of the different types of sheets that can exist in a spreadsheet.*/SheetType:SpreadsheetApp._SheetType;\\n/**An enumeration of sort order.*/SortOrder:SpreadsheetApp._SortOrder;\\n/**An enumeration of valid text directions.*/TextDirection:SpreadsheetApp._TextDirection;\\n/**An enumeration of the preset delimiters for split text to columns.*/TextToColumnsDelimiter:SpreadsheetApp._TextToColumnsDelimiter;\\n/**An enumeration of possible theme color types.*/ThemeColorType:SpreadsheetApp._ThemeColorType;\\n/**An enumeration of value types returned by [`Range.getValue()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#getValue()) and [`Range.getValues()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#getValues()) from the Range class of the Spreadsheet service. The enumeration values\\nlisted below are in addition to `Number`, `Boolean`, `Date`, or `String`.*/ValueType:SpreadsheetApp._ValueType;\\n/**An enumeration of the strategies used for wrapping cells.*/WrapStrategy:SpreadsheetApp._WrapStrategy;\\n/**Creates a new spreadsheet with the given name.\\n\\n```\\n// The code below creates a new spreadsheet \\\"Finances\\\" and logs the URL for it\\nvar ssNew \\u003d SpreadsheetApp.create(\\\"Finances\\\");\\nLogger.log(ssNew.getUrl());\\n```\\n@param name The name for the spreadsheet.\\n@return a new spreadsheet*/create(name:string):SpreadsheetApp.Spreadsheet;\\n/**Creates a new spreadsheet with the given name and the specified number of rows and columns.\\n\\n```\\n// The code below creates a new spreadsheet \\\"Finances\\\" with 50 rows and 5 columns and logs the\\n// URL for it\\nvar ssNew \\u003d SpreadsheetApp.create(\\\"Finances\\\", 50, 5);\\nLogger.log(ssNew.getUrl());\\n```\\n@param name The name for the spreadsheet.\\n@param rows The number of rows for the spreadsheet.\\n@param columns The number of columns for the spreadsheet.\\n@return a new spreadsheet*/create(name:string,rows:Integer,columns:Integer):SpreadsheetApp.Spreadsheet;\\n/**Turns data execution on for all types of data sources.\\n\\nData execution throws an exception if the data source type isn't turned on. Use this method\\nto turn data execution on for all data source types.\\n\\n```\\n// Turns data execution on for all types of data sources.\\nSpreadsheetApp.enableAllDataSourcesExecution();\\n\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets the first data source sheet in the spreadsheet and refreshes the data.\\nss.getDataSourceSheets()[0].refreshData();\\n```*/enableAllDataSourcesExecution():void;\\n/**Turns data execution on for BigQuery data sources.\\n\\nData execution for BigQuery data source throws an exception if not turned on.\\n\\n```\\n// Turns data execution on for BigQuery data sources.\\nSpreadsheetApp.enableBigQueryExecution();\\n\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets the first data source sheet in the spreadsheet and refreshes the BigQuery data.\\nss.getDataSourceSheets()[0].refreshData();\\n```*/enableBigQueryExecution():void;\\n/**Turns data execution on for Looker data sources.\\n\\nData execution for Looker data source throws an exception if not turned on.\\n\\n```\\n// Turns data execution on for Looker data sources.\\nSpreadsheetApp.enableLookerExecution();\\n\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets the first data source sheet in the spreadsheet and refreshes the associated Looker\\n// data.\\nss.getDataSourceSheets()[0].refreshData();\\n```*/enableLookerExecution():void;\\n/**Applies all pending Spreadsheet changes.\\n\\nSpreadsheet operations are sometimes bundled together to improve performance, such as when\\ndoing multiple calls to Range.getValue(). However, sometimes you may want to make sure that all\\npending changes are made right away, for instance to show users data as a script is executing.\\n\\n```\\n// The code below changes the background color of cells A1 and B1 twenty times. You should be\\n// able to see the updates live in the spreadsheet. If flush() is not called, the updates may\\n// be applied live or may all be applied at once when the script completes.\\nfunction colors() {\\n  var sheet \\u003d SpreadsheetApp.getActiveSheet();\\n  for (var i \\u003d 0; i \\u003c 20; i++) {\\n    if ((i % 2) \\u003d\\u003d 0) {\\n      sheet.getRange('A1').setBackground('green');\\n      sheet.getRange('B1').setBackground('red');\\n    } else {\\n      sheet.getRange('A1').setBackground('red');\\n      sheet.getRange('B1').setBackground('green');\\n    }\\n    SpreadsheetApp.flush();\\n  }\\n}\\n```*/flush():void;\\n/**Returns the currently active spreadsheet, or `null` if there is none.\\n\\nFunctions that are run in the context of a spreadsheet can get a reference to the\\ncorresponding Spreadsheet object by calling this function.\\n\\n```\\n// The code below logs the URL for the active spreadsheet.\\nLogger.log(SpreadsheetApp.getActive().getUrl());\\n```\\n@return the active Spreadsheet object*/getActive():SpreadsheetApp.Spreadsheet;\\n/**Returns the selected range in the active sheet, or `null` if there is no active range. If\\nmultiple ranges are selected this method returns only the last selected range.\\n\\nThis generally means the range that a user has selected in the active sheet, but in a custom\\nfunction it refers to the cell being actively recalculated.\\n\\n```\\n// The code below logs the background color for the active range.\\nvar colorObject \\u003d SpreadsheetApp.getActiveRange().getBackgroundObject();\\n// Assume the color has ColorType.RGB.\\nLogger.log(colorObject.asRgbColor().asHexString());\\n```\\n@return The active range.*/getActiveRange():SpreadsheetApp.Range;\\n/**Returns the list of active ranges in the active sheet or `null` if there are no ranges\\nselected. The active range containing the current highlighted cell is placed last in the list.\\n\\nIf there is a single range selected, this behaves as a [`getActiveRange()`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app.html#getActiveRange()) call.\\n\\n```\\n// Returns the list of active ranges.\\nvar rangeList \\u003d SpreadsheetApp.getActiveRangeList();\\n```\\n@return the list of active ranges*/getActiveRangeList():SpreadsheetApp.RangeList;\\n/**Gets the active sheet in a spreadsheet.\\n\\nThe active sheet in a spreadsheet is the sheet that is being displayed in the spreadsheet\\nUI.\\n\\n```\\n// The code below logs the name of the active sheet.\\nLogger.log(SpreadsheetApp.getActiveSheet().getName());\\n```\\n@return the active Sheet object*/getActiveSheet():SpreadsheetApp.Sheet;\\n/**Returns the currently active spreadsheet, or `null` if there is none.\\n\\nFunctions that are run in the context of a spreadsheet can get a reference to the\\ncorresponding [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) object by calling this function.\\n\\n```\\n// The code below logs the URL for the active spreadsheet.\\nLogger.log(SpreadsheetApp.getActiveSpreadsheet().getUrl());\\n```\\n@return the active Spreadsheet object*/getActiveSpreadsheet():SpreadsheetApp.Spreadsheet;\\n/**Returns the current (highlighted) cell that is selected in one of the active ranges in the\\nactive sheet or `null` if there is no current cell.\\n\\n```\\n// Returns the current highlighted cell in the one of the active ranges.\\nvar currentCell \\u003d SpreadsheetApp.getCurrentCell();\\n```\\n@return the current cell*/getCurrentCell():SpreadsheetApp.Range;\\n/**Returns the current [`Selection`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html) in the spreadsheet.\\n\\n```\\nvar selection \\u003d SpreadsheetApp.getSelection();\\nvar currentCell \\u003d selection.getCurrentCell();\\n```\\n@return the current selection*/getSelection():SpreadsheetApp.Selection;\\n/**Returns an instance of the spreadsheet's user-interface environment that allows the script to\\nadd features like menus, dialogs, and sidebars. A script can only interact with the UI for the\\ncurrent instance of an open spreadsheet, and only if the script is [bound](/apps-script/scripts_containers) to the spreadsheet. For more information, see\\nthe guides to [menus](/apps-script/guides/menus) and [dialogs and sidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Add a custom menu to the active spreadsheet, including a separator and a sub-menu.\\nfunction onOpen(e) {\\n  SpreadsheetApp.getUi()\\n      .createMenu('My Menu')\\n      .addItem('My menu item', 'myFunction')\\n      .addSeparator()\\n      .addSubMenu(SpreadsheetApp.getUi().createMenu('My sub-menu')\\n          .addItem('One sub-menu item', 'mySecondFunction')\\n          .addItem('Another sub-menu item', 'myThirdFunction'))\\n      .addToUi();\\n}\\n```\\n@return an instance of this spreadsheet's user-interface environment*/getUi():Ui;\\n/**Creates a builder for a [`CellImage`](https://developers.google.com/apps-script/reference/spreadsheet/cell-image.html).\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets cell A1 on Sheet1.\\nconst range \\u003d sheet.getRange('A1');\\n\\n// Builds an image using a source URL.\\nconst cellImage \\u003d SpreadsheetApp.newCellImage()\\n  .setSourceUrl('https://www.gstatic.com/images/branding/productlogos/apps_script/v10/web-64dp/logo_apps_script_color_1x_web_64dp.png')\\n  .build();\\n\\n// Sets the image in cell A1.\\nrange.setValue(cellImage);\\n```\\n@return The new builder.*/newCellImage():SpreadsheetApp.CellImageBuilder;\\n/**Creates a builder for a [`Color`](https://developers.google.com/apps-script/reference/spreadsheet/color.html).\\n\\n```\\nvar rgbColor \\u003d SpreadsheetApp.newColor().setRgbColor(\\\"#FF0000\\\").build();\\n```\\n@return The new builder.*/newColor():SpreadsheetApp.ColorBuilder;\\n/**Creates a builder for a conditional formatting rule.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes all cells in range A1:B3 to turn red\\n// if they contain a number between 1 and 10.\\nvar sheet \\u003d SpreadsheetApp.getActive().getActiveSheet();\\nvar range \\u003d sheet.getRange('A1:B3');\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenNumberBetween(1, 10)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build()\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n\\n```\\n@return the new builder.*/newConditionalFormatRule():SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Creates a builder for a [`DataSourceSpec`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-spec.html).\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Enables BigQuery.\\nSpreadsheetApp.enableBigQueryExecution();\\n\\n// Builds a data source specification.\\n// TODO (developer): Update the project ID to your own Google Cloud project ID.\\nconst dataSourceSpec \\u003d SpreadsheetApp.newDataSourceSpec()\\n  .asBigQuery()\\n  .setProjectId('project-id-1')\\n  .setTableProjectId('bigquery-public-data')\\n  .setDatasetId('ncaa_basketball')\\n  .setTableId('mbb_historical_teams_games')\\n  .build();\\n\\n// Adds the data source and its data to the spreadsheet.\\nss.insertDataSourceSheet(dataSourceSpec);\\n```\\n@return The new builder.*/newDataSourceSpec():SpreadsheetApp.DataSourceSpecBuilder;\\n/**Creates a builder for a data validation rule.\\n\\n```\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation()\\n    .requireNumberBetween(1, 100)\\n    .setAllowInvalid(false)\\n    .setHelpText('Number must be between 1 and 100.')\\n    .build();\\ncell.setDataValidation(rule);\\n```\\n@return The new builder.*/newDataValidation():SpreadsheetApp.DataValidationBuilder;\\n/**Creates a builder for a [`FilterCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria.html).\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Sets the range to A1:D20.\\nconst range \\u003d sheet.getRange('A1:D20');\\n\\n// Creates a filter and applies it to the specified range.\\nrange.createFilter();\\n\\n// Gets the current filter for the range and creates filter criteria that only shows cells\\n// that aren't empty.\\nconst filter \\u003d range.getFilter();\\nconst criteria \\u003d SpreadsheetApp.newFilterCriteria().whenCellNotEmpty().build();\\n\\n// Sets the criteria to  column C.\\nfilter.setColumnFilterCriteria(3, criteria);\\n```\\n@return the new builder*/newFilterCriteria():SpreadsheetApp.FilterCriteriaBuilder;\\n/**Creates a builder for a Rich Text value.\\n\\n```\\n// Sets cell A1 to have the text \\\"Hello world\\\", with \\\"Hello\\\" bolded.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar bold \\u003d SpreadsheetApp.newTextStyle().setBold(true).build();\\nvar value \\u003d SpreadsheetApp.newRichTextValue()\\n    .setText(\\\"Hello world\\\")\\n    .setTextStyle(0, 5, bold)\\n    .build();\\ncell.setRichTextValue(value);\\n```\\n@return The new builder.*/newRichTextValue():SpreadsheetApp.RichTextValueBuilder;\\n/**Creates a builder for a text style.\\n\\n```\\n// Sets range A1:B3 to have red, size 22, bolded, underlined text.\\nvar range \\u003d SpreadsheetApp.getActive().getRange('A1:B3');\\nvar style \\u003d SpreadsheetApp.newTextStyle()\\n    .setForegroundColor(\\\"red\\\")\\n    .setFontSize(22)\\n    .setBold(true)\\n    .setUnderline(true)\\n    .build();\\nrange.setTextStyle(style);\\n```\\n@return The new builder.*/newTextStyle():SpreadsheetApp.TextStyleBuilder;\\n/**Opens the spreadsheet that corresponds to the given File object.\\n\\n```\\n// Get any starred spreadsheets from Google Drive, then open the spreadsheets and log the name\\n// of the first sheet within each spreadsheet.\\nvar files \\u003d DriveApp.searchFiles(\\n    'starred \\u003d true and mimeType \\u003d \\\"' + MimeType.GOOGLE_SHEETS + '\\\"');\\nwhile (files.hasNext()) {\\n  var spreadsheet \\u003d SpreadsheetApp.open(files.next());\\n  var sheet \\u003d spreadsheet.getSheets()[0];\\n  Logger.log(sheet.getName());\\n}\\n```\\n@param file The file to open.\\n@return the spreadsheet*/open(file:DriveApp.File):SpreadsheetApp.Spreadsheet;\\n/**Opens the spreadsheet with the given ID. A spreadsheet ID can be extracted from its URL. For\\nexample, the spreadsheet ID in the URL `https://docs.google.com/spreadsheets/d/abc1234567/edit#gid\\u003d0` is \\\"abc1234567\\\".\\n\\n```\\n// The code below opens a spreadsheet using its ID and logs the name for it.\\n// Note that the spreadsheet is NOT physically opened on the client side.\\n// It is opened on the server only (for modification by the script).\\nvar ss \\u003d SpreadsheetApp.openById(\\\"abc1234567\\\");\\nLogger.log(ss.getName());\\n```\\n@param id The unique identifier for the spreadsheet.\\n@return the Spreadsheet object with the given id*/openById(id:string):SpreadsheetApp.Spreadsheet;\\n/**Opens the spreadsheet with the given URL. Throws a scripting exception if the URL doesn't exist\\nor the user doesn't have permission to access it.\\n\\n```\\n// Opens a spreadsheet by its URL and logs its name.\\n// Note that the spreadsheet doesn't physically open on the client side.\\n// It opens on the server only (for modification by the script).\\nvar ss \\u003d SpreadsheetApp.openByUrl(\\n    'https://docs.google.com/spreadsheets/d/abc1234567/edit');\\nconsole.log(ss.getName());\\n```\\n@param url The URL for the spreadsheet.\\n@return The spreadsheet object with the given URL.*/openByUrl(url:string):SpreadsheetApp.Spreadsheet;\\n/**Sets the specified range as the [`active range`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html#getActiveRange()), with the top\\nleft cell in the range as the [`current cell`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html#getCurrentCell()).\\n\\nThe spreadsheet UI displays the sheet that contains the chosen range and selects the cells\\ndefined in the chosen range.\\n\\n```\\n// The code below sets range C1:D4 in the first sheet as the active range.\\nvar range \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0].getRange('C1:D4');\\nSpreadsheetApp.setActiveRange(range);\\n\\nvar selection \\u003d SpreadsheetApp.getSelection();\\n// Current cell: C1\\nvar currentCell \\u003d selection.getCurrentCell();\\n// Active Range: C1:D4\\nvar activeRange \\u003d selection.getActiveRange();\\n```\\n@param range The range to be made the active range.\\n@return the new active Range*/setActiveRange(range:SpreadsheetApp.Range):SpreadsheetApp.Range;\\n/**Sets the specified list of ranges as the [`active ranges`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app.html#getActiveRangeList()). The last\\nrange in the list is set as the [`active range`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app.html#getActiveRange()).\\n\\n```\\n// The code below sets ranges [D4, B2:C4] in the active sheet as the active ranges.\\nvar rangeList \\u003d SpreadsheetApp.getActiveSheet().getRanges(['D4', 'B2:C4']);\\nSpreadsheetApp.setActiveRangeList(rangeList);\\n\\nvar selection \\u003d SpreadsheetApp.getSelection();\\n// Current cell: B2\\nvar currentCell \\u003d selection.getCurrentCell();\\n// Active range: B2:C4\\nvar activeRange \\u003d selection.getActiveRange();\\n// Active range list: [D4, B2:C4]\\nvar activeRangeList \\u003d selection.getActiveRangeList();\\n```\\n@param rangeList The list of ranges to select.\\n@return the newly selected list of ranges*/setActiveRangeList(rangeList:SpreadsheetApp.RangeList):SpreadsheetApp.RangeList;\\n/**Sets the active sheet in a spreadsheet. The Google Sheets UI displays the chosen sheet unless\\nthe sheet belongs to a different spreadsheet.\\n\\n```\\n// The code below makes the 2nd sheet active in the active spreadsheet.\\nvar spreadsheet \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nSpreadsheetApp.setActiveSheet(spreadsheet.getSheets()[1]);\\n```\\n@param sheet The new active sheet.\\n@return the sheet that has been made the new active sheet*/setActiveSheet(sheet:SpreadsheetApp.Sheet):SpreadsheetApp.Sheet;\\n/**Sets the active sheet in a spreadsheet, with the option to restore the most recent selection\\nwithin that sheet. The Google Sheets UI displays the chosen sheet unless the sheet belongs to a\\ndifferent spreadsheet.\\n\\n```\\nvar spreadsheet \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar firstSheet \\u003d spreadsheet.getSheets()[0];\\nvar secondSheet \\u003d spreadsheet.getSheets()[1];\\n// Set the first sheet as the active sheet and select the range D4:F4.\\nspreadsheet.setActiveSheet(firstSheet).getRange('D4:F4').activate();\\n\\n// Switch to the second sheet to do some work.\\nspreadsheet.setActiveSheet(secondSheet);\\n// Switch back to first sheet, and restore its selection.\\nspreadsheet.setActiveSheet(firstSheet, true);\\n\\n// The selection of first sheet is restored, and it logs D4:F4\\nvar range \\u003d spreadsheet.getActiveSheet().getSelection().getActiveRange();\\nLogger.log(range.getA1Notation());\\n```\\n@param sheet The new active sheet.\\n@param restoreSelection If `true`, the most recent selection of the new active sheet\\n    becomes selected again as the new sheet becomes active; if `false`, the new sheet\\n    becomes active without changing the current selection.\\n@return the new active sheet*/setActiveSheet(sheet:SpreadsheetApp.Sheet,restoreSelection:boolean):SpreadsheetApp.Sheet;\\n/**Sets the active spreadsheet.\\n\\n```\\n// The code below makes the spreadsheet with key \\\"1234567890\\\" the active spreadsheet\\nvar ss \\u003d SpreadsheetApp.openById(\\\"1234567890\\\");\\nSpreadsheetApp.setActiveSpreadsheet(ss);\\n```\\n@param newActiveSpreadsheet The Spreadsheet to be made the active spreadsheet.*/setActiveSpreadsheet(newActiveSpreadsheet:SpreadsheetApp.Spreadsheet):void;\\n/**Sets the specified cell as the [`current cell`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app.html#getCurrentCell()).\\n\\nIf the specified cell is present in an already selected range, then that range becomes the\\nactive range with the cell as the current cell.\\n\\nIf the specified cell is not present in any selected range, then the existing selection is\\nremoved and the cell becomes the current cell and the active range.\\n\\n__Note:__The specified [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) must consist of one cell, otherwise this method\\nthrows an exception.\\n\\n```\\n// The code below sets the cell B5 in the first sheet as the current cell.\\nvar cell \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0].getRange('B5');\\nSpreadsheetApp.setCurrentCell(cell);\\n\\nvar selection \\u003d SpreadsheetApp.getSelection();\\n// Current cell: B5\\nvar currentCell \\u003d selection.getCurrentCell();\\n```\\n@param cell The cell to set as the current cell.\\n@return the newly set current cell*/setCurrentCell(cell:SpreadsheetApp.Range):SpreadsheetApp.Range;}module SpreadsheetApp{interface WrapStrategy{}interface _WrapStrategy{\\n/**Clip lines that are longer than the cell width.*/CLIP:WrapStrategy;\\n/**Overflow lines into the next cell, so long as that cell is empty. If the next cell over is\\nnon-empty, this behaves the same as `CLIP`.*/OVERFLOW:WrapStrategy;\\n/**Wrap lines that are longer than the cell width onto a new line. Single words that are longer\\nthan a line are wrapped at the character level.*/WRAP:WrapStrategy;}interface ValueType{}interface _ValueType{\\n/**The value type when the cell contains an image.*/IMAGE:ValueType;}interface ThemeColorType{}interface _ThemeColorType{\\n/**Represents the first accent color.*/ACCENT1:ThemeColorType;\\n/**Represents the second accent color.*/ACCENT2:ThemeColorType;\\n/**Represents the third accent color.*/ACCENT3:ThemeColorType;\\n/**Represents the fourth accent color.*/ACCENT4:ThemeColorType;\\n/**Represents the fifth accent color.*/ACCENT5:ThemeColorType;\\n/**Represents the sixth accent color.*/ACCENT6:ThemeColorType;\\n/**Represents the color to use for chart's background.*/BACKGROUND:ThemeColorType;\\n/**Represents the color to use for hyperlinks.*/HYPERLINK:ThemeColorType;\\n/**Represents the text color.*/TEXT:ThemeColorType;\\n/**Represents a theme color that is not supported.*/UNSUPPORTED:ThemeColorType;}interface ThemeColor{\\n/**Get the type of this color.\\n@return The color type.*/getColorType():ColorType;\\n/**Gets the theme color type of this color.\\n@return The theme color type.*/getThemeColorType():SpreadsheetApp.ThemeColorType;}interface TextToColumnsDelimiter{}interface _TextToColumnsDelimiter{\\n/**`\\\",\\\"` delimiter.*/COMMA:TextToColumnsDelimiter;\\n/**`\\\".\\\"` delimiter.*/PERIOD:TextToColumnsDelimiter;\\n/**`\\\";\\\"` delimiter.*/SEMICOLON:TextToColumnsDelimiter;\\n/**`\\\" \\\"` delimiter.*/SPACE:TextToColumnsDelimiter;}interface TextStyleBuilder{\\n/**Creates a text style from this builder.\\n@return A text style created from this builder.*/build():SpreadsheetApp.TextStyle;\\n/**Sets whether or not the text is bold.\\n@param bold Whether or not the text is bold.\\n@return The builder for chaining.*/setBold(bold:boolean):SpreadsheetApp.TextStyleBuilder;\\n/**Sets the text font family, such as \\\"Arial\\\".\\n@param fontFamily The desired font family.\\n@return The builder for chaining.*/setFontFamily(fontFamily:string):SpreadsheetApp.TextStyleBuilder;\\n/**Sets the text font size in points.\\n@param fontSize The desired font size.\\n@return The builder for chaining.*/setFontSize(fontSize:Integer):SpreadsheetApp.TextStyleBuilder;\\n/**Sets the text font color.\\n@param cssString The desired font color in CSS notation (such as `'#ffffff'` or `'white'`).\\n@return The builder for chaining.*/setForegroundColor(cssString:string):SpreadsheetApp.TextStyleBuilder;\\n/**Sets the text font color.\\n@param color The desired font color.\\n@return The builder for chaining.*/setForegroundColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.TextStyleBuilder;\\n/**Sets whether or not the text is italic.\\n@param italic Whether or not the text is italic.\\n@return The builder for chaining.*/setItalic(italic:boolean):SpreadsheetApp.TextStyleBuilder;\\n/**Sets whether or not the text has strikethrough.\\n@param strikethrough Whether or not the text has strikethrough.\\n@return The builder for chaining.*/setStrikethrough(strikethrough:boolean):SpreadsheetApp.TextStyleBuilder;\\n/**Sets whether or not the text is underlined.\\n@param underline Whether or not the text is underlined.\\n@return The builder for chaining.*/setUnderline(underline:boolean):SpreadsheetApp.TextStyleBuilder;}interface TextStyle{\\n/**Creates a text style builder initialized with the values of this text style.\\n@return A builder from this text style.*/copy():SpreadsheetApp.TextStyleBuilder;\\n/**Gets the font family of the text. Returns `null` if the font family isn't set or the\\ncorresponding [`RichTextValue`](https://developers.google.com/apps-script/reference/spreadsheet/rich-text-value.html) has multiple runs with different font\\nfamilies.\\n@return The font family of the text (for example, \\\"Arial\\\") or `null`.*/getFontFamily():string;\\n/**Gets the font size of the text in points. Returns `null` if the font size isn't set or\\nthe corresponding [`RichTextValue`](https://developers.google.com/apps-script/reference/spreadsheet/rich-text-value.html) has multiple runs with different font\\nsizes.\\n@return The font size of the text or `null`.*/getFontSize():Integer;\\n/**Gets the font color of the text. Returns `null` if the font color isn't set or the\\ncorresponding [`RichTextValue`](https://developers.google.com/apps-script/reference/spreadsheet/rich-text-value.html) has multiple runs with different font\\ncolors.\\n@deprecated\\n@return The font color of the text as a hex CSS value (for example, \\\"#ff0000\\\") or `null`.*/getForegroundColor():string;\\n/**Gets the font color of the text. Returns `null` if the font color isn't set or the\\ncorresponding [`RichTextValue`](https://developers.google.com/apps-script/reference/spreadsheet/rich-text-value.html) has multiple runs with different font\\ncolors.\\n@return The font color of the text or `null`.*/getForegroundColorObject():SpreadsheetApp.Color;\\n/**Gets whether or not the text is bold. Returns `null` if bold isn't set or the\\ncorresponding [`RichTextValue`](https://developers.google.com/apps-script/reference/spreadsheet/rich-text-value.html) has multiple runs with different bold\\nsettings.\\n@return Whether or not the cell is bold, or `null`.*/isBold():boolean;\\n/**Gets whether or not the cell is italic. Returns `null` if italic isn't set or the\\ncorresponding [`RichTextValue`](https://developers.google.com/apps-script/reference/spreadsheet/rich-text-value.html) has multiple runs with different italic\\nsettings.\\n@return Whether or not the cell is italic, or `null`.*/isItalic():boolean;\\n/**Gets whether or not the cell has strikethrough. Returns `null` if strikethrough isn't set\\nor the corresponding [`RichTextValue`](https://developers.google.com/apps-script/reference/spreadsheet/rich-text-value.html) has multiple runs with different\\nstrikethrough settings.\\n@return Whether or not the cell has strikethrough, or `null`.*/isStrikethrough():boolean;\\n/**Gets whether or not the cell is underlined. Returns `null` if underline isn't set or the\\ncorresponding [`RichTextValue`](https://developers.google.com/apps-script/reference/spreadsheet/rich-text-value.html) has multiple runs with different underline\\nsettings.\\n@return Whether or not the cell is underlined, or `null`.*/isUnderline():boolean;}interface TextRotation{\\n/**Gets the angle between standard text orientation and the current text orientation. For\\nleft-to-right text, positive angles are in the counterclockwise direction. If the text is set\\nto stack vertically, this method returns `0`.\\n@return The degrees between standard text rotation and the current text rotation.*/getDegrees():Integer;\\n/**Returns `true` if the text is stacked vertically; returns `false` otherwise.\\n@return Whether or not the text is stacked vertically.*/isVertical():boolean;}interface TextFinder{\\n/**Returns all cells matching the search criteria.\\n@return All the matching cells.*/findAll():SpreadsheetApp.Range[];\\n/**Returns the next cell matching the search criteria.\\n@return The next matching cell, or `null` if there are no previous matches.*/findNext():SpreadsheetApp.Range;\\n/**Returns the previous cell matching the search criteria.\\n@return The previous matching cell, or `null` if there are no previous matches.*/findPrevious():SpreadsheetApp.Range;\\n/**Returns the current cell matching the search criteria.\\n@return The current matching cell, or `null` if there are no further matches.*/getCurrentMatch():SpreadsheetApp.Range;\\n/**If `true`, configures the search to ignore diacritics while matching; otherwise the\\nsearch matches diacritics. A diacritic is a sign, such as an accent or cedilla, which when\\nwritten above or below a letter indicates a difference in pronunciation from the same letter\\nwhen unmarked or differently marked.\\n@param ignoreDiacritics Whether the search considers diacritics.\\n@return This text finder, for chaining.*/ignoreDiacritics(ignoreDiacritics:boolean):SpreadsheetApp.TextFinder;\\n/**If `true`, configures the search to match the search text's case exactly, otherwise the\\nsearch defaults to case-insensitive matching.\\n@param matchCase Whether the matching is case-sensitive.\\n@return This text finder, for chaining.*/matchCase(matchCase:boolean):SpreadsheetApp.TextFinder;\\n/**If `true`, configures the search to match the entire contents of a cell; otherwise, the\\nsearch defaults to partial matching.\\n@param matchEntireCell Whether the entire cell is matched.\\n@return This text finder, for chaining.*/matchEntireCell(matchEntireCell:boolean):SpreadsheetApp.TextFinder;\\n/**If `true`, configures the search to return matches that appear within formula text;\\notherwise cells with formulas are considered based on their displayed value.\\n@param matchFormulaText Whether the search examines formula text.\\n@return This text finder, for chaining.*/matchFormulaText(matchFormulaText:boolean):SpreadsheetApp.TextFinder;\\n/**Replaces all matches with the specified text. Returns the number of occurrences replaced, which\\nmay be different from the number of matched cells.\\n@param replaceText The text that replaces the text in the matched cells.\\n@return The number of occurrences replaced.*/replaceAllWith(replaceText:string):Integer;\\n/**Replaces the search text in the currently matched cell with the specified text and returns the\\nnumber of occurrences replaced.\\n@param replaceText The text that replaces the content in the currently matched cell.\\n@return The number of occurrences replaced.*/replaceWith(replaceText:string):Integer;\\n/**Configures the search to start searching immediately after the specified cell range.\\n@param startRange The cell range after which the search should start.\\n@return This text finder, for chaining.*/startFrom(startRange:SpreadsheetApp.Range):SpreadsheetApp.TextFinder;\\n/**If `true`, configures the search to interpret the search string as a regular expression;\\notherwise the search interprets the search string as normal text. For more details on how to\\nuse regular expressions, refer to the [\\nFind and replace support page.](https://support.google.com/docs/answer/62754?p\\u003dspreadsheets_find_replace\\u0026visit_id\\u003d1-636603693162634183-3185740572\\u0026rd\\u003d1)\\n@param useRegEx Whether to interpret the search string as a regular expression.\\n@return This text finder, for chaining.*/useRegularExpression(useRegEx:boolean):SpreadsheetApp.TextFinder;}interface TextDirection{}interface _TextDirection{\\n/**Left-to-right text direction.*/LEFT_TO_RIGHT:TextDirection;\\n/**Right-to-left text direction.*/RIGHT_TO_LEFT:TextDirection;}interface SpreadsheetTheme{\\n/**Returns the concrete [`Color`](https://developers.google.com/apps-script/reference/spreadsheet/color.html) for a valid theme color type. Throws exception if the theme\\ncolor type is not set in the current theme.\\n@param themeColorType Theme color type.\\n@return Concrete color.*/getConcreteColor(themeColorType:SpreadsheetApp.ThemeColorType):SpreadsheetApp.Color;\\n/**Returns the font family of the theme, or `null` if it's a `null` theme.\\n@return The theme font family.*/getFontFamily():string;\\n/**Returns a list of all possible theme color types for the current theme.\\n@return A list of theme colors.*/getThemeColors():SpreadsheetApp.ThemeColorType[];\\n/**Sets the concrete color associated with the [`ThemeColorType`](https://developers.google.com/apps-script/reference/spreadsheet/theme-color-type.html) in this color scheme to the\\ngiven color in RGB format.\\n@param themeColorType The theme color type.\\n@param red The value of red channel.\\n@param green The value of green channel.\\n@param blue The value of blue channel.\\n@return The theme, for chaining.*/setConcreteColor(themeColorType:SpreadsheetApp.ThemeColorType,red:Integer,green:Integer,blue:Integer):SpreadsheetApp.SpreadsheetTheme;\\n/**Sets the concrete color associated with the [`ThemeColorType`](https://developers.google.com/apps-script/reference/spreadsheet/theme-color-type.html) in this color scheme to the\\ngiven color.\\n@param themeColorType The theme color type.\\n@param color The color.\\n@return The theme, for chaining.*/setConcreteColor(themeColorType:SpreadsheetApp.ThemeColorType,color:SpreadsheetApp.Color):SpreadsheetApp.SpreadsheetTheme;\\n/**Sets the font family for the theme.\\n@param fontFamily The new theme font family.\\n@return This theme, for chaining.*/setFontFamily(fontFamily:string):SpreadsheetApp.SpreadsheetTheme;}interface Spreadsheet{\\n/**Adds developer metadata with the specified key to the top-level spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Adds the key 'NAME' in the developer metadata for the spreadsheet.\\nss.addDeveloperMetadata('NAME')\\n\\n// Gets the first developer metadata object and logs its key.\\nconst developerMetaData \\u003d ss.getDeveloperMetadata()[0]\\nconsole.log(developerMetaData.getKey())\\n```\\n@param key The key for the new developer metadata.\\n@return This spreadsheet, for chaining.*/addDeveloperMetadata(key:string):SpreadsheetApp.Spreadsheet;\\n/**Adds developer metadata with the specified key and visibility to the spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Adds the key 'NAME' in the developer metadata for the spreadsheet and sets the visibility\\n// to the developer project that created the metadata.\\nss.addDeveloperMetadata('NAME', SpreadsheetApp.DeveloperMetadataVisibility.PROJECT);\\n\\n// Gets the first developer metadata object and logs its key and visibility setting.\\nconst developerMetaData \\u003d ss.getDeveloperMetadata()[0];\\nconsole.log(developerMetaData.getKey());\\nconsole.log(`Key: ${developerMetaData.getKey()},\\n.             Visibility: ${developerMetaData.getVisibility()}`);\\n```\\n@param key The key for the new developer metadata.\\n@param visibility The visibility of the new developer metadata.\\n@return This spreadsheet, for chaining.*/addDeveloperMetadata(key:string,visibility:SpreadsheetApp.DeveloperMetadataVisibility):SpreadsheetApp.Spreadsheet;\\n/**Adds developer metadata with the specified key and value to the spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Adds the key 'NAME' and sets the value to 'GOOGLE' in the developer metadata for the\\n// spreadsheet.\\nss.addDeveloperMetadata('NAME', 'GOOGLE');\\n\\n// Gets the first developer metadata object and logs its key and value.\\nconst developerMetaData \\u003d ss.getDeveloperMetadata()[0];\\nconsole.log(developerMetaData.getKey());\\nconsole.log(`Key: ${developerMetaData.getKey()}, Value: ${developerMetaData.getValue()}`);\\n```\\n@param key The key for the new developer metadata.\\n@param value The value for the new developer metadata.\\n@return This spreadsheet, for chaining.*/addDeveloperMetadata(key:string,value:string):SpreadsheetApp.Spreadsheet;\\n/**Adds developer metadata with the specified key, value, and visibility to the spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Adds the key 'NAME', sets the value to 'GOOGLE', and sets the visibility\\n// to any developer project with document access.\\nss.addDeveloperMetadata('NAME', 'GOOGLE', SpreadsheetApp.DeveloperMetadataVisibility.DOCUMENT);\\n\\n// Gets the first developer metadata object and logs its key, value, and visibility setting.\\nconst developerMetaData \\u003d ss.getDeveloperMetadata()[0];\\nconsole.log(`Key: ${developerMetaData.getKey()},\\n             Value: ${developerMetaData.getValue()},\\n             Visibility: ${developerMetaData.getVisibility()}`);\\n```\\n@param key The key for the new developer metadata.\\n@param value The value for the new developer metadata.\\n@param visibility The visibility of the new developer metadata.\\n@return This spreadsheet, for chaining.*/addDeveloperMetadata(key:string,value:string,visibility:SpreadsheetApp.DeveloperMetadataVisibility):SpreadsheetApp.Spreadsheet;\\n/**Adds the given user to the list of editors for the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param emailAddress The email address of the user to add.\\n@return This [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html), for chaining.*/addEditor(emailAddress:string):SpreadsheetApp.Spreadsheet;\\n/**Adds the given user to the list of editors for the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html). If the user was already\\non the list of viewers, this method promotes the user out of the list of viewers.\\n@param user A representation of the user to add.\\n@return This [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html), for chaining.*/addEditor(user:User):SpreadsheetApp.Spreadsheet;\\n/**Adds the given array of users to the list of editors for the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html). If any of the\\nusers were already on the list of viewers, this method promotes them out of the list of\\nviewers.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html), for chaining.*/addEditors(emailAddresses:string[]):SpreadsheetApp.Spreadsheet;\\n/**Creates a new menu in the Spreadsheet UI.\\n\\nEach menu entry runs a user-defined function. Usually, you want to call it from the `onOpen()` function so that the menu is automatically created when the spreadsheet is loaded.\\n\\n```\\n// The onOpen function is executed automatically every time a Spreadsheet is loaded\\nfunction onOpen() {\\n  var ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\n  var menuEntries \\u003d [];\\n  // When the user clicks on \\\"addMenuExample\\\" then \\\"Menu Entry 1\\\", the function function1 is\\n  // executed.\\n  menuEntries.push({name: \\\"Menu Entry 1\\\", functionName: \\\"function1\\\"});\\n  menuEntries.push(null); // line separator\\n  menuEntries.push({name: \\\"Menu Entry 2\\\", functionName: \\\"function2\\\"});\\n\\n  ss.addMenu(\\\"addMenuExample\\\", menuEntries);\\n}\\n```\\n@param name The name of the menu to be created.\\n@param subMenus An array of JavaScript maps with `name` and `functionName` parameters. You can use functions from included libraries, such as \\n\\n```\\n    Library.libFunction1```\\n\\n.*/addMenu(name:string,subMenus:Object[]):void;\\n/**Adds the given user to the list of viewers for the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html). If the user was already\\non the list of editors, this method has no effect.\\n@param emailAddress The email address of the user to add.\\n@return This [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html), for chaining.*/addViewer(emailAddress:string):SpreadsheetApp.Spreadsheet;\\n/**Adds the given user to the list of viewers for the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html). If the user was already\\non the list of editors, this method has no effect.\\n@param user A representation of the user to add.\\n@return This [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html), for chaining.*/addViewer(user:User):SpreadsheetApp.Spreadsheet;\\n/**Adds the given array of users to the list of viewers for the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html). If any of the\\nusers were already on the list of editors, this method has no effect for them.\\n@param emailAddresses An array of email addresses of the users to add.\\n@return This [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html), for chaining.*/addViewers(emailAddresses:string[]):SpreadsheetApp.Spreadsheet;\\n/**Appends a row to the bottom of the current data region in the sheet. If a cell's content begins\\nwith `\\u003d`, it's interpreted as a formula.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Appends a new row with 3 columns to the bottom of the current\\n// data region in the sheet containing the values in the array.\\nsheet.appendRow([\\\"a man\\\", \\\"a plan\\\", \\\"panama\\\"]);\\n```\\n@param rowContents An array of values to insert after the last row in the sheet.\\n@return The sheet, useful for method chaining.*/appendRow(rowContents:Object[]):SpreadsheetApp.Sheet;\\n/**Sets the width of the given column to fit its contents.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nsheet.getRange('a1').setValue('Whenever it is a damp, drizzly November in my soul...');\\n\\n// Sets the first column to a width which fits the text\\nsheet.autoResizeColumn(1);\\n```\\n@param columnPosition The position of the given column to resize.\\n@return the sheet, useful for method chaining*/autoResizeColumn(columnPosition:Integer):SpreadsheetApp.Sheet;\\n/**Copies the spreadsheet and returns the new one.\\n\\n```\\n// This code makes a copy of the current spreadsheet and names it appropriately\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nss.copy(\\\"Copy of \\\" + ss.getName());\\n```\\n@param name The name of the copy.\\n@return This spreadsheet, for chaining.*/copy(name:string):SpreadsheetApp.Spreadsheet;\\n/**Returns a [`DeveloperMetadataFinder`](https://developers.google.com/apps-script/reference/spreadsheet/developer-metadata-finder.html) for finding developer metadata within the scope of\\nthis spreadsheet. By default this considers all metadata associated with the spreadsheet,\\nsheets, rows, and columns.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Adds developer metadata to the spreadsheet.\\nss.addDeveloperMetadata('NAME', 'CHARLIE');\\nss.addDeveloperMetadata('COMPANY', 'EXAMPLE ORGANIZATION');\\nss.addDeveloperMetadata('TECHNOLOGY', 'JAVASCRIPT');\\n\\n// Creates a developer metadata finder.\\nconst developerMetadataFinder \\u003d ss.createDeveloperMetadataFinder();\\n\\n// Finds the developer metadata objects with 'COMPANY' as the key.\\nconst googleMetadataFromSpreadsheet \\u003d developerMetadataFinder.withKey('COMPANY').find();\\n\\n// Gets the first result of developer metadata that has the key 'COMPANY' and logs its value.\\nconsole.log(googleMetadataFromSpreadsheet[0].getValue());\\n```\\n@return A developer metadata finder to search for metadata in the scope of this spreadsheet.*/createDeveloperMetadataFinder():SpreadsheetApp.DeveloperMetadataFinder;\\n/**Creates a text finder for the spreadsheet, which can be used to find and replace text within\\nthe spreadsheet. The search starts from the first sheet of the spreadsheet.\\n\\n```\\nvar spreadsheet \\u003d SpreadsheetApp.getActiveSpreadsheet();\\n\\n// Creates  a text finder.\\nvar textFinder \\u003d spreadsheet.createTextFinder('dog');\\n\\n// Returns the first occurrence of 'dog' in the spreadsheet.\\nvar firstOccurrence \\u003d textFinder.findNext();\\n\\n// Replaces the last found occurrence of 'dog' with 'cat' and returns the number\\n// of occurrences replaced.\\nvar numOccurrencesReplaced \\u003d findOccurrence.replaceWith('cat');\\n```\\n@param findText The text to search for.\\n@return The [`TextFinder`](https://developers.google.com/apps-script/reference/spreadsheet/text-finder.html) for the spreadsheet.*/createTextFinder(findText:string):SpreadsheetApp.TextFinder;\\n/**Deletes the currently active sheet.\\n\\n```\\n// The code below deletes the currently active sheet and stores the new active sheet in a\\n// variable\\nvar newSheet \\u003d SpreadsheetApp.getActiveSpreadsheet().deleteActiveSheet();\\n```\\n@return The new active sheet.*/deleteActiveSheet():SpreadsheetApp.Sheet;\\n/**Deletes the column at the given column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Columns start at \\\"1\\\" - this deletes the first column\\nsheet.deleteColumn(1);\\n```\\n@param columnPosition The position of the column, starting at 1 for the first column.\\n@return the sheet, useful for method chaining*/deleteColumn(columnPosition:Integer):SpreadsheetApp.Sheet;\\n/**Deletes a number of columns starting at the given column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Columns start at \\\"1\\\" - this deletes the first two columns\\nsheet.deleteColumns(1, 2);\\n```\\n@param columnPosition The position of the first column to delete.\\n@param howMany The number of columns to delete.*/deleteColumns(columnPosition:Integer,howMany:Integer):void;\\n/**Deletes the row at the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Rows start at \\\"1\\\" - this deletes the first row\\nsheet.deleteRow(1);\\n```\\n@param rowPosition The position of the row, starting at 1 for the first row.\\n@return the sheet, useful for method chaining*/deleteRow(rowPosition:Integer):SpreadsheetApp.Sheet;\\n/**Deletes a number of rows starting at the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Rows start at \\\"1\\\" - this deletes the first two rows\\nsheet.deleteRows(1, 2);\\n```\\n@param rowPosition The position of the first row to delete.\\n@param howMany The number of rows to delete.*/deleteRows(rowPosition:Integer,howMany:Integer):void;\\n/**Deletes the specified sheet.\\n\\n```\\n// The code below deletes the specified sheet.\\nvar ss \\u003d SpreadsheetApp.getActive();\\nvar sheet \\u003d ss.getSheetByName('My Sheet');\\nss.deleteSheet(sheet);\\n```\\n@param sheet The sheet to delete.*/deleteSheet(sheet:SpreadsheetApp.Sheet):void;\\n/**Duplicates the active sheet and makes it the active sheet.\\n\\n```\\n// The code below makes a duplicate of the active sheet\\nSpreadsheetApp.getActiveSpreadsheet().duplicateActiveSheet();\\n```\\n@return The new sheet.*/duplicateActiveSheet():SpreadsheetApp.Sheet;\\n/**Returns the active cell in this sheet.\\n\\n__Note:__ It's preferable to use [`getCurrentCell()`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#getCurrentCell()), which returns the current\\nhighlighted cell.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Returns the active cell\\nvar cell \\u003d sheet.getActiveCell();\\n```\\n@return the current active cell*/getActiveCell():SpreadsheetApp.Range;\\n/**Returns the selected range in the active sheet, or `null` if there is no active range. If\\nmultiple ranges are selected this method returns only the last selected range.\\n\\nThe term \\\"active range\\\" refers to the range that a user has selected in the active sheet,\\nbut in a custom function it refers to the cell being actively recalculated.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\nvar activeRange \\u003d sheet.getActiveRange();\\n```\\n@return the active range*/getActiveRange():SpreadsheetApp.Range;\\n/**Returns the list of active ranges in the active sheet or `null` if there are no active\\nranges.\\n\\nIf there is a single range selected, this behaves as a [`getActiveRange()`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#getActiveRange()) call.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n// Returns the list of active ranges.\\nvar activeRangeList \\u003d sheet.getActiveRangeList();\\n```\\n@return the list of active ranges*/getActiveRangeList():SpreadsheetApp.RangeList;\\n/**Gets the active sheet in a spreadsheet.\\n\\nThe active sheet in a spreadsheet is the sheet that is being displayed in the spreadsheet\\nUI.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\n```\\n@return The active sheet in the spreadsheet.*/getActiveSheet():SpreadsheetApp.Sheet;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Returns all the bandings in this spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets an array of the bandings in the spreadsheet.\\nconst bandings \\u003d ss.getBandings();\\n\\n// Logs the range of the first banding in the spreadsheet to the console.\\nconsole.log(bandings[0].getRange().getA1Notation());\\n```\\n@return The bandings in this spreadsheet.*/getBandings():SpreadsheetApp.Banding[];\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;\\n/**Gets the width in pixels of the given column.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Columns start at 1\\nLogger.log(sheet.getColumnWidth(1));\\n```\\n@param columnPosition The position of the column to examine.\\n@return column width in pixels*/getColumnWidth(columnPosition:Integer):Integer;\\n/**Returns the current cell in the active sheet or `null` if there is no current cell. The\\ncurrent cell is the cell that has focus in the Google Sheets UI, and is highlighted by a dark\\nborder. There is never more than one current cell. When a user selects one or more cell ranges,\\none of the cells in the selection is the current cell.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\n// Returns the current highlighted cell in the one of the active ranges.\\nvar currentCell \\u003d sheet.getCurrentCell();\\n```\\n@return the current cell*/getCurrentCell():SpreadsheetApp.Range;\\n/**Returns a [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) corresponding to the dimensions in which data is present.\\n\\nThis is functionally equivalent to creating a Range bounded by A1 and\\n(Sheet.getLastColumn(), Sheet.getLastRow()).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This represents ALL the data\\nvar range \\u003d sheet.getDataRange();\\nvar values \\u003d range.getValues();\\n\\n// This logs the spreadsheet in CSV format with a trailing comma\\nfor (var i \\u003d 0; i \\u003c values.length; i++) {\\n  var row \\u003d \\\"\\\";\\n  for (var j \\u003d 0; j \\u003c values[i].length; j++) {\\n    if (values[i][j]) {\\n      row \\u003d row + values[i][j];\\n    }\\n    row \\u003d row + \\\",\\\";\\n  }\\n  Logger.log(row);\\n}\\n```\\n@return a range consisting of all the data in the spreadsheet*/getDataRange():SpreadsheetApp.Range;\\n/**Gets all the data source formulas.\\n\\n```\\n// Opens the spreadsheet by its ID. If you created your script from within a Google Sheets\\n// file, use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets an array of the data source formulas on Sheet1.\\n// To get an array of data source formulas for the entire spreadsheet,\\n// replace 'sheet' with 'ss'.\\nconst dataSourceFormulas \\u003d sheet.getDataSourceFormulas();\\n\\n// Logs the first data source formula in the array.\\nconsole.log(dataSourceFormulas[0].getFormula());\\n```\\n@return A list of data source formulas.*/getDataSourceFormulas():SpreadsheetApp.DataSourceFormula[];\\n/**Gets all the data source pivot tables.\\n\\n```\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets an array of the data source pivot tables on Sheet1.\\n// To get an array of data source pivot tables for the entire\\n// spreadsheet, replace 'sheet' with 'ss'.\\nconst dataSourcePivotTables \\u003d sheet.getDataSourcePivotTables();\\n\\n// Logs the last time that the first pivot table in the array was refreshed.\\nconsole.log(dataSourcePivotTables[0].getStatus().getLastRefreshedTime());\\n```\\n@return A list of data source pivot tables.*/getDataSourcePivotTables():SpreadsheetApp.DataSourcePivotTable[];\\n/**Gets the refresh schedules of this spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Activates BigQuery operations for the connected spreadsheet.\\nSpreadsheetApp.enableBigQueryExecution();\\n\\n// Gets the frequency type of the first referesh schedule in the array.\\nconst frequencyType \\u003d ss.getDataSourceRefreshSchedules()[0]\\n                        .getFrequency()\\n                        .getFrequencyType()\\n                        .toString();\\n\\n// Logs the frequency type to the console.\\nconsole.log(frequencyType);\\n```\\n@return The refresh schedules of this spreadsheet.*/getDataSourceRefreshSchedules():SpreadsheetApp.DataSourceRefreshSchedule[];\\n/**Returns all the data source sheets in the spreadsheet.\\n\\n```\\n// Turns data execution on for BigQuery data sources.\\nSpreadsheetApp.enableBigQueryExecution();\\n\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets the first data source sheet in the spreadsheet.\\nconst dataSource \\u003d ss.getDataSourceSheets()[0];\\n\\n// Gets the name of the data source sheet.\\nconsole.log(dataSource.asSheet().getName());\\n```\\n@return An array of all the data source sheets.*/getDataSourceSheets():SpreadsheetApp.DataSourceSheet[];\\n/**Gets all the data source tables.\\n\\n```\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets an array of data source tables on Sheet1.\\n// To get an array of data source tables for the entire spreadsheet,\\n// replace 'sheet' with 'ss'.\\nconst dataSourceTables \\u003d sheet.getDataSourceTables();\\n\\n// Logs the last completed data execution time on the first data source table.\\nconsole.log(dataSourceTables[0].getStatus().getLastExecutionTime());\\n```\\n@return A list of data source tables.*/getDataSourceTables():SpreadsheetApp.DataSourceTable[];\\n/**Returns all the data sources in the spreadsheet.\\n\\n```\\n// Turns data execution on for BigQuery data sources.\\nSpreadsheetApp.enableBigQueryExecution();\\n\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets the data sources on the spreadsheet.\\nconst dataSources \\u003d ss.getDataSources();\\n\\n// Logs the name of the first column on the first data source.\\nconsole.log(dataSources[0].getColumns()[0].getName());\\n```\\n@return An array of all the data sources.*/getDataSources():SpreadsheetApp.DataSource[];\\n/**Gets the developer metadata associated with the top-level spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Adds 'Google' as a key to the spreadsheet metadata.\\nss.addDeveloperMetadata('Google');\\n\\n// Gets the spreadsheet's metadata.\\nconst ssMetadata \\u003d ss.getDeveloperMetadata();\\n\\n// Gets the first set of the spreadsheet's metadata and logs the key to the console.\\nconsole.log(ssMetadata[0].getKey());\\n```\\n@return The developer metadata associated with this range.*/getDeveloperMetadata():SpreadsheetApp.DeveloperMetadata[];\\n/**Gets the list of editors for this [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html).\\n@return An array of users with edit permission.*/getEditors():User[];\\n/**Returns the URL for the form that sends its responses to this spreadsheet, or `null` if\\nthis spreadsheet has no associated form. If multiple forms send responses to this spreadsheet,\\nthe form URL returned is indeterminate. As an alternative, per sheet form URL associations can\\nbe retrieved through the [`Sheet.getFormUrl()`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getFormUrl()) method.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets the form URL from the spreadsheet.\\nconst formUrl \\u003d ss.getFormUrl();\\n\\n// Logs the form URL to the console.\\nconsole.log(formUrl);\\n```\\n@return The URL for the form that places its responses in this spreadsheet, or `null` if\\n    this spreadsheet doesn't have an associated form.*/getFormUrl():string;\\n/**Returns the number of frozen columns.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nLogger.log(\\\"Number of frozen columns: %s\\\", sheet.getFrozenColumns());\\n```\\n@return the number of frozen columns*/getFrozenColumns():Integer;\\n/**Returns the number of frozen rows.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nLogger.log(\\\"Number of frozen rows: %s\\\", sheet.getFrozenRows());\\n```\\n@return the number of frozen rows*/getFrozenRows():Integer;\\n/**Gets a unique identifier for this spreadsheet. A spreadsheet ID can be extracted from its URL.\\nFor example, the spreadsheet ID in the URL\\nhttps://docs.google.com/spreadsheets/d/abc1234567/edit#gid\\u003d0 is \\\"abc1234567\\\".\\n\\n```\\n// The code below logs the ID for the active spreadsheet.\\nLogger.log(SpreadsheetApp.getActiveSpreadsheet().getId());\\n```\\n@return The unique ID (or key) for the spreadsheet.*/getId():string;\\n/**Returns all over-the-grid images on the sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the over-the-grid images from Sheet1.\\n// To get the over-the-grid images from the entire spreadsheet, use ss.getImages() instead.\\nconst images \\u003d sheet.getImages();\\n\\n// For each image, logs the anchor cell in A1 notation.\\nfor (const image of images) {\\n console.log(image.getAnchorCell().getA1Notation());\\n}\\n```\\n@return An array of over-the-grid images.*/getImages():SpreadsheetApp.OverGridImage[];\\n/**Returns the threshold value used during iterative calculation. When the results of successive\\ncalculation differ by less than this value, the iterative calculation stops.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Sets the iterative calculation convergence threshold for the spreadsheet.\\nss.setIterativeCalculationConvergenceThreshold(2);\\n\\n// Logs the threshold to the console.\\nconsole.log(ss.getIterativeCalculationConvergenceThreshold());\\n```\\n@return The convergence threshold.*/getIterativeCalculationConvergenceThreshold():number;\\n/**Returns the position of the last column that has content.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This logs the value in the very last cell of this sheet\\nvar lastRow \\u003d sheet.getLastRow();\\nvar lastColumn \\u003d sheet.getLastColumn();\\nvar lastCell \\u003d sheet.getRange(lastRow, lastColumn);\\nLogger.log(lastCell.getValue());\\n```\\n@return the last column of the sheet that contains content*/getLastColumn():Integer;\\n/**Returns the position of the last row that has content.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This logs the value in the very last cell of this sheet\\nvar lastRow \\u003d sheet.getLastRow();\\nvar lastColumn \\u003d sheet.getLastColumn();\\nvar lastCell \\u003d sheet.getRange(lastRow, lastColumn);\\nLogger.log(lastCell.getValue());\\n```\\n@return the last row of the sheet that contains content*/getLastRow():Integer;\\n/**Returns the maximum number of iterations to use during iterative calculation.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Sets the max iterative calculation cycles for the spreadsheet.\\nss.setMaxIterativeCalculationCycles(10);\\n\\n// Logs the max iterative calculation cycles to the console.\\nconsole.log(ss.getMaxIterativeCalculationCycles());\\n```\\n@return The maximum number of calculation iterations.*/getMaxIterativeCalculationCycles():Integer;\\n/**Gets the name of the document.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nLogger.log(ss.getName());\\n```\\n@return The name of the spreadsheet.*/getName():string;\\n/**Gets all the named ranges in this spreadsheet.\\n\\n```\\n// The code below logs the name of the first named range.\\nvar namedRanges \\u003d SpreadsheetApp.getActiveSpreadsheet().getNamedRanges();\\nfor (var i \\u003d 0; i \\u003c namedRanges.length; i++) {\\n  Logger.log(namedRanges[i].getName());\\n}\\n```\\n@return An array of all the named ranges in the spreadsheet.*/getNamedRanges():SpreadsheetApp.NamedRange[];\\n/**Returns the number of sheets in this spreadsheet.\\n\\n```\\n// The code below logs the number of sheets in the active spreadsheet.\\nLogger.log(SpreadsheetApp.getActiveSpreadsheet().getNumSheets());\\n```\\n@return The number of sheets in the spreadsheet.*/getNumSheets():Integer;\\n/**Returns the owner of the document, or `null` for a document in a shared drive.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar owner \\u003d ss.getOwner();\\nLogger.log(owner.getEmail());\\n```\\n@return The owner of the document, or `null` if the document is in a shared drive.*/getOwner():User;\\n/**Returns the list of predefined themes.\\n\\n```\\n// The code below returns the list of predefined themes.\\nvar predefinedThemesList \\u003d SpreadsheetApp.getActiveSpreadsheet()\\n                               .getPredefinedSpreadsheetThemes();\\n```\\n@return List of predefined themes.*/getPredefinedSpreadsheetThemes():SpreadsheetApp.SpreadsheetTheme[];\\n/**Gets an array of objects representing all protected ranges or sheets in the spreadsheet.\\n\\n```\\n// Remove all range protections in the spreadsheet that the user has permission to edit.\\nvar ss \\u003d SpreadsheetApp.getActive();\\nvar protections \\u003d ss.getProtections(SpreadsheetApp.ProtectionType.RANGE);\\nfor (var i \\u003d 0; i \\u003c protections.length; i++) {\\n  var protection \\u003d protections[i];\\n  if (protection.canEdit()) {\\n    protection.remove();\\n  }\\n}\\n```\\n\\n```\\n// Remove all sheet protections in the spreadsheet that the user has permission to edit.\\nvar ss \\u003d SpreadsheetApp.getActive();\\nvar protections \\u003d ss.getProtections(SpreadsheetApp.ProtectionType.SHEET);\\nfor (var i \\u003d 0; i \\u003c protections.length; i++) {\\n  var protection \\u003d protections[i];\\n  if (protection.canEdit()) {\\n    protection.remove();\\n  }\\n}\\n```\\n@param type The type of protected area, either `SpreadsheetApp.ProtectionType.RANGE` or\\n    `SpreadsheetApp.ProtectionType.SHEET`.\\n@return An array of objects representing all protected ranges or sheets in the spreadsheet.*/getProtections(type:SpreadsheetApp.ProtectionType):SpreadsheetApp.Protection[];\\n/**Returns the range as specified in A1 notation or R1C1 notation.\\n\\n```\\n// Get a range A1:D4 on sheet titled \\\"Invoices\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar range \\u003d ss.getRange(\\\"Invoices!A1:D4\\\");\\n\\n// Get cell A1 on the first sheet\\nvar sheet \\u003d ss.getSheets()[0];\\nvar cell \\u003d sheet.getRange(\\\"A1\\\");\\n```\\n@param a1Notation The range to return, as specified in A1 notation or R1C1 notation.\\n@return the range at the location designated*/getRange(a1Notation:string):SpreadsheetApp.Range;\\n/**Returns a named range, or `null` if no range with the given name is found. If multiple\\nsheets of the spreadsheet use the same range name, specify the sheet name without additional\\nquotation marks — for example, `getRangeByName('TaxRates')` or `getRangeByName('Sheet Name!TaxRates')`, but not `getRangeByName('\\\"Sheet\\nName\\\"!TaxRates')`.\\n\\n```\\n// Log the number of columns for the range named 'TaxRates' in the active spreadsheet.\\nvar range \\u003d SpreadsheetApp.getActiveSpreadsheet().getRangeByName('TaxRates');\\nif (range !\\u003d null) {\\n  Logger.log(range.getNumColumns());\\n}\\n```\\n@param name The name of the range to get.\\n@return The range of cells with the given name.*/getRangeByName(name:string):SpreadsheetApp.Range;\\n/**Returns the [`RangeList`](https://developers.google.com/apps-script/reference/spreadsheet/range-list.html) collection representing the ranges in the same sheet specified\\nby a non-empty list of A1 notations or R1C1 notations.\\n\\n```\\n// Get a list of ranges A1:D4, F1:H4.\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\nvar rangeList  \\u003d sheet.getRangeList(['A1:D4', 'F1:H4']);\\n```\\n@param a1Notations The list of ranges to return, as specified in A1 notation or R1C1 notation.\\n@return the range list at the location designated*/getRangeList(a1Notations:string[]):SpreadsheetApp.RangeList;\\n/**Returns the calculation interval for this spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Logs the calculation interval for the spreadsheet to the console.\\nconsole.log(ss.getRecalculationInterval().toString());\\n```\\n@return The calculation interval for this spreadsheet.*/getRecalculationInterval():SpreadsheetApp.RecalculationInterval;\\n/**Gets the height in pixels of the given row.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Rows start at 1\\nLogger.log(sheet.getRowHeight(1));\\n```\\n@param rowPosition The position of the row to examine.\\n@return row height in pixels*/getRowHeight(rowPosition:Integer):Integer;\\n/**Returns the current [`Selection`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html) in the spreadsheet.\\n\\n```\\nvar selection \\u003d SpreadsheetApp.getActiveSpreadsheet().getSelection();\\nvar currentCell \\u003d selection.getCurrentCell();\\n```\\n@return the current selection*/getSelection():SpreadsheetApp.Selection;\\n/**Returns a sheet with the given name.\\n\\nIf multiple sheets have the same name, the leftmost one is returned. Returns `null` if\\nthere is no sheet with the given name.\\n\\n```\\n// The code below logs the index of a sheet named \\\"Expenses\\\"\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\\\"Expenses\\\");\\nif (sheet !\\u003d null) {\\n  Logger.log(sheet.getIndex());\\n}\\n```\\n@param name The name of the sheet to get.\\n@return The sheet with the given name.*/getSheetByName(name:string):SpreadsheetApp.Sheet;\\n/**Returns the ID of the sheet represented by this object.\\n\\nThis is an ID for the sheet that is unique to the spreadsheet. The ID is a monotonically\\nincreasing integer assigned at sheet creation time that is independent of sheet position. This\\nis useful in conjunction with methods such as [`Range.copyFormatToRange(gridId, column, columnEnd, row, rowEnd)`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#copyFormatToRange(Integer,Integer,Integer,Integer,Integer)) that take a `gridId` parameter rather than a [`Sheet`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html) instance.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nLogger.log(sheet.getSheetId());\\n```\\n@return an ID for the sheet unique to the spreadsheet*/getSheetId():Integer;\\n/**Returns the sheet name.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nLogger.log(sheet.getSheetName());\\n```\\n@return the name of the sheet*/getSheetName():string;\\n/**Returns a ~~[`PageProtection`](https://developers.google.com/apps-script/reference/spreadsheet/page-protection.html)~~ instance describing the permissions for the current sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar permissions \\u003d sheet.getSheetProtection();\\n\\npermissions.setProtected(true);\\npermissions.addUser(\\\"user@example.com\\\");\\n\\n// Logs the users that have access to edit this sheet. Note that this\\n// is different from access to the entire spreadsheet - getUsers()\\n// only returns users if permissions.isProtected() is set to true.\\nvar users \\u003d permissions.getUsers();\\nLogger.log(users);\\n```\\n@deprecated\\n@return an object describing sheet access permissions*/getSheetProtection():SpreadsheetApp.PageProtection;\\n/**Returns the rectangular grid of values for this range starting at the given coordinates. A -1\\nvalue given as the row or column position is equivalent to getting the very last row or column\\nthat has data in the sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The two samples below produce the same output\\nvar values \\u003d sheet.getSheetValues(1, 1, 3, 3);\\nLogger.log(values);\\n\\nvar range \\u003d sheet.getRange(1, 1, 3, 3);\\nvalues \\u003d range.getValues();\\nLogger.log(values);\\n```\\n@param startRow The position of the starting row.\\n@param startColumn The position of the starting column.\\n@param numRows The number of rows to return values for.\\n@param numColumns The number of columns to return values for.\\n@return a two-dimensional array of values*/getSheetValues(startRow:Integer,startColumn:Integer,numRows:Integer,numColumns:Integer):Object[][];\\n/**Gets all the sheets in this spreadsheet.\\n\\n```\\n// The code below logs the name of the second sheet\\nvar sheets \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets();\\nif (sheets.length \\u003e 1) {\\n  Logger.log(sheets[1].getName());\\n}\\n```\\n@return An array of all the sheets in the spreadsheet.*/getSheets():SpreadsheetApp.Sheet[];\\n/**Gets the spreadsheet locale.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets the spreadsheet locale.\\nconst ssLocale \\u003d ss.getSpreadsheetLocale();\\n\\n// Logs the locale to the console.\\nconsole.log(ssLocale);\\n```\\n@return The spreadsheet locale.*/getSpreadsheetLocale():string;\\n/**Returns the current theme of the spreadsheet, or `null` if no theme is applied.\\n\\n```\\n// The code below returns the current theme of the spreadsheet.\\nvar currentTheme \\u003d SpreadsheetApp.getActiveSpreadsheet().getSpreadsheetTheme();\\n```\\n@return The current applied theme.*/getSpreadsheetTheme():SpreadsheetApp.SpreadsheetTheme;\\n/**Gets the time zone for the spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Sets the time zone of the spreadsheet.\\nss.setSpreadsheetTimeZone('America/New_York');\\n\\n// Gets the time zone of the spreadsheet.\\nconst ssTimeZone \\u003d ss.getSpreadsheetTimeZone();\\n\\n// Logs the time zone to the console.\\nconsole.log(ssTimeZone);\\n```\\n@return The time zone, specified in \\\"long\\\" format (for example, \\\"America/New_York\\\", as listed\\n    by [Joda.org](http://joda-time.sourceforge.net/timezones.html)).*/getSpreadsheetTimeZone():string;\\n/**Returns the URL for the given spreadsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nLogger.log(ss.getUrl());\\n```\\n@return The URL for the given spreadsheet.*/getUrl():string;\\n/**Gets the list of viewers and commenters for this [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html).\\n@return An array of users with view or comment permission.*/getViewers():User[];\\n/**Hides the column or columns in the given range.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nlet sheet \\u003d ss.getSheets()[0];\\n\\n// This hides the first column\\nlet range \\u003d sheet.getRange(\\\"A1\\\");\\nsheet.hideColumn(range);\\n\\n// This hides the first 3 columns\\nlet range \\u003d sheet.getRange(\\\"A:C\\\");\\nsheet.hideColumn(range);\\n```\\n@param column The column range to hide.*/hideColumn(column:SpreadsheetApp.Range):void;\\n/**Hides the rows in the given range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This hides the first row\\nvar range \\u003d sheet.getRange(\\\"A1\\\");\\nsheet.hideRow(range);\\n```\\n@param row The row range to hide.*/hideRow(row:SpreadsheetApp.Range):void;\\n/**Inserts a column after the given column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts a column after the first column position\\nsheet.insertColumnAfter(1);\\n```\\n@param afterPosition The column after which the new column should be added.\\n@return the sheet, useful for method chaining*/insertColumnAfter(afterPosition:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a column before the given column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts a column in the first column position\\nsheet.insertColumnBefore(1);\\n```\\n@param beforePosition The column before which the new column should be added.\\n@return the sheet, useful for method chaining*/insertColumnBefore(beforePosition:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a given number of columns after the given column position.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nlet sheet \\u003d ss.getSheets()[0];\\n\\n// Inserts two columns after the first column on the first sheet of the spreadsheet.\\nsheet.insertColumnsAfter(1,2);\\n```\\n@param afterPosition The column after which the new column should be added.\\n@param howMany The number of columns to insert.\\n@return the sheet, useful for method chaining*/insertColumnsAfter(afterPosition:Integer,howMany:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a number of columns before the given column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts five columns before the first column\\nsheet.insertColumnsBefore(1, 5);\\n```\\n@param beforePosition The column before which the new column should be added.\\n@param howMany The number of columns to insert.\\n@return the sheet, useful for method chaining*/insertColumnsBefore(beforePosition:Integer,howMany:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a new [`DataSourceSheet`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-sheet.html) in the spreadsheet and starts data execution. As a\\nside effect, this also makes the new sheet the active sheet.\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n\\n```\\n// Activates BigQuery operations.\\nSpreadsheetApp.enableBigQueryExecution();\\n\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Builds a data source specification.\\n// TODO (developer): Update the project ID to your own Google Cloud project ID.\\nconst dataSourceSpec \\u003d SpreadsheetApp.newDataSourceSpec()\\n .asBigQuery()\\n .setProjectId('project-id-1')\\n .setTableProjectId('bigquery-public-data')\\n .setDatasetId('ncaa_basketball')\\n .setTableId('mbb_historical_teams_games')\\n .build();\\n\\n// Adds the data source and its data to the spreadsheet.\\nss.insertDataSourceSheet(dataSourceSpec);\\n```\\n@param spec The data source specification to insert with.\\n@return The new data source sheet.*/insertDataSourceSheet(spec:SpreadsheetApp.DataSourceSpec):SpreadsheetApp.DataSourceSheet;\\n/**Inserts a [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) as an image in the document at a given row and column. The image\\nsize is retrieved from the blob contents. The maximum supported blob size is 2MB.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar blob \\u003d Utilities.newBlob(binaryData, 'image/png', 'MyImageName');\\nsheet.insertImage(blob, 1, 1);\\n```\\n@param blobSource The blob containing the image contents, MIME type, and (optionally) name.\\n@param column The column position.\\n@param row The row position.\\n@return The inserted image.*/insertImage(blobSource:BlobSource,column:Integer,row:Integer):SpreadsheetApp.OverGridImage;\\n/**Inserts a [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) as an image in the document at a given row and column, with a\\npixel offset. The image size is retrieved from the blob contents. The maximum supported blob\\nsize is 2MB.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar blob \\u003d Utilities.newBlob(binaryData, 'image/png', 'MyImageName');\\nsheet.insertImage(blob, 1, 1, 10, 10);\\n```\\n@param blobSource The blob containing the image contents, MIME type, and (optionally) name.\\n@param column The column position.\\n@param row The row position.\\n@param offsetX The horizontal offset from cell corner in pixels.\\n@param offsetY The vertical offset from cell corner in pixels.\\n@return The inserted image.*/insertImage(blobSource:BlobSource,column:Integer,row:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.OverGridImage;\\n/**Inserts an image in the document at a given row and column.\\n\\nThe provided URL must be publicly accessible.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nsheet.insertImage(\\\"https://www.google.com/images/srpr/logo3w.png\\\", 1, 1);\\n```\\n@param url The URL of the image.\\n@param column The grid column position.\\n@param row The grid row position.\\n@return The inserted image.*/insertImage(url:string,column:Integer,row:Integer):SpreadsheetApp.OverGridImage;\\n/**Inserts an image in the document at a given row and column, with a pixel offset.\\n\\nThe provided URL must be publicly accessible.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nsheet.insertImage(\\\"https://www.google.com/images/srpr/logo3w.png\\\", 1, 1, 10, 10);\\n```\\n@param url The URL for the image.\\n@param column The column position.\\n@param row The row position.\\n@param offsetX The horizontal offset from cell corner in pixels.\\n@param offsetY The vertical offset from cell corner in pixels.\\n@return The Inserted image.*/insertImage(url:string,column:Integer,row:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.OverGridImage;\\n/**Inserts a row after the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts a row after the first row position\\nsheet.insertRowAfter(1);\\n```\\n@param afterPosition The row after which the new row should be added.\\n@return the sheet, useful for method chaining*/insertRowAfter(afterPosition:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a row before the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts a row before the first row position\\nsheet.insertRowBefore(1);\\n```\\n@param beforePosition The row before which the new row should be added.\\n@return the sheet, useful for method chaining*/insertRowBefore(beforePosition:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a number of rows after the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts five rows after the first row\\nsheet.insertRowsAfter(1, 5);\\n```\\n@param afterPosition The row after which the new rows should be added.\\n@param howMany The number of rows to insert.\\n@return the sheet, useful for method chaining*/insertRowsAfter(afterPosition:Integer,howMany:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a number of rows before the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts five rows before the first row\\nsheet.insertRowsBefore(1, 5);\\n```\\n@param beforePosition The row before which the new rows should be added.\\n@param howMany The number of rows to insert.\\n@return the sheet, useful for method chaining*/insertRowsBefore(beforePosition:Integer,howMany:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a new sheet into the spreadsheet, using a default sheet name. The new sheet becomes the\\nactive sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nss.insertSheet();\\n```\\n@return The new sheet.*/insertSheet():SpreadsheetApp.Sheet;\\n/**Inserts a new sheet into the spreadsheet at the given index. The new sheet becomes the active\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nss.insertSheet(1);\\n```\\n@param sheetIndex The index of the newly created sheet. To insert a sheet as the first one in\\n    the spreadsheet, set it to 0.\\n@return The new sheet.*/insertSheet(sheetIndex:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a new sheet into the spreadsheet at the given index and uses optional advanced\\narguments. The new sheet becomes the active sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar templateSheet \\u003d ss.getSheetByName('Sales');\\nss.insertSheet(1, {template: templateSheet});\\n```\\n@param sheetIndex The index of the newly created sheet. To insert a sheet as the first one in\\n    the spreadsheet, set it to 0.\\n@param options Optional JavaScript advanced arguments.\\n@return The new sheet.*/insertSheet(sheetIndex:Integer,options:Object):SpreadsheetApp.Sheet;\\n/**Inserts a new sheet into the spreadsheet, using a default sheet name and optional advanced\\narguments. The new sheet becomes the active sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar templateSheet \\u003d ss.getSheetByName('Sales');\\nss.insertSheet({template: templateSheet});\\n```\\n@param options Optional JavaScript advanced arguments, listed below.\\n@return The new sheet.*/insertSheet(options:Object):SpreadsheetApp.Sheet;\\n/**Inserts a new sheet into the spreadsheet with the given name. The new sheet becomes the active\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nss.insertSheet('My New Sheet');\\n```\\n@param sheetName The name of the new sheet.\\n@return The new sheet.*/insertSheet(sheetName:string):SpreadsheetApp.Sheet;\\n/**Inserts a new sheet into the spreadsheet with the given name at the given index. The new sheet\\nbecomes the active sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nss.insertSheet('My New Sheet', 1);\\n```\\n@param sheetName The name of the new sheet.\\n@param sheetIndex The index of the newly created sheet. To insert a sheet as the first one in\\n    the spreadsheet, set it to 0.\\n@return The new sheet.*/insertSheet(sheetName:string,sheetIndex:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a new sheet into the spreadsheet with the given name at the given index and uses\\noptional advanced arguments. The new sheet becomes the active sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar templateSheet \\u003d ss.getSheetByName('Sales');\\nss.insertSheet('My New Sheet', 1, {template: templateSheet});\\n```\\n@param sheetName The name of the new sheet.\\n@param sheetIndex The index of the newly inserted sheet. To insert a sheet as the first one in\\n    a spreadsheet, set it to 0.\\n@param options Optional JavaScript advanced arguments.\\n@return The new sheet.*/insertSheet(sheetName:string,sheetIndex:Integer,options:Object):SpreadsheetApp.Sheet;\\n/**Inserts a new sheet into the spreadsheet with the given name and uses optional advanced\\narguments. The new sheet becomes the active sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar templateSheet \\u003d ss.getSheetByName('Sales');\\nss.insertSheet('My New Sheet', {template: templateSheet});\\n```\\n@param sheetName The name of the new sheet.\\n@param options Optional JavaScript advanced arguments.\\n@return The new sheet.*/insertSheet(sheetName:string,options:Object):SpreadsheetApp.Sheet;\\n/**Inserts a new sheet in the spreadsheet, creates a [`DataSourceTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-table.html) spanning the\\nentire sheet with the given data source specification, and starts data execution. As a side\\neffect, makes the new sheet the active sheet.\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n\\n```\\n// Activates BigQuery operations.\\nSpreadsheetApp.enableBigQueryExecution();\\n\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Adds a sheet and sets cell A1 as the parameter cell.\\nconst parameterCell \\u003d ss.insertSheet('parameterSheet').getRange('A1');\\n\\n// Sets the value of the parameter cell to 'Duke'.\\nparameterCell.setValue('Duke');\\n\\nconst query \\u003d 'select * from `bigquery-public-data`.`ncaa_basketball`.' +\\n  '`mbb_historical_tournament_games` WHERE win_school_ncaa \\u003d @SCHOOL';\\n\\n// Adds a data source with a query parameter.\\n// TODO(developer): Update the project ID to your own Google Cloud project ID.\\nconst dataSourceSpec \\u003d SpreadsheetApp.newDataSourceSpec()\\n .asBigQuery()\\n .setProjectId('project-id-1')\\n .setRawQuery(query)\\n .setParameterFromCell('SCHOOL', 'parameterSheet!A1')\\n .build();\\n\\n// Adds sheets for the data source and data source table to the spreadsheet.\\nss.insertSheetWithDataSourceTable(dataSourceSpec);\\n```\\n@param spec The data source specification to insert with.\\n@return The new sheet.*/insertSheetWithDataSourceTable(spec:SpreadsheetApp.DataSourceSpec):SpreadsheetApp.Sheet;\\n/**Indicates whether the document allows anonymous viewing. As this is no longer supported in the\\n[new version of Google Sheets](https://support.google.com/drive/answer/3541068), use\\n[`File.getSharingAccess()`](https://developers.google.com/apps-script/reference/spreadsheet/../drive/file.html#getSharingAccess()) and [`File.getSharingPermission()`](https://developers.google.com/apps-script/reference/spreadsheet/../drive/file.html#getSharingPermission()) instead.\\n\\n```\\n// Determine if the document allows anonymous viewing via the Drive API.\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar file \\u003d DriveApp.getFileById(ss.getId());\\nvar access \\u003d file.getSharingAccess();\\nvar permission \\u003d file.getSharingPermission();\\nvar isAnonymousAccess \\u003d\\n    access \\u003d\\u003d DriveApp.Access.ANYONE || access \\u003d\\u003d DriveApp.Access.ANYONE_WITH_LINK;\\nvar isAnonymousEdit \\u003d isAnonymousAccess \\u0026\\u0026 permission !\\u003d DriveApp.Permission.NONE;\\n```\\n@deprecated\\n@return `true` if the document allows anonymous viewing, `false` otherwise.*/isAnonymousView():boolean;\\n/**Indicates whether the document allows edits from anonymous users. As this is no longer\\nsupported in the [new version of\\nGoogle Sheets](https://support.google.com/drive/answer/3541068), use [`File.getSharingAccess()`](https://developers.google.com/apps-script/reference/spreadsheet/../drive/file.html#getSharingAccess()) and [`File.getSharingPermission()`](https://developers.google.com/apps-script/reference/spreadsheet/../drive/file.html#getSharingPermission()) instead.\\n\\n```\\n// Determine if the document allow anonymous edits via the Drive API.\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar file \\u003d DriveApp.getFileById(ss.getId());\\nvar access \\u003d file.getSharingAccess();\\nvar permission \\u003d file.getSharingPermission();\\nvar isAnonymousAccess \\u003d\\n    access \\u003d\\u003d DriveApp.Access.ANYONE || access \\u003d\\u003d DriveApp.Access.ANYONE_WITH_LINK;\\nvar isAnonymousEdit \\u003d isAnonymousAccess \\u0026\\u0026 permission \\u003d\\u003d DriveApp.Permission.EDIT;\\n```\\n@deprecated\\n@return `true` if the document allows anonymous editing, `false` otherwise.*/isAnonymousWrite():boolean;\\n/**Returns whether the given column is hidden by the user.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Columns start at 1\\nLogger.log(sheet.isColumnHiddenByUser(1));\\n```\\n@param columnPosition The position of the column to examine.\\n@return `true` if the column is hidden, `false` otherwise.*/isColumnHiddenByUser(columnPosition:Integer):boolean;\\n/**Returns whether iterative calculation is activated in this spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Activates iterative calculation on the spreadsheet.\\nss.setIterativeCalculationEnabled(true);\\n\\n// Logs whether iterative calculation is activated for the spreadsheet.\\nconsole.log(ss.isIterativeCalculationEnabled());\\n```\\n@return `true` if iterative calculation is activated, `false` otherwise.*/isIterativeCalculationEnabled():boolean;\\n/**Returns whether the given row is hidden by a filter (not a filter view).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Rows start at 1\\nLogger.log(sheet.isRowHiddenByFilter(1));\\n```\\n@param rowPosition The position of the row to examine.\\n@return `true` if the row is hidden, `false` otherwise.*/isRowHiddenByFilter(rowPosition:Integer):boolean;\\n/**Returns whether the given row is hidden by the user.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Rows start at 1\\nLogger.log(sheet.isRowHiddenByUser(1));\\n```\\n@param rowPosition The position of the row to examine.\\n@return `true` if the row is hidden, `false` otherwise.*/isRowHiddenByUser(rowPosition:Integer):boolean;\\n/**Moves the active sheet to the given position in the list of sheets. Throws an exception if the\\nposition is negative or greater than the number of sheets.\\n\\n```\\n// This example assumes that there are 2 sheets in the current\\n// active spreadsheet: one named \\\"first\\\" in position 1 and another named \\\"second\\\"\\n// in position 2.\\nvar spreadsheet \\u003d SpreadsheetApp.getActiveSpreadsheet();\\n// Gets the \\\"first\\\" sheet and activates it.\\nvar sheet \\u003d spreadsheet.getSheetByName(\\\"first\\\").activate();\\n\\n// Logs 'Current index of sheet: 1'\\nconsole.log(\\\"Current index of sheet: %s\\\", sheet.getIndex());\\n\\nspreadsheet.moveActiveSheet(2);\\n\\n// Logs 'New index of sheet: 2'\\nconsole.log(\\\"New index of sheet: %s\\\", sheet.getIndex());\\n```\\n@param pos The 1-index position to move the active sheet to in the list of sheets.*/moveActiveSheet(pos:Integer):void;\\n/**Creates a new [`SheetType.OBJECT`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html#OBJECT) sheet and moves the provided chart to it. If the chart\\nis already on its own sheet, that sheet is returned without creating a new one.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar chart \\u003d sheet.newChart().setPosition(1, 1, 0, 0).build();\\nsheet.insertChart(chart);\\nvar objectSheet \\u003d SpreadsheetApp.getActive().moveChartToObjectSheet(chart);\\n```\\n@param chart The chart to move.\\n@return The sheet that the chart is on.*/moveChartToObjectSheet(chart:SpreadsheetApp.EmbeddedChart):SpreadsheetApp.Sheet;\\n/**Refreshes all supported data sources and their linked data source objects, skipping invalid\\ndata source objects.\\n\\nUse `SpreadsheetApp#enable...Execution()` methods to enable data execution for\\nspecific data source type.\\n\\n```\\n// Activates BigQuery operations.\\nSpreadsheetApp.enableBigQueryExecution();\\n\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets the first data source sheet on the spreadsheet.\\nconst dataSheet \\u003d ss.getDataSourceSheets()[0];\\n\\n// Refreshes all data sources on the spreadsheet.\\nss.refreshAllDataSources();\\n\\n// Logs the last refreshed time of the first data source sheet.\\nconsole.log(`Last refresh time: ${dataSheet.getStatus().getLastRefreshedTime()}`);\\n```*/refreshAllDataSources():void;\\n/**Removes the given user from the list of editors for the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html). This method doesn't\\nblock users from accessing the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) is shared with the user's entire\\ndomain, or if the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param emailAddress The email address of the user to remove.\\n@return This [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html), for chaining.*/removeEditor(emailAddress:string):SpreadsheetApp.Spreadsheet;\\n/**Removes the given user from the list of editors for the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html). This method doesn't\\nblock users from accessing the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) if they belong to a class of users who have\\ngeneral access—for example, if the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) is shared with the user's entire\\ndomain, or if the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of viewers.\\n@param user A representation of the user to remove.\\n@return This [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html), for chaining.*/removeEditor(user:User):SpreadsheetApp.Spreadsheet;\\n/**Removes a menu that was added by [`addMenu(name, subMenus)`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#addMenu(String,Object)). The `name` argument\\nshould have the same value as the corresponding call to [`addMenu(name, subMenus)`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#addMenu(String,Object)).\\n\\n```\\n// The onOpen function is executed automatically every time a Spreadsheet is loaded\\nfunction onOpen() {\\n  var ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\n  ss.addMenu(\\\"badMenu\\\", [{name: \\\"remove bad menu\\\", functionName: \\\"removeBadMenu\\\"},\\n                                       {name: \\\"foo\\\", functionName: \\\"foo\\\"}]);\\n}\\nfunction removeBadMenu() {\\n  var ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\n  ss.removeMenu(\\\"badMenu\\\");  // name must match the name used when added the menu\\n}\\nfunction foo(){\\n// Do nothing\\n}\\n```\\n@param name The name of the menu to remove.*/removeMenu(name:string):void;\\n/**Deletes a named range with the given name. Throws an exception if no range with the given name\\nis found in the spreadsheet.\\n\\n```\\n// The code below creates a new named range \\\"foo\\\", and then remove it.\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nss.setNamedRange(\\\"foo\\\", ss.getActiveRange());\\nss.removeNamedRange(\\\"foo\\\");\\n```\\n@param name The range name.*/removeNamedRange(name:string):void;\\n/**Removes the given user from the list of viewers and commenters for the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html). This\\nmethod has no effect if the user is an editor, not a viewer or commenter. This method also\\ndoesn't block users from accessing the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) if they belong to a class of users who\\nhave general access—for example, if the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) is shared with the user's\\nentire domain, or if the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param emailAddress The email address of the user to remove.\\n@return This [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) for chaining.*/removeViewer(emailAddress:string):SpreadsheetApp.Spreadsheet;\\n/**Removes the given user from the list of viewers and commenters for the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html). This\\nmethod has no effect if the user is an editor, not a viewer. This method also doesn't block\\nusers from accessing the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) if they belong to a class of users who have general\\naccess—for example, if the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) is shared with the user's entire domain, or\\nif the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) is in a shared drive that the user can access.\\n\\nFor Drive files, this also removes the user from the list of editors.\\n@param user A representation of the user to remove.\\n@return This [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) for chaining.*/removeViewer(user:User):SpreadsheetApp.Spreadsheet;\\n/**Renames the document.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nss.rename(\\\"This is the new name\\\");\\n```\\n@param newName The new name for the document.*/rename(newName:string):void;\\n/**Renames the current active sheet to the given new name.\\n\\n```\\n// The code below renames the active sheet to \\\"Hello world\\\"\\nSpreadsheetApp.getActiveSpreadsheet().renameActiveSheet(\\\"Hello world\\\");\\n```\\n@param newName The new name for the current active sheet.*/renameActiveSheet(newName:string):void;\\n/**Removes the applied theme and sets the default theme on the spreadsheet.\\n\\n```\\n// The code below applies default theme on the spreadsheet.\\nSpreadsheetApp.getActiveSpreadsheet().resetSpreadsheetTheme();\\n```\\n@return The default theme.*/resetSpreadsheetTheme():SpreadsheetApp.SpreadsheetTheme;\\n/**Sets the specified range as the [`active range`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#getActiveRange()) in the active sheet, with\\nthe top left cell in the range as the [`current cell`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#getCurrentCell()).\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\nvar range \\u003d sheet.getRange('A1:D4');\\nsheet.setActiveRange(range);\\n\\nvar selection \\u003d sheet.getSelection();\\n// Current cell: A1\\nvar currentCell \\u003d selection.getCurrentCell();\\n// Active Range: A1:D4\\nvar activeRange \\u003d selection.getActiveRange();\\n```\\n@param range The range to set as the active range.\\n@return the newly active range*/setActiveRange(range:SpreadsheetApp.Range):SpreadsheetApp.Range;\\n/**Sets the specified list of ranges as the [`active ranges`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#getActiveRangeList()) in the\\nactive sheet. The last range in the list is set as the [`active range`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#getActiveRange()).\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['D4', 'B2:C4']);\\nsheet.setActiveRangeList(rangeList);\\n\\nvar selection \\u003d sheet.getSelection();\\n// Current cell: B2\\nvar currentCell \\u003d selection.getCurrentCell();\\n// Active range: B2:C4\\nvar activeRange \\u003d selection.getActiveRange();\\n// Active range list: [D4, B2:C4]\\nvar activeRangeList \\u003d selection.getActiveRangeList();\\n```\\n@param rangeList The list of ranges to select.\\n@return the newly selected list of ranges*/setActiveRangeList(rangeList:SpreadsheetApp.RangeList):SpreadsheetApp.RangeList;\\n/**Sets the active selection region for this sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:D4\\\");\\nsheet.setActiveSelection(range);\\n```\\n@param range The range to set as the active selection.\\n@return the newly active range*/setActiveSelection(range:SpreadsheetApp.Range):SpreadsheetApp.Range;\\n/**Sets the active selection, as specified in A1 notation or R1C1 notation.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nsheet.setActiveSelection(\\\"A1:D4\\\");\\n```\\n@param a1Notation The range to set as active, as specified in A1 notation or R1C1 notation.\\n@return the newly active range*/setActiveSelection(a1Notation:string):SpreadsheetApp.Range;\\n/**Sets the given sheet to be the active sheet in the spreadsheet. The Google Sheets UI displays\\nthe chosen sheet unless the sheet belongs to a different spreadsheet.\\n\\n```\\n// The code below makes the first sheet active in the active spreadsheet.\\nvar spreadsheet \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nspreadsheet.setActiveSheet(spreadsheet.getSheets()[0]);\\n```\\n@param sheet The sheet to set as the active sheet.\\n@return The active sheet.*/setActiveSheet(sheet:SpreadsheetApp.Sheet):SpreadsheetApp.Sheet;\\n/**Sets the given sheet to be the active sheet in the spreadsheet, with an option to restore the\\nmost recent selection within that sheet. The Google Sheets UI displays the chosen sheet unless\\nthe sheet belongs to a different spreadsheet.\\n\\n```\\nvar spreadsheet \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar firstSheet \\u003d spreadsheet.getSheets()[0];\\nvar secondSheet \\u003d spreadsheet.getSheets()[1];\\n// Set the first sheet as the active sheet and select the range D4:F4.\\nspreadsheet.setActiveSheet(firstSheet).getRange('D4:F4').activate();\\n\\n// Switch to the second sheet to do some work.\\nspreadsheet.setActiveSheet(secondSheet);\\n// Switch back to first sheet, and restore its selection.\\nspreadsheet.setActiveSheet(firstSheet, true);\\n\\n// The selection of first sheet is restored, and it logs D4:F4\\nvar range \\u003d spreadsheet.getActiveSheet().getSelection().getActiveRange();\\nLogger.log(range.getA1Notation());\\n```\\n@param sheet The new active sheet.\\n@param restoreSelection Tf `true`, the most recent selection of the new active sheet\\n    becomes selected again as the new sheet becomes active; if `false`, the new sheet\\n    becomes active without changing the current selection.\\n@return The new active sheet.*/setActiveSheet(sheet:SpreadsheetApp.Sheet,restoreSelection:boolean):SpreadsheetApp.Sheet;\\n/**Sets the document's policy on anonymous reading and writing. As this is no longer supported in\\nthe [new version of Google Sheets](https://support.google.com/drive/answer/3541068),\\nuse [`File.setSharing(accessType, permissionType)`](https://developers.google.com/apps-script/reference/spreadsheet/../drive/file.html#setSharing(Access,Permission)) as an alternative.\\n\\n```\\n// Set the document's policy on anonymous reading and writing via the Drive API.\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar file \\u003d DriveApp.getFileById(ss.getId());\\n\\n// Set anonymous read.\\nfile.setSharing(DriveApi.Access.ANYONE, DriveApi.Permission.VIEW);\\n\\n// Set anonymous write.\\nfile.setSharing(DriveApi.Access.ANYONE, DriveApi.Permission.EDIT);\\n\\n// Disable anonymous access.\\nfile.setSharing(DriveApi.Access.PRIVATE, file.getSharingPermission());\\n```\\n@deprecated\\n@param anonymousReadAllowed `true` to allow anonymous reads; `false` otherwise.\\n@param anonymousWriteAllowed `true` to allow anonymous reads; `false` otherwise.*/setAnonymousAccess(anonymousReadAllowed:boolean,anonymousWriteAllowed:boolean):void;\\n/**Sets the width of the given column in pixels.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sets the first column to a width of 200 pixels\\nsheet.setColumnWidth(1, 200);\\n```\\n@param columnPosition The position of the given column to set.\\n@param width The width in pixels to set it to.\\n@return the sheet, useful for method chaining*/setColumnWidth(columnPosition:Integer,width:Integer):SpreadsheetApp.Sheet;\\n/**Sets the specified cell as the [`current cell`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#getCurrentCell()).\\n\\nIf the specified cell is present in an already selected range, then that range becomes the\\nactive range with the cell as the current cell.\\n\\nIf the specified cell is not present in any selected range, then any existing selection is\\nremoved and the cell becomes the current cell and the active range.\\n\\n__Note:__The specified [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) must consist of one cell, otherwise it throws an\\nexception.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\nvar cell \\u003d sheet.getRange('B5');\\nsheet.setCurrentCell(cell);\\n\\nvar selection \\u003d sheet.getSelection();\\n// Current cell: B5\\nvar currentCell \\u003d selection.getCurrentCell();\\n```\\n@param cell The cell to set as the current cell.\\n@return the newly set current cell*/setCurrentCell(cell:SpreadsheetApp.Range):SpreadsheetApp.Range;\\n/**Freezes the given number of columns. If zero, no columns are frozen.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Freezes the first column\\nsheet.setFrozenColumns(1);\\n```\\n@param columns The number of columns to freeze.*/setFrozenColumns(columns:Integer):void;\\n/**Freezes the given number of rows. If zero, no rows are frozen.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Freezes the first row\\nsheet.setFrozenRows(1);\\n```\\n@param rows The number of rows to freeze.*/setFrozenRows(rows:Integer):void;\\n/**Sets the minimum threshold value for iterative calculation. When the results of successive\\ncalculation differ by less than this value, the iterative calculation stops. This value must be\\nnon-negative, and defaults to 0.05.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Sets the iterative calculation convergence threshold for the spreadsheet.\\nss.setIterativeCalculationConvergenceThreshold(2);\\n\\n// Logs the threshold to the console.\\nconsole.log(ss.getIterativeCalculationConvergenceThreshold());\\n```\\n@param minThreshold The minimum convergence threshold (must be non-negative).\\n@return This spreadsheet, for chaining.*/setIterativeCalculationConvergenceThreshold(minThreshold:number):SpreadsheetApp.Spreadsheet;\\n/**Sets whether iterative calculation is activated in this spreadsheet. If the maximum number of\\ncalculation cycles and convergence threshold have not previously been set when the calculation\\nis activated, they default to 50 and 0.05 respectively. If either has been set previously, they\\nretain their previous values.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Activates iterative calculation on the spreadsheet.\\nss.setIterativeCalculationEnabled(true);\\n\\n// Logs whether iterative calculation is activated for the spreadsheet.\\nconsole.log(ss.isIterativeCalculationEnabled());\\n```\\n@param isEnabled `true` if iterative calculation should be enabled; `false`\\n    otherwise.\\n@return This spreadsheet, for chaining.*/setIterativeCalculationEnabled(isEnabled:boolean):SpreadsheetApp.Spreadsheet;\\n/**Sets the maximum number of calculation iterations that should be performed during iterative\\ncalculation. This value must be between 1 and 10,000 (inclusive), and defaults to 50.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Sets the max iterative calculation cycles for the spreadsheet.\\nss.setMaxIterativeCalculationCycles(10);\\n\\n// Logs the max iterative calculation cycles to the console.\\nconsole.log(ss.getMaxIterativeCalculationCycles());\\n```\\n@param maxIterations The maximum number of calculation iterations (between 1 and 10,000).\\n@return This spreadsheet, for chaining.*/setMaxIterativeCalculationCycles(maxIterations:Integer):SpreadsheetApp.Spreadsheet;\\n/**Names a range.\\n\\n```\\n// The code below creates a new named range \\\"TaxRates\\\" in the active spreadsheet\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nss.setNamedRange(\\\"TaxRates\\\", SpreadsheetApp.getActiveRange());\\n```\\n@param name The name to give the range.\\n@param range The range specification.*/setNamedRange(name:string,range:SpreadsheetApp.Range):void;\\n/**Sets how often this spreadsheet should recalculate.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Sets the  calculation interval for the spreadsheet to 'ON_CHANGE'.\\nconst interval \\u003d ss.setRecalculationInterval(SpreadsheetApp.RecalculationInterval.ON_CHANGE);\\n\\n// Logs the calculation interval to the console.\\nconsole.log(interval);\\n```\\n@param recalculationInterval The new recalculation interval.\\n@return This spreadsheet, for chaining.*/setRecalculationInterval(recalculationInterval:SpreadsheetApp.RecalculationInterval):SpreadsheetApp.Spreadsheet;\\n/**Sets the row height of the given row in pixels. By default, rows grow to fit cell contents. If\\nyou want to force rows to a specified height, use [`Sheet.setRowHeightsForced(startRow, numRows, height)`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#setRowHeightsForced(Integer,Integer,Integer)).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sets the first row to a height of 200 pixels\\nsheet.setRowHeight(1, 200);\\n```\\n@param rowPosition The row position to change.\\n@param height The height in pixels to set it to.\\n@return The sheet, useful for method chaining.*/setRowHeight(rowPosition:Integer,height:Integer):SpreadsheetApp.Sheet;\\n/**Sets the permissions for the current sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar permissions \\u003d sheet.getSheetProtection();\\n\\n// This copies the permissions on the first sheet to the second sheet\\nvar sheetToClonePermissionsTo \\u003d ss.getSheets()[1];\\nsheetToClonePermissionsTo.setSheetProtection(permissions);\\n```\\n@deprecated\\n@param permissions The access permissions object to set on this sheet.*/setSheetProtection(permissions:SpreadsheetApp.PageProtection):void;\\n/**Sets the spreadsheet locale.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Sets the spreadsheet locale.\\nss.setSpreadsheetLocale('fr');\\n\\n// Gets the spreadsheet locale.\\nconst ssLocale \\u003d ss.getSpreadsheetLocale();\\n\\n// Logs the locale to the console.\\nconsole.log(ssLocale);\\n```\\n@param locale The locale code to use (for example, 'en', 'fr', or 'en_US').*/setSpreadsheetLocale(locale:string):void;\\n/**Sets a theme on the spreadsheet.\\n\\n```\\nvar spreadsheet \\u003d SpreadsheetApp.getActiveSpreadsheet();\\n// The code below sets the second predefined theme as the current theme of the spreadsheet.\\nvar predefinedThemesList \\u003d spreadsheet.getPredefinedSpreadsheetThemes();\\nspreadsheet.setSpreadsheetTheme(predefinedThemesList[1]);\\n```\\n@param theme The theme to apply.\\n@return The new current theme.*/setSpreadsheetTheme(theme:SpreadsheetApp.SpreadsheetTheme):SpreadsheetApp.SpreadsheetTheme;\\n/**Sets the time zone for the spreadsheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Sets the time zone of the spreadsheet.\\nss.setSpreadsheetTimeZone('America/New_York');\\n\\n// Gets the time zone of the spreadsheet.\\nconst ssTimeZone \\u003d ss.getSpreadsheetTimeZone();\\n\\n// Logs the time zone to the console.\\nconsole.log(ssTimeZone);\\n```\\n@param timezone The time zone, specified in \\\"long\\\" format (for example, \\\"America/New_York\\\", as\\n    listed by [Joda.org](http://joda-time.sourceforge.net/timezones.html)).*/setSpreadsheetTimeZone(timezone:string):void;\\n/**Displays a custom user interface component in a dialog centered in the user's browser's\\nviewport. The server-side script's execution is _not_ suspended. To communicate with the\\nserver side, the user interface component must make asynchronous callbacks to the server-side\\nscript.\\n\\nIf the server-side script previously displayed a dialog that has not yet been dismissed,\\nthen the existing dialog is replaced with the newly requested dialog's user interface.\\n\\nThe following code snippet displays a simple [`HtmlService`](https://developers.google.com/apps-script/reference/spreadsheet/../html/html-service.html) application in a dialog with the\\nspecified title, height, and width:\\n\\n```\\nvar htmlApp \\u003d HtmlService\\n    .createHtmlOutput('\\u003cp\\u003eA change of speed, a change of style...\\u003c/p\\u003e')\\n    .setTitle('My HtmlService Application')\\n    .setWidth(250)\\n    .setHeight(300);\\n\\nSpreadsheetApp.getActiveSpreadsheet().show(htmlApp);\\n\\n// The script resumes execution immediately after showing the dialog.\\n```\\n@param userInterface An [`HtmlOutput`](https://developers.google.com/apps-script/reference/spreadsheet/../html/html-output.html).*/show(userInterface:Object):void;\\n/**Sorts a sheet by column, ascending.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sorts the sheet by the first column, ascending\\nsheet.sort(1);\\n```\\n@param columnPosition The column to sort by.\\n@return the sheet, useful for method chaining*/sort(columnPosition:Integer):SpreadsheetApp.Sheet;\\n/**Sorts a sheet by column. Takes a parameter to specify ascending or descending.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sorts the sheet by the first column, descending\\nsheet.sort(1, false);\\n```\\n@param columnPosition The column to sort by.\\n@param ascending `true` for ascending sorts, `false` for descending.\\n@return the sheet, useful for method chaining*/sort(columnPosition:Integer,ascending:boolean):SpreadsheetApp.Sheet;\\n/**Shows a popup window in the lower right corner of the spreadsheet with the given message.\\n\\n```\\n// Show a popup with the message \\\"Task started\\\".\\nSpreadsheetApp.getActiveSpreadsheet().toast('Task started');\\n```\\n@param msg The message to be shown in the toast.*/toast(msg:string):void;\\n/**Shows a popup window in the lower right corner of the spreadsheet with the given message and\\ntitle.\\n\\n```\\n// Show a popup with the title \\\"Status\\\" and the message \\\"Task started\\\".\\nSpreadsheetApp.getActiveSpreadsheet().toast('Task started', 'Status');\\n```\\n@param msg The message to be shown in the toast.\\n@param title The optional title of the toast.*/toast(msg:string,title:string):void;\\n/**Shows a popup window in the lower right corner of the spreadsheet with the given title and\\nmessage, that stays visible for a certain length of time.\\n\\n```\\n// Show a 3-second popup with the title \\\"Status\\\" and the message \\\"Task started\\\".\\nSpreadsheetApp.getActiveSpreadsheet().toast('Task started', 'Status', 3);\\n```\\n@param msg The message to be shown in the toast.\\n@param title The optional title of the toast.\\n@param timeoutSeconds The timeout in seconds; if `null`, the toast defaults to 5 seconds;\\n    if negative, the toast remains until dismissed.*/toast(msg:string,title:string,timeoutSeconds:number):void;\\n/**Unhides the column in the given range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This unhides the first column if it was previously hidden\\nvar range \\u003d sheet.getRange(\\\"A1\\\");\\nsheet.unhideColumn(range);\\n```\\n@param column The range to unhide, if hidden.*/unhideColumn(column:SpreadsheetApp.Range):void;\\n/**Unhides the row in the given range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This unhides the first row if it was previously hidden\\nvar range \\u003d sheet.getRange(\\\"A1\\\");\\nsheet.unhideRow(range);\\n```\\n@param row The range to unhide, if hidden.*/unhideRow(row:SpreadsheetApp.Range):void;\\n/**Updates a menu that was added by [`addMenu(name, subMenus)`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#addMenu(String,Object)). Works exactly like [`addMenu(name, subMenus)`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#addMenu(String,Object)).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar menuEntries \\u003d [];\\nmenuEntries.push({name: \\\"Lone Menu Entry\\\", functionName: \\\"function1\\\"});\\nss.updateMenu(\\\"addMenuExample\\\", menuEntries);\\n```\\n@param name The name of the menu to update.\\n@param subMenus An array of JavaScript maps with `name` and `functionName` parameters. You can use functions from included libraries, such as \\n\\n```\\n    Library.libFunction1```\\n\\n.*/updateMenu(name:string,subMenus:Object[]):void;\\n/**Waits until all the current executions in the spreadsheet complete, timing out after the\\nprovided number of seconds. Throws an exception if the executions are not completed when timing\\nout, but does not cancel the data executions.\\n@param timeoutInSeconds The time to wait for data executions, in seconds. The maximum is 300\\n    seconds.*/waitForAllDataExecutionsCompletion(timeoutInSeconds:Integer):void;}interface SortSpec{\\n/**Returns the background color used for sorting, or `null` if absent.\\n@return The background color.*/getBackgroundColor():SpreadsheetApp.Color;\\n/**Gets the data source column the sort spec acts on. Returns `null` if this sort spec is\\nnot acting on a data source column.\\n@return The data source column the sort spec acts on.*/getDataSourceColumn():SpreadsheetApp.DataSourceColumn;\\n/**Returns the dimension index or `null` if not linked to a local filter.\\n@return The dimension index.*/getDimensionIndex():Integer;\\n/**Returns the foreground color used for sorting, or `null` if absent.\\n@return The foreground color.*/getForegroundColor():SpreadsheetApp.Color;\\n/**Returns the sort order.\\n@return The sort order.*/getSortOrder():SpreadsheetApp.SortOrder;\\n/**Returns whether the sort order is ascending.\\n@return `true` if the sort order is ascending, or `false` otherwise.*/isAscending():boolean;}interface SortOrder{}interface _SortOrder{\\n/**Ascending sort order.*/ASCENDING:SortOrder;\\n/**Descending sort order.*/DESCENDING:SortOrder;}interface Slicer{\\n/**Returns the background color of the slicer in CSS notation (such as '#ffffff').\\n@deprecated\\n@return The background color of this slicer. Returns `null` if no color is set.*/getBackgroundColor():string;\\n/**Return the background [`Color`](https://developers.google.com/apps-script/reference/spreadsheet/color.html) of the slicer.\\n@return The background color of this slicer. Returns `null` if no color is set.*/getBackgroundColorObject():SpreadsheetApp.Color;\\n/**Returns the column position (relative to the data range of the slicer) on which the filter is\\napplied in the slicer, or `null` if the column position is not set. This should be\\n1-indexed position of the column similar to filter.\\n@return The column position of this slicer.*/getColumnPosition():Integer;\\n/**Gets information about where the slicer is positioned in the sheet.\\n@return An object containing the slicer's container position.*/getContainerInfo():SpreadsheetApp.ContainerInfo;\\n/**Returns the filter criteria of the slicer, or `null` if the filter criteria is not set.\\n@return The filter criteria of this slicer.*/getFilterCriteria():SpreadsheetApp.FilterCriteria;\\n/**Gets the data range on which the slicer is applied to.\\n@return The slicer range.*/getRange():SpreadsheetApp.Range;\\n/**Returns the title of the slicer.\\n@return This slicer, for chaining.*/getTitle():string;\\n/**Gets the horizontal alignment of the title.\\n@return The horizontal alignment of this slicer's title.*/getTitleHorizontalAlignment():string;\\n/**Returns the text style of the slicer's title.\\n@return The text style of this slicer's title.*/getTitleTextStyle():SpreadsheetApp.TextStyle;\\n/**Returns whether the given slicer is applied to pivot tables.\\n@return `true` if this slicer is applied to pivot tables, otherwise `false`.*/isAppliedToPivotTables():boolean;\\n/**Deletes the slicer.*/remove():void;\\n/**Sets if the given slicer should be applied to pivot tables in the worksheet.\\n@param applyToPivotTables Specifies whether this slicer should apply to pivot tables.\\n@return This slicer, for chaining.*/setApplyToPivotTables(applyToPivotTables:boolean):SpreadsheetApp.Slicer;\\n/**Sets the background color of the slicer. A `null` value resets the background color.\\n@param color The new background color of this slicer in CSS notation (such as '#ffffff').\\n@return This slicer, for chaining.*/setBackgroundColor(color:string):SpreadsheetApp.Slicer;\\n/**Sets the background [`Color`](https://developers.google.com/apps-script/reference/spreadsheet/color.html) of the slicer. A `null` value resets the background\\ncolor.\\n@param color The new background color of this slicer.\\n@return This slicer, for chaining.*/setBackgroundColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Slicer;\\n/**Sets the column index and filtering criteria of the slicer. A `null` value resets the\\nslicer filter.\\n@param columnPosition The new column position of this slicer.\\n@param filterCriteria The new filter criteria of this slicer.\\n@return This slicer, for chaining.*/setColumnFilterCriteria(columnPosition:Integer,filterCriteria:SpreadsheetApp.FilterCriteria):SpreadsheetApp.Slicer;\\n/**Sets the position where the slicer appears on the sheet. The anchor row and column position\\nindices are 1-indexed.\\n@param anchorRowPos The slicer's top side is anchored in this row.\\n@param anchorColPos The slicer's top side is anchored in this col.\\n@param offsetX The horizontal offset from cell corner in pixels.\\n@param offsetY The vertical offset from cell corner in pixels.\\n@return This slicer, for chaining.*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.Slicer;\\n/**Sets the data range on which the slicer is applied.\\n@param rangeApi The new range for this slicer.\\n@return This slicer, for chaining.*/setRange(rangeApi:SpreadsheetApp.Range):SpreadsheetApp.Slicer;\\n/**Sets the title of the slicer. An empty title resets the title to default value.\\n@param title The new title of this slicer.\\n@return This slicer, for chaining.*/setTitle(title:string):SpreadsheetApp.Slicer;\\n/**Sets the horizontal alignment of the title in the slicer. A `null` value resets the\\nalignment.\\n@param horizontalAlignment The new horizontal alignment of this slicer's title.\\n@return This slicer, for chaining.*/setTitleHorizontalAlignment(horizontalAlignment:string):SpreadsheetApp.Slicer;\\n/**Sets the text style of the slicer.\\n@param textStyle The new text style of the slicer's title.\\n@return This slicer, for chaining.*/setTitleTextStyle(textStyle:SpreadsheetApp.TextStyle):SpreadsheetApp.Slicer;}interface SheetType{}interface _SheetType{\\n/**A sheet containing a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html).*/DATASOURCE:SheetType;\\n/**A sheet containing a grid. This is the default type.*/GRID:SheetType;\\n/**A sheet containing a single embedded object such as an [`EmbeddedChart`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-chart.html).*/OBJECT:SheetType;}interface Sheet{\\n/**Activates this sheet. Does not alter the sheet itself, only the parent's notion of the active\\nsheet.\\n\\n```\\n// This example assumes there is a sheet named \\\"first\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"first\\\");\\nfirst.activate();\\n```\\n@return The newly active sheet.*/activate():SpreadsheetApp.Sheet;\\n/**Adds developer metadata with the specified key to the sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Adds the key 'NAME' to the developer metadata for the sheet.\\nsheet.addDeveloperMetadata('NAME');\\n\\n// Gets the updated metadata info and logs it to the console.\\nconsole.log(sheet.getDeveloperMetadata()[0].getKey());\\n```\\n@param key The key for the new developer metadata.\\n@return This sheet, for chaining.*/addDeveloperMetadata(key:string):SpreadsheetApp.Sheet;\\n/**Adds developer metadata with the specified key and visibility to the sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Adds the key 'NAME' and sets the developer metadata visibility to PROJECT\\n// for the sheet.\\nsheet.addDeveloperMetadata('NAME', SpreadsheetApp.DeveloperMetadataVisibility.PROJECT);\\n\\n// Gets the updated metadata info and logs it to the console.\\nconst developerMetaData \\u003d sheet.getDeveloperMetadata()[0];\\nconsole.log(developerMetaData.getKey());\\nconsole.log(developerMetaData.getVisibility().toString());\\n```\\n@param key The key for the new developer metadata.\\n@param visibility The visibility of the new developer metadata.\\n@return This sheet, for chaining.*/addDeveloperMetadata(key:string,visibility:SpreadsheetApp.DeveloperMetadataVisibility):SpreadsheetApp.Sheet;\\n/**Adds developer metadata with the specified key and value to the sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Adds the key 'COMPANY' with the value 'TECH' to the developer metadata for the sheet.\\nsheet.addDeveloperMetadata('COMPANY', 'TECH');\\n\\n// Gets the updated metadata info and logs it to the console.\\nconst developerMetaData \\u003d sheet.getDeveloperMetadata()[0];\\nconsole.log(developerMetaData.getKey());\\nconsole.log(developerMetaData.getValue());\\n```\\n@param key The key for the new developer metadata.\\n@param value The value for the new developer metadata.\\n@return This sheet, for chaining.*/addDeveloperMetadata(key:string,value:string):SpreadsheetApp.Sheet;\\n/**Adds developer metadata with the specified key, value, and visibility to the sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Adds the key 'COMPANY' with the value 'TECH' to the developer metadata and sets the\\n// visibility to DOCUMENT for the sheet.\\nsheet.addDeveloperMetadata(\\n  'COMPANY',\\n  'TECH',\\n  SpreadsheetApp.DeveloperMetadataVisibility.DOCUMENT);\\n\\n// Gets the updated metadata info and logs it to the console.\\nconst developerMetaData \\u003d sheet.getDeveloperMetadata()[0];\\nconsole.log(developerMetaData.getKey());\\nconsole.log(developerMetaData.getValue());\\nconsole.log(developerMetaData.getVisibility().toString());\\n```\\n@param key The key for the new developer metadata.\\n@param value The value for the new developer metadata.\\n@param visibility The visibility of the new developer metadata.\\n@return This sheet, for chaining.*/addDeveloperMetadata(key:string,value:string,visibility:SpreadsheetApp.DeveloperMetadataVisibility):SpreadsheetApp.Sheet;\\n/**Appends a row to the bottom of the current data region in the sheet. If a cell's content begins\\nwith `\\u003d`, it's interpreted as a formula.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Appends a new row with 3 columns to the bottom of the current\\n// data region in the sheet containing the values in the array.\\nsheet.appendRow([\\\"a man\\\", \\\"a plan\\\", \\\"panama\\\"]);\\n```\\n@param rowContents An array of values to insert after the last row in the sheet.\\n@return The sheet, useful for method chaining.*/appendRow(rowContents:Object[]):SpreadsheetApp.Sheet;\\n/**Returns the sheet as a [`DataSourceSheet`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-sheet.html) if the sheet is of type [`SheetType.DATASOURCE`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html#DATASOURCE), or `null` otherwise.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can useSpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the data source sheet value if the sheet is of type\\n// SpreadsheetApp.SheetType.DATASOURCE, otherwise this returns a null value.\\nconst dataSourceSheet \\u003d sheet.asDataSourceSheet();\\n\\n// Gets the data source sheet value and logs it to the console.\\nconsole.log(dataSourceSheet);\\nconsole.log(sheet.getType().toString());\\n```\\n@return A data source sheet.*/asDataSourceSheet():SpreadsheetApp.DataSourceSheet;\\n/**Sets the width of the given column to fit its contents.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nsheet.getRange('a1').setValue('Whenever it is a damp, drizzly November in my soul...');\\n\\n// Sets the first column to a width which fits the text\\nsheet.autoResizeColumn(1);\\n```\\n@param columnPosition The position of the given column to resize.\\n@return the sheet, useful for method chaining*/autoResizeColumn(columnPosition:Integer):SpreadsheetApp.Sheet;\\n/**Sets the width of all columns starting at the given column position to fit their contents.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sets the first 15 columns to a width that fits their text.\\nsheet.autoResizeColumns(1, 15);\\n```\\n@param startColumn The starting column to auto-resize.\\n@param numColumns The number of columns to auto-resize.\\n@return This sheet, for chaining.*/autoResizeColumns(startColumn:Integer,numColumns:Integer):SpreadsheetApp.Sheet;\\n/**Sets the height of all rows starting at the given row position to fit their contents.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sets the first 15 rows to a height that fits their text.\\nsheet.autoResizeRows(1, 15);\\n```\\n@param startRow The starting row to auto-resize.\\n@param numRows The number of rows to auto-resize.\\n@return This sheet, for chaining.*/autoResizeRows(startRow:Integer,numRows:Integer):SpreadsheetApp.Sheet;\\n/**Clears the sheet of content and formatting information.\\n\\n```\\n// This example assumes there is a sheet named \\\"first\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"first\\\");\\nfirst.clear();\\n```\\n@return The cleared sheet.*/clear():SpreadsheetApp.Sheet;\\n/**Clears the sheet of contents and/or format, as specified with the given advanced options.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nsheet.clear({ formatOnly: true, contentsOnly: true });\\n```\\n@param options A JavaScript map containing advanced options, listed below.\\n@return This sheet, for chaining.*/clear(options:Object):SpreadsheetApp.Sheet;\\n/**Removes all conditional format rules from the sheet. Equivalent to calling [`setConditionalFormatRules(rules)`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#setConditionalFormatRules(ConditionalFormatRule)) with an empty array as input.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nsheet.clearConditionalFormatRules();\\n```*/clearConditionalFormatRules():void;\\n/**Clears the sheet of contents, while preserving formatting information.\\n\\n```\\n// This example assumes there is a sheet named \\\"first\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"first\\\");\\nfirst.clearContents();\\n```\\n@return This sheet, for chaining.*/clearContents():SpreadsheetApp.Sheet;\\n/**Clears the sheet of formatting, while preserving contents.\\n\\nFormatting refers to how data is formatted as allowed by choices under the \\\"Format\\\" menu\\n(ex: bold, italics, conditional formatting) and not width or height of cells.\\n\\n```\\n// This example assumes there is a sheet named \\\"first\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"first\\\");\\nfirst.clearFormats();\\n```\\n@return This sheet, for chaining.*/clearFormats():SpreadsheetApp.Sheet;\\n/**Clears the sheet of all notes.\\n\\n```\\n// This example assumes there is a sheet named \\\"first\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"first\\\");\\nfirst.clearNotes();\\n```\\n@return This sheet, for chaining.*/clearNotes():SpreadsheetApp.Sheet;\\n/**Collapses all column groups on the sheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// All column groups on the sheet are collapsed.\\nsheet.collapseAllColumnGroups();\\n```\\n@return This sheet, for chaining.*/collapseAllColumnGroups():SpreadsheetApp.Sheet;\\n/**Collapses all row groups on the sheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// All row groups on the sheet are collapsed.\\nsheet.collapseAllRowGroups();\\n```\\n@return This sheet, for chaining.*/collapseAllRowGroups():SpreadsheetApp.Sheet;\\n/**Copies the sheet to a given spreadsheet, which can be the same spreadsheet as the source. The\\ncopied sheet is named \\\"Copy of [original name]\\\".\\n\\n```\\nvar source \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d source.getSheets()[0];\\n\\nvar destination \\u003d SpreadsheetApp.openById('ID_GOES HERE');\\nsheet.copyTo(destination);\\n```\\n@param spreadsheet The spreadsheet to copy this sheet to, which can be the same spreadsheet as\\n    the source.\\n@return The new sheet, for chaining.*/copyTo(spreadsheet:SpreadsheetApp.Spreadsheet):SpreadsheetApp.Sheet;\\n/**Returns a [`DeveloperMetadataFinder`](https://developers.google.com/apps-script/reference/spreadsheet/developer-metadata-finder.html) for finding developer metadata within the scope of\\nthis sheet. Metadata is in the scope of a particular sheet if it is either associated with the\\nsheet itself, or associated with a row, column, or range on that sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Adds developer metadata for testing.\\nsheet.addDeveloperMetadata('CITY', 'PARIS');\\n\\n// Creates the developer metadata finder.\\nconst metadatafinder \\u003d sheet.createDeveloperMetadataFinder();\\n\\n// Finds the metadata with value 'PARIS' and displays its key in the console.\\nconsole.log(metadatafinder.withValue('PARIS').find()[0].getKey());\\n```\\n@return A developer metadata finder to search for metadata in the scope of this sheet.*/createDeveloperMetadataFinder():SpreadsheetApp.DeveloperMetadataFinder;\\n/**Creates a text finder for the sheet, which can find and replace text within the sheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// Creates  a text finder.\\nvar textFinder \\u003d sheet.createTextFinder('dog');\\n\\n// Returns the first occurrence of 'dog' in the sheet.\\nvar firstOccurrence \\u003d textFinder.findNext();\\n\\n// Replaces the last found occurrence of 'dog' with 'cat' and returns the number\\n// of occurrences replaced.\\nvar numOccurrencesReplaced \\u003d findOccurrence.replaceWith('cat');\\n```\\n@param findText The text to search for.\\n@return The [`TextFinder`](https://developers.google.com/apps-script/reference/spreadsheet/text-finder.html) for the sheet.*/createTextFinder(findText:string):SpreadsheetApp.TextFinder;\\n/**Deletes the column at the given column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Columns start at \\\"1\\\" - this deletes the first column\\nsheet.deleteColumn(1);\\n```\\n@param columnPosition The position of the column, starting at 1 for the first column.\\n@return the sheet, useful for method chaining*/deleteColumn(columnPosition:Integer):SpreadsheetApp.Sheet;\\n/**Deletes a number of columns starting at the given column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Columns start at \\\"1\\\" - this deletes the first two columns\\nsheet.deleteColumns(1, 2);\\n```\\n@param columnPosition The position of the first column to delete.\\n@param howMany The number of columns to delete.*/deleteColumns(columnPosition:Integer,howMany:Integer):void;\\n/**Deletes the row at the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Rows start at \\\"1\\\" - this deletes the first row\\nsheet.deleteRow(1);\\n```\\n@param rowPosition The position of the row, starting at 1 for the first row.\\n@return the sheet, useful for method chaining*/deleteRow(rowPosition:Integer):SpreadsheetApp.Sheet;\\n/**Deletes a number of rows starting at the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Rows start at \\\"1\\\" - this deletes the first two rows\\nsheet.deleteRows(1, 2);\\n```\\n@param rowPosition The position of the first row to delete.\\n@param howMany The number of rows to delete.*/deleteRows(rowPosition:Integer,howMany:Integer):void;\\n/**Expands all column groups on the sheet. This method requires at least one column group.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// All column groups on the sheet are expanded.\\nsheet.expandAllColumnGroups();\\n```\\n@return This sheet, for chaining.*/expandAllColumnGroups():SpreadsheetApp.Sheet;\\n/**Expands all row groups on the sheet. This method requires at least one row group.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// All row groups on the sheet are expanded.\\nsheet.expandAllRowGroups();\\n```\\n@return This sheet, for chaining.*/expandAllRowGroups():SpreadsheetApp.Sheet;\\n/**Expands all column groups up to the given depth, and collapses all others.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// All column groups of depth 2 and lower are expanded, and groups with depth\\n// 3 and higher are collapsed.\\nsheet.expandColumnGroupsUpToDepth(2);\\n```\\n@param groupDepth The group depth up to which to expand the column groups.\\n@return This sheet, for chaining.*/expandColumnGroupsUpToDepth(groupDepth:Integer):SpreadsheetApp.Sheet;\\n/**Expands all row groups up to the given depth, and collapses all others.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// All row groups of depth 2 and lower are expanded, and groups with depth\\n// 3 and higher are collapsed.\\nsheet.expandRowGroupsUpToDepth(2);\\n```\\n@param groupDepth The group depth up to which to expand the row groups.\\n@return This sheet, for chaining.*/expandRowGroupsUpToDepth(groupDepth:Integer):SpreadsheetApp.Sheet;\\n/**Returns the active cell in this sheet.\\n\\n__Note:__ It's preferable to use [`getCurrentCell()`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getCurrentCell()), which returns the current\\nhighlighted cell.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Returns the active cell\\nvar cell \\u003d sheet.getActiveCell();\\n```\\n@return the current active cell*/getActiveCell():SpreadsheetApp.Range;\\n/**Returns the selected range in the active sheet, or `null` if there is no active range. If\\nmultiple ranges are selected this method returns only the last selected range.\\n\\nThe term \\\"active range\\\" refers to the range that a user has selected in the active sheet,\\nbut in a custom function it refers to the cell being actively recalculated.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\nvar activeRange \\u003d sheet.getActiveRange();\\n```\\n@return the active range*/getActiveRange():SpreadsheetApp.Range;\\n/**Returns the list of active ranges in the active sheet or `null` if there are no active\\nranges.\\n\\nIf there is a single range selected, this behaves as a [`getActiveRange()`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getActiveRange()) call.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n// Returns the list of active ranges.\\nvar activeRangeList \\u003d sheet.getActiveRangeList();\\n```\\n@return the list of active ranges*/getActiveRangeList():SpreadsheetApp.RangeList;\\n/**Returns all the bandings in this sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the banding info for the sheet.\\nconst bandings \\u003d sheet.getBandings();\\n\\n// Gets info on the bandings' second row color and logs it to the console.\\nfor (const banding of bandings) {\\n  console.log(banding.getSecondRowColor());\\n}\\n```\\n@return All the bandings in this sheet.*/getBandings():SpreadsheetApp.Banding[];\\n/**Returns an array of charts on this sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar charts \\u003d sheet.getCharts();\\n\\nfor (var i in charts) {\\n  var chart \\u003d charts[i];\\n  // Do something with the chart\\n}\\n```\\n@return An array of charts.*/getCharts():SpreadsheetApp.EmbeddedChart[];\\n/**Returns the column group at the given index and group depth.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// Returns the group whose control index is at column 2 and has a depth of 1, or\\n// null if the group doesn’t exist.\\nvar columnGroup \\u003d sheet.getColumnGroup(2, 1);\\n```\\n@param columnIndex The column index of the group control toggle or an index within the group.\\n@param groupDepth The depth of the group.\\n@return The column group at the control index and depth, or throws an exception if the group\\n    doesn’t exist.*/getColumnGroup(columnIndex:Integer,groupDepth:Integer):SpreadsheetApp.Group;\\n/**Returns the [`GroupControlTogglePosition`](https://developers.google.com/apps-script/reference/spreadsheet/group-control-toggle-position.html) for all column groups on the sheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// GroupControlTogglePosition.AFTER if the column grouping control toggle is shown after the\\n// group.\\nvar columnGroupControlPosition \\u003d sheet.getColumnGroupControlPosition();\\n```\\n@return `true` if the column grouping control toggle is shown after the group on this\\n    sheet and `false` otherwise.*/getColumnGroupControlPosition():SpreadsheetApp.GroupControlTogglePosition;\\n/**Returns the group depth of the column at the given index.\\n\\nThe group depth indicates how many groups overlap with the column. This can range between\\nzero and eight.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// 1 if there is a group over columns 1 through 3\\nvar groupDepth \\u003d sheet.getColumnGroupDepth(1);\\n```\\n@param columnIndex The index of the column.\\n@return The group depth of the column at the given index.*/getColumnGroupDepth(columnIndex:Integer):Integer;\\n/**Gets the width in pixels of the given column.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Columns start at 1\\nLogger.log(sheet.getColumnWidth(1));\\n```\\n@param columnPosition The position of the column to examine.\\n@return column width in pixels*/getColumnWidth(columnPosition:Integer):Integer;\\n/**Get all conditional format rules in this sheet.\\n\\n```\\n// Logs the conditional format rules in a sheet.\\nvar rules \\u003d SpreadsheetApp.getActiveSheet().getConditionalFormatRules();\\nfor (var i \\u003d 0; i \\u003c rules.length; i++) {\\n  var rule \\u003d rules[i];\\n  Logger.log(rule);\\n}\\n```\\n@return An array of all rules in the sheet.*/getConditionalFormatRules():SpreadsheetApp.ConditionalFormatRule[];\\n/**Returns the current cell in the active sheet or `null` if there is no current cell. The\\ncurrent cell is the cell that has focus in the Google Sheets UI, and is highlighted by a dark\\nborder. There is never more than one current cell. When a user selects one or more cell ranges,\\none of the cells in the selection is the current cell.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\n// Returns the current highlighted cell in the one of the active ranges.\\nvar currentCell \\u003d sheet.getCurrentCell();\\n```\\n@return the current cell*/getCurrentCell():SpreadsheetApp.Range;\\n/**Returns a [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) corresponding to the dimensions in which data is present.\\n\\nThis is functionally equivalent to creating a Range bounded by A1 and\\n(Sheet.getLastColumn(), Sheet.getLastRow()).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This represents ALL the data\\nvar range \\u003d sheet.getDataRange();\\nvar values \\u003d range.getValues();\\n\\n// This logs the spreadsheet in CSV format with a trailing comma\\nfor (var i \\u003d 0; i \\u003c values.length; i++) {\\n  var row \\u003d \\\"\\\";\\n  for (var j \\u003d 0; j \\u003c values[i].length; j++) {\\n    if (values[i][j]) {\\n      row \\u003d row + values[i][j];\\n    }\\n    row \\u003d row + \\\",\\\";\\n  }\\n  Logger.log(row);\\n}\\n```\\n@return a range consisting of all the data in the spreadsheet*/getDataRange():SpreadsheetApp.Range;\\n/**Gets all the data source formulas.\\n\\n```\\n// Opens the spreadsheet by its ID. If you created your script from within a Google Sheets\\n// file, use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets an array of the data source formulas on Sheet1.\\n// To get an array of data source formulas for the entire spreadsheet,\\n// replace 'sheet' with 'ss'.\\nconst dataSourceFormulas \\u003d sheet.getDataSourceFormulas();\\n\\n// Logs the first data source formula in the array.\\nconsole.log(dataSourceFormulas[0].getFormula());\\n```\\n@return A list of data source formulas.*/getDataSourceFormulas():SpreadsheetApp.DataSourceFormula[];\\n/**Gets all the data source pivot tables.\\n\\n```\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets an array of the data source pivot tables on Sheet1.\\n// To get an array of data source pivot tables for the entire\\n// spreadsheet, replace 'sheet' with 'ss'.\\nconst dataSourcePivotTables \\u003d sheet.getDataSourcePivotTables();\\n\\n// Logs the last time that the first pivot table in the array was refreshed.\\nconsole.log(dataSourcePivotTables[0].getStatus().getLastRefreshedTime());\\n```\\n@return A list of data source pivot tables.*/getDataSourcePivotTables():SpreadsheetApp.DataSourcePivotTable[];\\n/**Gets all the data source tables.\\n\\n```\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets an array of data source tables on Sheet1.\\n// To get an array of data source tables for the entire spreadsheet,\\n// replace 'sheet' with 'ss'.\\nconst dataSourceTables \\u003d sheet.getDataSourceTables();\\n\\n// Logs the last completed data execution time on the first data source table.\\nconsole.log(dataSourceTables[0].getStatus().getLastExecutionTime());\\n```\\n@return A list of data source tables.*/getDataSourceTables():SpreadsheetApp.DataSourceTable[];\\n/**Get all developer metadata associated with this sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Adds developer metadata for testing.\\nsheet.addDeveloperMetadata('CITY', 'PARIS');\\n\\n// Gets all the developer metadata for the sheet.\\nconst developerMetaDataList \\u003d sheet.getDeveloperMetadata();\\n\\n// Logs the developer metadata to the console.\\nfor (const developerMetaData of developerMetaDataList) {\\n  console.log(developerMetaData.getKey());\\n}\\n```\\n@return The developer metadata associated with this sheet.*/getDeveloperMetadata():SpreadsheetApp.DeveloperMetadata[];\\n/**Returns an array of drawings on the sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets all the drawings from the sheet.\\nconst allDrawings \\u003d sheet.getDrawings();\\n\\n // Logs the number of drawings present on the sheet.\\nconsole.log(allDrawings.length);\\n```\\n@return The list of drawings on this sheet.*/getDrawings():SpreadsheetApp.Drawing[];\\n/**Returns the filter in this sheet, or `null` if there is no filter.\\n\\n```\\n// Gets the filter on the active sheet.\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n```\\n@return The filter.*/getFilter():SpreadsheetApp.Filter;\\n/**Returns the URL for the form that sends its responses to this sheet, or `null` if this\\nsheet has no associated form.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar url \\u003d sheet.getFormUrl();\\n```\\n@return The URL for the form that places its responses in this sheet, or `null` if this\\n    sheet doesn't have an associated form.*/getFormUrl():string;\\n/**Returns the number of frozen columns.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nLogger.log(\\\"Number of frozen columns: %s\\\", sheet.getFrozenColumns());\\n```\\n@return the number of frozen columns*/getFrozenColumns():Integer;\\n/**Returns the number of frozen rows.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nLogger.log(\\\"Number of frozen rows: %s\\\", sheet.getFrozenRows());\\n```\\n@return the number of frozen rows*/getFrozenRows():Integer;\\n/**Returns all over-the-grid images on the sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the over-the-grid images from Sheet1.\\n// To get the over-the-grid images from the entire spreadsheet, use ss.getImages() instead.\\nconst images \\u003d sheet.getImages();\\n\\n// For each image, logs the anchor cell in A1 notation.\\nfor (const image of images) {\\n console.log(image.getAnchorCell().getA1Notation());\\n}\\n```\\n@return An array of over-the-grid images.*/getImages():SpreadsheetApp.OverGridImage[];\\n/**Gets the position of the sheet in its parent spreadsheet. Starts at 1.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\n// Note that the JavaScript index is 0, but this logs 1\\nvar sheet \\u003d ss.getSheets()[0];\\n// ... because spreadsheets are 1-indexed\\nLogger.log(sheet.getIndex());\\n```\\n@return The position of the sheet in its parent spreadsheet.*/getIndex():Integer;\\n/**Returns the position of the last column that has content.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This logs the value in the very last cell of this sheet\\nvar lastRow \\u003d sheet.getLastRow();\\nvar lastColumn \\u003d sheet.getLastColumn();\\nvar lastCell \\u003d sheet.getRange(lastRow, lastColumn);\\nLogger.log(lastCell.getValue());\\n```\\n@return the last column of the sheet that contains content*/getLastColumn():Integer;\\n/**Returns the position of the last row that has content.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This logs the value in the very last cell of this sheet\\nvar lastRow \\u003d sheet.getLastRow();\\nvar lastColumn \\u003d sheet.getLastColumn();\\nvar lastCell \\u003d sheet.getRange(lastRow, lastColumn);\\nLogger.log(lastCell.getValue());\\n```\\n@return the last row of the sheet that contains content*/getLastRow():Integer;\\n/**Returns the current number of columns in the sheet, regardless of content.\\n\\n```\\n// This example assumes there is a sheet named \\\"first\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"first\\\");\\nLogger.log(first.getMaxColumns());\\n```\\n@return The maximum width of the sheet.*/getMaxColumns():Integer;\\n/**Returns the current number of rows in the sheet, regardless of content.\\n\\n```\\n// This example assumes there is a sheet named \\\"first\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"first\\\");\\nLogger.log(first.getMaxRows());\\n```\\n@return The maximum height of the sheet.*/getMaxRows():Integer;\\n/**Returns the name of the sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nLogger.log(sheet.getName());\\n```\\n@return The name of the sheet.*/getName():string;\\n/**Gets all the named ranges in this sheet.\\n\\n```\\n// The code below logs the name of the first named range.\\nvar namedRanges \\u003d SpreadsheetApp.getActiveSheet().getNamedRanges();\\nif (namedRanges.length \\u003e 1) {\\n  Logger.log(namedRanges[0].getName());\\n}\\n```\\n@return An array of all the named ranges in the sheet.*/getNamedRanges():SpreadsheetApp.NamedRange[];\\n/**Returns the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) that contains this sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// parent is identical to ss\\nvar parent \\u003d sheet.getParent();\\n```\\n@return The parent spreadsheet.*/getParent():SpreadsheetApp.Spreadsheet;\\n/**Returns all the pivot tables on this sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets all the pivot table info for the sheet.\\nconst pivotTables \\u003d sheet.getPivotTables();\\n\\n// Logs the pivot tables to the console.\\nfor (const pivotTable of pivotTables) {\\n  console.log(pivotTable.getSourceDataRange().getValues());\\n}\\n```\\n@return The pivot tables on this sheet.*/getPivotTables():SpreadsheetApp.PivotTable[];\\n/**Gets an array of objects representing all protected ranges in the sheet, or a single-element\\narray representing the protection on the sheet itself.\\n\\n```\\n// Remove all range protections in the spreadsheet that the user has permission to edit.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar protections \\u003d sheet.getProtections(SpreadsheetApp.ProtectionType.RANGE);\\nfor (var i \\u003d 0; i \\u003c protections.length; i++) {\\n  var protection \\u003d protections[i];\\n  if (protection.canEdit()) {\\n    protection.remove();\\n  }\\n}\\n```\\n\\n```\\n// Remove sheet protection from the active sheet, if the user has permission to edit it.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar protection \\u003d sheet.getProtections(SpreadsheetApp.ProtectionType.SHEET)[0];\\nif (protection \\u0026\\u0026 protection.canEdit()) {\\n  protection.remove();\\n}\\n```\\n@param type The type of protected area, either `SpreadsheetApp.ProtectionType.RANGE` or\\n    `SpreadsheetApp.ProtectionType.SHEET`.\\n@return An array of objects representing all protected ranges in the sheet, or a single-element\\n    array representing the protection on the sheet itself.*/getProtections(type:SpreadsheetApp.ProtectionType):SpreadsheetApp.Protection[];\\n/**Returns the range with the top left cell at the given coordinates.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Passing only two arguments returns a \\\"range\\\" with a single cell.\\nvar range \\u003d sheet.getRange(1, 1);\\nvar values \\u003d range.getValues();\\nLogger.log(values[0][0]);\\n```\\n@param row The row index of the cell to return; row indexing starts with 1.\\n@param column The column index of the cell to return; column indexing starts with 1.\\n@return A range containing only this cell.*/getRange(row:Integer,column:Integer):SpreadsheetApp.Range;\\n/**Returns the range with the top left cell at the given coordinates, and with the given number of\\nrows.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// When the \\\"numRows\\\" argument is used, only a single column of data is returned.\\nvar range \\u003d sheet.getRange(1, 1, 3);\\nvar values \\u003d range.getValues();\\n\\n// Prints 3 values from the first column, starting from row 1.\\nfor (var row in values) {\\n  for (var col in values[row]) {\\n    Logger.log(values[row][col]);\\n  }\\n}\\n```\\n@param row The starting row index of the range; row indexing starts with 1.\\n@param column The column index of the range; column indexing starts with 1.\\n@param numRows The number of rows to return.\\n@return A range containing a single column of data with the number of rows specified.*/getRange(row:Integer,column:Integer,numRows:Integer):SpreadsheetApp.Range;\\n/**Returns the range with the top left cell at the given coordinates with the given number of rows\\nand columns.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(1, 1, 3, 3);\\nvar values \\u003d range.getValues();\\n\\n// Print values from a 3x3 box.\\nfor (var row in values) {\\n  for (var col in values[row]) {\\n    Logger.log(values[row][col]);\\n  }\\n}\\n```\\n@param row The starting row index of the range; row indexing starts with 1.\\n@param column The starting column index of the range; column indexing starts with 1.\\n@param numRows The number of rows to return.\\n@param numColumns The number of columns to return.\\n@return A range corresponding to the area specified.*/getRange(row:Integer,column:Integer,numRows:Integer,numColumns:Integer):SpreadsheetApp.Range;\\n/**Returns the range as specified in A1 notation or R1C1 notation.\\n\\n```\\n// Get a range A1:D4 on sheet titled \\\"Invoices\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar range \\u003d ss.getRange(\\\"Invoices!A1:D4\\\");\\n\\n// Get cell A1 on the first sheet\\nvar sheet \\u003d ss.getSheets()[0];\\nvar cell \\u003d sheet.getRange(\\\"A1\\\");\\n```\\n@param a1Notation The range to return, as specified in A1 notation or R1C1 notation.\\n@return the range at the location designated*/getRange(a1Notation:string):SpreadsheetApp.Range;\\n/**Returns the [`RangeList`](https://developers.google.com/apps-script/reference/spreadsheet/range-list.html) collection representing the ranges in the same sheet specified\\nby a non-empty list of A1 notations or R1C1 notations.\\n\\n```\\n// Get a list of ranges A1:D4, F1:H4.\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\nvar rangeList  \\u003d sheet.getRangeList(['A1:D4', 'F1:H4']);\\n```\\n@param a1Notations The list of ranges to return, as specified in A1 notation or R1C1 notation.\\n@return the range list at the location designated*/getRangeList(a1Notations:string[]):SpreadsheetApp.RangeList;\\n/**Returns the row group at the given index and group depth.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// Returns the group whose control index is at row 2 and has a depth of 1, or\\n// null if the group doesn’t exist.\\nvar rowGroup \\u003d sheet.getRowGroup(2, 1);\\n```\\n@param rowIndex The row index of the group control toggle or an index within the group.\\n@param groupDepth The depth of the group.\\n@return The row group at the control index and depth, or throws an exception if the group\\n    doesn’t exist.*/getRowGroup(rowIndex:Integer,groupDepth:Integer):SpreadsheetApp.Group;\\n/**Returns the [`GroupControlTogglePosition`](https://developers.google.com/apps-script/reference/spreadsheet/group-control-toggle-position.html) for all row groups on the sheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// GroupControlTogglePosition.AFTER if the row grouping control toggle is shown after the\\n// group.\\nvar rowGroupControlPosition \\u003d sheet.getRowGroupControlPosition();\\n```\\n@return `true` if the row grouping control toggle is shown after the group on this sheet\\n    and `false` otherwise.*/getRowGroupControlPosition():SpreadsheetApp.GroupControlTogglePosition;\\n/**Returns the group depth of the row at the given index.\\n\\nThe group depth indicates how many groups overlap with the row. This can range between zero\\nand eight.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// 1 if there is a group over rows 1 through 3\\nvar groupDepth \\u003d sheet.getRowGroupDepth(1);\\n```\\n@param rowIndex The index of the row.\\n@return The group depth of the row at the given index.*/getRowGroupDepth(rowIndex:Integer):Integer;\\n/**Gets the height in pixels of the given row.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Rows start at 1\\nLogger.log(sheet.getRowHeight(1));\\n```\\n@param rowPosition The position of the row to examine.\\n@return row height in pixels*/getRowHeight(rowPosition:Integer):Integer;\\n/**Returns the current [`Selection`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html) in the spreadsheet.\\n\\n```\\nvar selection \\u003d SpreadsheetApp.getActiveSpreadsheet().getSelection();\\nvar currentCell \\u003d selection.getCurrentCell();\\n```\\n@return the current selection*/getSelection():SpreadsheetApp.Selection;\\n/**Returns the ID of the sheet represented by this object.\\n\\nThis is an ID for the sheet that is unique to the spreadsheet. The ID is a monotonically\\nincreasing integer assigned at sheet creation time that is independent of sheet position. This\\nis useful in conjunction with methods such as [`Range.copyFormatToRange(gridId, column, columnEnd, row, rowEnd)`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#copyFormatToRange(Integer,Integer,Integer,Integer,Integer)) that take a `gridId` parameter rather than a [`Sheet`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html) instance.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nLogger.log(sheet.getSheetId());\\n```\\n@return an ID for the sheet unique to the spreadsheet*/getSheetId():Integer;\\n/**Returns the sheet name.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nLogger.log(sheet.getSheetName());\\n```\\n@return the name of the sheet*/getSheetName():string;\\n/**Returns a ~~[`PageProtection`](https://developers.google.com/apps-script/reference/spreadsheet/page-protection.html)~~ instance describing the permissions for the current sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar permissions \\u003d sheet.getSheetProtection();\\n\\npermissions.setProtected(true);\\npermissions.addUser(\\\"user@example.com\\\");\\n\\n// Logs the users that have access to edit this sheet. Note that this\\n// is different from access to the entire spreadsheet - getUsers()\\n// only returns users if permissions.isProtected() is set to true.\\nvar users \\u003d permissions.getUsers();\\nLogger.log(users);\\n```\\n@deprecated\\n@return an object describing sheet access permissions*/getSheetProtection():SpreadsheetApp.PageProtection;\\n/**Returns the rectangular grid of values for this range starting at the given coordinates. A -1\\nvalue given as the row or column position is equivalent to getting the very last row or column\\nthat has data in the sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The two samples below produce the same output\\nvar values \\u003d sheet.getSheetValues(1, 1, 3, 3);\\nLogger.log(values);\\n\\nvar range \\u003d sheet.getRange(1, 1, 3, 3);\\nvalues \\u003d range.getValues();\\nLogger.log(values);\\n```\\n@param startRow The position of the starting row.\\n@param startColumn The position of the starting column.\\n@param numRows The number of rows to return values for.\\n@param numColumns The number of columns to return values for.\\n@return a two-dimensional array of values*/getSheetValues(startRow:Integer,startColumn:Integer,numRows:Integer,numColumns:Integer):Object[][];\\n/**Returns an array of slicers on the sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets all slicers in the spreadsheet.\\nconst slicers \\u003d sheet.getSlicers();\\n\\n// Logs the slicer titles to the console.\\nfor (const slicer of slicers) {\\n  console.log(slicer.getTitle());\\n}\\n```\\n@return The list of slicers on this sheet.*/getSlicers():SpreadsheetApp.Slicer[];\\n/**Gets the sheet tab color, or `null` if the sheet tab has no color.\\n\\n```\\n// This example assumes there is a sheet named \\\"first\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"first\\\");\\nvar color \\u003d first.getTabColor();\\n```\\n@deprecated\\n@return Color code in CSS notation (such as `'#ffffff'`).*/getTabColor():string;\\n/**Gets the sheet tab color, or `null` if the sheet tab has no color.\\n\\n```\\n// This example assumes there is a sheet named \\\"Sheet1\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"Sheet1\\\");\\nvar color \\u003d first.getTabColorObject();\\n```\\n@return The sheet tab color, or `null` if the sheet tab has no color.*/getTabColorObject():SpreadsheetApp.Color;\\n/**Returns the type of the sheet.\\n\\nThe default type of sheet is [`SheetType.GRID`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html#GRID). A sheet that contains a single embedded\\nobject such as an [`EmbeddedChart`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-chart.html) is an [`SheetType.OBJECT`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html#OBJECT) sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nLogger.log(sheet.getType());\\n```\\n@return The type of the sheet.*/getType():SpreadsheetApp.SheetType;\\n/**Returns `true` if the sheet's gridlines are hidden; otherwise returns `false`.\\nGridlines are visible by default.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Checks if the spreadsheet has hidden gridelines and logs the result to the console.\\nconsole.log(sheet.hasHiddenGridlines());\\n```\\n@return `true` if gridlines are hidden; `false` otherwise.*/hasHiddenGridlines():boolean;\\n/**Hides the column or columns in the given range.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nlet sheet \\u003d ss.getSheets()[0];\\n\\n// This hides the first column\\nlet range \\u003d sheet.getRange(\\\"A1\\\");\\nsheet.hideColumn(range);\\n\\n// This hides the first 3 columns\\nlet range \\u003d sheet.getRange(\\\"A:C\\\");\\nsheet.hideColumn(range);\\n```\\n@param column The column range to hide.*/hideColumn(column:SpreadsheetApp.Range):void;\\n/**Hides a single column at the given index. Use 1-index for this method.\\n\\nTo hide more than one column using an index, use [`hideColumns(columnIndex, numColumns)`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#hideColumns(Integer,Integer)).\\n\\nTo hide more than one column using a range, use [`hideColumn()`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#hideColumn(Range)).\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nlet sheet \\u003d ss.getSheets()[0];\\n// Hides the first column\\nsheet.hideColumns(1);\\n```\\n@param columnIndex The index of the column to hide.*/hideColumns(columnIndex:Integer):void;\\n/**Hides one or more consecutive columns starting at the given index. Use 1-index for this method.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Hides the first three columns\\nsheet.hideColumns(1, 3);\\n```\\n@param columnIndex The starting index of the columns to hide.\\n@param numColumns The number of columns to hide.*/hideColumns(columnIndex:Integer,numColumns:Integer):void;\\n/**Hides the rows in the given range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This hides the first row\\nvar range \\u003d sheet.getRange(\\\"A1\\\");\\nsheet.hideRow(range);\\n```\\n@param row The row range to hide.*/hideRow(row:SpreadsheetApp.Range):void;\\n/**Hides the row at the given index.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Hides the first row\\nsheet.hideRows(1);\\n```\\n@param rowIndex The index of the row to hide.*/hideRows(rowIndex:Integer):void;\\n/**Hides one or more consecutive rows starting at the given index.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Hides the first three rows\\nsheet.hideRows(1, 3);\\n```\\n@param rowIndex The starting index of the rows to hide.\\n@param numRows The number of rows to hide.*/hideRows(rowIndex:Integer,numRows:Integer):void;\\n/**Hides this sheet. Has no effect if the sheet is already hidden. If this method is called on the\\nonly visible sheet, it throws an exception.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nsheet.hideSheet();\\n```\\n@return The current sheet.*/hideSheet():SpreadsheetApp.Sheet;\\n/**Adds a new chart to this sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This creates a simple bar chart from the first three rows\\n// of the first two columns of the spreadsheet\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B4\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .setOption(\\\"title\\\", \\\"Dynamic Chart\\\")\\n    .build();\\nsheet.insertChart(chart);\\n```\\n@param chart The chart to insert.*/insertChart(chart:SpreadsheetApp.EmbeddedChart):void;\\n/**Inserts a column after the given column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts a column after the first column position\\nsheet.insertColumnAfter(1);\\n```\\n@param afterPosition The column after which the new column should be added.\\n@return the sheet, useful for method chaining*/insertColumnAfter(afterPosition:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a column before the given column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts a column in the first column position\\nsheet.insertColumnBefore(1);\\n```\\n@param beforePosition The column before which the new column should be added.\\n@return the sheet, useful for method chaining*/insertColumnBefore(beforePosition:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a blank column in a sheet at the specified location.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Shifts all columns by one\\nsheet.insertColumns(1);\\n```\\n@param columnIndex The index indicating where to insert a column.*/insertColumns(columnIndex:Integer):void;\\n/**Inserts one or more consecutive blank columns in a sheet starting at the specified location.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Shifts all columns by three\\nsheet.insertColumns(1, 3);\\n```\\n@param columnIndex The index indicating where to insert a column.\\n@param numColumns The number of columns to insert.*/insertColumns(columnIndex:Integer,numColumns:Integer):void;\\n/**Inserts a given number of columns after the given column position.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nlet sheet \\u003d ss.getSheets()[0];\\n\\n// Inserts two columns after the first column on the first sheet of the spreadsheet.\\nsheet.insertColumnsAfter(1,2);\\n```\\n@param afterPosition The column after which the new column should be added.\\n@param howMany The number of columns to insert.\\n@return the sheet, useful for method chaining*/insertColumnsAfter(afterPosition:Integer,howMany:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a number of columns before the given column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts five columns before the first column\\nsheet.insertColumnsBefore(1, 5);\\n```\\n@param beforePosition The column before which the new column should be added.\\n@param howMany The number of columns to insert.\\n@return the sheet, useful for method chaining*/insertColumnsBefore(beforePosition:Integer,howMany:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a [`BlobSource`](https://developers.google.com/apps-script/reference/spreadsheet/../base/blob-source.html) as an image in the document at a given row and column. The image\\nsize is retrieved from the blob contents. The maximum supported blob size is 2MB.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar blob \\u003d Utilities.newBlob(binaryData, 'image/png', 'MyImageName');\\nsheet.insertImage(blob, 1, 1);\\n```\\n@param blobSource The blob containing the image contents, MIME type, and (optionally) name.\\n@param column The column position.\\n@param row The row position.\\n@return The inserted image.*/insertImage(blobSource:BlobSource,column:Integer,row:Integer):SpreadsheetApp.OverGridImage;\\n/**Inserts a [`BlobSource`](https://developers.google.com/apps-script/reference/spreadsheet/../base/blob-source.html) as an image in the document at a given row and column, with a\\npixel offset. The image size is retrieved from the blob contents. The maximum supported blob\\nsize is 2MB.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar blob \\u003d Utilities.newBlob(binaryData, 'image/png', 'MyImageName');\\nsheet.insertImage(blob, 1, 1, 10, 10);\\n```\\n@param blobSource The blob containing the image contents, MIME type, and (optionally) name.\\n@param column The column position.\\n@param row The row position.\\n@param offsetX The horizontal offset from cell corner in pixels.\\n@param offsetY The vertical offset from cell corner in pixels.\\n@return The inserted image.*/insertImage(blobSource:BlobSource,column:Integer,row:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.OverGridImage;\\n/**Inserts an image in the document at a given row and column.\\n\\nThe provided URL must be publicly accessible.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nsheet.insertImage(\\\"https://www.google.com/images/srpr/logo3w.png\\\", 1, 1);\\n```\\n@param url The URL of the image.\\n@param column The grid column position.\\n@param row The grid row position.\\n@return The inserted image.*/insertImage(url:string,column:Integer,row:Integer):SpreadsheetApp.OverGridImage;\\n/**Inserts an image in the document at a given row and column, with a pixel offset.\\n\\nThe provided URL must be publicly accessible.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nsheet.insertImage(\\\"https://www.google.com/images/srpr/logo3w.png\\\", 1, 1, 10, 10);\\n```\\n@param url The URL for the image.\\n@param column The column position.\\n@param row The row position.\\n@param offsetX The horizontal offset from cell corner in pixels.\\n@param offsetY The vertical offset from cell corner in pixels.\\n@return The Inserted image.*/insertImage(url:string,column:Integer,row:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.OverGridImage;\\n/**Inserts a row after the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts a row after the first row position\\nsheet.insertRowAfter(1);\\n```\\n@param afterPosition The row after which the new row should be added.\\n@return the sheet, useful for method chaining*/insertRowAfter(afterPosition:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a row before the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts a row before the first row position\\nsheet.insertRowBefore(1);\\n```\\n@param beforePosition The row before which the new row should be added.\\n@return the sheet, useful for method chaining*/insertRowBefore(beforePosition:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a blank row in a sheet at the specified location.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Shifts all rows down by one\\nsheet.insertRows(1);\\n```\\n@param rowIndex The index indicating where to insert a row.*/insertRows(rowIndex:Integer):void;\\n/**Inserts one or more consecutive blank rows in a sheet starting at the specified location.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Shifts all rows down by three\\nsheet.insertRows(1, 3);\\n```\\n@param rowIndex The index indicating where to insert a row.\\n@param numRows The number of rows to insert.*/insertRows(rowIndex:Integer,numRows:Integer):void;\\n/**Inserts a number of rows after the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts five rows after the first row\\nsheet.insertRowsAfter(1, 5);\\n```\\n@param afterPosition The row after which the new rows should be added.\\n@param howMany The number of rows to insert.\\n@return the sheet, useful for method chaining*/insertRowsAfter(afterPosition:Integer,howMany:Integer):SpreadsheetApp.Sheet;\\n/**Inserts a number of rows before the given row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This inserts five rows before the first row\\nsheet.insertRowsBefore(1, 5);\\n```\\n@param beforePosition The row before which the new rows should be added.\\n@param howMany The number of rows to insert.\\n@return the sheet, useful for method chaining*/insertRowsBefore(beforePosition:Integer,howMany:Integer):SpreadsheetApp.Sheet;\\n/**Adds a new slicer to this sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range of the sheet.\\nconst range \\u003d sheet.getRange('A1:D10');\\n\\n// Inserts the slicer with a random range into the sheet.\\nconst insertSlicers \\u003d sheet.insertSlicer(range.randomize(), 1, 10);\\n\\n// Logs the insert slicer result to the console.\\nconsole.log(insertSlicers);\\n```\\n@param range The range over which slicer slicer is created.\\n@param anchorRowPos The slicer's top side is anchored in this row.\\n@param anchorColPos The slicer's top side is anchored in this col.\\n@return The newly inserted slicer.*/insertSlicer(range:SpreadsheetApp.Range,anchorRowPos:Integer,anchorColPos:Integer):SpreadsheetApp.Slicer;\\n/**Adds a new slicer to this sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range.\\nconst range \\u003d sheet.getRange('A1:D10');\\n\\n// Inserts a slicer using the random range function.\\nconst insertSlicers \\u003d sheet.insertSlicer(range.randomize(), 1, 10, 0, 0);\\n\\n// Logs the insert slicer result to the console.\\nconsole.log(insertSlicers);\\n```\\n@param range The range over which slicer slicer is created.\\n@param anchorRowPos The slicer's top side is anchored in this row.\\n@param anchorColPos The slicer's top side is anchored in this col.\\n@param offsetX The horizontal offset from cell corner in pixels.\\n@param offsetY The vertical offset from cell corner in pixels.\\n@return The newly inserted slicer.*/insertSlicer(range:SpreadsheetApp.Range,anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.Slicer;\\n/**Returns whether the given column is hidden by the user.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Columns start at 1\\nLogger.log(sheet.isColumnHiddenByUser(1));\\n```\\n@param columnPosition The position of the column to examine.\\n@return `true` if the column is hidden, `false` otherwise.*/isColumnHiddenByUser(columnPosition:Integer):boolean;\\n/**Returns `true` if this sheet layout is right-to-left. Returns `false` if the sheet\\nuses the default left-to-right layout.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Checks if a spreadsheet is ordered from right to left and logs the result to the console.\\nconsole.log(sheet.isRightToLeft());\\n```\\n@return `true` if right-to-left; `false` otherwise.*/isRightToLeft():boolean;\\n/**Returns whether the given row is hidden by a filter (not a filter view).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Rows start at 1\\nLogger.log(sheet.isRowHiddenByFilter(1));\\n```\\n@param rowPosition The position of the row to examine.\\n@return `true` if the row is hidden, `false` otherwise.*/isRowHiddenByFilter(rowPosition:Integer):boolean;\\n/**Returns whether the given row is hidden by the user.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Rows start at 1\\nLogger.log(sheet.isRowHiddenByUser(1));\\n```\\n@param rowPosition The position of the row to examine.\\n@return `true` if the row is hidden, `false` otherwise.*/isRowHiddenByUser(rowPosition:Integer):boolean;\\n/**Returns `true` if the sheet is currently hidden.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nif (sheet.isSheetHidden()) {\\n  // do something...\\n}\\n```\\n@return `true` if the sheet is hidden, `false` otherwise.*/isSheetHidden():boolean;\\n/**Moves the columns selected by the given range to the position indicated by the `destinationIndex`. The `columnSpec` itself does not have to exactly represent an entire\\ncolumn or group of columns to move—it selects all columns that the range spans.\\n\\n```\\n// The code below moves rows A-B to destination index 5.\\n// This results in those columns becoming columns C-D.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n// Selects column A and column B to be moved.\\nvar columnSpec \\u003d sheet.getRange(\\\"A1:B1\\\");\\nsheet.moveColumns(columnSpec, 5);\\n```\\n@param columnSpec A range spanning the columns that should be moved.\\n@param destinationIndex The index that the columns should be moved to. Note that this index is\\n    based on the coordinates before the columns are moved. Existing data is shifted right to\\n    make room for the moved columns while the source columns are removed from the grid.\\n    Therefore, the data may end up at a different index than originally specified.*/moveColumns(columnSpec:SpreadsheetApp.Range,destinationIndex:Integer):void;\\n/**Moves the rows selected by the given range to the position indicated by the `destinationIndex`. The `rowSpec` itself does not have to exactly represent an entire row\\nor group of rows to move—it selects all rows that the range spans.\\n\\n```\\n// The code below moves rows 1-2 to destination index 5.\\n// This results in those rows becoming rows 3-4.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n// Selects row 1 and row 2 to be moved.\\nvar rowSpec \\u003d sheet.getRange(\\\"A1:A2\\\");\\nsheet.moveRows(rowSpec, 5);\\n```\\n@param rowSpec A range spanning the rows that should be moved.\\n@param destinationIndex The index that the rows should be moved to. Note that this index is\\n    based on the coordinates before the rows are moved. Existing data is shifted down to make\\n    room for the moved rows while the source rows are removed from the grid. Therefore, the\\n    data may end up at a different index than originally specified.*/moveRows(rowSpec:SpreadsheetApp.Range,destinationIndex:Integer):void;\\n/**Returns a builder to create a new chart for this sheet.\\n\\nThis example shows how to create a new chart:\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B8\\\");\\nvar chartBuilder \\u003d sheet.newChart();\\nchartBuilder.addRange(range)\\n    .setChartType(Charts.ChartType.LINE)\\n    .setPosition(2, 2, 0, 0)\\n    .setOption('title', 'My Line Chart!');\\nsheet.insertChart(chartBuilder.build());\\n```\\n@return A builder to create a new chart.*/newChart():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Creates an object that can protect the sheet from being edited except by users who have\\npermission. Until the script actually changes the list of editors for the sheet (by calling\\n[`Protection.removeEditor(emailAddress)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#removeEditor(String)), [`Protection.removeEditor(user)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#removeEditor(User)), [`Protection.removeEditors(emailAddresses)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#removeEditors(String)), [`Protection.addEditor(emailAddress)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#addEditor(String)), [`Protection.addEditor(user)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#addEditor(User)), [`Protection.addEditors(emailAddresses)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#addEditors(String)), or setting a new\\nvalue for [`Protection.setDomainEdit(editable)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#setDomainEdit(Boolean))), the permissions mirror those of the\\nspreadsheet itself, which effectively means that the sheet remains unprotected. If the sheet is\\nalready protected, this method returns an object representing its existing protection settings.\\nA protected sheet may include unprotected regions.\\n\\n```\\n// Protect the active sheet, then remove all other users from the list of editors.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar protection \\u003d sheet.protect().setDescription('Sample protected sheet');\\n\\n// Ensure the current user is an editor before removing others. Otherwise, if the user's edit\\n// permission comes from a group, the script throws an exception upon removing the group.\\nvar me \\u003d Session.getEffectiveUser();\\nprotection.addEditor(me);\\nprotection.removeEditors(protection.getEditors());\\nif (protection.canDomainEdit()) {\\n  protection.setDomainEdit(false);\\n}\\n```\\n@return An object representing the protection settings.*/protect():SpreadsheetApp.Protection;\\n/**Removes a chart from the parent sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This removes all the embedded charts from the spreadsheet\\nvar charts \\u003d sheet.getCharts();\\nfor (var i in charts) {\\n  sheet.removeChart(charts[i]);\\n}\\n```\\n@param chart The chart to remove.*/removeChart(chart:SpreadsheetApp.EmbeddedChart):void;\\n/**Sets the specified range as the [`active range`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getActiveRange()) in the active sheet, with\\nthe top left cell in the range as the [`current cell`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getCurrentCell()).\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\nvar range \\u003d sheet.getRange('A1:D4');\\nsheet.setActiveRange(range);\\n\\nvar selection \\u003d sheet.getSelection();\\n// Current cell: A1\\nvar currentCell \\u003d selection.getCurrentCell();\\n// Active Range: A1:D4\\nvar activeRange \\u003d selection.getActiveRange();\\n```\\n@param range The range to set as the active range.\\n@return the newly active range*/setActiveRange(range:SpreadsheetApp.Range):SpreadsheetApp.Range;\\n/**Sets the specified list of ranges as the [`active ranges`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getActiveRangeList()) in the\\nactive sheet. The last range in the list is set as the [`active range`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getActiveRange()).\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['D4', 'B2:C4']);\\nsheet.setActiveRangeList(rangeList);\\n\\nvar selection \\u003d sheet.getSelection();\\n// Current cell: B2\\nvar currentCell \\u003d selection.getCurrentCell();\\n// Active range: B2:C4\\nvar activeRange \\u003d selection.getActiveRange();\\n// Active range list: [D4, B2:C4]\\nvar activeRangeList \\u003d selection.getActiveRangeList();\\n```\\n@param rangeList The list of ranges to select.\\n@return the newly selected list of ranges*/setActiveRangeList(rangeList:SpreadsheetApp.RangeList):SpreadsheetApp.RangeList;\\n/**Sets the active selection region for this sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:D4\\\");\\nsheet.setActiveSelection(range);\\n```\\n@param range The range to set as the active selection.\\n@return the newly active range*/setActiveSelection(range:SpreadsheetApp.Range):SpreadsheetApp.Range;\\n/**Sets the active selection, as specified in A1 notation or R1C1 notation.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nsheet.setActiveSelection(\\\"A1:D4\\\");\\n```\\n@param a1Notation The range to set as active, as specified in A1 notation or R1C1 notation.\\n@return the newly active range*/setActiveSelection(a1Notation:string):SpreadsheetApp.Range;\\n/**Sets the position of the column group control toggle on the sheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nsheet.setColumnGroupControlPosition(SpreadsheetApp.GroupControlTogglePosition.AFTER);\\n```\\n@param position The position of the column group control toggle.\\n@return This sheet, for chaining.*/setColumnGroupControlPosition(position:SpreadsheetApp.GroupControlTogglePosition):SpreadsheetApp.Sheet;\\n/**Sets the width of the given column in pixels.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sets the first column to a width of 200 pixels\\nsheet.setColumnWidth(1, 200);\\n```\\n@param columnPosition The position of the given column to set.\\n@param width The width in pixels to set it to.\\n@return the sheet, useful for method chaining*/setColumnWidth(columnPosition:Integer,width:Integer):SpreadsheetApp.Sheet;\\n/**Sets the width of the given columns in pixels.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sets the first three columns to a width of 200 pixels\\nsheet.setColumnWidths(1, 3, 200);\\n```\\n@param startColumn The starting column position to change.\\n@param numColumns The number of columns to change.\\n@param width The width in pixels to set it to.\\n@return This sheet, for chaining.*/setColumnWidths(startColumn:Integer,numColumns:Integer,width:Integer):SpreadsheetApp.Sheet;\\n/**Replaces all currently existing conditional format rules in the sheet with the input rules.\\nRules are evaluated in their input order.\\n\\n```\\n// Remove one of the existing conditional format rules.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.splice(1, 1); // Deletes the 2nd format rule.\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param rules The new conditional format rules.*/setConditionalFormatRules(rules:SpreadsheetApp.ConditionalFormatRule[]):void;\\n/**Sets the specified cell as the [`current cell`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getCurrentCell()).\\n\\nIf the specified cell is present in an already selected range, then that range becomes the\\nactive range with the cell as the current cell.\\n\\nIf the specified cell is not present in any selected range, then any existing selection is\\nremoved and the cell becomes the current cell and the active range.\\n\\n__Note:__The specified [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) must consist of one cell, otherwise it throws an\\nexception.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\\nvar cell \\u003d sheet.getRange('B5');\\nsheet.setCurrentCell(cell);\\n\\nvar selection \\u003d sheet.getSelection();\\n// Current cell: B5\\nvar currentCell \\u003d selection.getCurrentCell();\\n```\\n@param cell The cell to set as the current cell.\\n@return the newly set current cell*/setCurrentCell(cell:SpreadsheetApp.Range):SpreadsheetApp.Range;\\n/**Freezes the given number of columns. If zero, no columns are frozen.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Freezes the first column\\nsheet.setFrozenColumns(1);\\n```\\n@param columns The number of columns to freeze.*/setFrozenColumns(columns:Integer):void;\\n/**Freezes the given number of rows. If zero, no rows are frozen.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Freezes the first row\\nsheet.setFrozenRows(1);\\n```\\n@param rows The number of rows to freeze.*/setFrozenRows(rows:Integer):void;\\n/**Hides or reveals the sheet gridlines.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can us eSpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Hides the gridlines in the sheet.\\nsheet.setHiddenGridlines(true);\\n```\\n@param hideGridlines If `true`, hide gridlines in this sheet; otherwise show the\\n    gridlines.\\n@return This sheet, for chaining.*/setHiddenGridlines(hideGridlines:boolean):SpreadsheetApp.Sheet;\\n/**Sets the sheet name.\\n\\n```\\n// This example assumes there is a sheet named \\\"first\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"first\\\");\\nfirst.setName(\\\"not first anymore\\\");\\n```\\n@param name The new name for the sheet.\\n@return This sheet, for chaining.*/setName(name:string):SpreadsheetApp.Sheet;\\n/**Sets or unsets the sheet layout to right-to-left.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Sets the sheet layout, so that the sheet is ordered from right to left.\\nsheet.setRightToLeft(true);\\n```\\n@param rightToLeft If `true`, the sheet layout is set to right-to-left, with cell A1 at\\n    the top right corner. If `false`, the sheet layout is set to the default\\n    left-to-right, with cell A1 at the top left.\\n@return This sheet, for chaining.*/setRightToLeft(rightToLeft:boolean):SpreadsheetApp.Sheet;\\n/**Sets the position of the row group control toggle on the sheet.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nsheet.setRowGroupControlPosition(SpreadsheetApp.GroupControlTogglePosition.AFTER);\\n```\\n@param position The position of the row group control toggle.\\n@return This sheet, for chaining.*/setRowGroupControlPosition(position:SpreadsheetApp.GroupControlTogglePosition):SpreadsheetApp.Sheet;\\n/**Sets the row height of the given row in pixels. By default, rows grow to fit cell contents. If\\nyou want to force rows to a specified height, use [`setRowHeightsForced(startRow, numRows, height)`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#setRowHeightsForced(Integer,Integer,Integer)).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sets the first row to a height of 200 pixels\\nsheet.setRowHeight(1, 200);\\n```\\n@param rowPosition The row position to change.\\n@param height The height in pixels to set it to.\\n@return The sheet, useful for method chaining.*/setRowHeight(rowPosition:Integer,height:Integer):SpreadsheetApp.Sheet;\\n/**Sets the height of the given rows in pixels. By default, rows grow to fit cell contents. If you\\nwant to force rows to a specified height, use [`setRowHeightsForced(startRow, numRows, height)`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#setRowHeightsForced(Integer,Integer,Integer)).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sets the first three rows to a height of 20 pixels\\nsheet.setRowHeights(1, 3, 20);\\n```\\n@param startRow The starting row position to change.\\n@param numRows The number of rows to change.\\n@param height The height in pixels to set it to.\\n@return This sheet, for chaining.*/setRowHeights(startRow:Integer,numRows:Integer,height:Integer):SpreadsheetApp.Sheet;\\n/**Sets the height of the given rows in pixels. By default, rows grow to fit cell contents. When\\nyou use `setRowHeightsForced`, rows are forced to the specified height even if the\\ncell contents are taller than the row height.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sets the first three rows to a height of 5 pixels.\\nsheet.setRowHeightsForced(1, 3, 5);\\n```\\n@param startRow The starting row position to change.\\n@param numRows The number of rows to change.\\n@param height The height in pixels to set it to.\\n@return This sheet, for chaining.*/setRowHeightsForced(startRow:Integer,numRows:Integer,height:Integer):SpreadsheetApp.Sheet;\\n/**Sets the permissions for the current sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar permissions \\u003d sheet.getSheetProtection();\\n\\n// This copies the permissions on the first sheet to the second sheet\\nvar sheetToClonePermissionsTo \\u003d ss.getSheets()[1];\\nsheetToClonePermissionsTo.setSheetProtection(permissions);\\n```\\n@deprecated\\n@param permissions The access permissions object to set on this sheet.*/setSheetProtection(permissions:SpreadsheetApp.PageProtection):void;\\n/**Sets the sheet tab color.\\n\\n```\\n// This example assumes there is a sheet named \\\"first\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"first\\\");\\nfirst.setTabColor(\\\"ff0000\\\"); // Set the color to red.\\nfirst.setTabColor(null); // Unset the color.\\n```\\n@param color A color code in CSS notation (like `'#ffffff'` or `'white'`), or\\n    `null` to reset the tab color.\\n@return This sheet, for chaining.*/setTabColor(color:string):SpreadsheetApp.Sheet;\\n/**Sets the sheet tab color.\\n\\n```\\n// This example assumes there is a sheet named \\\"Sheet1\\\"\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar first \\u003d ss.getSheetByName(\\\"Sheet1\\\");\\nvar color \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT1)\\n    .build();\\nfirst.setTabColorObject(color); // Set the color to theme accent 1.\\nfirst.setTabColorObject(null); // Unset the color.\\n```\\n@param color The sheet tab color to set.\\n@return This sheet, for chaining.*/setTabColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Sheet;\\n/**Unhides the column at the given index.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Unhides the first column\\nsheet.showColumns(1);\\n```\\n@param columnIndex The index of the column to unhide.*/showColumns(columnIndex:Integer):void;\\n/**Unhides one or more consecutive columns starting at the given index.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Unhides the first three columns\\nsheet.showColumns(1, 3);\\n```\\n@param columnIndex The starting index of the columns to unhide.\\n@param numColumns The number of columns to unhide.*/showColumns(columnIndex:Integer,numColumns:Integer):void;\\n/**Unhides the row at the given index.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Unhides the first row\\nsheet.showRows(1);\\n```\\n@param rowIndex The index of the row to unhide.*/showRows(rowIndex:Integer):void;\\n/**Unhides one or more consecutive rows starting at the given index.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n// Unhides the first three rows\\nsheet.showRows(1, 3);\\n```\\n@param rowIndex The starting index of the rows to unhide.\\n@param numRows The number of rows to unhide.*/showRows(rowIndex:Integer,numRows:Integer):void;\\n/**Makes the sheet visible. Has no effect if the sheet is already visible.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nsheet.showSheet();\\n```\\n@return The current sheet.*/showSheet():SpreadsheetApp.Sheet;\\n/**Sorts a sheet by column, ascending.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sorts the sheet by the first column, ascending\\nsheet.sort(1);\\n```\\n@param columnPosition The column to sort by.\\n@return the sheet, useful for method chaining*/sort(columnPosition:Integer):SpreadsheetApp.Sheet;\\n/**Sorts a sheet by column. Takes a parameter to specify ascending or descending.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Sorts the sheet by the first column, descending\\nsheet.sort(1, false);\\n```\\n@param columnPosition The column to sort by.\\n@param ascending `true` for ascending sorts, `false` for descending.\\n@return the sheet, useful for method chaining*/sort(columnPosition:Integer,ascending:boolean):SpreadsheetApp.Sheet;\\n/**Unhides the column in the given range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This unhides the first column if it was previously hidden\\nvar range \\u003d sheet.getRange(\\\"A1\\\");\\nsheet.unhideColumn(range);\\n```\\n@param column The range to unhide, if hidden.*/unhideColumn(column:SpreadsheetApp.Range):void;\\n/**Unhides the row in the given range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This unhides the first row if it was previously hidden\\nvar range \\u003d sheet.getRange(\\\"A1\\\");\\nsheet.unhideRow(range);\\n```\\n@param row The range to unhide, if hidden.*/unhideRow(row:SpreadsheetApp.Range):void;\\n/**Updates the chart on this sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code is going to loop through all the charts and change them to\\n// column charts\\nvar charts \\u003d sheet.getCharts();\\nfor (var i in charts) {\\n  var chart \\u003d charts[i];\\n  var newChart \\u003d chart\\n      .modify()\\n      .setChartType(Charts.ChartType.COLUMN)\\n      .build();\\n  sheet.updateChart(newChart);\\n}\\n```\\n@param chart The chart to update.*/updateChart(chart:SpreadsheetApp.EmbeddedChart):void;}interface Selection{\\n/**Returns the selected range in the active sheet, or `null` if there is no active range. If\\nmultiple ranges are selected this method returns only the last selected range.\\n\\n```\\nvar selection \\u003d SpreadsheetApp.getActiveSpreadsheet().getSelection();\\nvar activeRange \\u003d selection.getActiveRange();\\n```\\n@return The active range.*/getActiveRange():SpreadsheetApp.Range;\\n/**Returns the list of active ranges in the active sheet or `null` if there are no active\\nranges.\\n\\nIf there is a single range selected, this behaves as a [`getActiveRange()`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html#getActiveRange()) call.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n// Returns the list of active ranges.\\nvar activeRangeList \\u003d sheet.getActiveRangeList();\\n```\\n@return The list of active ranges.*/getActiveRangeList():SpreadsheetApp.RangeList;\\n/**Returns the active sheet in the spreadsheet.\\n\\n```\\nvar selection \\u003d SpreadsheetApp.getActiveSpreadsheet().getSelection();\\nvar activeSheet \\u003d selection.getActiveSheet();\\n```\\n@return The active sheet in the spreadsheet.*/getActiveSheet():SpreadsheetApp.Sheet;\\n/**Returns the current (highlighted) cell that is selected in one of the active ranges or `null` if there is no current cell.\\n\\n```\\nvar selection \\u003d SpreadsheetApp.getActiveSpreadsheet().getSelection();\\n// Returns the current highlighted cell in the one of the active ranges.\\nvar currentCell \\u003d selection.getCurrentCell();\\n```\\n@return The current cell.*/getCurrentCell():SpreadsheetApp.Range;\\n/**Starting from the [`current cell`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html#getCurrentCell()) and [`active range`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html#getActiveRange())\\nand moving in the given direction, returns an adjusted range where the appropriate edge of the\\nrange has been shifted to cover the [`next data cell`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#getNextDataCell(Direction)) while still\\ncovering the current cell. If the active range is unbounded along the [`dimension`](https://developers.google.com/apps-script/reference/spreadsheet/dimension.html) of the direction, the original active range is returned. If there is no current cell\\nor active range, `null` is returned. This is equivalent to selecting a range in the\\neditor and hitting `Ctrl+Shift+[arrow key]`.\\n\\n```\\n// Assume the active spreadsheet is blank.\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// Makes C3 the current cell and C3:E5 the active range.\\nsheet.getRange('C3:E5').activate();\\n// Logs 'C1:E3'\\nconsole.log(SpreadsheetApp.getSelection()\\n                          .getNextDataRange(SpreadsheetApp.Direction.UP)\\n                          .getA1Notation());\\n```\\n@param direction The direction in which to find the next data region edge cell.\\n@return The adjusted range that includes the data cell, or `null` if there is no\\n    selection.*/getNextDataRange(direction:SpreadsheetApp.Direction):SpreadsheetApp.Range;}interface RichTextValueBuilder{\\n/**Creates a Rich Text value from this builder.\\n@return A Rich Text value created from this builder.*/build():SpreadsheetApp.RichTextValue;\\n/**Sets the link URL for the given substring of this value, or clears it if `linkUrl` is\\n`null`.\\n\\n```\\n// Creates a Rich Text value for the text \\\"foo no baz\\\" with \\\"foo\\\" pointing to\\n// \\\"https://bar.foo\\\" and \\\"baz\\\" to \\\"https://abc.xyz\\\".\\n// \\\"foo\\\" is underlined with the default link color, whereas \\\"baz\\\" has its text style\\n// overridden by a call to `setTextStyle`, and is therefore black and bold with no underlining.\\nconst boldStyle \\u003d SpreadsheetApp.newTextStyle()\\n    .setUnderline(false)\\n    .setBold(true)\\n    .setForegroundColor(\\\"#000000\\\")\\n    .build();\\nconst value \\u003d SpreadsheetApp.newRichTextValue()\\n    .setText(\\\"foo no baz\\\")\\n    .setLinkUrl(0, 3, \\\"https://bar.foo\\\")\\n    .setLinkUrl(7, 10, \\\"https://abc.xyz\\\")\\n    .setTextStyle(7, 10, boldStyle)\\n    .build();\\n```\\n@param startOffset The start offset for the substring, inclusive.\\n@param endOffset The end offset for the substring, exclusive.\\n@param linkUrl The link URL being set.\\n@return This builder, for chaining.*/setLinkUrl(startOffset:Integer,endOffset:Integer,linkUrl:string):SpreadsheetApp.RichTextValueBuilder;\\n/**Sets the link URL for the entire value, or clears it if `linkUrl` is `null`.\\n\\n```\\n// Creates a Rich Text value for the text \\\"Foo\\\" which points to \\\"https://bar.foo\\\".\\nconst value \\u003d SpreadsheetApp.newRichTextValue()\\n    .setText(\\\"Foo\\\")\\n    .setLinkUrl(\\\"https://bar.foo\\\")\\n    .build();\\n```\\n@param linkUrl The link URL being set.\\n@return This builder, for chaining.*/setLinkUrl(linkUrl:string):SpreadsheetApp.RichTextValueBuilder;\\n/**Sets the text for this value and clears any existing text style. When creating a new Rich Text\\nvalue, this should be called before [`setTextStyle(startOffset, endOffset, textStyle)`](https://developers.google.com/apps-script/reference/spreadsheet/rich-text-value-builder.html#setTextStyle(Integer,Integer,TextStyle)).\\n@param text The text for this value.\\n@return This builder, for chaining.*/setText(text:string):SpreadsheetApp.RichTextValueBuilder;\\n/**Applies a text style to the given substring of this value. Offsets are 0 based and are relative\\nto the cell's text value. Does nothing if `textStyle` is `null`.\\n\\n```\\n// Creates a Rich Text value for the text \\\"HelloWorld\\\", with \\\"Hello\\\" bolded, and \\\"World\\\"\\n// italicized.\\nvar bold \\u003d SpreadsheetApp.newTextStyle().setBold(true).build();\\nvar italic \\u003d SpreadsheetApp.newTextStyle().setItalic(true).build();\\nvar value \\u003d SpreadsheetApp.newRichTextValue()\\n    .setText(\\\"HelloWorld\\\")\\n    .setTextStyle(0, 5, bold)\\n    .setTextStyle(5, 10, italic)\\n    .build();\\n```\\n@param startOffset The start offset for the substring, inclusive.\\n@param endOffset The end offset for the substring, exclusive.\\n@param textStyle The text style being set.\\n@return This builder, for chaining.*/setTextStyle(startOffset:Integer,endOffset:Integer,textStyle:SpreadsheetApp.TextStyle):SpreadsheetApp.RichTextValueBuilder;\\n/**Applies a text style to the entire value. Previously set text styles are only affected if they\\nare directly overwritten by values within `textStyle`. Does nothing if `textStyle`\\nis `null`.\\n\\n```\\n// Creates a Rich Text value for the text \\\"HelloWorld\\\" with \\\"Hello\\\" bolded and italicized,\\n// and \\\"World\\\" only italicized.\\nvar bold \\u003d SpreadsheetApp.newTextStyle().setBold(true).build();\\nvar italic \\u003d SpreadsheetApp.newTextStyle().setItalic(true).build();\\nvar value \\u003d SpreadsheetApp.newRichTextValue()\\n    .setText(\\\"HelloWorld\\\")\\n    .setTextStyle(0, 5, bold)\\n    .setTextStyle(italic)\\n    .build();\\n```\\n@param textStyle The text style being set.\\n@return This builder, for chaining.*/setTextStyle(textStyle:SpreadsheetApp.TextStyle):SpreadsheetApp.RichTextValueBuilder;}interface RichTextValue{\\n/**Returns a builder for a Rich Text value initialized with the values of this Rich Text value.\\n@return A builder for a Rich Text value.*/copy():SpreadsheetApp.RichTextValueBuilder;\\n/**Gets the end index of this value in the cell.\\n@return The end index of this value in the cell.*/getEndIndex():Integer;\\n/**Returns the link URL for this value.\\n@return The link URL for this value, or `null` if there is no link or if there are\\n    multiple different links.*/getLinkUrl():string;\\n/**Returns the link URL for the text from `startOffset` to `endOffset`. Offsets are 0\\nbased and relative to the cell's text, with the start offset being inclusive and the end offset\\nbeing exclusive.\\n@param startOffset The start offset.\\n@param endOffset The end offset.\\n@return The link URL for this value, or `null` if there is no link or if multiple\\n    different links are in the given range.*/getLinkUrl(startOffset:Integer,endOffset:Integer):string;\\n/**Returns the Rich Text string split into an array of runs, wherein each run is the longest\\npossible substring having a consistent text style.\\n@return An array of runs.*/getRuns():SpreadsheetApp.RichTextValue[];\\n/**Gets the start index of this value in the cell.\\n@return The start index of this value in the cell.*/getStartIndex():Integer;\\n/**Returns the text of this value.\\n@return The text of this value.*/getText():string;\\n/**Returns the text style of this value.\\n@return The text style of this value.*/getTextStyle():SpreadsheetApp.TextStyle;\\n/**Returns the text style of the text from `startOffset` to `endOffset`. Offsets are 0\\nbased and relative to the cell's text, with the start offset being inclusive and the end offset\\nbeing exclusive.\\n@param startOffset The start offset.\\n@param endOffset The end offset.\\n@return The text style of the given substring of this value.*/getTextStyle(startOffset:Integer,endOffset:Integer):SpreadsheetApp.TextStyle;}interface RelativeDate{}interface _RelativeDate{\\n/**Dates that fall within the past month period.*/PAST_MONTH:RelativeDate;\\n/**Dates that fall within the past week period.*/PAST_WEEK:RelativeDate;\\n/**Dates that fall within the past year period.*/PAST_YEAR:RelativeDate;\\n/**Dates compared against the current date.*/TODAY:RelativeDate;\\n/**Dates compared against the date after the current date.*/TOMORROW:RelativeDate;\\n/**Dates compared against the date before the current date.*/YESTERDAY:RelativeDate;}interface RecalculationInterval{}interface _RecalculationInterval{\\n/**Recalculate when values are changed, and every hour.*/HOUR:RecalculationInterval;\\n/**Recalculate when values are changed, and every minute.*/MINUTE:RecalculationInterval;\\n/**Recalculate only when values are changed.*/ON_CHANGE:RecalculationInterval;}interface RangeList{\\n/**Selects the list of [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) instances. The last range in the list is set as the [`active range`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html#getActiveRange()).\\n\\n__Note:__ This provides a way to multi-select a number of ranges.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['D4', 'B2:C4']);\\nrangeList.activate();\\n\\nvar selection \\u003d sheet.getSelection();\\n// Current cell: B2\\nvar currentCell \\u003d selection.getCurrentCell();\\n// Active range: B2:C4\\nvar activeRange \\u003d selection.getActiveRange();\\n// Active range list: [D4, B2:C4]\\nvar activeRangeList \\u003d selection.getActiveRangeList();\\n```\\n@return The list of active ranges, for chaining.*/activate():SpreadsheetApp.RangeList;\\n/**Break all horizontally- or vertically-merged cells contained within the range list into\\nindividual cells again.\\n\\nCalling this function on a range list is equivalent to selecting a set of ranges and\\nselecting the __Format \\u003e Merge \\u003e Unmerge__ Sheets menu item.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.breakApart();\\n```\\n@return This range list, for chaining.*/breakApart():SpreadsheetApp.RangeList;\\n/**Changes the state of the checkboxes in the range to “checked”. Ignores the cells in the range\\nwhich currently do not contain either the checked or unchecked value configured.\\n\\n```\\n// Changes the state of cells which currently contain either the checked or unchecked value\\n// configured in the ranges D4 and E6 to 'checked'.\\nvar rangeList \\u003d SpreadsheetApp.getActive().getRangeList(['D4', 'E6']);\\nrangeList.check();\\n```\\n@return This range list, for chaining.*/check():SpreadsheetApp.RangeList;\\n/**Clears the range of contents, formats, and data validation rules for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in\\nthe range list.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.clear();\\n```\\n@return This range list, for chaining.*/clear():SpreadsheetApp.RangeList;\\n/**Clears the range of contents, format, data validation rules, and comments, as specified with\\nthe given options. By default all data is cleared.\\n\\n```\\n// The code below clears the contents of the following ranges A:A and C:C in the active sheet,\\n// but preserves the format, data validation rules, and comments.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.clear({contentsOnly: true});\\n```\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return This range list, for chaining.*/clear(options:Object):SpreadsheetApp.RangeList;\\n/**Clears the content of each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list, leaving the formatting intact.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.clearContent();\\n```\\n@return This range list, for chaining.*/clearContent():SpreadsheetApp.RangeList;\\n/**Clears the data validation rules for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.clearDataValidations();\\n```\\n@return This range list, for chaining.*/clearDataValidations():SpreadsheetApp.RangeList;\\n/**Clears text formatting for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list.\\n\\nThis clears text formatting for each range, but does not reset any number formatting rules.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.clearFormat();\\n```\\n@return This range list, for chaining.*/clearFormat():SpreadsheetApp.RangeList;\\n/**Clears the note for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.clearNote();\\n```\\n@return This range list, for chaining.*/clearNote():SpreadsheetApp.RangeList;\\n/**Returns a list of one or more [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) instances in the same sheet.\\n@return The list of ranges.*/getRanges():SpreadsheetApp.Range[];\\n/**Inserts checkboxes into each cell in the range, configured with `true` for checked and\\n`false` for unchecked. Sets the value of all cells in the range to `false`.\\n\\n```\\nvar rangeList \\u003d SpreadsheetApp.getActive().getRangeList(['D4', 'E6']);\\n\\n// Inserts checkboxes into each cell in the ranges D4 and E6 configured with 'true' for checked\\n// and 'false' for unchecked. Also, sets the value of each cell in the ranges D4 and E6 to\\n// 'false'.\\nrangeList.insertCheckboxes();\\n```\\n@return This range list, for chaining.*/insertCheckboxes():SpreadsheetApp.RangeList;\\n/**Inserts checkboxes into each cell in the range, configured with a custom value for checked and\\nthe empty string for unchecked. Sets the value of each cell in the range to the empty string.\\n\\n```\\nvar rangeList \\u003d SpreadsheetApp.getActive().getRangeList(['D4', 'E6']);\\n\\n// Inserts checkboxes into each cell in the ranges D4 and E6 configured with 'yes' for checked\\n// and the empty string for unchecked. Also, sets the value of each cell in the ranges D4 and\\n// E6 to the empty string.\\nrangeList.insertCheckboxes('yes');\\n```\\n@param checkedValue The checked value for the checkbox data validation.\\n@return This range list, for chaining.*/insertCheckboxes(checkedValue:Object):SpreadsheetApp.RangeList;\\n/**Inserts checkboxes into each cell in the range, configured with custom values for the checked\\nand unchecked states. Sets the value of each cell in the range to the custom unchecked value.\\n\\n```\\nvar rangeList \\u003d SpreadsheetApp.getActive().getRangeList(['D4', 'E6']);\\n\\n// Inserts checkboxes into each cell in the ranges D4 and E6 configured with 'yes' for checked\\n// and 'no' for unchecked. Also, sets the value of each cell in the ranges D4 and E6 to 'no'.\\nrangeList.insertCheckboxes('yes', 'no');\\n```\\n@param checkedValue The checked value for the checkbox data validation.\\n@param uncheckedValue The unchecked value for the checkbox data validation.\\n@return This range list, for chaining.*/insertCheckboxes(checkedValue:Object,uncheckedValue:Object):SpreadsheetApp.RangeList;\\n/**Removes all checkboxes from the range. Clears the data validation of each cell, and\\nadditionally clears its value if the cell contains either the checked or unchecked value.\\n\\n```\\nvar range \\u003d SpreadsheetApp.getActive().getRange('A1:B10');\\n\\n// Inserts checkboxes and sets each cell value to 'no' in the range A1:B10.\\nrange.insertCheckboxes('yes', 'no');\\n\\nvar rangeList1 \\u003d SpreadsheetApp.getActive().getRangeList(['A1', 'A3']);\\nrangeList1.setValue('yes');\\n// Removes the checkbox data validation in cells A1 and A3 and clears their value.\\nrangeList1.removeCheckboxes();\\n\\nvar rangeList2 \\u003d SpreadsheetApp.getActive().getRangeList(['A5', 'A7']);\\nrangeList2.setValue('random');\\n// Removes the checkbox data validation in cells A5 and A7 but does not clear their value.\\nrangeList2.removeCheckboxes();\\n```\\n@return This range list, for chaining.*/removeCheckboxes():SpreadsheetApp.RangeList;\\n/**Sets the background color for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. Color is represented in\\nin CSS notation; for example, `'#ffffff'` or `'white'`.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.setBackground('red');\\n```\\n@param color The background color code in CSS notation such as `'#ffffff'` or `'white'`; a `null` value resets the color.\\n@return This range list, for chaining.*/setBackground(color:string):SpreadsheetApp.RangeList;\\n/**Sets the background to the given RGB color. This is a convenience wrapper around a [`setBackground(color)`](https://developers.google.com/apps-script/reference/spreadsheet/range-list.html#setBackground(String)) call.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\n// Sets the background to red for each range in the range list.\\nrangeList.setBackgroundRGB(255, 0, 0);\\n```\\n@param red The red value in RGB notation.\\n@param green The green value in RGB notation.\\n@param blue The blue value in RGB notation.\\n@return This range list, for chaining.*/setBackgroundRGB(red:Integer,green:Integer,blue:Integer):SpreadsheetApp.RangeList;\\n/**Sets the border property for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The valid values are\\n`true` (on), `false` (off) and `null` (no change).\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A2:B4', 'C1:D4']);\\n// Sets borders on the top and bottom of the ranges A2:B4 and C1:D4, but leaves the left and\\n// right unchanged.\\nrangeList.setBorder(true, null, true, null, false, false);\\n```\\n@param top `true` for border, `false` for none, `null` for no change.\\n@param left `true` for border, `false` for none, `null` for no change.\\n@param bottom `true` for border, `false` for none, `null` for no change.\\n@param right `true` for border, `false` for none, `null` for no change.\\n@param vertical `true` for internal vertical borders, `false` for none, `null` for no change.\\n@param horizontal `true` for internal horizontal borders, `false` for none, `null` for no change.\\n@return This range list, for chaining.*/setBorder(top:boolean,left:boolean,bottom:boolean,right:boolean,vertical:boolean,horizontal:boolean):SpreadsheetApp.RangeList;\\n/**Sets the border property with color and/or style for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list.\\nValid values are `true` (on), `false` (off) and `null` (no change). Color is\\nrepresented in in CSS notation; for example, `'#ffffff'` or `'white'`.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A2:B4', 'C1:D4']);\\n// Sets borders on the top and bottom, but leaves the left and right unchanged of the ranges\\n// A2:B4 and C1:D4. Also sets the color to 'red', and the border to 'DASHED'.\\nrangeList.setBorder(\\n    true, null, true, null, false, false, 'red', SpreadsheetApp.BorderStyle.DASHED);\\n```\\n@param top `true` for border, `false` for none, `null` for no change.\\n@param left `true` for border, `false` for none, `null` for no change.\\n@param bottom `true` for border, `false` for none, `null` for no change.\\n@param right `true` for border, `false` for none, `null` for no change.\\n@param vertical `true` for internal vertical borders, `false` for none, `null` for no change.\\n@param horizontal `true` for internal horizontal borders, `false` for none, `null` for no change.\\n@param color The border color in CSS notation like `'#ffffff'` or `'white'`, `null` for default color (black).\\n@param style The style for the borders, `null` for default style (solid).\\n@return This range list, for chaining.*/setBorder(top:boolean,left:boolean,bottom:boolean,right:boolean,vertical:boolean,horizontal:boolean,color:string,style:SpreadsheetApp.BorderStyle):SpreadsheetApp.RangeList;\\n/**Sets the font color for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. Color is represented in in CSS\\nnotation; for example, `'#ffffff'` or `'white'`.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.setFontColor('red');\\n```\\n@param color The font color in CSS notation such as `'#ffffff'` or `'white'`; a\\n    `null` value resets the color.\\n@return This range list, for chaining.*/setFontColor(color:string):SpreadsheetApp.RangeList;\\n/**Sets the font family for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The font family is described\\nby a string identifier such as `Arial` or `Roboto`.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.setFontFamily('Roboto');\\n```\\n@param fontFamily The font family to set; a `null` value resets the font family.\\n@return This range list, for chaining.*/setFontFamily(fontFamily:string):SpreadsheetApp.RangeList;\\n/**Sets the font line style for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The line styles options\\nare `'underline'`, `'line-through'`, or `'none'`.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.setFontLine('line-through');\\n```\\n@param fontLine The font line style, either `'underline'`, `'line-through'`, or\\n    `'none'`; a `null` value resets the font line style.\\n@return This range list, for chaining.*/setFontLine(fontLine:string):SpreadsheetApp.RangeList;\\n/**Sets the font size (in points) for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.setFontSize(20);\\n```\\n@param size A font point size.\\n@return This range list, for chaining.*/setFontSize(size:Integer):SpreadsheetApp.RangeList;\\n/**Set the font style for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The font style options are\\n`'italic'` or `'normal'`.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.setFontStyle(\\\"italic\\\");\\n```\\n@param fontStyle The font style, either `'italic'` or `'normal'`; a `null`\\n    value resets the font style.\\n@return This range list, for chaining.*/setFontStyle(fontStyle:string):SpreadsheetApp.RangeList;\\n/**Set the font weight for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The font weight options are\\n`'normal'` or `'bold'`.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.setFontWeight('bold');\\n```\\n@param fontWeight The font weight, either `'bold'` or `'normal'`; a `null`\\n    value resets the font weight.\\n@return This range list, for chaining.*/setFontWeight(fontWeight:string):SpreadsheetApp.RangeList;\\n/**Updates the formula for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The given formula must be in\\nA1 notation.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A11', 'C11']);\\nrangeList.setFormula('\\u003dSUM(B1:B10)');\\n```\\n@param formula A string representing the formula to set.\\n@return This range list, for chaining.*/setFormula(formula:string):SpreadsheetApp.RangeList;\\n/**Updates the formula for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The given formula must be in\\nR1C1 notation.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A11', 'C11']);\\n// This sets the formula to be the sum of the 3 rows above B5\\nrangeList.setFormulaR1C1('\\u003dSUM(R[-3]C[0]:R[-1]C[0])');\\n```\\n@param formula A string formula.\\n@return This range list, for chaining.*/setFormulaR1C1(formula:string):SpreadsheetApp.RangeList;\\n/**Set the horizontal alignment for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The alignment options\\nare `'left'`, `'center'`, or `'right'`.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.setHorizontalAlignment(\\\"center\\\");\\n```\\n@param alignment The alignment, either `'left'`, `'center'` or `'normal'`; a\\n    `null` value resets the alignment.\\n@return This range list, for chaining.*/setHorizontalAlignment(alignment:string):SpreadsheetApp.RangeList;\\n/**Sets the note text for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.setNote('This is a note');\\n```\\n@param note The note text to set; a `null` value removes the note.\\n@return This range list, for chaining.*/setNote(note:string):SpreadsheetApp.RangeList;\\n/**Sets the number or date format for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list.\\n\\nThe accepted formatting patterns are described in the [Sheets API date and number formatting guide](/sheets/api/guides/formats).\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A1:A10', 'C1:C10']);\\n// Always show 3 decimal points for the specified ranges.\\nrangeList.setNumberFormat('0.000');\\n```\\n@param numberFormat A number format string.\\n@return This range list, for chaining.*/setNumberFormat(numberFormat:string):SpreadsheetApp.RangeList;\\n/**Sets whether or not each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list should show hyperlinks.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A1:A10', 'C1:C10']);\\n// Show hyperlinks for all the ranges.\\nrangeList.setShowHyperlink(true);\\n```\\n@param showHyperlink Whether or not to show the hyperlink.\\n@return This range list, for chaining.*/setShowHyperlink(showHyperlink:boolean):SpreadsheetApp.RangeList;\\n/**Sets the text direction for the cells in each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. If a\\nspecified direction is `null`, the direction is inferred and then set.\\n\\n```\\n// Sets right-to-left text direction each range in the range list.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A1:A10', 'C1:C10']);\\nrangeList.setTextDirection(SpreadsheetApp.TextDirection.RIGHT_TO_LEFT);\\n```\\n@param direction The desired text direction; if `null` the direction is inferred before\\n    setting.\\n@return This range list, for chaining.*/setTextDirection(direction:SpreadsheetApp.TextDirection):SpreadsheetApp.RangeList;\\n/**Sets the text rotation settings for the cells in each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The\\ninput corresponds to the angle between the standard text orientation and the desired\\norientation. An input of zero indicates that the text is set to the standard orientation.\\n\\nFor left to right text direction, positive angles are in the counterclockwise direction,\\nwhereas for right to left they are in the clockwise direction.\\n\\n```\\n// Sets the cells in the ranges A1:A10 and C1:C10 to have text rotated up 45 degrees.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['A1:A10', 'C1:C10']);\\nrangeList.setTextRotation(45);\\n```\\n@param degrees The desired angle between the standard orientation and the desired orientation.\\n    For left to right text, positive angles are in the counterclockwise direction.\\n@return This range list, for chaining.*/setTextRotation(degrees:Integer):SpreadsheetApp.RangeList;\\n/**Sets the value for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The value can be numeric, string,\\nboolean or date. If it begins with '\\u003d' it is interpreted as a formula.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n// Set value of 100 to each range in the range list.\\nvar rangeList \\u003d sheet.getRangeList(['A:A', 'C:C']);\\nrangeList.setValue(100);\\n```\\n@param value The value for the range.\\n@return This range list, for chaining.*/setValue(value:Object):SpreadsheetApp.RangeList;\\n/**Set the vertical alignment for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. The alignment options\\nare `'top'`, `'middle'` or `'bottom'`.\\n\\n```\\n// Sets the vertical alignment to middle for the list of ranges.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['D4', 'B2:C4']);\\nrangeList.setVerticalAlignment(\\\"middle\\\");\\n```\\n@param alignment The alignment, either `'top'`, `'middle'` or `'bottom'`; a\\n    `null` value resets the alignment.\\n@return This range list, for chaining.*/setVerticalAlignment(alignment:string):SpreadsheetApp.RangeList;\\n/**Sets whether or not to stack the text for the cells for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range\\nlist. If the text is stacked vertically, the degree text rotation setting is ignored.\\n\\n```\\n// Sets all cell's in ranges D4 and B2:D4 to have vertically stacked text.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['D4', 'B2:C4']);\\nrangeList.setVerticalText(true);\\n```\\n@param isVertical Whether or not to stack the text.\\n@return This range list, for chaining.*/setVerticalText(isVertical:boolean):SpreadsheetApp.RangeList;\\n/**Set text wrapping for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list. Cells with wrap enabled resize\\nto display their full content. Cells with wrap disabled display as much as possible in the cell\\nwithout resizing or running to multiple lines.\\n\\n```\\n// Enable text wrap for the list of ranges.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['D4', 'B2:C4']);\\nrangeList.setWrap(true);\\n```\\n@param isWrapEnabled Whether to wrap text or not.\\n@return This range list, for chaining.*/setWrap(isWrapEnabled:boolean):SpreadsheetApp.RangeList;\\n/**Sets the text wrapping strategy for each [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) in the range list.\\n\\n```\\n// Sets the list of ranges to use the clip wrap strategy.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeList \\u003d sheet.getRangeList(['D4', 'B2:C4']);\\nrangeList.setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP);\\n```\\n@param strategy The desired wrapping strategy.\\n@return This range list, for chaining.*/setWrapStrategy(strategy:SpreadsheetApp.WrapStrategy):SpreadsheetApp.RangeList;\\n/**Trims the whitespace (such as spaces, tabs, or new lines) in every cell in this range list.\\nRemoves all whitespace from the start and end of each cell's text, and reduces any subsequence\\nof remaining whitespace characters to a single space.\\n\\n__Note__: If the resulting trimmed text starts with a '+' or '\\u003d'\\ncharacter, the text remains as a string value and isn't interpreted as a formula.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getRange('A1:A4');\\nrange.activate();\\nrange.setValues(\\n    [' preceding space', 'following space ', 'two  middle  spaces', '   \\u003dSUM(1,2)']);\\n\\nvar rangeList \\u003d sheet.getRangeList(['A1', 'A2', 'A3', 'A4']);\\nrangeList.trimWhitespace();\\n\\nvar values \\u003d range.getValues();\\n// Values are ['preceding space', 'following space', 'two middle spaces', '\\u003dSUM(1,2)']\\n```\\n@return This range list, for chaining.*/trimWhitespace():SpreadsheetApp.RangeList;\\n/**Changes the state of the checkboxes in the range to “unchecked”. Ignores the cells in the range\\nwhich currently do not contain either the checked or unchecked value configured.\\n\\n```\\n// Changes the state of cells which currently contain either the checked or unchecked value\\n// configured in the ranges D4 and E6 to 'unchecked'.\\nvar rangeList \\u003d SpreadsheetApp.getActive().getRangeList(['D4', 'E6']);\\nrangeList.uncheck();\\n```\\n@return This range list, for chaining.*/uncheck():SpreadsheetApp.RangeList;}interface Range{\\n/**Sets the specified range as the [`active range`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html#getActiveRange()), with the top\\nleft cell in the range as the [`current cell`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html#getCurrentCell()).\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getRange('A1:D10');\\nrange.activate();\\n\\nvar selection \\u003d sheet.getSelection();\\n// Current cell: A1\\nvar currentCell \\u003d selection.getCurrentCell();\\n// Active Range: A1:D10\\nvar activeRange \\u003d selection.getActiveRange();\\n```\\n@return This range, for chaining.*/activate():SpreadsheetApp.Range;\\n/**Sets the specified cell as the [`current cell`](https://developers.google.com/apps-script/reference/spreadsheet/selection.html#getCurrentCell()).\\n\\nIf the specified cell is present in an existing range, then that range becomes the active\\nrange with the cell as the current cell.\\n\\nIf the specified cell is not present in any existing range, then the existing selection is\\nremoved and the cell becomes the current cell and the active range.\\n\\n__Note:__ The specified [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) must consist of one cell, otherwise it throws an\\nexception.\\n\\n```\\n// Gets the first sheet of the spreadsheet.\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\n\\n// Gets the cell B5 and sets it as the active cell.\\nvar range \\u003d sheet.getRange('B5');\\nvar currentCell \\u003d range.activateAsCurrentCell();\\n\\n// Logs the activated cell.\\nconsole.log(currentCell.getA1Notation());\\n```\\n@return This range, for chaining.*/activateAsCurrentCell():SpreadsheetApp.Range;\\n/**Adds developer metadata with the specified key to the range.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets row 2 on the sheet.\\nconst range \\u003d sheet.getRange('2:2');\\n\\n// Adds the key 'NAME' to the developer metadata for row 2.\\nrange.addDeveloperMetadata('NAME');\\n\\n// Gets the metadata and logs it to the console.\\nconst developerMetaData \\u003d range.getDeveloperMetadata()[0];\\nconsole.log(developerMetaData.getKey());\\n```\\n@param key The key for the new developer metadata.\\n@return This range, for chaining.*/addDeveloperMetadata(key:string):SpreadsheetApp.Range;\\n/**Adds developer metadata with the specified key and visibility to the range.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets row 2 on Sheet1.\\nconst range \\u003d sheet.getRange('2:2');\\n\\n// Adds the key 'NAME' and sets the developer metadata visibility to 'DOCUMENT'\\n// for row 2 on Sheet1.\\nrange.addDeveloperMetadata('NAME', SpreadsheetApp.DeveloperMetadataVisibility.DOCUMENT);\\n\\n// Gets the updated metadata info and logs it to the console.\\nconst developerMetaData \\u003d range.getDeveloperMetadata()[0];\\nconsole.log(developerMetaData.getKey());\\nconsole.log(developerMetaData.getVisibility().toString());\\n```\\n@param key The key for the new developer metadata.\\n@param visibility The visibility of the new developer metadata.\\n@return This range, for chaining.*/addDeveloperMetadata(key:string,visibility:SpreadsheetApp.DeveloperMetadataVisibility):SpreadsheetApp.Range;\\n/**Adds developer metadata with the specified key and value to the range.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets row 2 of Sheet1.\\nconst range \\u003d sheet.getRange('2:2');\\n\\n// Adds the key 'NAME' and sets the value to 'GOOGLE' for the metadata of row 2.\\nrange.addDeveloperMetadata('NAME', 'GOOGLE');\\n\\n// Gets the metadata and logs it to the console.\\nconst developerMetaData \\u003d range.getDeveloperMetadata()[0];\\nconsole.log(developerMetaData.getKey());\\nconsole.log(developerMetaData.getValue());\\n```\\n@param key The key for the new developer metadata.\\n@param value The value for the new developer metadata.\\n@return This range, for chaining.*/addDeveloperMetadata(key:string,value:string):SpreadsheetApp.Range;\\n/**Adds developer metadata with the specified key, value, and visibility to the range.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets row 2 on the sheet.\\nconst range \\u003d sheet.getRange('2:2');\\n\\n// Adds the key 'NAME', sets the value to 'GOOGLE', and sets the visibility\\n// to PROJECT for row 2 on the sheet.\\nrange.addDeveloperMetadata(\\n  'NAME',\\n  'GOOGLE',\\n  SpreadsheetApp.DeveloperMetadataVisibility.PROJECT);\\n\\n// Gets the updated metadata info and logs it to the console.\\nconst developerMetaData \\u003d range.getDeveloperMetadata()[0];\\nconsole.log(developerMetaData.getKey());\\nconsole.log(developerMetaData.getValue());\\nconsole.log(developerMetaData.getVisibility().toString());\\n```\\n@param key The key for the new developer metadata.\\n@param value The value for the new developer metadata.\\n@param visibility The visibility of the new developer metadata.\\n@return This range, for chaining.*/addDeveloperMetadata(key:string,value:string,visibility:SpreadsheetApp.DeveloperMetadataVisibility):SpreadsheetApp.Range;\\n/**Applies a default column banding theme to the range. By default, the banding has header and no\\nfooter color.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets row 2 on the sheet.\\nconst range \\u003d sheet.getRange('2:2');\\n\\n// Applies column banding to row 2.\\nconst colBanding \\u003d range.applyColumnBanding();\\n\\n// Gets the first banding on the sheet and logs the color of the header column.\\nconsole.log(sheet.getBandings()[0].getHeaderColumnColorObject().asRgbColor().asHexString());\\n\\n// Gets the first banding on the sheet and logs the color of the second column.\\nconsole.log(sheet.getBandings()[0].getSecondColumnColorObject().asRgbColor().asHexString());\\n```\\n@return The new banding.*/applyColumnBanding():SpreadsheetApp.Banding;\\n/**Applies a specified column banding theme to the range. By default, the banding has header and\\nno footer color.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets row 2 on the sheet.\\nconst range \\u003d sheet.getRange('2:2');\\n\\n// Applies the INDIGO color banding theme to the columns in row 2.\\nconst colBanding \\u003d range.applyColumnBanding(SpreadsheetApp.BandingTheme.INDIGO);\\n\\n// Gets the first banding on the sheet and logs the color of the second column.\\nconsole.log(sheet.getBandings()[0].getSecondColumnColorObject().asRgbColor().asHexString());\\n```\\n@param bandingTheme A color theme to apply to the columns in the range.\\n@return The new banding.*/applyColumnBanding(bandingTheme:SpreadsheetApp.BandingTheme):SpreadsheetApp.Banding;\\n/**Applies a specified column banding theme to the range with specified header and footer\\nsettings.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets rows 12-22 on the sheet.\\nconst range \\u003d sheet.getRange('12:22');\\n\\n// Applies the BLUE color banding theme to rows 12-22.\\n// Sets the header visibility to false and the footer visibility to true.\\nconst colBanding \\u003d range.applyColumnBanding(SpreadsheetApp.BandingTheme.BLUE, false, true);\\n\\n// Gets the banding color and logs it to the console.\\nconsole.log(sheet.getBandings()[0].getSecondColumnColorObject().asRgbColor().asHexString());\\n\\n// Gets the header color object and logs it to the console. Returns null because the header\\n// visibility is set to false.\\nconsole.log(sheet.getBandings()[0].getHeaderColumnColorObject());\\n\\n// Gets the footer color and logs it to the console.\\nconsole.log(sheet.getBandings()[0].getFooterColumnColorObject().asRgbColor().asHexString());\\n```\\n@param bandingTheme A color theme to apply to the columns in the range.\\n@param showHeader If `true`, the banding theme header color is applied to the first\\n    column.\\n@param showFooter If `true`, the banding theme footer color is applied to the last\\n    column.\\n@return The new banding.*/applyColumnBanding(bandingTheme:SpreadsheetApp.BandingTheme,showHeader:boolean,showFooter:boolean):SpreadsheetApp.Banding;\\n/**Applies a default row banding theme to the range. By default, the banding has header and no\\nfooter color.\\n\\n```\\n// Opens the spreadsheet by its URL. If you created your script from within a Google Sheets\\n// spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets rows 1-30 on Sheet1.\\nconst range \\u003d sheet.getRange('1:30');\\n\\n// Applies row banding to rows 1-30.\\nrange.applyRowBanding();\\n\\n// Gets the hex color of the second banded row.\\nconst secondRowColor \\u003d range.getBandings()[0]\\n                            .getSecondRowColorObject()\\n                            .asRgbColor()\\n                            .asHexString();\\n\\n// Logs the hex color to console.\\nconsole.log(secondRowColor);\\n```\\n@return The banding.*/applyRowBanding():SpreadsheetApp.Banding;\\n/**Applies a specified row banding theme to the range. By default, the banding has header and no\\nfooter color.\\n\\n```\\n// Opens the spreadsheet by its URL. If you created your script from within a Google Sheets\\n// spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets rows 1-30 on Sheet1.\\nconst range \\u003d sheet.getRange('1:30');\\n\\n// Applies the INDIGO row banding theme to rows 1-30.\\nrange.applyRowBanding(SpreadsheetApp.BandingTheme.INDIGO);\\n\\n// Gets the hex color of the second banded row.\\nconst secondRowColor \\u003d range.getBandings()[0]\\n                            .getSecondRowColorObject()\\n                            .asRgbColor()\\n                            .asHexString();\\n\\n// Logs the hex color to console.\\nconsole.log(secondRowColor);\\n```\\n@param bandingTheme A color theme to apply to the rows in the range.\\n@return The new banding.*/applyRowBanding(bandingTheme:SpreadsheetApp.BandingTheme):SpreadsheetApp.Banding;\\n/**Applies a specified row banding theme to the range with specified header and footer settings.\\n\\n```\\n// Opens the spreadsheet by its URL. If you created your script from within a Google Sheets\\n// spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets rows 1-30 on Sheet1.\\nconst range \\u003d sheet.getRange('1:30');\\n\\n// Applies the INDIGO row banding to rows 1-30 and\\n// specifies to hide the header and show the footer.\\nrange.applyRowBanding(SpreadsheetApp.BandingTheme.INDIGO, false, true);\\n```\\n@param bandingTheme A color theme to apply to the rows in the range.\\n@param showHeader If `true`, the banding theme header color is applied to the first row.\\n@param showFooter If `true`, the banding theme footer color is applied to the last row.\\n@return The new banding.*/applyRowBanding(bandingTheme:SpreadsheetApp.BandingTheme,showHeader:boolean,showFooter:boolean):SpreadsheetApp.Banding;\\n/**Fills the `destinationRange` with data based on the data in this range. The new values\\nare also determined by the specified `series` type. The destination range must contain\\nthis range and extend it in only one direction. For example, the following fills `A1:A20`\\nwith a series of increasing numbers based on the current values in `A1:A4`:\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n\\n// Has values [1, 2, 3, 4].\\nvar sourceRange \\u003d sheet.getRange(\\\"A1:A4\\\");\\n// The range to fill with values.\\nvar destination \\u003d sheet.getRange(\\\"A1:A20\\\");\\n\\n// Inserts new values in A5:A20, continuing the pattern expressed in A1:A4\\nsourceRange.autoFill(destination, SpreadsheetApp.AutoFillSeries.DEFAULT_SERIES);\\n\\n```\\n@param destination The range to be auto-filled with values. The destination range should\\n    contain this range and extend it in only one direction (upwards, downwards, left, or\\n    right).\\n@param series The type of autoFill series that should be used to calculate new values. The\\n    effect of this series differs based on the type and amount of source data.*/autoFill(destination:SpreadsheetApp.Range,series:SpreadsheetApp.AutoFillSeries):void;\\n/**Calculates a range to fill with new data based on neighboring cells and automatically fills\\nthat range with new values based on the data contained in this range. These new values are also\\ndetermined by the specified `series` type.\\n\\nThe calculated destination range considers the surrounding data to determine where the new\\nvalues should be inserted: if there is data to the immediate left or right of a column that is\\nbeing auto-filled, new values only extend as far as this adjacent data.\\n\\nFor example, if `A1:A20` is filled with a series of increasing numbers and this method\\nis called on the range `B1:B4` which contains a series of dates, new values are only\\ninserted into `B5:B20`. In this way, these new values \\\"stick\\\" to the cells that contain\\nvalues in column A.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n\\n// A1:A20 has values [1, 2, 3, ... 20].\\n// B1:B4 has values [1/1/2017, 1/2/2017, ...]\\nvar sourceRange \\u003d sheet.getRange(\\\"B1:B4\\\");\\n\\n// Results in B5:B20 having values [1/5/2017, ... 1/20/2017]\\nsourceRange.autoFillToNeighbor(SpreadsheetApp.AutoFillSeries.DEFAULT_SERIES);\\n```\\n@param series The type of autoFill series that should be used to calculate new values. The\\n    effect of this series differs based on the type and amount of source data.*/autoFillToNeighbor(series:SpreadsheetApp.AutoFillSeries):void;\\n/**Break any multi-column cells in the range into individual cells again.\\n\\nCalling this function on a range is equivalent to selecting a range and clicking\\n__Format__ \\u003cspan aria-label\\u003d\\\"and then\\\"\\u003e\\u003e\\u003c/span\\u003e __Merge cells__ \\u003cspan aria-label\\u003d\\\"and\\nthen\\\"\\u003e\\u003e\\u003c/span\\u003e __Unmerge__.\\n\\n```\\n// Opens the spreadsheet by its URL. If you created your script from within a Google Sheets\\n// spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:C6 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:C6');\\n\\n// Unmerges the range A1:C6 into individual cells.\\nrange.breakApart();\\n```\\n@return This range, for chaining.*/breakApart():SpreadsheetApp.Range;\\n/**Determines whether the user has permission to edit every cell in the range. The spreadsheet\\nowner is always able to edit protected ranges and sheets.\\n\\n```\\n// Opens the spreadsheet by its URL. If you created your script from within a Google Sheets\\n// spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:C6 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:C6');\\n\\n// Logs whether the user has permission to edit every cell in the range.\\nconsole.log(range.canEdit());\\n```\\n@return `true` if the user has permission to edit every cell in the range; `false`\\n    otherwise.*/canEdit():boolean;\\n/**Changes the state of the checkboxes in the range to “checked”. Ignores the cells in the range\\nwhich currently do not contain either the checked or unchecked value configured.\\n\\n```\\n// Changes the state of cells which currently contain either the checked or unchecked value\\n// configured in the range A1:B10 to 'checked'.\\nvar range \\u003d SpreadsheetApp.getActive().getRange('A1:B10');\\nrange.check();\\n```\\n@return This range, for chaining.*/check():SpreadsheetApp.Range;\\n/**Clears the range of contents and formats.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:D10\\\");\\nrange.clear();\\n```\\n@return This range, for chaining.*/clear():SpreadsheetApp.Range;\\n/**Clears the range of contents, format, data validation rules, and/or comments, as specified with\\nthe given advanced options. By default all data is cleared.\\n\\n```\\n// The code below clears range C2:G7 in the active sheet, but preserves the format,\\n// data validation rules, and comments.\\nSpreadsheetApp.getActiveSheet().getRange(2, 3, 6, 5).clear({contentsOnly: true});\\n```\\n@param options A JavaScript object that specifies advanced parameters, as listed below.\\n@return This range, for chaining.*/clear(options:Object):SpreadsheetApp.Range;\\n/**Clears the content of the range, leaving the formatting intact.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:D10\\\");\\nrange.clearContent();\\n```\\n@return This range, for chaining.*/clearContent():SpreadsheetApp.Range;\\n/**Clears the data validation rules for the range.\\n\\n```\\n// Clear the data validation rules for cells A1:B5.\\nvar range \\u003d SpreadsheetApp.getActive().getRange('A1:B5');\\nrange.clearDataValidations();\\n```\\n@return This range, for chaining.*/clearDataValidations():SpreadsheetApp.Range;\\n/**Clears formatting for this range.\\n\\nThis clears text formatting for the cell or cells in the range, but does not reset any\\nnumber formatting rules.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:D10\\\");\\nrange.clearFormat();\\n```\\n@return This range, for chaining.*/clearFormat():SpreadsheetApp.Range;\\n/**Clears the note in the given cell or cells.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:D10\\\");\\nrange.clearNote();\\n```\\n@return This range, for chaining.*/clearNote():SpreadsheetApp.Range;\\n/**Collapses all groups that are wholly contained within the range. If no group is fully within\\nthe range, the deepest expanded group that is partially within the range is collapsed.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getActiveRange();\\n\\n// All row and column groups within the range are collapsed.\\nrange.collapseGroups();\\n```\\n@return This range, for chaining.*/collapseGroups():SpreadsheetApp.Range;\\n/**Copy the formatting of the range to the given location. If the destination is larger or smaller\\nthan the source range then the source is repeated or truncated accordingly. Note that this\\nmethod copies the formatting only.\\n\\nFor a detailed description of the gridId parameter, see [`getGridId()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#getGridId()).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar source \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d source.getRange(\\\"B2:D4\\\");\\n\\n// This copies the formatting in B2:D4 in the source sheet to\\n// D4:F6 in the sheet with gridId 1555299895. Note that you can get the gridId\\n// of a sheet by calling sheet.getSheetId() or range.getGridId().\\nrange.copyFormatToRange(1555299895, 4, 6, 4, 6);\\n```\\n@param gridId The unique ID of the sheet within the spreadsheet, irrespective of position.\\n@param column The first column of the target range.\\n@param columnEnd The end column of the target range.\\n@param row The start row of the target range.\\n@param rowEnd The end row of the target range.*/copyFormatToRange(gridId:Integer,column:Integer,columnEnd:Integer,row:Integer,rowEnd:Integer):void;\\n/**Copy the formatting of the range to the given location. If the destination is larger or smaller\\nthan the source range then the source is repeated or truncated accordingly. Note that this\\nmethod copies the formatting only.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar source \\u003d ss.getSheets()[0];\\nvar destination \\u003d ss.getSheets()[1];\\n\\nvar range \\u003d source.getRange(\\\"B2:D4\\\");\\n\\n// This copies the formatting in B2:D4 in the source sheet to\\n// D4:F6 in the second sheet\\nrange.copyFormatToRange(destination, 4, 6, 4, 6);\\n```\\n@param sheet The target sheet.\\n@param column The first column of the target range.\\n@param columnEnd The end column of the target range.\\n@param row The start row of the target range.\\n@param rowEnd The end row of the target range.*/copyFormatToRange(sheet:SpreadsheetApp.Sheet,column:Integer,columnEnd:Integer,row:Integer,rowEnd:Integer):void;\\n/**Copies the data from a range of cells to another range of cells. Both the values and formatting\\nare copied.\\n\\n```\\n// The code below copies the first 5 columns over to the 6th column.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeToCopy \\u003d sheet.getRange(1, 1, sheet.getMaxRows(), 5);\\nrangeToCopy.copyTo(sheet.getRange(1, 6));\\n```\\n@param destination A destination range to copy to; only the top-left cell position is relevant.*/copyTo(destination:SpreadsheetApp.Range):void;\\n/**Copies the data from a range of cells to another range of cells. By default both the values and\\nformatting are copied, but this can be overridden using advanced arguments.\\n\\n```\\n// The code below copies only the values of the first 5 columns over to the 6th column.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nsheet.getRange(\\\"A:E\\\").copyTo(sheet.getRange(\\\"F1\\\"), {contentsOnly:true});\\n```\\n@param destination A destination range to copy to; only the top-left cell position is relevant.\\n@param options A JavaScript object that specifies advanced parameters, as listed below.*/copyTo(destination:SpreadsheetApp.Range,options:Object):void;\\n/**Copies the data from a range of cells to another range of cells.\\n\\n```\\n// The code below copies only the values of the first 5 columns over to the 6th column.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nsheet.getRange(\\\"A:E\\\").copyTo(sheet.getRange(\\\"F1\\\"), SpreadsheetApp.CopyPasteType.PASTE_VALUES,\\nfalse);\\n```\\n@param destination A destination range to copy to; only the top-left cell position is relevant.\\n@param copyPasteType A type that specifies how the range contents are pasted to the\\n    destination.\\n@param transposed Whether the range should be pasted in its transposed orientation.*/copyTo(destination:SpreadsheetApp.Range,copyPasteType:SpreadsheetApp.CopyPasteType,transposed:boolean):void;\\n/**Copy the content of the range to the given location. If the destination is larger or smaller\\nthan the source range then the source is repeated or truncated accordingly.\\n\\nFor a detailed description of the gridId parameter, see [`getGridId()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#getGridId()).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar source \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d source.getRange(\\\"B2:D4\\\");\\n\\n// This copies the data in B2:D4 in the source sheet to\\n// D4:F6 in the sheet with gridId 0\\nrange.copyValuesToRange(0, 4, 6, 4, 6);\\n```\\n@param gridId The unique ID of the sheet within the spreadsheet, irrespective of position.\\n@param column The first column of the target range.\\n@param columnEnd The end column of the target range.\\n@param row The start row of the target range.\\n@param rowEnd The end row of the target range.*/copyValuesToRange(gridId:Integer,column:Integer,columnEnd:Integer,row:Integer,rowEnd:Integer):void;\\n/**Copy the content of the range to the given location. If the destination is larger or smaller\\nthan the source range then the source is repeated or truncated accordingly.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar source \\u003d ss.getSheets()[0];\\nvar destination \\u003d ss.getSheets()[1];\\n\\nvar range \\u003d source.getRange(\\\"B2:D4\\\");\\n\\n// This copies the data in B2:D4 in the source sheet to\\n// D4:F6 in the second sheet\\nrange.copyValuesToRange(destination, 4, 6, 4, 6);\\n```\\n@param sheet The target sheet.\\n@param column The first column of the target range.\\n@param columnEnd The end column of the target range.\\n@param row The start row of the target range.\\n@param rowEnd The end row of the target range.*/copyValuesToRange(sheet:SpreadsheetApp.Sheet,column:Integer,columnEnd:Integer,row:Integer,rowEnd:Integer):void;\\n/**Creates an empty data source pivot table from the data source, anchored at the first cell in\\nthis range.\\n\\nThis example shows how to create and configure a new data source pivot table.\\n\\n```\\nvar spreadsheet \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar anchorCell \\u003d spreadsheet.getSheets()[0].getRange('A1');\\nvar dataSource \\u003d spreadsheet.getDataSources()[0];\\n\\nvar pivotTable \\u003d anchorCell.createDataSourcePivotTable(dataSource);\\npivotTable.addRowGroup('dataColumnA');\\npivotTable.addColumnGroup('dataColumnB');\\npivotTable.addPivotValue('dataColumnC', SpreadsheetApp.PivotTableSummarizeFunction.SUM);\\npivotTable.addFilter('dataColumnA',\\n                     SpreadsheetApp.newFilterCriteria().whenTextStartsWith('A').build());\\n```\\n@param dataSource The data source to create the pivot table from.\\n@return The newly created data source pivot table.*/createDataSourcePivotTable(dataSource:SpreadsheetApp.DataSource):SpreadsheetApp.DataSourcePivotTable;\\n/**Creates an empty data source table from the data source, anchored at the first cell in this\\nrange.\\n\\nThis example shows how to create and configure a new data source table.\\n\\n```\\nvar spreadsheet \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar anchorCell \\u003d spreadsheet.getSheets()[0].getRange('A1');\\nvar dataSource \\u003d spreadsheet.getDataSources()[0];\\n\\nvar dataSourceTable \\u003d anchorCell.createDataSourceTable(dataSource);\\n    .addColumns('dataColumnA', 'dataColumnB', 'dataColumnC')\\n    .addSortSpec('dataColumnA', /* ascending\\u003d *\\\\/ true)\\n    .addSortSpec('dataColumnB', /* ascending\\u003d *\\\\/ false);\\n```\\n@param dataSource The data source to create the pivot table from.\\n@return The newly created data source table.*/createDataSourceTable(dataSource:SpreadsheetApp.DataSource):SpreadsheetApp.DataSourceTable;\\n/**Returns a DeveloperMetadataFinderApi for finding developer metadata within the scope of this\\nrange. Metadata is within the scope of the range only if it is wholly contained within that\\nrange. For example, metadata associated with the row ‘3:3’ is not in the scope of a range\\n‘A1:D5’ but is within the scope of a range ‘1:5’.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:C6.\\nconst range \\u003d sheet.getRange('A1:C6');\\n\\n// Creates a developer metadata finder to search for metadata in the scope of this range.\\nconst developerMetaDataFinder \\u003d range.createDeveloperMetadataFinder();\\n\\n// Logs information about the developer metadata finder to the console.\\nconst developerMetaData \\u003d developerMetaDataFinder.find()[0];\\nconsole.log(developerMetaData.getKey());\\nconsole.log(developerMetaData.getValue());\\nconsole.log(developerMetaData.getVisibility().toString());\\n```\\n@return A developer metadata finder to search for metadata in the scope of this range.*/createDeveloperMetadataFinder():SpreadsheetApp.DeveloperMetadataFinder;\\n/**Creates a filter and applies it to the specified range on the sheet. You can't create more than\\none filter on a sheet. To access and modify your filter after you create it, use [`getFilter()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#getFilter()) or [`Sheet.getFilter()`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getFilter()).\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\n\\n// Creates a new filter and applies it to the range A1:C20 on the active sheet.\\nfunction createFilter() {\\n  range.createFilter();\\n}\\n// Gets the filter and applies criteria that only shows cells that aren't empty.\\nfunction getFilterAddCriteria() {\\n  let filter \\u003d range.getFilter();\\n  let criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n    .whenCellNotEmpty()\\n    .build();\\n  filter.setColumnFilterCriteria(2, criteria);\\n}\\n```\\n\\nUse this method to create filters for [`Grid`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheets, the default type of sheet.\\nGrid sheets are sheets that aren't connected to a database. To create other types of filters,\\nrefer to the following:\\n\\n  + Create a pivot table filter with [`PivotTable.addFilter(sourceDataColumn, filterCriteria)`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-table.html#addFilter(Integer,FilterCriteria))\\n  + Create a filter for a sheet connected to a database with [`DataSourceSheet.addFilter(columnName, filterCriteria)`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-sheet.html#addFilter(String,FilterCriteria))\\n  + Create a filter for a pivot table connected to a database with [`DataSourcePivotTable.addFilter(columnName, filterCriteria)`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html#addFilter(String,FilterCriteria))\\n@return The new filter.*/createFilter():SpreadsheetApp.Filter;\\n/**Creates an empty pivot table from the specified `sourceData` anchored at the first cell\\nin this range.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets cell A1 as a range in order to place the pivot table.\\nconst range \\u003d sheet.getRange('A1');\\n\\n// Gets the range of the source data for the pivot table.\\nconst dataRange \\u003d sheet.getRange('E12:G20');\\n\\n// Creates an empty pivot table from the specified source data.\\nconst pivotTable \\u003d range.createPivotTable(dataRange);\\n\\n// Logs the values from the pivot table's source data to the console.\\nconsole.log(pivotTable.getSourceDataRange().getValues());\\n```\\n@param sourceData The data to create the pivot table from.\\n@return The newly created [`PivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-table.html).*/createPivotTable(sourceData:SpreadsheetApp.Range):SpreadsheetApp.PivotTable;\\n/**Creates a text finder for the range, which can find and replace text in this range.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getActiveRange();\\n\\n// Creates  a text finder for the range.\\nvar textFinder \\u003d range.createTextFinder('dog');\\n\\n// Returns the first occurrence of 'dog'.\\nvar firstOccurrence \\u003d textFinder.findNext();\\n\\n// Replaces the last found occurrence of 'dog' with 'cat' and returns the number\\n// of occurrences replaced.\\nvar numOccurrencesReplaced \\u003d textFinder.replaceWith('cat');\\n```\\n@param findText The text to search for.\\n@return The [`TextFinder`](https://developers.google.com/apps-script/reference/spreadsheet/text-finder.html) for the range*/createTextFinder(findText:string):SpreadsheetApp.TextFinder;\\n/**Deletes this range of cells. Existing data in the sheet along the provided dimension is shifted\\ntowards the deleted range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:D10\\\");\\nrange.deleteCells(SpreadsheetApp.Dimension.COLUMNS);\\n```\\n@param shiftDimension The dimension along which to shift existing data.*/deleteCells(shiftDimension:SpreadsheetApp.Dimension):void;\\n/**Expands the collapsed groups whose range or control toggle intersects with this range. The\\ncontrol toggle location is the index at which the control toggle is shown, directly before or\\nafter the group depending on settings. If there is more than one group at the same location,\\nthe shallowest group is expanded.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getActiveRange();\\n\\n// All row and column groups within the range are expanded.\\nrange.expandGroups();\\n```\\n@return This range, for chaining.*/expandGroups():SpreadsheetApp.Range;\\n/**Returns a string description of the range, in A1 notation.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(1, 1, 2, 5);\\n\\n// Logs \\\"A1:E2\\\"\\nLogger.log(range.getA1Notation());\\n```\\n@return The string description of the range in A1 notation.*/getA1Notation():string;\\n/**Returns the background color of the top-left cell in the range (for example, `'#ffffff'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B5\\\");\\nLogger.log(cell.getBackground());\\n```\\n@return The color code of the background.*/getBackground():string;\\n/**Returns the background color of the top-left cell in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B5\\\");\\nLogger.log(cell.getBackgroundObject().asRgbColor().asHexString());\\n```\\n@return The background color of the top-left cell in the range.*/getBackgroundObject():SpreadsheetApp.Color;\\n/**Returns the background colors of the cells in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B5:C6\\\");\\nvar bgColors \\u003d range.getBackgroundObjects();\\nfor (var i in bgColors) {\\n  for (var j in bgColors[i]) {\\n    Logger.log(bgColors[i][j].asRgbColor().asHexString());\\n  }\\n}\\n```\\n@return A two-dimensional array of background colors.*/getBackgroundObjects():SpreadsheetApp.Color[][];\\n/**Returns the background colors of the cells in the range (for example, `'#ffffff'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B5:C6\\\");\\nvar bgColors \\u003d range.getBackgrounds();\\nfor (var i in bgColors) {\\n  for (var j in bgColors[i]) {\\n    Logger.log(bgColors[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of color codes of the backgrounds.*/getBackgrounds():string[][];\\n/**Returns all the bandings that are applied to any cells in this range.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Sets a range.\\nconst range \\u003d sheet.getRange('A1:K50');\\n\\n// Gets the banding info for the range.\\nconst bandings \\u003d range.getBandings();\\n\\n// Logs the second row color for each banding to the console.\\nfor (let banding of bandings) {\\n  console.log(banding.getSecondRowColor());\\n}\\n```\\n@return All the bandings that are applied to any cells in this range.*/getBandings():SpreadsheetApp.Banding[];\\n/**Returns a given cell within a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\n// The row and column here are relative to the range\\n// getCell(1,1) in this code returns the cell at B2\\nvar cell \\u003d range.getCell(1, 1);\\nLogger.log(cell.getValue());\\n```\\n@param row The row of the cell relative to the range.\\n@param column The column of the cell relative to the range.\\n@return A range containing a single cell at the specified coordinates.*/getCell(row:Integer,column:Integer):SpreadsheetApp.Range;\\n/**Returns the starting column position for this range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n// Logs \\\"2.0\\\"\\nLogger.log(range.getColumn());\\n```\\n@return The range's starting column position in the spreadsheet.*/getColumn():Integer;\\n/**Returns a copy of the range expanded in the four cardinal [`Direction`](https://developers.google.com/apps-script/reference/spreadsheet/direction.html)s to cover all\\nadjacent cells with data in them. If the range is surrounded by empty cells not including those\\nalong the diagonals, the range itself is returned. This is similar to selecting the range and\\ntyping `Ctrl+A` in the editor.\\n\\n```\\n// Assume the active spreadsheet is blank.\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nsheet.getRange(\\\"C2\\\").setValue(100);\\nsheet.getRange(\\\"B3\\\").setValue(100);\\nsheet.getRange(\\\"D3\\\").setValue(100);\\nsheet.getRange(\\\"C4\\\").setValue(100);\\n// Logs \\\"B2:D4\\\"\\nLogger.log(sheet.getRange(\\\"C3\\\").getDataRegion().getA1Notation());\\n```\\n@return The range's data region or a range for the entire spreadsheet.*/getDataRegion():SpreadsheetApp.Range;\\n/**Returns a copy of the range expanded [`Direction.UP`](https://developers.google.com/apps-script/reference/spreadsheet/direction.html#UP) and [`Direction.DOWN`](https://developers.google.com/apps-script/reference/spreadsheet/direction.html#DOWN) if the\\nspecified dimension is [`Dimension.ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/dimension.html#ROWS), or [`Direction.NEXT`](https://developers.google.com/apps-script/reference/spreadsheet/direction.html#NEXT) and [`Direction.PREVIOUS`](https://developers.google.com/apps-script/reference/spreadsheet/direction.html#PREVIOUS) if the dimension is [`Dimension.COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/dimension.html#COLUMNS). The expansion of the range\\nis based on detecting data next to the range that is organized like a table. The expanded range\\ncovers all adjacent cells with data in them along the specified dimension including the table\\nboundaries. If the original range is surrounded by empty cells along the specified dimension,\\nthe range itself is returned. This method is similar to selecting the range and typing \\n\\n```\\nCtrl+Space```\\n\\n for columns or `Shift+Space` for rows in the editor.\\n\\n```\\n// Assume the active spreadsheet is blank.\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nsheet.getRange(\\\"C2\\\").setValue(100);\\nsheet.getRange(\\\"B3\\\").setValue(100);\\nsheet.getRange(\\\"D3\\\").setValue(100);\\nsheet.getRange(\\\"C4\\\").setValue(100);\\n// Logs \\\"C2:C4\\\"\\nLogger.log(sheet.getRange(\\\"C3\\\").getDataRegion(SpreadsheetApp.Dimension.ROWS).getA1Notation());\\n// Logs \\\"B3:D3\\\"\\nLogger.log(\\n    sheet.getRange(\\\"C3\\\").getDataRegion(SpreadsheetApp.Dimension.COLUMNS).getA1Notation());\\n```\\n@param dimension The dimension along which to expand the range.\\n@return The range's data region or a range covering each column or each row spanned by the\\n    original range.*/getDataRegion(dimension:SpreadsheetApp.Dimension):SpreadsheetApp.Range;\\n/**Returns the [`DataSourceFormula`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-formula.html) for the first cell in the range, or `null` if\\nthe cell doesn't contain a data source formula.\\n\\n```\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1 on Sheet1.\\nconst range \\u003d sheet.getRange('A1');\\n\\n// Gets the data source formula from cell A1.\\nconst dataSourceFormula \\u003d range.getDataSourceFormula();\\n\\n// Gets the formula.\\nconst formula \\u003d dataSourceFormula.getFormula();\\n\\n// Logs the formula.\\nconsole.log(formula);\\n```\\n@return The [`DataSourceFormula`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-formula.html) for the cell.*/getDataSourceFormula():SpreadsheetApp.DataSourceFormula;\\n/**Returns the [`DataSourceFormula`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-formula.html)s for the cells in the range.\\n\\n```\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:B5 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:B5');\\n\\n// Gets an array of the data source formulas in the range A1:B5.\\nconst dataSourceFormulas \\u003d range.getDataSourceFormulas();\\n\\n// Logs the first formula in the array.\\nconsole.log(dataSourceFormulas[0].getFormula());\\n```\\n@return An array of [`DataSourceFormula`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-formula.html)s.*/getDataSourceFormulas():SpreadsheetApp.DataSourceFormula[];\\n/**Gets all the data source pivot tables intersecting with the range.\\n\\n```\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:G50 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:G50');\\n\\n// Gets an array of the data source pivot tables in the range A1:G50.\\nconst dataSourcePivotTables \\u003d range.getDataSourcePivotTables();\\n\\n// Logs the last time that the first pivot table in the array was refreshed.\\nconsole.log(dataSourcePivotTables[0].getStatus().getLastRefreshedTime());\\n```\\n@return A list of data source pivot tables.*/getDataSourcePivotTables():SpreadsheetApp.DataSourcePivotTable[];\\n/**Gets all the data source tables intersecting with the range.\\n\\n```\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:G50 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:G50');\\n\\n// Gets the first data source table in the range A1:G50.\\nconst dataSourceTable \\u003d range.getDataSourceTables()[0];\\n\\n// Logs the time of the last completed data execution on the data source table.\\nconsole.log(dataSourceTable.getStatus().getLastExecutionTime());\\n```\\n@return A list of data source tables.*/getDataSourceTables():SpreadsheetApp.DataSourceTable[];\\n/**Returns a URL for the data in this range, which can be used to create charts and queries.\\n\\n## Code.gs\\n\\n```\\nfunction doGet() {\\n  var ss \\u003d SpreadsheetApp.openById('1khO6hBWTNNyvyyxvob7aoZTI9ZvlqqASNeq0e29Tw2c');\\n  var sheet \\u003d ss.getSheetByName('ContinentData');\\n  var range \\u003d sheet.getRange('A1:B8');\\n\\n  var template \\u003d HtmlService.createTemplateFromFile('piechart');\\n  template.dataSourceUrl \\u003d range.getDataSourceUrl();\\n  return template.evaluate();\\n}\\n```\\n\\n \\n\\n## piechart.html\\n\\n```\\n\\u003c!DOCTYPE html\\u003e\\n\\u003chtml\\u003e\\n  \\u003chead\\u003e\\n    \\u003c!--Load the AJAX API--\\u003e\\n    \\u003cscript type\\u003d\\\"text/javascript\\\" src\\u003d\\\"https://www.gstatic.com/charts/loader.js\\\"\\u003e\\u003c/script\\u003e\\n    \\u003cscript type\\u003d\\\"text/javascript\\\"\\u003e\\n      // Load the Visualization API and the corechart package.\\n      google.charts.load('current', {'packages': ['corechart']});\\n\\n      // Set a callback to run when the Google Visualization API is loaded.\\n      google.charts.setOnLoadCallback(queryData);\\n\\n      function queryData() {\\n        var query \\u003d new google.visualization.Query('\\u003c?\\u003d dataSourceUrl ?\\u003e');\\n        query.send(drawChart);\\n      }\\n\\n      // Callback that creates and populates a data table,\\n      // instantiates the pie chart, passes in the data and\\n      // draws it.\\n      function drawChart(response) {\\n        if (response.isError()) {\\n          alert('Error: ' + response.getMessage() + ' ' + response.getDetailedMessage());\\n          return;\\n        }\\n        var data \\u003d response.getDataTable();\\n\\n        // Set chart options.\\n        var options \\u003d {\\n          title: 'Population by Continent',\\n          width: 400,\\n          height: 300\\n        };\\n\\n        // Instantiate and draw the chart, passing in some options.\\n        var chart \\u003d new google.visualization.PieChart(document.getElementById('chart_div'));\\n        chart.draw(data, options);\\n      }\\n    \\u003c/script\\u003e\\n  \\u003c/head\\u003e\\n  \\u003cbody\\u003e\\n    \\u003c!-- Div that holds the pie chart. --\\u003e\\n    \\u003cdiv id\\u003d\\\"chart_div\\\"\\u003e\\u003c/div\\u003e\\n  \\u003c/body\\u003e\\n\\u003c/html\\u003e\\n```\\n@return A URL for this range as a data source that can be passed to other APIs such as charts.*/getDataSourceUrl():string;\\n/**Return the data inside this object as a DataTable.\\n\\n```\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:B7 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:B7');\\n\\n// Gets the range A1:B7 as a data table. The values in each column must be of the same type.\\nconst datatable \\u003d range.getDataTable();\\n\\n// Uses the Charts service to build a bar chart from the data table.\\n// This doesn't build an embedded chart. To do that, use sheet.newChart().addRange() instead.\\nconst chart \\u003d Charts.newBarChart()\\n                  .setDataTable(datatable)\\n                  .setOption('title', 'Your Chart Title Here')\\n                  .build();\\n```\\n@return the data as a datatable.*/getDataTable():DataTable;\\n/**Return the data inside this range as a DataTable.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"A1:B7\\\");\\n\\n// Calling this method with \\\"true\\\" sets the first line to be the title of the axes\\nvar datatable \\u003d range.getDataTable(true);\\n\\n// Note that this doesn't build an EmbeddedChart, so you can't just use\\n// Sheet#insertChart(). To do that, use sheet.newChart().addRange() instead.\\nvar chart \\u003d Charts.newBarChart()\\n    .setDataTable(datatable)\\n    .setOption(\\\"title\\\", \\\"Your Title Here\\\")\\n    .build();\\n```\\n@param firstRowIsHeader Whether to treat the first row as a header.\\n@return The data as a datatable.*/getDataTable(firstRowIsHeader:boolean):DataTable;\\n/**Returns the data validation rule for the top-left cell in the range. If data validation has not\\nbeen set on the cell, this method returns `null`.\\n\\n```\\n// Log information about the data validation rule for cell A1.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d cell.getDataValidation();\\nif (rule !\\u003d null) {\\n  var criteria \\u003d rule.getCriteriaType();\\n  var args \\u003d rule.getCriteriaValues();\\n  Logger.log('The data validation rule is %s %s', criteria, args);\\n} else {\\n  Logger.log('The cell does not have a data validation rule.')\\n}\\n```\\n@return The data validation rule for the top-left cell in the range.*/getDataValidation():SpreadsheetApp.DataValidation;\\n/**Returns the data validation rules for all cells in the range. If data validation has not been\\nset on a given cell, this method returns `null` for that cell's position in the array.\\n\\n```\\n// Change existing data validation rules that require a date in 2013 to require a date in 2014.\\nvar oldDates \\u003d [new Date('1/1/2013'), new Date('12/31/2013')];\\nvar newDates \\u003d [new Date('1/1/2014'), new Date('12/31/2014')];\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns());\\nvar rules \\u003d range.getDataValidations();\\n\\nfor (var i \\u003d 0; i \\u003c rules.length; i++) {\\n  for (var j \\u003d 0; j \\u003c rules[i].length; j++) {\\n    var rule \\u003d rules[i][j];\\n\\n    if (rule !\\u003d null) {\\n      var criteria \\u003d rule.getCriteriaType();\\n      var args \\u003d rule.getCriteriaValues();\\n\\n      if (criteria \\u003d\\u003d SpreadsheetApp.DataValidationCriteria.DATE_BETWEEN\\n          \\u0026\\u0026 args[0].getTime() \\u003d\\u003d oldDates[0].getTime()\\n          \\u0026\\u0026 args[1].getTime() \\u003d\\u003d oldDates[1].getTime()) {\\n        // Create a builder from the existing rule, then change the dates.\\n        rules[i][j] \\u003d rule.copy().withCriteria(criteria, newDates).build();\\n      }\\n    }\\n  }\\n}\\nrange.setDataValidations(rules);\\n```\\n@return A two-dimensional array of data validation rules associated with the cells in the\\n    range.*/getDataValidations():SpreadsheetApp.DataValidation[][];\\n/**Gets the developer metadata associated with this range.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets row 2 on Sheet1.\\nconst range \\u003d sheet.getRange('2:2');\\n\\n// Adds metadata to row 2.\\nrange.addDeveloperMetadata('NAME', 'GOOGLE');\\n\\n// Logs the metadata to console.\\nfor (const metadata of range.getDeveloperMetadata()) {\\n  console.log(`${metadata.getKey()}: ${metadata.getValue()}`);\\n}\\n```\\n@return The developer metadata associated with this range.*/getDeveloperMetadata():SpreadsheetApp.DeveloperMetadata[];\\n/**Returns the displayed value of the top-left cell in the range. The value is a `String`.\\nThe displayed value takes into account date, time and currency formatting formatting, including\\nformats applied automatically by the spreadsheet's locale setting. Empty cells return an empty\\nstring.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets cell A30 and sets its value to 'Test code.'\\nconst cell \\u003d sheet.getRange('A30');\\ncell.setValue('Test code');\\n\\n// Gets the value and logs it to the console.\\nconsole.log(cell.getDisplayValue());\\n```\\n@return The displayed value in this cell.*/getDisplayValue():string;\\n/**Returns the rectangular grid of values for this range.\\n\\nReturns a two-dimensional array of displayed values, indexed by row, then by column. The\\nvalues are `String` objects. The displayed value takes into account date, time and\\ncurrency formatting, including formats applied automatically by the spreadsheet's locale\\nsetting. Empty cells are represented by an empty string in the array. Remember that while a\\nrange index starts at `1, 1`, the JavaScript array is indexed from `[0][0]`.\\n\\n```\\n// The code below gets the displayed values for the range C2:G8\\n// in the active spreadsheet.  Note that this is a JavaScript array.\\nvar values \\u003d SpreadsheetApp.getActiveSheet().getRange(2, 3, 6, 4).getDisplayValues();\\nLogger.log(values[0][0]);\\n```\\n@return A two-dimensional array of values.*/getDisplayValues():string[][];\\n/**Returns the filter on the sheet this range belongs to, or `null` if there is no filter on\\nthe sheet.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\n// Gets the existing filter on the sheet that the given range belongs to.\\nlet filter \\u003d range.getFilter();\\n```\\n@return The filter.*/getFilter():SpreadsheetApp.Filter;\\n/**Returns the font color of the cell in the top-left corner of the range, in CSS notation (such\\nas `'#ffffff'` or `'white'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getFontColor());\\n```\\n@deprecated\\n@return The font color in CSS notation (such as `'#ffffff'` or `'white'`).*/getFontColor():string;\\n/**Returns the font color of the cell in the top-left corner of the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getFontColorObject().asRgbColor().asHexString());\\n```\\n@return The font color of the top-left cell in the range.*/getFontColorObject():SpreadsheetApp.Color;\\n/**Returns the font colors of the cells in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getFontColorObjects();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    Logger.log(results[i][j].asRgbColor().asHexString());\\n  }\\n}\\n```\\n@return A two-dimensional array of font colors associated with cells in the range.*/getFontColorObjects():SpreadsheetApp.Color[][];\\n/**Returns the font colors of the cells in the range in CSS notation (such as `'#ffffff'` or\\n`'white'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getFontColors();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    Logger.log(results[i][j]);\\n  }\\n}\\n```\\n@deprecated\\n@return A two-dimensional array of font colors associated with cells in the range.*/getFontColors():string[][];\\n/**Returns the font families of the cells in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getFontFamilies();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    Logger.log(results[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of font families associated with cells in the range.*/getFontFamilies():string[][];\\n/**Returns the font family of the cell in the top-left corner of the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getFontFamily());\\n```\\n@return The font family of the cell.*/getFontFamily():string;\\n/**Gets the line style of the cell in the top-left corner of the range (`'underline'`,\\n`'line-through'`, or `'none'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getFontLine());\\n```\\n@return The font line.*/getFontLine():string;\\n/**Gets the line style of the cells in the range (`'underline'`, `'line-through'`, or\\n`'none'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getFontLines();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    Logger.log(results[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of font lines associated with cells in the range.*/getFontLines():string[][];\\n/**Returns the font size in point size of the cell in the top-left corner of the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getFontSize());\\n```\\n@return The font size in point size.*/getFontSize():Integer;\\n/**Returns the font sizes of the cells in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getFontSizes();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    Logger.log(results[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of font sizes of text associated with cells in the range.*/getFontSizes():Integer[][];\\n/**Returns the font style (`'italic'` or `'normal'`) of the cell in the top-left\\ncorner of the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getFontStyle());\\n```\\n@return The font style of the text in the cell.*/getFontStyle():string;\\n/**Returns the font styles of the cells in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getFontStyles();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    Logger.log(results[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of font styles of text associated with cells in the range.*/getFontStyles():string[][];\\n/**Returns the font weight (normal/bold) of the cell in the top-left corner of the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getFontWeight());\\n```\\n@return The font weight of the text in the cell.*/getFontWeight():string;\\n/**Returns the font weights of the cells in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getFontWeights();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    Logger.log(results[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of font weights of text associated with cells in the range.*/getFontWeights():string[][];\\n/**Returns the formula (A1 notation) for the top-left cell of the range, or an empty string if the\\ncell is empty or doesn't contain a formula.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This assumes you have a function in B5 that sums up\\n// B2:B4\\nvar range \\u003d sheet.getRange(\\\"B5\\\");\\n\\n// Logs the calculated value and the formula\\nLogger.log(\\\"Calculated value: %s Formula: %s\\\",\\n           range.getValue(),\\n           range.getFormula());\\n```\\n@return The formula for the cell.*/getFormula():string;\\n/**Returns the formula (R1C1 notation) for a given cell, or `null` if none.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B5\\\");\\nvar formula \\u003d range.getFormulaR1C1();\\nLogger.log(formula);\\n```\\n@return The formula in R1C1 notation.*/getFormulaR1C1():string;\\n/**Returns the formulas (A1 notation) for the cells in the range. Entries in the 2D array are\\nempty strings for cells with no formula.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B5:C6\\\");\\nvar formulas \\u003d range.getFormulas();\\nfor (var i in formulas) {\\n  for (var j in formulas[i]) {\\n    Logger.log(formulas[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of formulas in string format.*/getFormulas():string[][];\\n/**Returns the formulas (R1C1 notation) for the cells in the range. Entries in the 2D array are\\n`null` for cells with no formula.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B5:C6\\\");\\nvar formulas \\u003d range.getFormulasR1C1();\\nfor (var i in formulas) {\\n  for (var j in formulas[i]) {\\n    Logger.log(formulas[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of formulas in R1C1 notation.*/getFormulasR1C1():string[][];\\n/**Returns the grid ID of the range's parent sheet. IDs are random non-negative int values.\\n\\n```\\n// Log the grid ID of the first sheet (by tab position) in the spreadsheet.\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getGridId());\\n```\\n@return The grid ID of the parent sheet.*/getGridId():Integer;\\n/**Returns the height of the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n// logs 3.0\\nLogger.log(range.getHeight());\\n```\\n@return The height of the range.*/getHeight():Integer;\\n/**Returns the horizontal alignment of the text (left/center/right) of the cell in the top-left\\ncorner of the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getHorizontalAlignment());\\n```\\n@return The horizontal alignment of the text in the cell.*/getHorizontalAlignment():string;\\n/**Returns the horizontal alignments of the cells in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getHorizontalAlignments();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    Logger.log(results[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of horizontal alignments of text associated with cells in the\\n    range.*/getHorizontalAlignments():string[][];\\n/**Returns the end column position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n// Logs \\\"4.0\\\"\\nLogger.log(range.getLastColumn());\\n```\\n@return The range's ending column position in the spreadsheet.*/getLastColumn():Integer;\\n/**Returns the end row position.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n// Logs \\\"4.0\\\"\\nLogger.log(range.getLastRow());\\n```\\n@return The range's ending row position in the spreadsheet.*/getLastRow():Integer;\\n/**Returns an array of [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) objects representing merged cells that either are fully\\nwithin the current range, or contain at least one cell in the current range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\n\\nvar mergedRanges \\u003d range.getMergedRanges();\\nfor (var i \\u003d 0; i \\u003c mergedRanges.length; i++) {\\n  Logger.log(mergedRanges[i].getA1Notation());\\n  Logger.log(mergedRanges[i].getDisplayValue());\\n}\\n```\\n@return An array of [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) objects, representing merged cells overlapping the range.*/getMergedRanges():SpreadsheetApp.Range[];\\n/**Starting at the cell in the first column and row of the range, returns the next cell in the\\ngiven direction that is the edge of a contiguous range of cells with data in them or the cell\\nat the edge of the spreadsheet in that direction. This is equivalent to typing \\n\\n```\\nCtrl+[arrow key]```\\n\\n in the editor.\\n\\n```\\n// Assume the active spreadsheet is blank.\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"C3:E5\\\");\\n// Logs \\\"C1\\\"\\nLogger.log(range.getNextDataCell(SpreadsheetApp.Direction.UP).getA1Notation());\\n```\\n@param direction The direction in which to find the next data region edge cell.\\n@return The data region edge cell or the cell at the edge of the spreadsheet.*/getNextDataCell(direction:SpreadsheetApp.Direction):SpreadsheetApp.Range;\\n/**Returns the note associated with the given range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getNote());\\n```\\n@return The note associated with the given cell.*/getNote():string;\\n/**Returns the notes associated with the cells in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getNotes();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    Logger.log(results[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of notes associated with cells in the range.*/getNotes():string[][];\\n/**Returns the number of columns in this range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D5\\\");\\nLogger.log(range.getNumColumns());\\n```\\n@return The number of columns in this range.*/getNumColumns():Integer;\\n/**Returns the number of rows in this range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D5\\\");\\nLogger.log(range.getNumRows());\\n```\\n@return The number of rows in this range.*/getNumRows():Integer;\\n/**Get the number or date formatting of the top-left cell of the given range. The returned format\\npatterns are described in the [Sheets API\\ndocumentation](/sheets/api/guides/formats).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"C4\\\");\\nLogger.log(cell.getNumberFormat());\\n```\\n@return The number format of the top-left cell of the range.*/getNumberFormat():string;\\n/**Returns the number or date formats for the cells in the range. The returned format patterns are\\ndescribed in the [Sheets API documentation](/sheets/api/guides/formats).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B5:C6\\\");\\nvar formats \\u003d range.getNumberFormats();\\nfor (var i in formats) {\\n  for (var j in formats[i]) {\\n    Logger.log(formats[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of number formats.*/getNumberFormats():string[][];\\n/**Returns the Rich Text value for the top left cell of the range, or `null` if the cell\\nvalue is not text.\\n\\n```\\n// Gets the Rich Text value of cell D4.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"D4:F6\\\");\\nvar richText \\u003d range.getRichTextValue();\\nconsole.log(richText.getText());\\n```\\n@return The Rich Text value of the top left cell in the range, or `null` if the cell\\n    value is not text.*/getRichTextValue():SpreadsheetApp.RichTextValue;\\n/**Returns the Rich Text values for the cells in the range.\\n\\n```\\n// Gets the Rich Text values for all cells in range B5:C6\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B5:C6\\\");\\nvar values \\u003d range.getRichTextValues();\\n\\nfor (var i \\u003d 0; i \\u003c values.length; i++) {\\n  for (var j \\u003d 0; j \\u003c values[i].length; j++) {\\n    console.log(values[i][j].getText());\\n  }\\n}\\n```\\n@return A two-dimensional array of Rich Text values.*/getRichTextValues():SpreadsheetApp.RichTextValue[][];\\n/**Returns the row position for this range. Identical to [getRowIndex()](/apps-script/reference/spreadsheet/range#getrowindex).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B2\\\");\\nLogger.log(range.getRow());\\n```\\n@return The row position of the range.*/getRow():Integer;\\n/**Returns the row position for this range. Identical to [getRow()](/apps-script/reference/spreadsheet/range#getrow).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B2\\\");\\nLogger.log(range.getRowIndex());\\n```\\n@return The row position of the range.*/getRowIndex():Integer;\\n/**Returns the sheet this range belongs to.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:D10 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:D10');\\n\\n// Gets the sheet that the range belongs to.\\nconst rangeSheet \\u003d range.getSheet();\\n\\n// Gets the sheet name and logs it to the console.\\nconsole.log(rangeSheet.getName());\\n```\\n@return The sheet that this range belongs to.*/getSheet():SpreadsheetApp.Sheet;\\n/**Returns the text direction for the top left cell of the range. Returns `null` if the cell\\ntext direction is determined with automatic detection.\\n\\n```\\n// Get the text direction of cell B1.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B1:D4\\\");\\nLogger.log(range.getTextDirection());\\n```\\n@return The text direction of the top left cell in the range.*/getTextDirection():SpreadsheetApp.TextDirection;\\n/**Returns the text directions for the cells in the range. Entries in the 2D array are `null` for cells using automatic detection.\\n\\n```\\n// Get the text directions for all cells in range B5:C6\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B5:C6\\\");\\nvar directions \\u003d range.getTextDirections();\\n\\nfor (var i \\u003d 0; i \\u003c directions.length; i++) {\\n  for (var j \\u003d 0; j \\u003c directions[i].length; j++) {\\n    Logger.log(directions[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of text directions.*/getTextDirections():SpreadsheetApp.TextDirection[][];\\n/**Returns the text rotation settings for the top left cell of the range.\\n\\n```\\n// Log the text rotation settings for a cell.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n\\nvar cell \\u003d sheet.getRange(\\\"A1\\\");\\nLogger.log(cell.getTextRotation());\\n```\\n@return The text rotation settings.*/getTextRotation():SpreadsheetApp.TextRotation;\\n/**Returns the text rotation settings for the cells in the range.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getTextRotations();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    var rotation \\u003d results[i][j];\\n    Logger.log(\\\"Cell [%s, %s] has text rotation: %v\\\", i, j, rotation);\\n  }\\n}\\n```\\n@return A two-dimensional array of text rotations associated with cells in the range.*/getTextRotations():SpreadsheetApp.TextRotation[][];\\n/**Returns the text style for the top left cell of the range.\\n\\n```\\n// Get the text style of cell D4.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"D4:F6\\\");\\nvar style \\u003d range.getTextStyle();\\nLogger.log(style);\\n```\\n@return The text style of the top left cell in the range.*/getTextStyle():SpreadsheetApp.TextStyle;\\n/**Returns the text styles for the cells in the range.\\n\\n```\\n// Get the text styles for all cells in range B5:C6\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B5:C6\\\");\\nvar styles \\u003d range.getTextStyles();\\n\\nfor (var i \\u003d 0; i \\u003c styles.length; i++) {\\n  for (var j \\u003d 0; j \\u003c styles[i].length; j++) {\\n    Logger.log(styles[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of text styles.*/getTextStyles():SpreadsheetApp.TextStyle[][];\\n/**Returns the value of the top-left cell in the range. The value may be of type `Number`,\\n`Boolean`, `Date`, or `String` depending on the value of the cell. Empty\\ncells return an empty string.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:D10 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:D10');\\n\\n// Gets the value of the top-left cell in the range and logs it to the console.\\nconsole.log(range.getValue());\\n\\n```\\n@return The value in this cell.*/getValue():Object;\\n/**Returns the rectangular grid of values for this range.\\n\\nReturns a two-dimensional array of values, indexed by row, then by column. The values may be\\nof type `Number`, `Boolean`, `Date`, or `String`, depending on the\\nvalue of the cell. Empty cells are represented by an empty string in the array. Remember that\\nwhile a range index starts at `1, 1`, the JavaScript array is indexed from `[0][0]`.\\n\\n```\\n// The code below gets the values for the range C2:G8\\n// in the active spreadsheet.  Note that this is a JavaScript array.\\nvar values \\u003d SpreadsheetApp.getActiveSheet().getRange(2, 3, 6, 4).getValues();\\nLogger.log(values[0][0]);\\n```\\n\\nIn web apps, a `Date` value isn't a legal parameter. `getValues()` fails to return\\ndata to a web app if the range contains a cell with a `Date` value. Instead, transform\\nall the values retrieved from the sheet to a supported JavaScript primitive like a `Number`, `Boolean`, or `String`.\\n@return A two-dimensional array of values.*/getValues():Object[][];\\n/**Returns the vertical alignment (top/middle/bottom) of the cell in the top-left corner of the\\nrange.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getVerticalAlignment());\\n```\\n@return The vertical alignment of the text in the cell.*/getVerticalAlignment():string;\\n/**Returns the vertical alignments of the cells in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getVerticalAlignments();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    Logger.log(results[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of vertical alignments of text associated with cells in the\\n    range.*/getVerticalAlignments():string[][];\\n/**Returns the width of the range in columns.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:D10 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:D10');\\n\\n// Gets the width of the range in number of columns and logs it to the console.\\nconsole.log(range.getWidth());\\n```\\n@return The number of columns in the range.*/getWidth():Integer;\\n/**Returns whether the text in the cell wraps. To get more granular wrap strategy, use [`getWrapStrategy()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#getWrapStrategy()).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.getWrap());\\n```\\n@return Whether the text in this cell wraps or not.*/getWrap():boolean;\\n/**Returns the text wrapping strategies for the cells in the range.\\n\\n```\\n// Get the text wrapping strategies for all cells in range B5:C6\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B5:C6\\\");\\nvar strategies \\u003d range.getWrapStrategies();\\n\\nfor (var i \\u003d 0; i \\u003c strategies.length; i++) {\\n  for (var j \\u003d 0; j \\u003c strategies[i].length; j++) {\\n    Logger.log(strategies[i][j]);\\n  }\\n}\\n```\\n@return A two-dimensional array of text wrapping strategies.*/getWrapStrategies():SpreadsheetApp.WrapStrategy[][];\\n/**Returns the text wrapping strategy for the top left cell of the range.\\n\\n```\\n// Get the text wrapping strategy of cell B1.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B1:D4\\\");\\nLogger.log(range.getWrapStrategy());\\n```\\n@return The text wrapping strategy of the top left cell in the range.*/getWrapStrategy():SpreadsheetApp.WrapStrategy;\\n/**Returns whether the text in the cells wrap. To get more granular wrap strategy, use [`getWrapStrategies()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#getWrapStrategies()).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nvar results \\u003d range.getVerticalAlignments();\\n\\nfor (var i in results) {\\n  for (var j in results[i]) {\\n    var isWrapped \\u003d results[i][j];\\n    if (isWrapped) {\\n       Logger.log(\\\"Cell [%s, %s] has wrapped text\\\", i, j);\\n    }\\n  }\\n}\\n```\\n@return A two-dimensional array of vertical alignments of text associated with cells in the\\n    range.*/getWraps():boolean[][];\\n/**Inserts empty cells into this range. The new cells retain any formatting present in the cells\\npreviously occupying this range. Existing data in the sheet along the provided dimension is\\nshifted away from the inserted range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:D10\\\");\\nrange.insertCells(SpreadsheetApp.Dimension.COLUMNS);\\n```\\n@param shiftDimension The dimension along which to shift existing data.\\n@return This range, for chaining.*/insertCells(shiftDimension:SpreadsheetApp.Dimension):SpreadsheetApp.Range;\\n/**Inserts checkboxes into each cell in the range, configured with `true` for checked and\\n`false` for unchecked. Sets the value of all cells in the range to `false`.\\n\\n```\\nvar range \\u003d SpreadsheetApp.getActive().getRange('A1:B10');\\n\\n// Inserts checkboxes into each cell in the range A1:B10 configured with 'true' for checked\\n// and 'false' for unchecked. Also, sets the value of each cell in the range A1:B10 to 'false'.\\nrange.insertCheckboxes();\\n```\\n@return This range, for chaining.*/insertCheckboxes():SpreadsheetApp.Range;\\n/**Inserts checkboxes into each cell in the range, configured with a custom value for checked and\\nthe empty string for unchecked. Sets the value of each cell in the range to the empty string.\\n\\n```\\nvar range \\u003d SpreadsheetApp.getActive().getRange('A1:B10');\\n\\n// Inserts checkboxes into each cell in the range A1:B10 configured with 'yes' for checked\\n// and the empty string for unchecked. Also, sets the value of each cell in the range A1:B10 to\\n//  the empty string.\\nrange.insertCheckboxes('yes');\\n```\\n@param checkedValue The checked value for the checkbox data validation.\\n@return This range, for chaining.*/insertCheckboxes(checkedValue:Object):SpreadsheetApp.Range;\\n/**Inserts checkboxes into each cell in the range, configured with custom values for the checked\\nand unchecked states. Sets the value of each cell in the range to the custom unchecked value.\\n\\n```\\nvar range \\u003d SpreadsheetApp.getActive().getRange('A1:B10');\\n\\n// Inserts checkboxes into each cell in the range A1:B10 configured with 'yes' for checked\\n// and 'no' for unchecked. Also, sets the value of each cell in the range A1:B10 to 'no'.\\nrange.insertCheckboxes('yes', 'no');\\n```\\n@param checkedValue The checked value for the checkbox data validation.\\n@param uncheckedValue The unchecked value for the checkbox data validation.\\n@return This range, for chaining.*/insertCheckboxes(checkedValue:Object,uncheckedValue:Object):SpreadsheetApp.Range;\\n/**Returns `true` if the range is totally blank.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nLogger.log(range.isBlank());\\n```\\n@return `true` if the range is blank; `false` otherwise.*/isBlank():boolean;\\n/**Returns whether all cells in the range have their checkbox state as 'checked'. Returns `null` if some cells are checked and the rest unchecked, or if some cells do not have checkbox\\ndata validation.\\n\\n```\\nvar range \\u003d SpreadsheetApp.getActive().getRange('A1:A3');\\n\\n// Inserts checkboxes and sets each cell value to 'no' in the range A1:A3.\\nrange.insertCheckboxes('yes', 'no');\\n\\nvar range1 \\u003d SpreadsheetApp.getActive().getRange('A1');\\nrange1.setValue('yes');\\n// Sets the value of isRange1Checked as true as it contains the checked value.\\nvar isRange1Checked \\u003d range1.isChecked();\\n\\nvar range2 \\u003d SpreadsheetApp.getActive().getRange('A2');\\nrange2.setValue('no');\\n// Sets the value of isRange2Checked as false as it contains the unchecked value.\\nvar isRange2Checked \\u003d range2.isChecked();\\n\\nvar range3 \\u003d SpreadsheetApp.getActive().getRange('A3');\\nrange3.setValue('random');\\n// Sets the value of isRange3Checked as null, as it contains an invalid checkbox value.\\nvar isRange3Checked \\u003d range3.isChecked();\\n```\\n@return `true`, if all cells in the range are checked, `false` if all cells in the\\n    range are unchecked, or `null` if any of the cells are unchecked or do not have\\n    checkbox data validation.*/isChecked():boolean;\\n/**Determines whether the end of the range is bound to a particular column. For example, for the\\nranges `A1:B10` or `B:B`, which are bound to columns at the end of the range, this\\nmethod returns `true`; for the ranges `3:7` or `A1:5`, which are bound only\\nto particular rows at the end of the range, this method returns `false`.\\n\\n```\\n // Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:D10 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:D10');\\n\\n// Determines if the end of the range is bound to a particular column and logs it to the\\n// console.\\nconsole.log(range.isEndColumnBounded());\\n```\\n@return `true` if the end of the range is bound to a particular column; `false`\\n    otherwise.*/isEndColumnBounded():boolean;\\n/**Determines whether the end of the range is bound to a particular row. For example, for the\\nranges `A1:B10` or `3:7`, which are bound to rows at the end of the range, this\\nmethod returns `true`; for the ranges `B:B` or `A1:C`, which are bound only\\nto particular columns at the end of the range, this method returns `false`.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:D10 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:D10');\\n\\n// Determines if the end of the range is bound to a particular row and logs it to the console.\\nconsole.log(range.isEndRowBounded());\\n```\\n@return `true` if the end of the range is bound to a particular row; `false`\\n    otherwise.*/isEndRowBounded():boolean;\\n/**Returns `true` if the cells in the current range overlap any merged cells.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\n\\n// True if any of the cells in A1:B3 is included in a merge.\\nvar isPartOfMerge \\u003d range.isPartOfMerge();\\n```\\n@return `true` if the range overlaps any merged cells, otherwise returns `false`.*/isPartOfMerge():boolean;\\n/**Determines whether the start of the range is bound to a particular column. For example, for the\\nranges `A1:B10` or `B:B`, which are bound to columns at the start of the range,\\nthis method returns `true`; for the range `3:7`, which is bound only to a row at\\nthe start of the range, this method returns `false`.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:D10 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:D10');\\n\\n// Determines if the start of the range is bound to a particular column and logs it to the\\n// console.\\nconsole.log(range.isStartColumnBounded());\\n```\\n@return `true` if the start of the range is bound to a particular column; `false`\\n    otherwise.*/isStartColumnBounded():boolean;\\n/**Determines whether the start of the range is bound to a particular row. For example, for the\\nranges `A1:B10` or `3:7`, which are bound to rows at the start of the range, this\\nmethod returns `true`; for the range `B:B`, which is bound only to a particular\\ncolumn at the start of the range, this method returns `false`.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:D10 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:D10');\\n\\n// Determines if the start of the range is bound to a particular row and logs it to the\\n// console.\\nconsole.log(range.isStartRowBounded());\\n```\\n@return `true` if the start of the range is bound to a particular row; `false`\\n    otherwise.*/isStartRowBounded():boolean;\\n/**Merges the cells in the range together into a single block.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n\\n// The code below 2-dimensionally merges the cells in A1 to B3\\nsheet.getRange('A1:B3').merge();\\n```\\n@return This range, for chaining.*/merge():SpreadsheetApp.Range;\\n/**Merge the cells in the range across the columns of the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The code below merges cells C5:E5 into one cell\\nvar range1 \\u003d sheet.getRange(\\\"C5:E5\\\");\\nrange1.mergeAcross();\\n\\n// The code below creates 2 horizontal cells, F5:H5 and F6:H6\\nvar range2 \\u003d sheet.getRange(\\\"F5:H6\\\");\\nrange2.mergeAcross();\\n```\\n@return This range, for chaining.*/mergeAcross():SpreadsheetApp.Range;\\n/**Merges the cells in the range together.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n\\n// The code below vertically merges the cells in A1 to A10\\nsheet.getRange('A1:A10').mergeVertically();\\n\\n// The code below creates 3 merged columns: B1 to B10, C1 to C10, and D1 to D10\\nsheet.getRange('B1:D10').mergeVertically();\\n```\\n@return This range, for chaining.*/mergeVertically():SpreadsheetApp.Range;\\n/**Cut and paste (both format and values) from this range to the target range.\\n\\n```\\n// The code below moves the first 5 columns over to the 6th column\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet()\\nsheet.getRange(\\\"A1:E\\\").moveTo(sheet.getRange(\\\"F1\\\"));\\n```\\n@param target A target range to copy this range to; only the top-left cell position is\\n    relevant.*/moveTo(target:SpreadsheetApp.Range):void;\\n/**Returns a new range that is offset from this range by the given number of rows and columns\\n(which can be negative). The new range is the same size as the original range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"A1\\\");\\n\\n// newCell references B2\\nvar newCell \\u003d cell.offset(1, 1);\\n```\\n@param rowOffset The number of rows down from the range's top-left cell; negative values\\n    represent rows up from the range's top-left cell.\\n@param columnOffset The number of columns right from the range's top-left cell; negative values\\n    represent columns left from the range's top-left cell.\\n@return This range, for chaining.*/offset(rowOffset:Integer,columnOffset:Integer):SpreadsheetApp.Range;\\n/**Returns a new range that is relative to the current range, whose upper left point is offset\\nfrom the current range by the given rows and columns, and with the given height in cells.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"A1\\\");\\n\\n// newCell references B2:B3\\nvar newRange \\u003d cell.offset(1, 1, 2);\\n```\\n@param rowOffset The number of rows down from the range's top-left cell; negative values\\n    represent rows up from the range's top-left cell.\\n@param columnOffset The number of columns right from the range's top-left cell; negative values\\n    represent columns left from the range's top-left cell.\\n@param numRows The height in rows of the new range.\\n@return This range, for chaining.*/offset(rowOffset:Integer,columnOffset:Integer,numRows:Integer):SpreadsheetApp.Range;\\n/**Returns a new range that is relative to the current range, whose upper left point is offset\\nfrom the current range by the given rows and columns, and with the given height and width in\\ncells.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"A1\\\");\\n\\n// newCell references B2:C3\\nvar newRange \\u003d cell.offset(1, 1, 2, 2);\\n```\\n@param rowOffset The number of rows down from the range's top-left cell; negative values\\n    represent rows up from the range's top-left cell.\\n@param columnOffset The number of columns right from the range's top-left cell; negative values\\n    represent columns left from the range's top-left cell.\\n@param numRows The height in rows of the new range.\\n@param numColumns The width in columns of the new range.\\n@return This range, for chaining.*/offset(rowOffset:Integer,columnOffset:Integer,numRows:Integer,numColumns:Integer):SpreadsheetApp.Range;\\n/**Creates an object that can protect the range from being edited except by users who have\\npermission. Until the script actually changes the list of editors for the range (by calling\\n[`Protection.removeEditor(emailAddress)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#removeEditor(String)), [`Protection.removeEditor(user)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#removeEditor(User)), [`Protection.removeEditors(emailAddresses)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#removeEditors(String)), [`Protection.addEditor(emailAddress)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#addEditor(String)), [`Protection.addEditor(user)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#addEditor(User)), [`Protection.addEditors(emailAddresses)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#addEditors(String)), or setting a new\\nvalue for [`Protection.setDomainEdit(editable)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#setDomainEdit(Boolean))), the permissions mirror those of the\\nspreadsheet itself, which effectively means that the range remains unprotected. If the range is\\nalready protected, this method creates a new protected range that overlaps the existing one. If\\na cell is protected by multiple protected ranges and any of them prevent a particular user from\\nediting the cell, then that user is not permitted to edit the cell.\\n\\n```\\n// Protect range A1:B10, then remove all other users from the list of editors.\\nvar ss \\u003d SpreadsheetApp.getActive();\\nvar range \\u003d ss.getRange('A1:B10');\\nvar protection \\u003d range.protect().setDescription('Sample protected range');\\n\\n// Ensure the current user is an editor before removing others. Otherwise, if the user's edit\\n// permission comes from a group, the script throws an exception upon removing the group.\\nvar me \\u003d Session.getEffectiveUser();\\nprotection.addEditor(me);\\nprotection.removeEditors(protection.getEditors());\\nif (protection.canDomainEdit()) {\\n  protection.setDomainEdit(false);\\n}\\n```\\n@return An object representing the protection settings.*/protect():SpreadsheetApp.Protection;\\n/**Randomizes the order of the rows in the given range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"A1:C7\\\");\\n\\n// Randomizes the range\\nrange.randomize();\\n```\\n@return This range, for chaining.*/randomize():SpreadsheetApp.Range;\\n/**Removes all checkboxes from the range. Clears the data validation of each cell, and\\nadditionally clears its value if the cell contains either the checked or unchecked value.\\n\\n```\\nvar range \\u003d SpreadsheetApp.getActive().getRange('A1:B10');\\n\\n// Inserts checkboxes and sets each cell value to 'no' in the range A1:B10.\\nrange.insertCheckboxes('yes', 'no');\\n\\nvar range1 \\u003d SpreadsheetApp.getActive().getRange('A1');\\nrange1.setValue('yes');\\n// Removes the checkbox data validation in cell A1 and clears its value.\\nrange1.removeCheckboxes();\\n\\nvar range2 \\u003d SpreadsheetApp.getActive().getRange('A2');\\nrange2.setValue('random');\\n// Removes the checkbox data validation in cell A2 but does not clear its value.\\nrange2.removeCheckboxes();\\n```\\n@return This range, for chaining.*/removeCheckboxes():SpreadsheetApp.Range;\\n/**Removes rows within this range that contain values that are duplicates of values in any\\nprevious row. Rows with identical values but different letter cases, formatting, or formulas\\nare considered to be duplicates. This method also removes duplicates rows hidden from view (for\\nexample, due to a filter). Content outside of this range isn't removed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B1:D7\\\");\\n\\n// Remove duplicate rows in the range.\\nrange.removeDuplicates();\\n```\\n@return The resulting range after removing duplicates. The size of the range is reduced by a\\n    row for every row removed.*/removeDuplicates():SpreadsheetApp.Range;\\n/**Removes rows within this range that contain values in the specified columns that are duplicates\\nof values any previous row. Rows with identical values but different letter cases, formatting,\\nor formulas are considered to be duplicates. This method also removes duplicates rows hidden\\nfrom view (for example, due to a filter). Content outside of this range isn't removed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"B1:D7\\\");\\n\\n// Remove rows which have duplicate values in column B.\\nrange.removeDuplicates([2]);\\n\\n// Remove rows which have duplicate values in both columns B and D.\\nrange.removeDuplicates([2,4]);\\n```\\n@param columnsToCompare The columns to analyze for duplicate values. If no columns are provided\\n    then all columns are analyzed for duplicates.\\n@return The resulting range after removing duplicates. The size of the range is reduced by a\\n    row for every row removed.*/removeDuplicates(columnsToCompare:Integer[]):SpreadsheetApp.Range;\\n/**Sets the background color of all cells in the range in CSS notation (such as `'#ffffff'`\\nor `'white'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D5\\\");\\nrange.setBackground(\\\"red\\\");\\n```\\n@param color A color code in CSS notation (such as `'#ffffff'` or `'white'`); a\\n    `null` value resets the color.\\n@return This range, for chaining.*/setBackground(color:string):SpreadsheetApp.Range;\\n/**Sets the background color of all cells in the range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar bgColor \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.BACKGROUND)\\n    .build();\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D5\\\");\\nrange.setBackgroundObject(bgColor);\\n```\\n@param color The background color to set; `null` value resets the background color.\\n@return This range, for chaining.*/setBackgroundObject(color:SpreadsheetApp.Color):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of background colors (must match dimensions of this range).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar colorAccent1 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT1)\\n    .build();\\nvar colorAccent2 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT2)\\n    .build();\\nvar colorAccent3 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT3)\\n    .build();\\nvar colorAccent4 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT4)\\n    .build();\\n\\nvar colors \\u003d [\\n  [colorAccent1, colorAccent2],\\n  [colorAccent3, colorAccent4]\\n];\\n\\nvar cell \\u003d sheet.getRange(\\\"B5:C6\\\");\\ncell.setBackgroundObjects(colors);\\n```\\n@param color A two-dimensional array of colors; `null` values reset the color.\\n@return This range, for chaining.*/setBackgroundObjects(color:SpreadsheetApp.Color[][]):SpreadsheetApp.Range;\\n/**Sets the background to the given color using RGB values (integers between 0 and 255 inclusive).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\n\\n// Sets the background to white\\ncell.setBackgroundRGB(255, 255, 255);\\n\\n// Sets the background to red\\ncell.setBackgroundRGB(255, 0, 0);\\n```\\n@param red The red value in RGB notation.\\n@param green The green value in RGB notation.\\n@param blue The blue value in RGB notation.\\n@return This range, for chaining.*/setBackgroundRGB(red:Integer,green:Integer,blue:Integer):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of background colors (must match dimensions of this range). The colors\\nare in CSS notation (such as `'#ffffff'` or `'white'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar colors \\u003d [\\n  [\\\"red\\\", \\\"white\\\", \\\"blue\\\"],\\n  [\\\"#FF0000\\\", \\\"#FFFFFF\\\", \\\"#0000FF\\\"] // These are the hex equivalents\\n];\\n\\nvar cell \\u003d sheet.getRange(\\\"B5:D6\\\");\\ncell.setBackgrounds(colors);\\n```\\n@param color A two-dimensional array of colors in CSS notation (such as `'#ffffff'` or\\n    `'white'`); `null` values reset the color.\\n@return This range, for chaining.*/setBackgrounds(color:string[][]):SpreadsheetApp.Range;\\n/**Sets the border property. Valid values are `true` (on), `false` (off) and `null` (no change).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\n// Sets borders on the top and bottom, but leaves the left and right unchanged\\ncell.setBorder(true, null, true, null, false, false);\\n```\\n@param top `true` for border, `false` for none, `null` for no change.\\n@param left `true` for border, `false` for none, `null` for no change.\\n@param bottom `true` for border, `false` for none, `null` for no change.\\n@param right `true` for border, `false` for none, `null` for no change.\\n@param vertical `true` for internal vertical borders, `false` for none, `null` for no change.\\n@param horizontal `true` for internal horizontal borders, `false` for none, `null` for no change.\\n@return This range, for chaining.*/setBorder(top:boolean,left:boolean,bottom:boolean,right:boolean,vertical:boolean,horizontal:boolean):SpreadsheetApp.Range;\\n/**Sets the border property with color and/or style. Valid values are `true` (on), `false` (off) and `null` (no change). For color, use Color in CSS notation (such as `'#ffffff'` or `'white'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\n// Sets borders on the top and bottom, but leaves the left and right unchanged\\n// Also sets the color to \\\"red\\\", and the border to \\\"DASHED\\\".\\ncell.setBorder(true, null, true, null, false, false, \\\"red\\\", SpreadsheetApp.BorderStyle.DASHED);\\n```\\n@param top `true` for border, `false` for none, `null` for no change.\\n@param left `true` for border, `false` for none, `null` for no change.\\n@param bottom `true` for border, `false` for none, `null` for no change.\\n@param right `true` for border, `false` for none, `null` for no change.\\n@param vertical `true` for internal vertical borders, `false` for none, `null` for no change.\\n@param horizontal `true` for internal horizontal borders, `false` for none, `null` for no change.\\n@param color A color in CSS notation (such as `'#ffffff'` or `'white'`), `null` for default color (black).\\n@param style A style for the borders, `null` for default style (solid).\\n@return This range, for chaining.*/setBorder(top:boolean,left:boolean,bottom:boolean,right:boolean,vertical:boolean,horizontal:boolean,color:string,style:SpreadsheetApp.BorderStyle):SpreadsheetApp.Range;\\n/**Sets one data validation rule for all cells in the range.\\n\\n```\\n// Set the data validation rule for cell A1 to require a value from B1:B10.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar range \\u003d SpreadsheetApp.getActive().getRange('B1:B10');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireValueInRange(range).build();\\ncell.setDataValidation(rule);\\n```\\n@param rule The data validation rule to set, or `null` to remove data validation.\\n@return This range, for chaining.*/setDataValidation(rule:SpreadsheetApp.DataValidation):SpreadsheetApp.Range;\\n/**Sets the data validation rules for all cells in the range. This method takes a two-dimensional\\narray of data validations, indexed by row then by column. The array dimensions must correspond\\nto the range dimensions.\\n\\n```\\n// Set the data validation rules for Sheet1!A1:B5 to require a value from Sheet2!A1:A10.\\nvar destinationRange \\u003d SpreadsheetApp.getActive().getSheetByName('Sheet1').getRange('A1:B5');\\nvar sourceRange \\u003d SpreadsheetApp.getActive().getSheetByName('Sheet2').getRange('A1:A10');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireValueInRange(sourceRange).build();\\nvar rules \\u003d destinationRange.getDataValidations();\\nfor (var i \\u003d 0; i \\u003c rules.length; i++) {\\n  for (var j \\u003d 0; j \\u003c rules[i].length; j++) {\\n    rules[i][j] \\u003d rule;\\n  }\\n}\\ndestinationRange.setDataValidations(rules);\\n```\\n@param rules A two-dimensional array of data validation rules to set; `null` values\\n    remove data validation.\\n@return This range, for chaining.*/setDataValidations(rules:SpreadsheetApp.DataValidation[][]):SpreadsheetApp.Range;\\n/**Sets the font color in CSS notation (such as `'#ffffff'` or `'white'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setFontColor(\\\"red\\\");\\n```\\n@param color The font color in CSS notation (such as `'#ffffff'` or `'white'`); a\\n    `null` value resets the color.\\n@return This range, for chaining.*/setFontColor(color:string):SpreadsheetApp.Range;\\n/**Sets the font color of the given range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar color \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.TEXT)\\n    .build();\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setFontColor(color);\\n```\\n@param color The font color to set; a `null` value resets the color.\\n@return This range, for chaining.*/setFontColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of font colors (must match dimensions of this range).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar colorAccent1 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT1)\\n    .build();\\nvar colorAccent2 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT2)\\n    .build();\\nvar colorAccent3 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT3)\\n    .build();\\nvar colorAccent4 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT4)\\n    .build();\\n\\nvar colors \\u003d [\\n  [colorAccent1, colorAccent2],\\n  [colorAccent3, colorAccent4]\\n];\\n\\nvar cell \\u003d sheet.getRange(\\\"B5:C6\\\");\\ncell.setFontColorObjects(colors);\\n```\\n@param colors A two-dimensional array of colors; `null` values reset the font color.\\n@return This range, for chaining.*/setFontColorObjects(colors:SpreadsheetApp.Color[][]):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of font colors (must match dimensions of this range). The colors are in\\nCSS notation (such as `'#ffffff'` or `'white'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar colors \\u003d [\\n  [\\\"red\\\", \\\"white\\\", \\\"blue\\\"],\\n  [\\\"#FF0000\\\", \\\"#FFFFFF\\\", \\\"#0000FF\\\"] // These are the hex equivalents\\n];\\n\\nvar cell \\u003d sheet.getRange(\\\"B5:D6\\\");\\ncell.setFontColors(colors);\\n```\\n@param colors A two-dimensional array of colors in CSS notation (such as `'#ffffff'` or\\n    `'white'`); `null` values reset the color.\\n@return This range, for chaining.*/setFontColors(colors:Object[][]):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of font families (must match dimensions of this range). Examples of\\nfont families are \\\"Arial\\\" or \\\"Helvetica\\\".\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar fonts \\u003d [\\n  [\\\"Arial\\\", \\\"Helvetica\\\", \\\"Verdana\\\"],\\n  [\\\"Courier New\\\", \\\"Arial\\\", \\\"Helvetica]\\n];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2:D3\\\");\\ncell.setFontFamilies(fonts);\\n```\\n@param fontFamilies A two-dimensional array of font families; `null` values reset the\\n    font family.\\n@return This range, for chaining.*/setFontFamilies(fontFamilies:Object[][]):SpreadsheetApp.Range;\\n/**Sets the font family, such as \\\"Arial\\\" or \\\"Helvetica\\\".\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setFontFamily(\\\"Helvetica\\\");\\n```\\n@param fontFamily The font family to set; a `null` value resets the font family.\\n@return This range, for chaining.*/setFontFamily(fontFamily:string):SpreadsheetApp.Range;\\n/**Sets the font line style of the given range (`'underline'`, `'line-through'`, or\\n`'none'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setFontLine(\\\"line-through\\\");\\n```\\n@param fontLine The font line style, either `'underline'`, `'line-through'`, or\\n    `'none'`; a `null` value resets the font line style.\\n@return This range, for chaining.*/setFontLine(fontLine:string):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of line styles (must match dimensions of this range).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar fontLines \\u003d [\\n  [\\\"underline\\\", \\\"line-through\\\", \\\"none\\\"]\\n];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D2\\\");\\nrange.setFontLines(fontLines);\\n```\\n@param fontLines A two-dimensional array of font line styles (`'underline'`, `'line-through'`, or `'none'`); `null` values reset the font line style.\\n@return This range, for chaining.*/setFontLines(fontLines:Object[][]):SpreadsheetApp.Range;\\n/**Sets the font size, with the size being the point size to use.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setFontSize(20);\\n```\\n@param size A font size in point size.\\n@return This range, for chaining.*/setFontSize(size:Integer):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of font sizes (must match dimensions of this range). The sizes are in\\npoints.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar fontSizes \\u003d [\\n  [16, 20, 24]\\n];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D2\\\");\\nrange.setFontSizes(fontSizes);\\n```\\n@param sizes A two-dimensional array of sizes.\\n@return This range, for chaining.*/setFontSizes(sizes:Object[][]):SpreadsheetApp.Range;\\n/**Set the font style for the given range (`'italic'` or `'normal'`).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setFontStyle(\\\"italic\\\");\\n```\\n@param fontStyle The font style, either `'italic'` or `'normal'`; a `null`\\n    value resets the font style.\\n@return This range, for chaining.*/setFontStyle(fontStyle:string):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of font styles (must match dimensions of this range).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar fontStyles \\u003d [\\n  [\\\"italic\\\", \\\"normal\\\"]\\n];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:C2\\\");\\nrange.setFontStyles(fontStyles);\\n```\\n@param fontStyles A two-dimensional array of font styles, either `'italic'` or `'normal'`; `null` values reset the font style.\\n@return This range, for chaining.*/setFontStyles(fontStyles:Object[][]):SpreadsheetApp.Range;\\n/**Set the font weight for the given range (normal/bold).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setFontWeight(\\\"bold\\\");\\n```\\n@param fontWeight The font weight, either `'bold'` or `'normal'`; a `null`\\n    value resets the font weight.\\n@return This range, for chaining.*/setFontWeight(fontWeight:string):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of font weights (must match dimensions of this range). An example of a\\nfont weight is \\\"bold\\\".\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar fontStyles \\u003d [\\n  [ \\\"bold\\\", \\\"bold\\\", \\\"normal\\\" ]\\n];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D2\\\");\\nrange.setFontWeights(fontStyles);\\n```\\n@param fontWeights A two-dimensional array of font weights, either `'bold'` or `'normal'`; `null` values reset the font weight.\\n@return This range, for chaining.*/setFontWeights(fontWeights:Object[][]):SpreadsheetApp.Range;\\n/**Updates the formula for this range. The given formula must be in A1 notation.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B5\\\");\\ncell.setFormula(\\\"\\u003dSUM(B3:B4)\\\");\\n```\\n@param formula A string representing the formula to set for the cell.\\n@return This range, for chaining.*/setFormula(formula:string):SpreadsheetApp.Range;\\n/**Updates the formula for this range. The given formula must be in R1C1 notation.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B5\\\");\\n// This sets the formula to be the sum of the 3 rows above B5\\ncell.setFormulaR1C1(\\\"\\u003dSUM(R[-3]C[0]:R[-1]C[0])\\\");\\n```\\n@param formula A string formula.\\n@return This range, for chaining.*/setFormulaR1C1(formula:string):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of formulas (must match dimensions of this range). The given formulas\\nmust be in A1 notation. This method takes a two-dimensional array of formulas, indexed by row,\\nthen by column. The array dimensions must correspond to the range dimensions.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This sets the formulas to be a row of sums, followed by a row of averages right below.\\n// The size of the two-dimensional array must match the size of the range.\\nvar formulas \\u003d [\\n  [\\\"\\u003dSUM(B2:B4)\\\", \\\"\\u003dSUM(C2:C4)\\\", \\\"\\u003dSUM(D2:D4)\\\"],\\n  [\\\"\\u003dAVERAGE(B2:B4)\\\", \\\"\\u003dAVERAGE(C2:C4)\\\", \\\"\\u003dAVERAGE(D2:D4)\\\"]\\n];\\n\\nvar cell \\u003d sheet.getRange(\\\"B5:D6\\\");\\ncell.setFormulas(formulas);\\n```\\n@param formulas A two-dimensional string array of formulas.\\n@return This range, for chaining.*/setFormulas(formulas:string[][]):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of formulas (must match dimensions of this range). The given formulas\\nmust be in R1C1 notation.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This creates formulas for a row of sums, followed by a row of averages.\\nvar sumOfRowsAbove \\u003d \\\"\\u003dSUM(R[-3]C[0]:R[-1]C[0])\\\";\\nvar averageOfRowsAbove \\u003d \\\"\\u003dAVERAGE(R[-4]C[0]:R[-2]C[0])\\\";\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar formulas \\u003d [\\n  [sumOfRowsAbove, sumOfRowsAbove, sumOfRowsAbove],\\n  [averageOfRowsAbove, averageOfRowsAbove, averageOfRowsAbove]\\n];\\n\\nvar cell \\u003d sheet.getRange(\\\"B5:D6\\\");\\n// This sets the formula to be the sum of the 3 rows above B5.\\ncell.setFormulasR1C1(formulas);\\n```\\n@param formulas A two-dimensional array of formulas in R1C1 format.\\n@return This range, for chaining.*/setFormulasR1C1(formulas:string[][]):SpreadsheetApp.Range;\\n/**Set the horizontal (left to right) alignment for the given range (left/center/right).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setHorizontalAlignment(\\\"center\\\");\\n```\\n@param alignment The alignment, either `'left'`, `'center'` or `'normal'`; a\\n    `null` value resets the alignment.\\n@return This range, for chaining.*/setHorizontalAlignment(alignment:string):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of horizontal alignments. see [`setHorizontalAlignment(alignment)`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#setHorizontalAlignment(String))\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar horizontalAlignments \\u003d [\\n  [ \\\"left\\\", \\\"right\\\", \\\"center\\\" ]\\n];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D2\\\");\\nrange.setHorizontalAlignments(horizontalAlignments);\\n```\\n@param alignments A two-dimensional array of alignments, either `'left'`, `'center'` or `'normal'`; a `null` value resets the alignment.\\n@return This range, for chaining.*/setHorizontalAlignments(alignments:Object[][]):SpreadsheetApp.Range;\\n/**Sets the note to the given value.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setNote(\\\"This is a note\\\");\\n```\\n@param note The note value to set for the range; a `null` value removes the note.\\n@return This range, for chaining.*/setNote(note:string):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of notes (must match dimensions of this range).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar notes \\u003d [\\n  [\\\"it goes\\\", \\\"like this\\\", \\\"the fourth, the fifth\\\"],\\n  [\\\"the minor fall\\\", \\\"and the\\\", \\\"major lift\\\"]\\n];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2:D3\\\");\\ncell.setNotes(notes)\\n```\\n@param notes A two-dimensional array of notes; `null` values remove the note.\\n@return This range, for chaining.*/setNotes(notes:Object[][]):SpreadsheetApp.Range;\\n/**Sets the number or date format to the given formatting string. The accepted format patterns are\\ndescribed in the [Sheets API documentation](/sheets/api/guides/formats).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\n// Always show 3 decimal points\\ncell.setNumberFormat(\\\"0.000\\\");\\n```\\n@param numberFormat A number format string.\\n@return This range, for chaining.*/setNumberFormat(numberFormat:string):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of number or date formats (must match dimensions of this range). The\\nvalues are format pattern strings as described in the [\\nSheets API documentation](/sheets/api/guides/formats).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar formats \\u003d [\\n  [ \\\"0.000\\\", \\\"0,000,000\\\", \\\"$0.00\\\" ]\\n];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D2\\\");\\nrange.setNumberFormats(formats);\\n```\\n@param numberFormats A two-dimensional array of number formats.\\n@return This range, for chaining.*/setNumberFormats(numberFormats:Object[][]):SpreadsheetApp.Range;\\n/**Sets the Rich Text value for the cells in the range.\\n\\n```\\n// Sets all cells in range B2:D4 to have the text \\\"Hello world\\\", with \\\"Hello\\\" bolded.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\nvar bold \\u003d SpreadsheetApp.newTextStyle()\\n    .setBold(true)\\n    .build();\\nvar richText \\u003d SpreadsheetApp.newRichTextValue()\\n    .setText(\\\"Hello world\\\")\\n    .setTextStyle(0, 5, bold)\\n    .build();\\nrange.setRichTextValue(richText);\\n```\\n@param value The desired Rich Text value.\\n@return This range, for chaining.*/setRichTextValue(value:SpreadsheetApp.RichTextValue):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of Rich Text values.\\n\\n```\\n// Sets the cells in range A1:A2 to have Rich Text values.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:A2\\\");\\nvar bold \\u003d SpreadsheetApp.newTextStyle()\\n    .setBold(true)\\n    .build();\\nvar italic \\u003d SpreadsheetApp.newTextStyle()\\n    .setItalic(true)\\n    .build();\\nvar richTextA1 \\u003d SpreadsheetApp.newRichTextValue()\\n    .setText(\\\"This cell is bold\\\")\\n    .setTextStyle(bold)\\n    .build();\\nvar richTextA2 \\u003d SpreadsheetApp.newRichTextValue()\\n    .setText(\\\"bold words, italic words\\\")\\n    .setTextStyle(0, 11, bold)\\n    .setTextStyle(12, 24, italic)\\n    .build();\\nrange.setRichTextValues([[richTextA1], [richTextA2]]);\\n```\\n@param values The desired Rich Text values.\\n@return This range, for chaining.*/setRichTextValues(values:SpreadsheetApp.RichTextValue[][]):SpreadsheetApp.Range;\\n/**Sets whether or not the range should show hyperlinks.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within a\\n// Google Sheets file, you can useSpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets cell A30 and sets its hyperlink value.\\nconst range \\u003d sheet.getRange('A30');\\nrange.setValue('https://www.example.com');\\n\\n// Sets cell A30 to show hyperlinks.\\nrange.setShowHyperlink(true);\\n```\\n@param showHyperlink Whether or not to show the hyperlink.\\n@return This range, for chaining.*/setShowHyperlink(showHyperlink:boolean):SpreadsheetApp.Range;\\n/**Sets the text direction for the cells in the range. If a specified direction is `null`,\\nthe direction is inferred and then set.\\n\\n```\\n// Sets right-to-left text direction for the range.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B5:C6\\\");\\nrange.setTextDirection(SpreadsheetApp.TextDirection.RIGHT_TO_LEFT);\\n```\\n@param direction The desired text direction; if `null` the direction is inferred before\\n    setting.\\n@return This range, for chaining.*/setTextDirection(direction:SpreadsheetApp.TextDirection):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of text directions. If a specified direction is `null`, the\\ndirection is inferred and then set.\\n\\n```\\n// Copies all of the text directions from range A1:B2 over to range C5:D6.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range1 \\u003d sheet.getRange(\\\"A1:B2\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C5:D6\\\");\\n\\nrange2.setTextRotations(range1.getTextDirections());\\n```\\n@param directions The desired text directions; if a specified direction is `null` it is\\n    inferred before setting.\\n@return This range, for chaining.*/setTextDirections(directions:SpreadsheetApp.TextDirection[][]):SpreadsheetApp.Range;\\n/**Sets the text rotation settings for the cells in the range. The input corresponds to the angle\\nbetween the standard text orientation and the desired orientation. An input of zero indicates\\nthat the text is set to the standard orientation.\\n\\nFor left to right text direction, positive angles are in the counterclockwise direction,\\nwhereas for right to left they are in the clockwise direction.\\n\\n```\\n// Sets all cell's in range B2:D4 to have text rotated up 45 degrees.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nrange.setTextRotation(45);\\n```\\n@param degrees The desired angle between the standard orientation and the desired orientation.\\n    For left to right text, positive angles are in the counterclockwise direction.\\n@return This range, for chaining.*/setTextRotation(degrees:Integer):SpreadsheetApp.Range;\\n/**Sets the text rotation settings for the cells in the range.\\n\\n```\\n// Sets all cell's in range B2:D4 to have the same text rotation settings as cell A1.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\n\\nvar rotation \\u003d sheet.getRange(\\\"A1\\\").getTextRotation();\\n\\nsheet.getRange(\\\"B2:D4\\\").setTextRotation(rotation);\\n\\n```\\n@param rotation The desired text rotation settings.\\n@return This range, for chaining.*/setTextRotation(rotation:SpreadsheetApp.TextRotation):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of text rotations.\\n\\n```\\n// Copies all of the text rotations from range A1:B2 over to range C5:D6.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range1 \\u003d sheet.getRange(\\\"A1:B2\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C5:D6\\\");\\n\\nrange2.setTextRotations(range1.getTextRotations());\\n```\\n@param rotations The desired text rotation settings.\\n@return This range, for chaining.*/setTextRotations(rotations:SpreadsheetApp.TextRotation[][]):SpreadsheetApp.Range;\\n/**Sets the text style for the cells in the range.\\n\\n```\\n// Sets the cells in range C5:D6 to have underlined size 15 font.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"C5:D6\\\");\\nvar style \\u003d SpreadsheetApp.newTextStyle()\\n    .setFontSize(15)\\n    .setUnderline(true)\\n    .build();\\nrange.setTextStyle(style);\\n```\\n@param style The desired text style.\\n@return This range, for chaining.*/setTextStyle(style:SpreadsheetApp.TextStyle):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of text styles.\\n\\n```\\n// Sets text styles for cells in range A1:B2\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B2\\\");\\nvar bold \\u003d SpreadsheetApp.newTextStyle()\\n    .setBold(true)\\n    .build();\\nvar otherStyle \\u003d SpreadsheetApp.newTextStyle()\\n    .setBold(true)\\n    .setUnderline(true)\\n    .setItalic(true)\\n    .setForegroundColor(\\\"#335522\\\")\\n    .setFontSize(44)\\n    .build();\\nrange.setTextStyles([[bold, otherStyle], [otherStyle, bold]]);\\n```\\n@param styles The desired text styles.\\n@return This range, for chaining.*/setTextStyles(styles:SpreadsheetApp.TextStyle[][]):SpreadsheetApp.Range;\\n/**Sets the value of the range. The value can be numeric, string, boolean or date. If it begins\\nwith `'\\u003d'` it is interpreted as a formula.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setValue(100);\\n```\\n@param value The value for the range.\\n@return This range, for chaining.*/setValue(value:Object):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of values (must match dimensions of this range). If a value begins with\\n`\\u003d`, it's interpreted as a formula.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar values \\u003d [\\n  [ \\\"2.000\\\", \\\"1,000,000\\\", \\\"$2.99\\\" ]\\n];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D2\\\");\\nrange.setValues(values);\\n```\\n@param values A two-dimensional array of values.\\n@return This range, for chaining.*/setValues(values:Object[][]):SpreadsheetApp.Range;\\n/**Set the vertical (top to bottom) alignment for the given range (top/middle/bottom).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setVerticalAlignment(\\\"middle\\\");\\n```\\n@param alignment The alignment, either `'top'`, `'middle'` or `'bottom'`; a\\n    `null` value resets the alignment.\\n@return This range, for chaining.*/setVerticalAlignment(alignment:string):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of vertical alignments (must match dimensions of this range).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar alignments \\u003d [\\n  [ \\\"top\\\", \\\"middle\\\", \\\"bottom\\\" ]\\n];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D2\\\");\\nrange.setVerticalAlignments(alignments);\\n```\\n@param alignments A two-dimensional array of alignments, either `'top'`, `'middle'`\\n    or `'bottom'`; a `null` value resets the alignment.\\n@return This range, for chaining.*/setVerticalAlignments(alignments:Object[][]):SpreadsheetApp.Range;\\n/**Sets whether or not to stack the text for the cells in the range. If the text is stacked\\nvertically, the degree text rotation setting is ignored.\\n\\n```\\n// Sets all cell's in range B2:D4 to have vertically stacked text.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nrange.setVerticalText(true);\\n```\\n@param isVertical Whether or not to stack the text.\\n@return This range, for chaining.*/setVerticalText(isVertical:boolean):SpreadsheetApp.Range;\\n/**Set the cell wrap of the given range.\\n\\nCells with wrap enabled (the default) resize to display their full content. Cells with wrap\\ndisabled display as much as possible in the cell without resizing or running to multiple lines.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar cell \\u003d sheet.getRange(\\\"B2\\\");\\ncell.setWrap(true);\\n```\\n@param isWrapEnabled Whether to wrap text or not.\\n@return This range, for chaining.*/setWrap(isWrapEnabled:boolean):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of wrap strategies.\\n\\n```\\n// Copies all of the wrap strategies from range A1:B2 over to range C5:D6.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range1 \\u003d sheet.getRange(\\\"A1:B2\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C5:D6\\\");\\n\\nrange2.setWrapStrategies(range1.getWrapStrategies());\\n```\\n@param strategies The desired wrapping strategies.\\n@return This range, for chaining.*/setWrapStrategies(strategies:SpreadsheetApp.WrapStrategy[][]):SpreadsheetApp.Range;\\n/**Sets the text wrapping strategy for the cells in the range.\\n\\n```\\n// Sets all cells in range B2:D4 to use the clip wrap strategy.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"B2:D4\\\");\\n\\nrange.setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP);\\n```\\n@param strategy The desired wrapping strategy.\\n@return This range, for chaining.*/setWrapStrategy(strategy:SpreadsheetApp.WrapStrategy):SpreadsheetApp.Range;\\n/**Sets a rectangular grid of word wrap policies (must match dimensions of this range). Cells with\\nwrap enabled (the default) resize to display their full content. Cells with wrap disabled\\ndisplay as much as possible in the cell without resizing or running to multiple lines.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// The size of the two-dimensional array must match the size of the range.\\nvar wraps \\u003d [\\n  [ true, true, false ]\\n];\\n\\nvar range \\u003d sheet.getRange(\\\"B2:D2\\\");\\nrange.setWraps(wraps);\\n```\\n@param isWrapEnabled A two-dimensional array of wrap variables that determine whether to wrap\\n    text in a cell or not.\\n@return This range, for chaining.*/setWraps(isWrapEnabled:Object[][]):SpreadsheetApp.Range;\\n/**Changes the column grouping depth of the range by the specified amount.\\n\\nThis has the effect of creating, modifying, or deleting groups that intersect with the\\nrange. For positive deltas, groups are created and/or modified; for negative deltas, groups are\\ndestroyed and/or modified.\\n\\nThis has no effect when decreasing the group depth below zero or above eight.\\n\\nIf the [`column group control position`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getColumnGroupControlPosition()) is\\n[`BEFORE`](https://developers.google.com/apps-script/reference/spreadsheet/group-control-toggle-position.html#BEFORE), this throws an error when attempting to shift\\nthe depth of the first row.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getActiveRange();\\n\\n// The column grouping depth is increased by 1.\\nrange.shiftColumnGroupDepth(1);\\n\\n// The column grouping depth is decreased by 1.\\nrange.shiftColumnGroupDepth(-1);\\n```\\n@param delta The amount by which to change the column group depth of this range.\\n@return This range, for chaining.*/shiftColumnGroupDepth(delta:Integer):SpreadsheetApp.Range;\\n/**Changes the row grouping depth of the range by the specified amount.\\n\\nThis has the effect of creating, modifying, or deleting groups that intersect with the\\nrange. For positive deltas, groups are created and/or modified; for negative deltas, groups are\\ndestroyed and/or modified.\\n\\nThis has no effect when decreasing the group depth below zero or above eight.\\n\\nIf the [`row group control position`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html#getRowGroupControlPosition()) is [`BEFORE`](https://developers.google.com/apps-script/reference/spreadsheet/group-control-toggle-position.html#BEFORE), this throws an error when attempting to shift the\\ndepth of the first row.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getActiveRange();\\n\\n// The row grouping depth is increased by 1.\\nrange.shiftRowGroupDepth(1);\\n\\n// The row grouping depth is decreased by 1.\\nrange.shiftRowGroupDepth(-1);\\n```\\n@param delta The amount by which to change the row group depth of this range.\\n@return This range, for chaining.*/shiftRowGroupDepth(delta:Integer):SpreadsheetApp.Range;\\n/**Sorts the cells in the given range, by column and order specified.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\nvar range \\u003d sheet.getRange(\\\"A1:C7\\\");\\n\\n// Sorts by the values in the first column (A)\\nrange.sort(1);\\n\\n// Sorts by the values in the second column (B)\\nrange.sort(2);\\n\\n// Sorts descending by column B\\nrange.sort({column: 2, ascending: false});\\n\\n// Sorts descending by column B, then ascending by column A\\n// Note the use of an array\\nrange.sort([{column: 2, ascending: false}, {column: 1, ascending: true}]);\\n\\n// For rows that are sorted in ascending order, the \\\"ascending\\\" parameter is\\n// optional, and just an integer with the column can be used instead. Note that\\n// in general, keeping the sort specification consistent results in more readable\\n// code. You can express the earlier sort as:\\nrange.sort([{column: 2, ascending: false}, 1]);\\n\\n// Alternatively, if you want all columns to be in ascending order, you can use\\n// the following (this makes column 2 ascending)\\nrange.sort([2, 1]);\\n// ... which is equivalent to\\nrange.sort([{column: 2, ascending: true}, {column: 1, ascending: true}]);\\n```\\n@param sortSpecObj The columns to sort by.\\n@return This range, for chaining.*/sort(sortSpecObj:Object):SpreadsheetApp.Range;\\n/**Splits a column of text into multiple columns based on an auto-detected delimiter.\\n\\n```\\n// A1:A3 has the following values:\\n//           A                  B                 C\\n// 1 |one,one,one      |                 |                 |\\n// 2 |two,two,two      |                 |                 |\\n// 3 |three,three,three|                 |                 |\\n\\nvar range \\u003d SpreadsheetApp.getActiveSheet().getRange(\\\"A1:A3\\\");\\nrange.splitTextToColumns();\\n\\n// Result after spliting the text to columns:\\n//           A                  B                 C\\n// 1 |one              |one              |one              |\\n// 2 |two              |two              |two              |\\n// 3 |three            |three            |three            |\\n```*/splitTextToColumns():void;\\n/**Splits a column of text into multiple columns based on the specified delimiter.\\n\\n```\\n// A1:A3 has the following values:\\n//           A                  B                 C\\n// 1 |one;one;one      |                 |                 |\\n// 2 |two;two;two      |                 |                 |\\n// 3 |three;three;three|                 |                 |\\n\\nvar range \\u003d SpreadsheetApp.getActiveSheet().getRange(\\\"A1:A3\\\");\\nrange.splitTextToColumns(SpreadsheetApp.TextToColumnsDelimiter.SEMICOLON);\\n\\n// Result after spliting the text to columns:\\n//           A                  B                 C\\n// 1 |one              |one              |one              |\\n// 2 |two              |two              |two              |\\n// 3 |three            |three            |three            |\\n```\\n@param delimiter The preset delimiter to split on.*/splitTextToColumns(delimiter:SpreadsheetApp.TextToColumnsDelimiter):void;\\n/**Splits a column of text into multiple columns using the specified string as a custom delimiter.\\n\\n```\\n// A1:A3 has the following values:\\n//           A                  B                 C\\n// 1 |one#one#one      |                 |                 |\\n// 2 |two#two#two      |                 |                 |\\n// 3 |three#three#three|                 |                 |\\n\\nvar range \\u003d SpreadsheetApp.getActiveSheet().getRange(\\\"A1:A3\\\");\\nrange.splitTextToColumns('#');\\n\\n// Result after spliting the text to columns:\\n//           A                  B                 C\\n// 1 |one              |one              |one              |\\n// 2 |two              |two              |two              |\\n// 3 |three            |three            |three            |\\n```\\n@param delimiter The custom delimiter to split on.*/splitTextToColumns(delimiter:string):void;\\n/**Trims the whitespace (such as spaces, tabs, or new lines) in every cell in this range. Removes\\nall whitespace from the start and end of each cell's text, and reduces any subsequence of\\nremaining whitespace characters to a single space.\\n\\n__Note__: If the resulting trimmed text starts with a '+' or '\\u003d'\\ncharacter, the text remains as a string value and isn't interpreted as a formula.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getRange('A1:A4');\\nrange.activate();\\nrange.setValues(\\n    [' preceding space', 'following space ', 'two  middle  spaces', '   \\u003dSUM(1,2)'])\\n\\nrange.trimWhitespace();\\n\\nvar values \\u003d range.getValues();\\n// Values are ['preceding space', 'following space', 'two middle spaces', '\\u003dSUM(1,2)']\\n```\\n@return This range, for chaining.*/trimWhitespace():SpreadsheetApp.Range;\\n/**Changes the state of the checkboxes in the range to “unchecked”. Ignores the cells in the range\\nwhich currently do not contain either the checked or unchecked value configured.\\n\\n```\\n// Changes the state of cells which currently contain either the checked or unchecked value\\n// configured in the range A1:B10 to 'unchecked'.\\nvar range \\u003d SpreadsheetApp.getActive().getRange('A1:B10');\\nrange.uncheck();\\n```\\n@return This range, for chaining.*/uncheck():SpreadsheetApp.Range;\\n/**Returns top, left, bottom, and right border for the first cell in the range.\\n@return The borders for the first cell in the range.*/getBorder():SpreadsheetApp.Borders;\\n/**Returns top, left, bottom, and right borders for all the enclosed cells.\\n@return The borders for the enclosed cells.*/getBorders():SpreadsheetApp.Borders[][];}interface ProtectionType{}interface _ProtectionType{\\n/**Protection for a range.*/RANGE:ProtectionType;\\n/**Protection for a sheet.*/SHEET:ProtectionType;}interface Protection{\\n/**Adds the given user to the list of editors for the protected sheet or range. This method does\\nnot automatically give the user permission to edit the spreadsheet itself; to do that in\\naddition, call [`Spreadsheet.addEditor(emailAddress)`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#addEditor(String)).\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Adds an editor to the spreadsheet using an email address.\\n// TODO(developer): Replace the email address with a valid email.\\nss.addEditor('cloudysanfrancisco@gmail.com');\\n\\n// Gets a sheet by its name and protects it.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\nconst sampleProtectedSheet \\u003d sheet.protect();\\n\\n// Adds an editor of the protected sheet using an email address.\\n// TODO(developer): Replace the email address with a valid email.\\nsampleProtectedSheet.addEditor('cloudysanfrancisco@gmail.com');\\n\\n// Gets the editors of the protected sheet.\\nconst editors \\u003d sampleProtectedSheet.getEditors();\\n\\n// Logs the editors' email addresses to the console.\\nfor (const editor of editors) {\\n  console.log(editor.getEmail());\\n}\\n```\\n@param emailAddress The email address of the user to add.\\n@return The object representing the protection settings, for chaining.*/addEditor(emailAddress:string):SpreadsheetApp.Protection;\\n/**Adds the given user to the list of editors for the protected sheet or range. This method does\\nnot automatically give the user permission to edit the spreadsheet itself; to do that in\\naddition, call [`Spreadsheet.addEditor(user)`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#addEditor(User)).\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Protects the sheet.\\nconst sampleProtectedSheet \\u003d sheet.protect();\\n\\n// Adds the active user as an editor of the protected sheet.\\nsampleProtectedSheet.addEditor(Session.getActiveUser());\\n\\n// Gets the editors of the protected sheet.\\nconst editors \\u003d sampleProtectedSheet.getEditors();\\n\\n// Logs the editors' email addresses to the console.\\nfor (const editor of editors) {\\n  console.log(editor.getEmail());\\n}\\n```\\n@param user A representation of the user to add.\\n@return The object representing the protection settings, for chaining.*/addEditor(user:User):SpreadsheetApp.Protection;\\n/**Adds the given array of users to the list of editors for the protected sheet or range. This\\nmethod does not automatically give the users permission to edit the spreadsheet itself; to do\\nthat in addition, call [`Spreadsheet.addEditors(emailAddresses)`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html#addEditors(String)).\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Creates variables for the email addresses to add as editors.\\n// TODO(developer): Replace the email addresses with valid ones.\\nconst TEST_EMAIL_1 \\u003d 'cloudysanfrancisco@gmail.com';\\nconst TEST_EMAIL_2 \\u003d 'baklavainthebalkans@gmail.com';\\n\\n// Protects the sheet.\\nconst sampleProtectedSheet \\u003d sheet.protect();\\n\\n// Adds editors to the protected sheet using the email address variables.\\nsampleProtectedSheet.addEditors([TEST_EMAIL_1, TEST_EMAIL_2]);\\n\\n// Gets the editors of the protected sheet.\\nconst editors \\u003d sampleProtectedSheet.getEditors();\\n\\n// Logs the editors' email addresses to the console.\\nfor (const editor of editors) {\\n  console.log(editor.getEmail());\\n}\\n```\\n@param emailAddresses An array of email addresses of the users to add.\\n@return The object representing the protection settings, for chaining.*/addEditors(emailAddresses:string[]):SpreadsheetApp.Protection;\\n/**Adds the specified target audience as an editor of the protected range.\\n@param audienceId The ID of the target audience to add.\\n@return The object representing the protection settings, for chaining.*/addTargetAudience(audienceId:string):SpreadsheetApp.Protection;\\n/**Determines whether all users in the domain that owns the spreadsheet have permission to edit\\nthe protected range or sheet. Throws an exception if the user does not have permission to edit\\nthe protected range or sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Protects the sheet.\\nconst sampleProtectedSheet \\u003d sheet.protect();\\n\\n// Logs whether domain users have permission to edit the protected sheet to the console.\\nconsole.log(sampleProtectedSheet.canDomainEdit());\\n```\\n@return `true` if all users in the domain that owns the spreadsheet have permission to\\n    edit the protected range or sheet; `false` if they don't.*/canDomainEdit():boolean;\\n/**Determines whether the user has permission to edit the protected range or sheet. The\\nspreadsheet owner is always able to edit protected ranges and sheets.\\n\\n```\\n// Remove all range protections in the spreadsheet that the user has permission to edit.\\nvar ss \\u003d SpreadsheetApp.getActive();\\nvar protections \\u003d ss.getProtections(SpreadsheetApp.ProtectionType.RANGE);\\nfor (var i \\u003d 0; i \\u003c protections.length; i++) {\\n  var protection \\u003d protections[i];\\n  if (protection.canEdit()) {\\n    protection.remove();\\n  }\\n}\\n```\\n@return `true` if the user has permission to edit the protected range or sheet; `false` if not*/canEdit():boolean;\\n/**Gets the description of the protected range or sheet. If no description is set, this method\\nreturns an empty string.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Protects the sheet and sets the description.\\nconst sampleProtectedSheet \\u003d sheet.protect().setDescription('Sample sheet is protected');\\n\\n// Gets the description of the protected sheet and logs it to the console.\\nconst sampleProtectedSheetDescription \\u003d sampleProtectedSheet.getDescription();\\nconsole.log(sampleProtectedSheetDescription);\\n```\\n@return The description of the protected range or sheet, or an empty string if no description\\n    is set.*/getDescription():string;\\n/**Gets the list of editors for the protected range or sheet. Throws an exception if the user does\\nnot have permission to edit the protected range or sheet.\\n\\n```\\n// Protect the active sheet, then remove all other users from the list of editors.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar protection \\u003d sheet.protect().setDescription('Sample protected sheet');\\n\\n// Ensure the current user is an editor before removing others. Otherwise, if the user's edit\\n// permission comes from a group, the script throws an exception upon removing the group.\\nvar me \\u003d Session.getEffectiveUser();\\nprotection.addEditor(me);\\nprotection.removeEditors(protection.getEditors());\\nif (protection.canDomainEdit()) {\\n  protection.setDomainEdit(false);\\n}\\n```\\n@return an array of users with permission to edit the protected range or sheet*/getEditors():User[];\\n/**Gets the type of the protected area, either [`RANGE`](https://developers.google.com/apps-script/reference/spreadsheet/protection-type.html#RANGE) or [`SHEET`](https://developers.google.com/apps-script/reference/spreadsheet/protection-type.html#SHEET).\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Protects the sheet.\\nconst sampleProtectedSheet \\u003d sheet.protect();\\n\\n// Gets the type of the protected area.\\nconst protectionType \\u003d sampleProtectedSheet.getProtectionType();\\n\\n// Logs 'SHEET'to the console since the type of the protected area is a sheet.\\nconsole.log(protectionType.toString());\\n\\n```\\n@return The type of protected area, either [`RANGE`](https://developers.google.com/apps-script/reference/spreadsheet/protection-type.html#RANGE) or [`SHEET`](https://developers.google.com/apps-script/reference/spreadsheet/protection-type.html#SHEET).*/getProtectionType():SpreadsheetApp.ProtectionType;\\n/**Gets the range that is being protected. If the protection applies to the sheet instead of a\\nrange, this method returns a range that spans the entire sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range 'A1:B10' of Sheet1.\\nconst range \\u003d sheet.getRange('A1:B10');\\n\\n// Makes cells A1:B10 a protected range.\\nconst sampleProtectedRange \\u003d range.protect();\\n\\n// Gets the protected ranges on the sheet.\\nconst protections \\u003d sheet.getProtections(SpreadsheetApp.ProtectionType.RANGE);\\n\\n// Logs the A1 notation of the first protected range on the sheet.\\nconsole.log(protections[0].getRange().getA1Notation());\\n```\\n@return The range that is being protected.*/getRange():SpreadsheetApp.Range;\\n/**Gets the name of the protected range if it is associated with a named range. Returns `null` if the protection is not associated with a named range. Note that scripts must explicitly\\ncall [`setRangeName(rangeName)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#setRangeName(String)) to associate a protected range with a named range; calling\\n[`Range.protect()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#protect()) to create a protection from a `Range` that happens to be a\\nnamed range, without calling `setRangeName(rangeName)`, is not sufficient to associate\\nthem. However, creating a protected range from a named range in the Google Sheets UI associates\\nthem automatically.\\n\\n```\\n// Protect a named range in a spreadsheet and log the name of the protected range.\\nvar ss \\u003d SpreadsheetApp.getActive();\\nvar range \\u003d ss.getRange('A1:B10');\\nvar protection \\u003d range.protect();\\nss.setNamedRange('Test', range);       // Create a named range.\\nprotection.setRangeName('Test');       // Associate the protection with the named range.\\nLogger.log(protection.getRangeName()); // Verify the name of the protected range.\\n```\\n@return the name of the protected named range, or `null` if the protected range is not\\n    associated with a named range*/getRangeName():string;\\n/**Returns the IDs of the target audiences that can edit the protected range.\\n@return An array of the IDs of target audiences.*/getTargetAudiences():TargetAudience[];\\n/**Gets an array of unprotected ranges within a protected sheet. If the `Protection` object\\ncorresponds to a protected range instead of a protected sheet, this method returns an empty\\narray. To change the unprotected ranges, use [`setUnprotectedRanges(ranges)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#setUnprotectedRanges(Range)) to set a\\nnew array of ranges; to re-protect the entire sheet, set an empty array.\\n\\n```\\n// Unprotect cells E2:F5 in addition to any other unprotected ranges in the protected sheet.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar protection \\u003d sheet.protect();\\nvar unprotected \\u003d protection.getUnprotectedRanges();\\nunprotected.push(sheet.getRange('E2:F5'));\\nprotection.setUnprotectedRanges(unprotected);\\n```\\n@return an array of unprotected ranges within a protected sheet*/getUnprotectedRanges():SpreadsheetApp.Range[];\\n/**Determines if the protected area is using \\\"warning based\\\" protection. Warning-based protection\\nmeans that every user can edit data in the area, except editing prompts a warning asking the\\nuser to confirm the edit. By default, protected ranges or sheets are not warning-based. To\\nchange to the warning state, use [`setWarningOnly(warningOnly)`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#setWarningOnly(Boolean)).\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit')\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Protects the sheet.\\nconst sampleProtectedSheet \\u003d sheet.protect();\\n\\n// Sets the warning status for the protected sheet as true.\\nsampleProtectedSheet.setWarningOnly(true);\\n\\nconst protectedSheetWarningStatus \\u003d sampleProtectedSheet.isWarningOnly();\\n\\n// Logs the warning status of the protected sheet to the console.\\nconsole.log(protectedSheetWarningStatus);\\n```\\n@return `true` if the protected range or sheet is only using warning-based protection.*/isWarningOnly():boolean;\\n/**Unprotects the range or sheet.\\n\\n```\\n// Remove all range protections in the spreadsheet that the user has permission to edit.\\nvar ss \\u003d SpreadsheetApp.getActive();\\nvar protections \\u003d ss.getProtections(SpreadsheetApp.ProtectionType.RANGE);\\nfor (var i \\u003d 0; i \\u003c protections.length; i++) {\\n  var protection \\u003d protections[i];\\n  if (protection.canEdit()) {\\n    protection.remove();\\n  }\\n}\\n```\\n\\n```\\n// Remove sheet protection from the active sheet, if the user has permission to edit it.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar protection \\u003d sheet.getProtections(SpreadsheetApp.ProtectionType.SHEET)[0];\\nif (protection \\u0026\\u0026 protection.canEdit()) {\\n  protection.remove();\\n}\\n```*/remove():void;\\n/**Removes the given user from the list of editors for the protected sheet or range. Note that if\\nthe user is a member of a Google Group that has edit permission, or if all users in the domain\\nhave edit permission, the user are still be able to edit the protected area. Neither the owner\\nof the spreadsheet nor the current user can be removed.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Creates a variable for an email address.\\n// TODO(developer): Replace the email address with a valid one.\\nconst TEST_EMAIL \\u003d 'baklavainthebalkans@gmail.com';\\n\\n// Protects the sheet.\\nconst sampleProtectedSheet \\u003d sheet.protect();\\n\\n// Adds an editor to the protected sheet using the email address variable.\\nsampleProtectedSheet.addEditor(TEST_EMAIL);\\n\\n// Removes the editor from the protected sheet using the email address variable.\\nsampleProtectedSheet.removeEditor(TEST_EMAIL);\\n\\n// Gets the editors of the protected sheet.\\nconst editors \\u003d sampleProtectedSheet.getEditors();\\n\\n// Logs the editors' email addresses to the console.\\nfor (const editor of editors) {\\n  console.log(editor.getEmail());\\n}\\n```\\n@param emailAddress The email address of the user to remove.\\n@return The object representing the protection settings, for chaining.*/removeEditor(emailAddress:string):SpreadsheetApp.Protection;\\n/**Removes the given user from the list of editors for the protected sheet or range. Note that if\\nthe user is a member of a Google Group that has edit permission, or if all users in the domain\\nhave edit permission, the user is still be able to edit the protected area as well. Neither the\\nowner of the spreadsheet nor the current user can be removed.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets a sheet by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Protects the sheet.\\nconst sampleProtectedSheet \\u003d sheet.protect();\\n\\n// Removes the active user from the editors of the protected sheet.\\nsampleProtectedSheet.removeEditor(Session.getActiveUser());\\n\\n// Gets the editors of the protected sheet.\\nconst editors \\u003d sampleProtectedSheet.getEditors();\\n\\n// Logs the editors' email addresses to the console.\\nfor (const editor of editors) {\\n  console.log(editor.getEmail());\\n}\\n```\\n@param user A representation of the user to remove.\\n@return the object representing the protection settings, for chaining*/removeEditor(user:User):SpreadsheetApp.Protection;\\n/**Removes the given array of users from the list of editors for the protected sheet or range.\\nNote that if any of the users are members of a Google Group that has edit permission, or if all\\nusers in the domain have edit permission, those users are still be able to edit the protected\\narea. Neither the owner of the spreadsheet nor the current user can be removed.\\n\\n```\\n// Protect the active sheet, then remove all other users from the list of editors.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar protection \\u003d sheet.protect().setDescription('Sample protected sheet');\\n\\n// Ensure the current user is an editor before removing others. Otherwise, if the user's edit\\n// permission comes from a group, the script throws an exception upon removing the group.\\nvar me \\u003d Session.getEffectiveUser();\\nprotection.addEditor(me);\\nprotection.removeEditors(protection.getEditors());\\nif (protection.canDomainEdit()) {\\n  protection.setDomainEdit(false);\\n}\\n```\\n@param emailAddresses An array of email addresses of the users to remove.\\n@return the object representing the protection settings, for chaining*/removeEditors(emailAddresses:string[]):SpreadsheetApp.Protection;\\n/**Removes the specified target audience as an editor of the protected range.\\n@param audienceId The ID of the target audience to remove.\\n@return The object representing the protection settings, for chaining.*/removeTargetAudience(audienceId:string):SpreadsheetApp.Protection;\\n/**Sets the description of the protected range or sheet.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets the sheet 'Sheet1' by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Protects the sheet.\\nconst sampleProtectedSheet \\u003d sheet.protect();\\n\\n// Sets the sheet description to 'Sheet1 is protected.'\\nsampleProtectedSheet.setDescription('Sheet1 is protected');\\n\\n// Gets the description of the protected sheet.\\nconst sampleProtectedSheetDescription \\u003d sampleProtectedSheet.getDescription();\\n\\n// Logs the description of the protected sheet to the console.\\nconsole.log(sampleProtectedSheetDescription);\\n```\\n@param description The description of the protected range or sheet.\\n@return The object representing the protection settings, for chaining.*/setDescription(description:string):SpreadsheetApp.Protection;\\n/**Sets whether all users in the domain that owns the spreadsheet have permission to edit the\\nprotected range or sheet. Note that any users who have explicit edit permission are able to\\nedit the protected area regardless of this setting. Throws an exception if the spreadsheet does\\nnot belong to a Google Workspace domain (that is, if it is owned by a gmail.com account).\\n@param editable `true` if all users in the domain that owns the spreadsheet should have\\n    permission to edit the protected range or sheet; `false` if not.\\n@return the object representing the protection settings, for chaining*/setDomainEdit(editable:boolean):SpreadsheetApp.Protection;\\n/**Associates the protected range with an existing named range. If the named range covers a\\ndifferent area from the current protected range, this method moves the protection to cover the\\nthe named range instead. The named range must be on the same sheet as the current protected\\nrange. Note that scripts must explicitly call this method to associate a protected range with a\\nnamed range; calling [`Range.protect()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#protect()) to create a protection from a `Range`\\nthat happens to be a named range, without calling `setRangeName(rangeName)`, is not\\nsufficient to associate them. However, creating a protected range from a named range in the\\nGoogle Sheets UI associates them automatically.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Protects cells A1:D10 on Sheet1.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\nconst protectedRange \\u003d sheet.getRange('A1:D10').protect();\\n\\n// Logs the current protected range, A1:D10.\\nconsole.log(protectedRange.getRange().getA1Notation());\\n\\n// Creates a named range for cells E1:J10 called 'NewRange.'\\nconst newRange \\u003d sheet.getRange('E1:J10');\\nss.setNamedRange('NewRange', newRange);\\nconst namedRange \\u003d ss.getNamedRanges()[0];\\n\\n// Updates the protected range to the named range, 'NewRange.'\\n// This updates the protected range on Sheet1 from A1:D10 to E1:J10.\\nprotectedRange.setNamedRange(namedRange);\\n\\n// Logs the updated protected range to the console.\\nconsole.log(protectedRange.getRange().getA1Notation());\\n```\\n@param namedRange The existing named range to associate with the protected range.\\n@return The object representing the protection settings, for chaining.*/setNamedRange(namedRange:SpreadsheetApp.NamedRange):SpreadsheetApp.Protection;\\n/**Adjusts the range that is being protected. If the given range covers a different area from the\\ncurrent protected range, this method moves the protection to cover the new range instead.\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Protects cells A1:D10 on Sheet1 of the spreadsheet.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\nconst protectedRange \\u003d sheet.getRange('A1:D10').protect();\\n\\n// Logs the original protected range, A1:D10, to the console.\\nconsole.log(protectedRange.getRange().getA1Notation());\\n\\n// Gets the range E1:J10.\\nconst newRange \\u003d sheet.getRange('E1:J10');\\n\\n// Updates the protected range to E1:J10.\\nprotectedRange.setRange(newRange);\\n\\n// Logs the updated protected range to the console.\\nconsole.log(protectedRange.getRange().getA1Notation());\\n```\\n@param range The new range to protect from edits.\\n@return The object representing the protection settings, for chaining.*/setRange(range:SpreadsheetApp.Range):SpreadsheetApp.Protection;\\n/**Associates the protected range with an existing named range. If the named range covers a\\ndifferent area from the current protected range, this method moves the protection to cover the\\nthe named range instead. The named range must be on the same sheet as the current protected\\nrange. Note that scripts must explicitly call this method to associate a protected range with a\\nnamed range; calling [`Range.protect()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#protect()) to create a protection from a `Range`\\nthat happens to be a named range, without calling `setRangeName(rangeName)`, is not\\nsufficient to associate them. However, creating a protected range from a named range in the\\nGoogle Sheets UI associates them automatically.\\n\\n```\\n// Protect a named range in a spreadsheet and log the name of the protected range.\\nvar ss \\u003d SpreadsheetApp.getActive();\\nvar range \\u003d ss.getRange('A1:B10');\\nvar protection \\u003d range.protect();\\nss.setNamedRange('Test', range);       // Create a named range.\\nprotection.setRangeName('Test');       // Associate the protection with the named range.\\nLogger.log(protection.getRangeName()); // Verify the name of the protected range.\\n```\\n@param rangeName The name of the named range to be protected.\\n@return the object representing the protection settings, for chaining*/setRangeName(rangeName:string):SpreadsheetApp.Protection;\\n/**Unprotects the given array of ranges within a protected sheet. Throws an exception if the\\n`Protection` object corresponds to a protected range instead of a protected sheet or if\\nany of the ranges are not on the protected sheet. To change the unprotected ranges, set a new\\narray of ranges; to re-protect the entire sheet, set an empty array.\\n\\n```\\n// Protect the active sheet except B2:C5, then remove all other users from the list of editors.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar protection \\u003d sheet.protect().setDescription('Sample protected sheet');\\nvar unprotected \\u003d sheet.getRange('B2:C5');\\nprotection.setUnprotectedRanges([unprotected]);\\n\\n// Ensure the current user is an editor before removing others. Otherwise, if the user's edit\\n// permission comes from a group, the script throws an exception upon removing the group.\\nvar me \\u003d Session.getEffectiveUser();\\nprotection.addEditor(me);\\nprotection.removeEditors(protection.getEditors());\\nif (protection.canDomainEdit()) {\\n  protection.setDomainEdit(false);\\n}\\n```\\n@param ranges The array of ranges to leave unprotected within a protected sheet.\\n@return the object representing the protection settings, for chaining*/setUnprotectedRanges(ranges:SpreadsheetApp.Range[]):SpreadsheetApp.Protection;\\n/**Sets whether or not this protected range is using \\\"warning based\\\" protection. Warning-based\\nprotection means that every user can edit data in the area, except editing prompts a warning\\nasking the user to confirm the edit. By default, protected ranges or sheets are not\\nwarning-based. To check warning state, use [`isWarningOnly()`](https://developers.google.com/apps-script/reference/spreadsheet/protection.html#isWarningOnly()).\\n\\n```\\n// Opens the spreadsheet file by its URL. If you created your script from within\\n// a Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead.\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\n// Gets the sheet 'Sheet1' by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Protects the sheet and sets the protection to warning-based.\\nconst sampleProtectedSheet \\u003d sheet.protect().setWarningOnly(true);\\n\\n// Logs whether the protected sheet is warning-based to the console.\\nconsole.log(sampleProtectedSheet.isWarningOnly());\\n```\\n@return The object representing the protection settings, for chaining.*/setWarningOnly(warningOnly:boolean):SpreadsheetApp.Protection;}interface PivotValueDisplayType{}interface _PivotValueDisplayType{\\n/**Default. Displays pivot values as the actual value and not as a function of another value.*/DEFAULT:PivotValueDisplayType;\\n/**Displays pivot values as a percent of the total for that column.*/PERCENT_OF_COLUMN_TOTAL:PivotValueDisplayType;\\n/**Displays pivot values as a percent of the grand total.*/PERCENT_OF_GRAND_TOTAL:PivotValueDisplayType;\\n/**Displays pivot values as a percent of the total for that row.*/PERCENT_OF_ROW_TOTAL:PivotValueDisplayType;}interface PivotValue{\\n/**Returns the display type describing how this pivot value is currently displayed in the table.\\n@return the display type for this pivot value*/getDisplayType():SpreadsheetApp.PivotValueDisplayType;\\n/**Returns the formula used to calculate this value. If this value is not a calculated field this\\nmethod returns `null`.\\n@return the pivot value for chaining*/getFormula():string;\\n/**Returns the [`PivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-table.html) which this value belongs to.\\n@return the pivot table this value belongs to*/getPivotTable():SpreadsheetApp.PivotTable;\\n/**Returns the number of the source data column the pivot value summarizes. This index is 1-based,\\nif this group summarizes source data in column \\\"A\\\" of the spreadsheet this method returns\\n`1`.\\n@return The source data column number.*/getSourceDataColumn():Integer;\\n/**Returns the data source column the pivot value summarizes. Returns `null` if the pivot\\ntable is not a {DataSourcePivotTableApi}.\\n@return The source data source column the pivot value summarizes.*/getSourceDataSourceColumn():SpreadsheetApp.DataSourceColumn;\\n/**Returns this group’s summarization function.\\n@return the group's summarization function*/getSummarizedBy():SpreadsheetApp.PivotTableSummarizeFunction;\\n/**Remove this value from the pivot table.*/remove():void;\\n/**Sets the display name for this value in the pivot table.\\n@param name The display name to set.\\n@return the pivot value for chaining*/setDisplayName(name:string):SpreadsheetApp.PivotValue;\\n/**Sets the formula used to calculate this value. If this value is not a calculated field this\\nmethod results in an error.\\n@param formula The formula to use to calculate this value.\\n@return the pivot value for chaining*/setFormula(formula:string):SpreadsheetApp.PivotValue;\\n/**Displays this value in the pivot table as a function of another value.\\n@param displayType The way to display the values.\\n@return the pivot value for chaining*/showAs(displayType:SpreadsheetApp.PivotValueDisplayType):SpreadsheetApp.PivotValue;\\n/**Sets the summarization function.\\n@param summarizeFunction The function to use to summarize data in this value's source data\\n    column.\\n@return the pivot value for chaining*/summarizeBy(summarizeFunction:SpreadsheetApp.PivotTableSummarizeFunction):SpreadsheetApp.PivotValue;}interface PivotTableSummarizeFunction{}interface _PivotTableSummarizeFunction{\\n/**The [AVERAGE](https://support.google.com/docs/answer/3093615) function*/AVERAGE:PivotTableSummarizeFunction;\\n/**The [COUNT](https://support.google.com/docs/answer/3093620) function*/COUNT:PivotTableSummarizeFunction;\\n/**The [COUNTA](https://support.google.com/docs/answer/3093991) function*/COUNTA:PivotTableSummarizeFunction;\\n/**The [COUNTUNIQUE](https://support.google.com/docs/answer/3093405) function*/COUNTUNIQUE:PivotTableSummarizeFunction;\\n/**A custom function, this value is only valid for calculated fields.*/CUSTOM:PivotTableSummarizeFunction;\\n/**The [MAX](https://support.google.com/docs/answer/3094013) function*/MAX:PivotTableSummarizeFunction;\\n/**The [MEDIAN](https://support.google.com/docs/answer/3094025) function*/MEDIAN:PivotTableSummarizeFunction;\\n/**The [MIN](https://support.google.com/docs/answer/3094017) function*/MIN:PivotTableSummarizeFunction;\\n/**The [PRODUCT](https://support.google.com/docs/answer/3093502) function*/PRODUCT:PivotTableSummarizeFunction;\\n/**The [STDEV](https://support.google.com/docs/answer/3094054) function*/STDEV:PivotTableSummarizeFunction;\\n/**The [STDEVP](https://support.google.com/docs/answer/3094105) function*/STDEVP:PivotTableSummarizeFunction;\\n/**The [SUM](https://support.google.com/docs/answer/3093669) function*/SUM:PivotTableSummarizeFunction;\\n/**The [VAR](https://support.google.com/docs/answer/3094063) function*/VAR:PivotTableSummarizeFunction;\\n/**The [VARP](https://support.google.com/docs/answer/3094113) function*/VARP:PivotTableSummarizeFunction;}interface PivotTable{\\n/**Creates a new pivot value in the pivot table calculated from the specified `formula` with\\nthe specified `name`.\\n@param name The name for this calculated pivot value.\\n@param formula The formula used to calculate this value.\\n@return the newly created [`PivotValue`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-value.html)*/addCalculatedPivotValue(name:string,formula:string):SpreadsheetApp.PivotValue;\\n/**Defines a new pivot column grouping in the pivot table. The specified `sourceDataColumn`\\nindicates the column in the source data this grouping is based on.\\n@param sourceDataColumn The number of the column this group summarizes. This index represents\\n    the absolute number of the column in the spreadsheet; `1` representing column \\\"A,\\\"\\n    `2` representing column B, etc.\\n@return the newly created [`PivotGroup`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-group.html)*/addColumnGroup(sourceDataColumn:Integer):SpreadsheetApp.PivotGroup;\\n/**Creates a new pivot filter for the pivot table. The specified `sourceDataColumn`\\nindicates the column in the source data this filter operates on.\\n@param sourceDataColumn The number of the column this group summarizes. This index represents\\n    the absolute number of the column in the spreadsheet; `1` representing column \\\"A,\\\"\\n    `2` representing column B, etc.\\n@param filterCriteria The filter criteria used to perform the filtering.\\n@return the newly created [`PivotFilter`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-filter.html)*/addFilter(sourceDataColumn:Integer,filterCriteria:SpreadsheetApp.FilterCriteria):SpreadsheetApp.PivotFilter;\\n/**Defines a new pivot value in the pivot table with the specified `summarizeFunction`. The\\nspecified `sourceDataColumn` indicates the column in the source data this value is based\\non.\\n@param sourceDataColumn The number of the column this group summarizes. This index represents\\n    the absolute number of the column in the spreadsheet; `1` representing column \\\"A,\\\"\\n    `2` representing column B, etc.\\n@return the newly created [`PivotValue`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-value.html)*/addPivotValue(sourceDataColumn:Integer,summarizeFunction:SpreadsheetApp.PivotTableSummarizeFunction):SpreadsheetApp.PivotValue;\\n/**Defines a new pivot row grouping in the pivot table. The specified `sourceDataColumn`\\nindicates the column in the source data this grouping is based on.\\n@param sourceDataColumn The number of the column this group summarizes. This index represents\\n    the absolute number of the column in the spreadsheet; `1` representing column \\\"A,\\\"\\n    `2` representing column B, etc.\\n@return the newly created [`PivotGroup`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-group.html)*/addRowGroup(sourceDataColumn:Integer):SpreadsheetApp.PivotGroup;\\n/**Returns the pivot table as a data source pivot table if the pivot table is linked to a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html), or `null` otherwise.\\n@return A data source pivot table.*/asDataSourcePivotTable():SpreadsheetApp.DataSourcePivotTable;\\n/**Returns the [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) representing the cell where this pivot table is anchored.\\n@return this pivot table's anchor cell*/getAnchorCell():SpreadsheetApp.Range;\\n/**Returns an ordered list of the column groups in this pivot table.\\n@return the column groups in this pivot table*/getColumnGroups():SpreadsheetApp.PivotGroup[];\\n/**Returns an ordered list of the filters in this pivot table.\\n@return the filters in this pivot table*/getFilters():SpreadsheetApp.PivotFilter[];\\n/**Returns an ordered list of the pivot values in this pivot table.\\n@return the pivot values in this pivot table*/getPivotValues():SpreadsheetApp.PivotValue[];\\n/**Returns an ordered list of the row groups in this pivot table.\\n@return the row groups in this pivot table*/getRowGroups():SpreadsheetApp.PivotGroup[];\\n/**Returns the source data range on which the pivot table is constructed.\\n@return The source data range of this pivot table.*/getSourceDataRange():SpreadsheetApp.Range;\\n/**Returns whether values are displayed as rows or columns.\\n@return whether values are displayed as rows or columns*/getValuesDisplayOrientation():SpreadsheetApp.Dimension;\\n/**Deletes this pivot table. Further operations on this pivot table results in an error.*/remove():void;\\n/**Sets the layout of this pivot table to display values as columns or rows.\\n@param dimension The dimension indicating how to display pivot values.\\n@return the pivot table for chaining*/setValuesDisplayOrientation(dimension:SpreadsheetApp.Dimension):SpreadsheetApp.PivotTable;}interface PivotGroupLimit{\\n/**Gets the count limit on rows or columns in the pivot group.\\n@return The count limit on rows or columns.*/getCountLimit():Integer;\\n/**Returns the pivot group the limit belongs to.\\n@return The pivot group.*/getPivotGroup():SpreadsheetApp.PivotGroup;\\n/**Removes the pivot group limit.*/remove():void;\\n/**Sets the count limit on rows or columns in the pivot group.\\n@param countLimit The count limit on rows or columns to set. Must be positive.\\n@return The pivot group limit, for chaining.*/setCountLimit(countLimit:Integer):SpreadsheetApp.PivotGroupLimit;}interface PivotGroup{\\n/**Adds a manual grouping rule for this pivot group.\\n@param groupName The name of this grouping rule.\\n@param groupMembers The values that are included in this grouping rule.\\n@return the pivot group for chaining.*/addManualGroupingRule(groupName:string,groupMembers:Object[]):SpreadsheetApp.PivotGroup;\\n/**Returns whether labels are displayed as repeated.\\n@return `true` if labels are repeated; otherwise returns `false`.*/areLabelsRepeated():boolean;\\n/**Removes any grouping rules from this pivot group.\\n@return the pivot group for chaining.*/clearGroupingRule():SpreadsheetApp.PivotGroup;\\n/**Removes any sorting applied to this group.\\n@return the pivot group for chaining.*/clearSort():SpreadsheetApp.PivotGroup;\\n/**Returns the date-time grouping rule on the pivot group, or `null` if no date-time\\ngrouping rule is set.\\n@return The date-time grouping rule.*/getDateTimeGroupingRule():SpreadsheetApp.DateTimeGroupingRule;\\n/**Returns whether this is a row or column group.\\n@return the dimension representing this group's type*/getDimension():SpreadsheetApp.Dimension;\\n/**Returns the pivot group limit on the pivot group. Returns `null` if no pivot group limit\\nis set.\\n@return The pivot group limit.*/getGroupLimit():SpreadsheetApp.PivotGroupLimit;\\n/**Returns the index of this pivot group in the current group order.\\n@return the pivot group's index*/getIndex():Integer;\\n/**Returns the [`PivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-table.html) which this grouping belongs to.\\n@return the pivot table this group belongs to.*/getPivotTable():SpreadsheetApp.PivotTable;\\n/**Returns the number of the source data column this group summarizes. This index is 1-based, if\\nthis group summarizes source data in column \\\"A\\\" of the spreadsheet this method returns `1`.\\n@return the source data column number*/getSourceDataColumn():Integer;\\n/**Returns the data source column the pivot group operates on. Returns `null` if the pivot\\ntable is not a {DataSourcePivotTableApi}.\\n@return The data source column the pivot group operates on.*/getSourceDataSourceColumn():SpreadsheetApp.DataSourceColumn;\\n/**Hides repeated labels for this grouping. If labels are already hidden this results in a no-op.\\nIf this method is called before there are multiple row or column groupings, when an additional\\ngrouping is added repeated labels are hidden.\\n@return the pivot group for chaining.*/hideRepeatedLabels():SpreadsheetApp.PivotGroup;\\n/**Returns `true` if the sort is ascending, returns `false` if the sort order is\\ndescending.\\n@return `true` if the sort order is ascending.*/isSortAscending():boolean;\\n/**Moves this group to the specified position in the current list of row or column groups. These\\nindices are 0-based. For example, if this group should be moved to the first position this\\nmethod should be called with `0`.\\n@param index The index to move this grouping to.\\n@return the pivot group for chaining.*/moveToIndex(index:Integer):SpreadsheetApp.PivotGroup;\\n/**Removes this pivot group from the table.*/remove():void;\\n/**Removes the manual grouping rule with the specified `groupName`.\\n@param groupName The name of the grouping rule to remove.\\n@return the pivot group for chaining.*/removeManualGroupingRule(groupName:string):SpreadsheetApp.PivotGroup;\\n/**Resets the display name of this group in the pivot table to its default value.\\n@return the pivot group for chaining.*/resetDisplayName():SpreadsheetApp.PivotGroup;\\n/**Sets the date-time grouping rule on the pivot group.\\n\\nTo remove the rule, use [`clearGroupingRule()`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-group.html#clearGroupingRule()).\\n@param dateTimeGroupingRuleType The rule type to set.\\n@return The pivot group, for chaining.*/setDateTimeGroupingRule(dateTimeGroupingRuleType:SpreadsheetApp.DateTimeGroupingRuleType):SpreadsheetApp.PivotGroup;\\n/**Sets the display name of this group in the pivot table.\\n@param name The display name to set.\\n@return the pivot group for chaining*/setDisplayName(name:string):SpreadsheetApp.PivotGroup;\\n/**Sets the pivot group limit on the pivot group. The operation is only supported for [`DataSourcePivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html).\\n@param countLimit The count limit of rows or columns to set. Must be positive.\\n@return The pivot group for chaining.*/setGroupLimit(countLimit:Integer):SpreadsheetApp.PivotGroup;\\n/**Sets a histogram grouping rule for this pivot group. A histogram rule organizes values in a\\nsource data column into buckets of a constant size. All values from `minValue` to `maxValue` are placed into groups of size `interval`. All values below `minValue`\\nare placed into one bucket, as are all values greater than `maxValue`.\\n@param minValue The minimum value for items to be placed into buckets. Values less than this\\n    are combined into a single bucket.\\n@param maxValue The maximum value for items to be placed into buckets. Values greater than this\\n    are combined into a single bucket.\\n@return the pivot group for chaining.*/setHistogramGroupingRule(minValue:Integer,maxValue:Integer,intervalSize:Integer):SpreadsheetApp.PivotGroup;\\n/**When there is more than one row or column grouping, this method displays this grouping's label\\nfor each entry of the subsequent grouping. If labels are already repeated this results in a\\nno-op. If this method is called before there are multiple row or column groupings, when an\\nadditional grouping is added repeated labels are shown.\\n@return the pivot group for chaining.*/showRepeatedLabels():SpreadsheetApp.PivotGroup;\\n/**Sets whether to show total values for this pivot group in the table.\\n@param showTotals Whether to show totals or not.\\n@return the pivot group for chaining.*/showTotals(showTotals:boolean):SpreadsheetApp.PivotGroup;\\n/**Sets the sort order to be ascending.\\n@return the pivot group for chaining.*/sortAscending():SpreadsheetApp.PivotGroup;\\n/**Sorts this group by the specified [`PivotValue`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-value.html) for the values from the `oppositeGroupValues`.\\n\\n```\\n// Sorts the item group by the \\\"SUM of Quantity\\\" pivot value for the specified salespersons.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar pivotTable \\u003d sheet.getPivotTables()[0];\\nvar itemGroup \\u003d pivotTable.getRowGroups()[0];\\nvar sumQuantityValue \\u003d pivotTable.getPivotValues()[0];\\nitemGroup.sortBy(sumQuantityValue, ['Beth', 'Amir', 'Devyn']);\\n```\\n@param value The pivot value to sort by.\\n@param oppositeGroupValues The values of an opposite pivot group (a column group if sorting a\\n    row group, or a row group if sorting a column group) that are used to sort. The order of\\n    these values determines precedence for tie breaking.\\n@return the pivot group for chaining.*/sortBy(value:SpreadsheetApp.PivotValue,oppositeGroupValues:Object[]):SpreadsheetApp.PivotGroup;\\n/**Sets the sort order to be descending.\\n@return the pivot group for chaining.*/sortDescending():SpreadsheetApp.PivotGroup;\\n/**Returns whether total values are currently shown for this pivot group.\\n@return `true` if total values are displayed for this pivot group; otherwise returns\\n    `false`.*/totalsAreShown():boolean;}interface PivotFilter{\\n/**Returns the filter criteria for this pivot filter.\\n@return the filter criteria for this pivot filter*/getFilterCriteria():SpreadsheetApp.FilterCriteria;\\n/**Returns the [`PivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/pivot-table.html) that this filter belongs to.\\n@return the pivot table this filter belongs to*/getPivotTable():SpreadsheetApp.PivotTable;\\n/**Returns the number of the source data column this filter operates on. These indices are\\n1-based, for example if this filter applies to data in column A of the spreadsheet this method\\nreturns \\\"1.\\\"\\n@return the number of the source data column this filter applies to*/getSourceDataColumn():Integer;\\n/**Returns the data source column the filter operates on. Returns `null` if the pivot table\\nis not a {DataSourcePivotTableApi}.\\n@return The data source column the filter operates on.*/getSourceDataSourceColumn():SpreadsheetApp.DataSourceColumn;\\n/**Removes this pivot filter from the pivot table.*/remove():void;\\n/**Sets the filter criteria for this pivot filter.\\n@param filterCriteria The filter criteria to set.\\n@return the pivot filter for chaining*/setFilterCriteria(filterCriteria:SpreadsheetApp.FilterCriteria):SpreadsheetApp.PivotFilter;}interface PageProtection{\\n/**Adds a user to the list of users who can edit the sheet, if it is protected.\\n\\n```\\n// Add the \\\"user@example.com\\\" user to the list of users who can edit this sheet\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar permissions \\u003d sheet.getSheetProtection();\\npermissions.addUser('user@example.com');\\npermissions.setProtected(true);\\nsheet.setSheetProtection(permissions);\\n```\\n@deprecated\\n@param email The email of the user to add.*/addUser(email:string):void;\\n/**Returns a list of the email addresses of the users who can edit this sheet.\\n\\nIf sheet protection is disabled, the value returned by this call is meaningless.\\n@deprecated\\n@return an array of email addresses of users who can edit this sheet*/getUsers():string[];\\n/**Indicates whether the sheet has sheet protection enabled or not.\\n\\n```\\n// Determine whether or not sheet protection is enabled\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar permissions \\u003d sheet.getSheetProtection();\\nvar isProtected \\u003d permissions.isProtected();\\n```\\n@deprecated\\n@return whether the sheet has sheet protection enabled or not*/isProtected():boolean;\\n/**Removes a user from the list of users who can edit the sheet.\\n\\n```\\n// Remove the \\\"user@example.com\\\" user to the list of users who can edit this sheet\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar permissions \\u003d sheet.getSheetProtection();\\npermissions.removeUser('user@example.com');\\npermissions.setProtected(true);\\nsheet.setSheetProtection(permissions);\\n```\\n@deprecated\\n@param user The email address of the user to remove.*/removeUser(user:string):void;\\n/**Sets the protection status for the sheet.\\n\\n```\\n// Enables sheet protection for  this sheet\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar permissions \\u003d sheet.getSheetProtection();\\npermissions.setProtected(true);\\nsheet.setSheetProtection(permissions);\\n```\\n@deprecated\\n@param protection `true` to enable sheet protection, `false` to disable sheet\\n    protection.*/setProtected(protection:boolean):void;}interface OverGridImage{\\n/**Assigns the function with the specified function name to this image.\\n@param functionName The name of the function being specified. This must be a public top level\\n    function, not one ending in underscore such as `privateFunction_`.\\n@return This image, for chaining.*/assignScript(functionName:string):SpreadsheetApp.OverGridImage;\\n/**Returns the alt text description for this image.\\n@return The alt text description.*/getAltTextDescription():string;\\n/**Returns the alt text title for this image.\\n@return The alt text title.*/getAltTextTitle():string;\\n/**Returns the cell where an image is anchored.\\n@return The anchor cell.*/getAnchorCell():SpreadsheetApp.Range;\\n/**Returns the horizontal pixel offset from the anchor cell.\\n@return The horizontal pixel offset.*/getAnchorCellXOffset():Integer;\\n/**Returns the vertical pixel offset from the anchor cell.\\n@return The vertical pixel offset.*/getAnchorCellYOffset():Integer;\\n/**Returns the actual height of this image in pixels.\\n\\n```\\n// Logs the height of all images in a spreadsheet\\nvar images \\u003d SpreadsheetApp.getActiveSpreadsheet().getImages();\\nfor (var i \\u003d 0; i \\u003c images.length; i++) {\\n  Logger.log(images[i].getHeight());\\n}\\n```\\n@return The height of the image in pixels.*/getHeight():Integer;\\n/**Returns the inherent height of this image in pixels.\\n@return The inherent height in pixels.*/getInherentHeight():Integer;\\n/**Returns the inherent height of this image in pixels.\\n@return The inherent width in pixels.*/getInherentWidth():Integer;\\n/**Returns the name of the function assigned to this image.\\n@return The name of the function.*/getScript():string;\\n/**Returns the sheet this image appears on.\\n\\n```\\n// Logs the parent sheet of all images in a spreadsheet\\nvar images \\u003d SpreadsheetApp.getActiveSpreadsheet().getImages();\\nfor (var i \\u003d 0; i \\u003c images.length; i++) {\\n  Logger.log(images[i].getSheet());\\n}\\n```\\n@return The sheet the image appears on.*/getSheet():SpreadsheetApp.Sheet;\\n/**Gets the image's source URL; returns `null` if the URL is unavailable. If the image was\\ninserted by URL using an API, this method returns the URL provided during image insertion.\\n@return The image URL if available; returns `null` if the image is unavailable or doesn't\\n    have a source URL.*/getUrl():string;\\n/**Returns the actual width of this image in pixels.\\n\\n```\\n// Logs the width of all images in a spreadsheet\\nvar images \\u003d SpreadsheetApp.getActiveSpreadsheet().getImages();\\nfor (var i \\u003d 0; i \\u003c images.length; i++) {\\n  Logger.log(images[i].getWidth());\\n}\\n```\\n@return The width of the image in pixels.*/getWidth():Integer;\\n/**Deletes this image from the spreadsheet. Any further operation on the image results in a script\\nerror.\\n\\n```\\n// Deletes all images in a spreadsheet\\nvar images \\u003d SpreadsheetApp.getActiveSpreadsheet().getImages();\\nfor (var i \\u003d 0; i \\u003c images.length; i++) {\\n  images[i].remove();\\n}\\n```*/remove():void;\\n/**Replaces this image with the one specified by the provided [`BlobSource`](https://developers.google.com/apps-script/reference/spreadsheet/../base/blob-source.html). The maximum\\nsupported blob size is 2MB.\\n@param blob The new image as a Blob.\\n@return This image, for chaining.*/replace(blob:BlobSource):SpreadsheetApp.OverGridImage;\\n/**Replaces this image with the one from the specified URL.\\n@param url The URL of the new image.\\n@return This image, for chaining.*/replace(url:string):SpreadsheetApp.OverGridImage;\\n/**Resets this image to its inherent dimensions.\\n@return This image, for chaining.*/resetSize():SpreadsheetApp.OverGridImage;\\n/**Sets the alt-text description for this image.\\n@param description The new alt text description for the image.\\n@return This image, for chaining.*/setAltTextDescription(description:string):SpreadsheetApp.OverGridImage;\\n/**Sets the alt text title for this image.\\n@param title The new alt text title for the image.\\n@return This image, for chaining.*/setAltTextTitle(title:string):SpreadsheetApp.OverGridImage;\\n/**Sets the cell where an image is anchored.\\n@param cell The new anchor cell.\\n@return This image, for chaining.*/setAnchorCell(cell:SpreadsheetApp.Range):SpreadsheetApp.OverGridImage;\\n/**Sets the horizontal pixel offset from the anchor cell.\\n@param offset The new horizonal pixel offset.\\n@return This image, for chaining.*/setAnchorCellXOffset(offset:Integer):SpreadsheetApp.OverGridImage;\\n/**Sets the vertical pixel offset from the anchor cell.\\n@param offset The new vertical pixel offset.\\n@return This image, for chaining.*/setAnchorCellYOffset(offset:Integer):SpreadsheetApp.OverGridImage;\\n/**Sets the actual height of this image in pixels.\\n@param height The desired height in pixels.\\n@return The image for chaining.*/setHeight(height:Integer):SpreadsheetApp.OverGridImage;\\n/**Sets the actual width of this image in pixels.\\n@param width The desired width in pixels.\\n@return The image for chaining.*/setWidth(width:Integer):SpreadsheetApp.OverGridImage;}interface NamedRange{\\n/**Gets the name of this named range.\\n@return the name of this named range*/getName():string;\\n/**Gets the range referenced by this named range.\\n@return the spreadsheet range that is associated with this named range*/getRange():SpreadsheetApp.Range;\\n/**Deletes this named range.\\n\\n```\\n// The code below deletes all the named ranges in the spreadsheet.\\nvar namedRanges \\u003d SpreadsheetApp.getActive().getNamedRanges();\\nfor (var i \\u003d 0; i \\u003c namedRanges.length; i++) {\\n  namedRanges[i].remove();\\n}\\n```*/remove():void;\\n/**Sets/updates the name of the named range.\\n\\n```\\n// The code below updates the name for the first named range.\\nvar namedRanges \\u003d SpreadsheetApp.getActiveSpreadsheet().getNamedRanges();\\nif (namedRanges.length \\u003e 1) {\\n  namedRanges[0].setName(\\\"UpdatedNamedRange\\\");\\n}\\n```\\n@param name The new name of the named range.\\n@return the range whose name was set by the call*/setName(name:string):SpreadsheetApp.NamedRange;\\n/**Sets/updates the range for this named range.\\n@param range The spreadsheet range to associate with this named range.\\n@return the named range for which the spreadsheet range was set*/setRange(range:SpreadsheetApp.Range):SpreadsheetApp.NamedRange;}interface LookerDataSourceSpecBuilder{\\n/**Builds a data source specification from the settings in this builder. Must use `as...()`\\nto specify a data source type before building.\\n\\nThe following code sample builds a BigQuery DataSource Spec.\\n\\n```\\nvar bigQueryDataSourceSpec \\u003d SpreadsheetApp.newDataSourceSpec().asBigQuery();\\n// TODO(developer): Replace with the required dataset, project and table IDs.\\nbigQueryDataSourceSpec.setDatasetId(\\\"my data set id\\\");\\nbigQueryDataSourceSpec.setProjectId(\\\"my project id\\\");\\nbigQueryDataSourceSpec.setTableId(\\\"my table id\\\");\\n\\nbigQueryDataSourceSpec.build();\\n\\n```\\n\\nThe following code sample builds a Looker DataSource Spec.\\n\\n```\\nvar lookerDataSourceSpecBuilder \\u003d SpreadsheetApp.newDataSourceSpec().asLooker();\\nvar lookerSpec \\u003d lookerDataSourceSpecBuilder.setExploreName(\\\"my explore name\\\")\\n                                            .setInstanceUrl(\\\"my instance url\\\")\\n                                            .setModelName(\\\"my model name\\\")\\n                                            .build();\\n```\\n@return The data source specification.*/build():SpreadsheetApp.DataSourceSpec;\\n/**Creates a [`DataSourceSpecBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-spec-builder.html) based on this data source's settings.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\n\\nvar newSpec \\u003d spec.copy();\\n```\\n@return The builder.*/copy():SpreadsheetApp.DataSourceSpecBuilder;\\n/**Gets the name of the Looker explore in the model.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\nvar lookerDataSourceSpec \\u003d ss.getDataSources()[0].getSpec().asLooker();\\nvar exploreName \\u003d lookerDataSourceSpec.getExploreName();\\nLogger.log(exploreName);\\n```\\n@return The name of the Looker explore.*/getExploreName():string;\\n/**Gets the URL of the Looker instance.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\nvar lookerDataSourceSpec \\u003d ss.getDataSources()[0].getSpec().asLooker();\\nvar instanceUrl \\u003d lookerDataSourceSpec.getInstanceUrl();\\nLogger.log(instanceUrl);\\n```\\n@return The URL of the Looker instance.*/getInstanceUrl():string;\\n/**Gets the name of the Looker model in the instance.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\nvar lookerDataSourceSpec \\u003d ss.getDataSources()[0].getSpec().asLooker();\\nvar modelName \\u003d lookerDataSourceSpec.getModelName();\\nLogger.log(modelName);\\n```\\n@return The name of the Looker model.*/getModelName():string;\\n/**Gets the parameters of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar parameters \\u003d spec.getParameters();\\n```\\n\\nThis method is only available for BigQuery data sources.\\n@return The parameter list.*/getParameters():SpreadsheetApp.DataSourceParameter[];\\n/**Gets the type of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar type \\u003d spec.getType();\\n```\\n@return The data source type.*/getType():SpreadsheetApp.DataSourceType;\\n/**Removes all the parameters.\\n\\n```\\nvar specBuilder \\u003d SpreadsheetApp.newDataSourceSpec();\\nspecBuilder.removeAllParameters();\\n```\\n@return The builder, for chaining.*/removeAllParameters():SpreadsheetApp.LookerDataSourceSpecBuilder;\\n/**Removes the specified parameter.\\n\\n```\\nvar specBuilder \\u003d SpreadsheetApp.newDataSourceSpec();\\nspecBuilder.removeParameter(\\\"x\\\");\\n```\\n@param parameterName The name of the parameter to remove.\\n@return The builder, for chaining.*/removeParameter(parameterName:string):SpreadsheetApp.LookerDataSourceSpecBuilder;\\n/**Sets the explore name in the Looker model.\\n\\n```\\nvar lookerDataSourceSpecBuilder \\u003d SpreadsheetApp.newDataSourceSpec().asLooker();\\n// TODO(developer): replace explore name with your own\\nlookerDataSourceSpecBuilder.setExploreName(\\\"my explore name\\\");\\n```\\n@param exploreName The explore name in the selected Looker model.\\n@return This builder, for chaining.*/setExploreName(exploreName:string):SpreadsheetApp.LookerDataSourceSpecBuilder;\\n/**Sets the instance URL for Looker.\\n\\n```\\nvar lookerDataSourceSpecBuilder \\u003d SpreadsheetApp.newDataSourceSpec().asLooker();\\n // TODO(developer): replace instance url with your own\\nlookerDataSourceSpecBuilder.setInstanceUrl(\\\"my instance url\\\");\\n```\\n@param instanceUrl The URL of the Looker instance.\\n@return The builder, for chaining.*/setInstanceUrl(instanceUrl:string):SpreadsheetApp.LookerDataSourceSpecBuilder;\\n/**Sets the Looker model name in the Looker instance.\\n\\n```\\nvar lookerDataSourceSpecBuilder \\u003d SpreadsheetApp.newDataSourceSpec().asLooker();\\n// TODO(developer): replace model name with your own\\nlookerDataSourceSpecBuilder.setModelName(\\\"my model name\\\");\\n```\\n@param modelName The model name in the Looker instance.\\n@return The builder, for chaining.*/setModelName(modelName:string):SpreadsheetApp.LookerDataSourceSpecBuilder;\\n/**Adds a parameter, or if the parameter with the name exists, updates its source cell for data\\nsource spec builders of type [`DataSourceType.BIGQUERY`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-type.html#BIGQUERY).\\n\\nThis method is only available for BigQuery data sources.\\n\\n```\\nvar specBuilder \\u003d SpreadsheetApp.newDataSourceSpec().asBigQuery();\\nspecBuilder.setParameterFromCell(\\\"x\\\", \\\"A1\\\");\\nvar bigQuerySpec \\u003d specBuilder.build();\\n```\\n@param parameterName The parameter name.\\n@param sourceCell The source cell, as specified in A1 notation.\\n@return The builder, for chaining.*/setParameterFromCell(parameterName:string,sourceCell:string):SpreadsheetApp.LookerDataSourceSpecBuilder;}interface LookerDataSourceSpec{\\n/**Creates a [`DataSourceSpecBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-spec-builder.html) based on this data source's settings.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\n\\nvar newSpec \\u003d spec.copy();\\n```\\n@return The builder.*/copy():SpreadsheetApp.DataSourceSpecBuilder;\\n/**Gets the name of the Looker explore in the model.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\nvar lookerDataSourceSpec \\u003d ss.getDataSources()[0].getSpec().asLooker();\\nvar exploreName \\u003d lookerDataSourceSpec.getExploreName();\\nLogger.log(exploreName);\\n```\\n@return The name of the Looker explore.*/getExploreName():string;\\n/**Gets the URL of the Looker instance.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\nvar lookerDataSourceSpec \\u003d ss.getDataSources()[0].getSpec().asLooker();\\nvar instanceUrl \\u003d lookerDataSourceSpec.getInstanceUrl();\\nLogger.log(instanceUrl);\\n```\\n@return The URL of the Looker instance.*/getInstanceUrl():string;\\n/**Gets the name of the Looker model in the instance.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\n\\nvar lookerDataSourceSpec \\u003d ss.getDataSources()[0].getSpec().asLooker();\\nvar modelName \\u003d lookerDataSourceSpec.getModelName();\\nLogger.log(modelName);\\n```\\n@return The name of the Looker model.*/getModelName():string;\\n/**Gets the parameters of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar parameters \\u003d spec.getParameters();\\n```\\n\\nThis method is only available for BigQuery data sources.\\n@return The parameter list.*/getParameters():SpreadsheetApp.DataSourceParameter[];\\n/**Gets the type of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar type \\u003d spec.getType();\\n```\\n@return The data source type.*/getType():SpreadsheetApp.DataSourceType;}interface InterpolationType{}interface _InterpolationType{\\n/**Infer the maximum number as a specific interpolation point for a gradient condition.*/MAX:InterpolationType;\\n/**Infer the minimum number as a specific interpolation point for a gradient condition.*/MIN:InterpolationType;\\n/**Use the number as as specific interpolation point for a gradient condition.*/NUMBER:InterpolationType;\\n/**Use the number as a percentage interpolation point for a gradient condition.*/PERCENT:InterpolationType;\\n/**Use the number as a percentile interpolation point for a gradient condition.*/PERCENTILE:InterpolationType;}interface GroupControlTogglePosition{}interface _GroupControlTogglePosition{\\n/**The position where the control toggle is after the group (at higher indices).*/AFTER:GroupControlTogglePosition;\\n/**The position where the control toggle is before the group (at lower indices).*/BEFORE:GroupControlTogglePosition;}interface Group{\\n/**Collapses this group.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getRange(2:3);\\nrange.shiftRowGroupDepth(1);\\nvar group \\u003d sheet.getRowGroup(2, 1);\\n\\n// Collapses this group.\\ngroup.collapse();\\n```\\n@return this group, for chaining*/collapse():SpreadsheetApp.Group;\\n/**Expands this group.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getRange(2:3);\\nrange.shiftRowGroupDepth(1);\\nvar group \\u003d sheet.getRowGroup(2, 1);\\n\\n// Expands this group.\\ngroup.expand();\\n```\\n@return this group, for chaining*/expand():SpreadsheetApp.Group;\\n/**Returns the control toggle index of this group. This is the index just before the range when\\nthe control toggle is shown before the group, or the index just after the range otherwise.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nsheet.setRowGroupControlAfter(true);\\nvar range \\u003d sheet.getRange(2:3);\\nrange.shiftRowGroupDepth(1);\\nvar group \\u003d sheet.getRowGroup(2, 1);\\n\\n// Returns 4\\nvar controlIndex \\u003d group.getControlIndex();\\n```\\n@return the control toggle index of this group*/getControlIndex():Integer;\\n/**Returns the depth of this group.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getRange(2:3);\\nrange.shiftRowGroupDepth(1);\\nvar group \\u003d sheet.getRowGroup(2, 1);\\n\\n// Returns 1 if the group is at depth 1.\\nvar depth \\u003d group.getDepth();\\n```\\n@return the depth of this group*/getDepth():Integer;\\n/**Returns the range over which this group exists.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getRange(2:3);\\nrange.shiftRowGroupDepth(1);\\nvar group \\u003d sheet.getRowGroup(1, 1);\\n\\n// Returns the range 2:3 if the group is over rows 2:3\\nrange \\u003d group.getRange();\\n```\\n@return the range over which the group exists*/getRange():SpreadsheetApp.Range;\\n/**Returns `true` if this group is collapsed.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getRange(2:3);\\nrange.shiftRowGroupDepth(1);\\nvar group \\u003d sheet.getRowGroup(2, 1);\\n\\n// Returns true if the group is collapsed.\\nvar isCollapsed \\u003d group.isCollapsed();\\n```\\n@return `true` if this group is collapsed; returns `false` otherwise*/isCollapsed():boolean;\\n/**Removes this group from the sheet, reducing the group depth of the [`range`](https://developers.google.com/apps-script/reference/spreadsheet/group.html#getRange()) by\\none. This may modify other groups. After calling this, the group object becomes invalid to use.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];\\nvar range \\u003d sheet.getRange(2:3);\\nrange.shiftRowGroupDepth(1);\\nvar group \\u003d sheet.getRowGroup(2, 1);\\n\\n// Removes this group\\nvar range \\u003d group.remove();\\n```*/remove():void;}interface GradientCondition{\\n/**Gets the color set for the maximum value of this gradient condition. Returns an empty string if\\nthe color hasn't been set.\\n@deprecated\\n@return The color set for the maximum value of this gradient condition or an empty string.*/getMaxColor():string;\\n/**Gets the color set for the maximum value of this gradient condition. Returns `null` if\\nthe color hasn't been set.\\n@return The color set for the maximum value of this gradient condition or `null`.*/getMaxColorObject():SpreadsheetApp.Color;\\n/**Gets the interpolation type for the maximum value of this gradient condition. Returns `null` if the gradient max type hasn't been set.\\n@return the interpolation type for the maximum value of this gradient condition or `null`*/getMaxType():SpreadsheetApp.InterpolationType;\\n/**Gets the max value of this gradient condition. Returns an empty string if the [`InterpolationType`](https://developers.google.com/apps-script/reference/spreadsheet/interpolation-type.html) is `MAX` or if the max value hasn't been\\nset.\\n@return the maximum value if specified or an empty string*/getMaxValue():string;\\n/**Gets the color set for the mid-point value of this gradient condition. Returns an empty string\\nif the color hasn't been set.\\n@deprecated\\n@return The color set for the midpoint value of this gradient condition or an empty string.*/getMidColor():string;\\n/**Gets the color set for the midpoint value of this gradient condition. Returns `null` if\\nthe color hasn't been set.\\n@return The color set for the midpoint value of this gradient condition or `null`.*/getMidColorObject():SpreadsheetApp.Color;\\n/**Gets the interpolation type for the mid-point value of this gradient condition. Returns `null` if the gradient mid type hasn't been set.\\n@return the interpolation type for the mid-point value of this gradient condition or `null`*/getMidType():SpreadsheetApp.InterpolationType;\\n/**Gets the mid-point value of this gradient condition. Returns an empty string if the gradient\\nmid value hasn't been set.\\n@return the mid-point value or an empty string*/getMidValue():string;\\n/**Gets the color set for the minimum value of this gradient condition. Returns an empty string if\\nthe color hasn't been set.\\n@deprecated\\n@return The color set for the minimum value of this gradient condition or an empty string.*/getMinColor():string;\\n/**Gets the color set for the minimum value of this gradient condition. Returns `null` if\\nthe color hasn't been set.\\n@return The color set for the minimum value of this gradient condition or `null`.*/getMinColorObject():SpreadsheetApp.Color;\\n/**Gets the interpolation type for the minimum value of this gradient condition. Returns `null` if the gradient min type hasn't been set.\\n@return the interpolation type for the minimum value of this gradient condition or `null`*/getMinType():SpreadsheetApp.InterpolationType;\\n/**Gets the minimum value of this gradient condition. Returns an empty string if the [`InterpolationType`](https://developers.google.com/apps-script/reference/spreadsheet/interpolation-type.html) is `MIN` or if the min value hasn't been\\nset.\\n@return the minimum value if specified or an empty string*/getMinValue():string;}interface FrequencyType{}interface _FrequencyType{\\n/**Refresh daily.*/DAILY:FrequencyType;\\n/**The frequency type is unsupported.*/FREQUENCY_TYPE_UNSUPPORTED:FrequencyType;\\n/**Refresh monthly, on given days of the month.*/MONTHLY:FrequencyType;\\n/**Refresh weekly, on given days of the week.*/WEEKLY:FrequencyType;}interface FilterCriteriaBuilder{\\n/**Assembles the filter criteria using the settings you add to the criteria builder.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria() // Creates a criteria builder.\\n                             .whenCellNotEmpty() // Adds settings to the builder.\\n                             .build();          // Assembles the criteria.\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@return A representation of the filter criteria.*/build():SpreadsheetApp.FilterCriteria;\\n/**Copies this filter criteria and creates a criteria builder that you can apply to another\\nfilter.\\n\\nYou can use this method with any type of filter. If you're using a sheet filter, you can\\ncopy the criteria to another column.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Makes a copy of the filter criteria applied to column C.\\nlet criteria \\u003d filter.getColumnFilterCriteria(3).copy().build();\\n// Applies the copied criteria to column B. The copied criteria overwrites any existing\\n// criteria on column B.\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@return A filter criteria builder based on this filter criteria.*/copy():SpreadsheetApp.FilterCriteriaBuilder;\\n/**Returns the criteria's boolean type, for example, `CELL_EMPTY`. To learn about the types\\nof boolean criteria, see the [`BooleanCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-criteria.html) enum.\\n\\nPeople often use this method to add boolean condition criteria to a filter without replacing\\nexisting criteria.\\n\\n  + To get the arguments for the criteria, use [`getCriteriaValues()`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html#getCriteriaValues()).\\n  + To use the criteria type and criteria values to create or modify filter criteria, see\\n      [`withCriteria(criteria, args)`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html#withCriteria(BooleanCriteria,Object)).\\n\\nYou can use this method for any type of filter. If the filter criteria isn't a boolean\\ncondition, returns `null`.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\n// Gets the filter on the active sheet.\\nlet filter \\u003d ss.getFilter();\\n// Gets the criteria type and returns a string representing the criteria type object.\\nlet criteriaType \\u003d filter.getColumnFilterCriteria(2)\\n                         .getCriteriaType()\\n                         .toString();\\n// Logs the criteria type.\\nconsole.log(criteriaType);\\n```\\n@return The type of boolean criteria, or `null` if the criteria isn't a boolean\\n    condition.*/getCriteriaType():SpreadsheetApp.BooleanCriteria;\\n/**Returns an array of arguments for boolean criteria. Some boolean criteria types don't have\\narguments and return an empty array, for example, `CELL_NOT_EMPTY`.\\n\\nPeople often use this method to add boolean condition criteria to a filter without replacing\\nexisting criteria.\\n\\n\\u003cul\\u003e\\n  + To get the boolean criteria type, use [`getCriteriaType()`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html#getCriteriaType()).\\n  + To use the criteria type and criteria values to create or modify a filter criteria, see\\n      [`withCriteria(criteria, args)`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html#withCriteria(BooleanCriteria,Object)).\\n      \\n\\nYou can use this method for any type of filter.\\n      \\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Gets the values of the boolean criteria and logs them. For example, if the boolean\\n// condition is whenNumberGreaterThan(10), then the logged value is 10.\\nlet criteriaValues \\u003d filter.getColumnFilterCriteria(2).getCriteriaValues();\\nconsole.log(criteriaValues);\\n```\\n@return An array of arguments appropriate to the boolean criteria type. The number of arguments\\n    and their type match the corresponding `when...()` method of the [`FilterCriteriaBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html) class.*/getCriteriaValues():Object[];\\n/**Returns the values that the filter hides.\\n\\nUse this criteria with filters on [`Grid`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheets, the default type of sheet.\\nReturns `null` if you call this method for other types of filters.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Gets the filter criteria applied to column B, then gets the hidden values.\\nlet filterCriteria \\u003d filter.getColumnFilterCriteria(2).getHiddenValues();\\n// Logs the hidden values.\\nconsole.log(filterCriteria);\\n```\\n@return An array of values that the filter hides.*/getHiddenValues():string[];\\n/**Returns the background color used as filter criteria. Cells with this background color remain\\nvisible.\\n\\nUse this criteria with filters on [`Grid`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheets, the default type of sheet.\\nReturns `null` if you call this method for other types of filters.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\n// Logs the background color that column B is filtered by as a hexadecimal string.\\nlet filter \\u003d range.getFilter();\\nlet color \\u003d filter.getColumnFilterCriteria(2)\\n                  .getVisibleBackgroundColor()\\n                  .asRgbColor()\\n                  .asHexString();\\nconsole.log(color);\\n```\\n@return The background color used as filter criteria.*/getVisibleBackgroundColor():SpreadsheetApp.Color;\\n/**Returns the foreground color used as a filter criteria. Cells with this foreground color remain\\nvisible.\\n\\nUse this criteria with filters on [`Grid`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheets, the default type of sheet.\\nReturns `null` if you call this method for other types of filters.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\n// Logs the foreground color that column B is filtered by as a hexadecimal string.\\nlet filter \\u003d range.getFilter();\\nlet color \\u003d filter.getColumnFilterCriteria(2)\\n                  .getVisibleForegroundColor()\\n                  .asRgbColor()\\n                  .asHexString();\\nconsole.log(color);\\n```\\n@return The foreground color used as a filter criteria.*/getVisibleForegroundColor():SpreadsheetApp.Color;\\n/**Returns the values that the pivot table filter shows.\\n\\nThis criteria is only for filters on pivot tables that aren't connected to a database.\\nReturns an empty array for other types of filters.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\n// Gets the first pivot table on the sheet, then gets the visible values of its first filter.\\npivotTable \\u003d ss.getPivotTables()[0];\\npivotFilterValues \\u003d pivotTable.getFilters()[0].getFilterCriteria().getVisibleValues();\\n// Logs the visible values.\\nconsole.log(pivotFilterValues);\\n```\\n@return An array of values that the pivot table filter shows.*/getVisibleValues():string[];\\n/**Sets the values to hide. Clears any existing visible or hidden values.\\n\\nYou can only use this criteria for filters on [`Grid`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheets, the default\\ntype of sheet.\\n\\n```\\n// Gets the existing filter on the range.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Sets the values to hide and applies the criteria to column C.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .setHiddenValues([\\\"Hello\\\", \\\"World\\\"])\\n                             .build();\\nfilter.setColumnFilterCriteria(3, criteria);\\n```\\n@param values The list of values to hide.\\n@return This builder, for chaining.*/setHiddenValues(values:string[]):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the background color used as filter criteria. Cells with this background color remain\\nvisible. Setting a background color filter criteria removes any current color filter criteria\\nfrom this builder.\\n\\nYou can only use this criteria for filters on [`Grid`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheets, the default\\ntype of sheet.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that filters by background color and sets it to column B.\\nlet color \\u003d SpreadsheetApp.newColor().setRgbColor(\\\"#185ABC\\\").build();\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .setVisibleBackgroundColor(color)\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param visibleBackgroundColor The background color to set. The color must be an RGB-style\\n    color. This method doesn't support theme colors.\\n@return This builder, for chaining.*/setVisibleBackgroundColor(visibleBackgroundColor:SpreadsheetApp.Color):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the foreground color used as filter criteria. Cells with this foreground color remain\\nvisible. Setting a foreground color filter criteria removes any current color filter criteria\\nfrom this builder.\\n\\nYou can only use this criteria for filters on [`Grid`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheets, the default\\ntype of sheet.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that filters by foreground color and sets it to column B.\\nlet color \\u003d SpreadsheetApp.newColor().setRgbColor(\\\"#185ABC\\\").build();\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .setVisibleForegroundColor(color)\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param visibleForegroundColor The foreground color to set. The color must be an RGB-style\\n    color. This method doesn't support theme colors.\\n@return This builder, for chaining.*/setVisibleForegroundColor(visibleForegroundColor:SpreadsheetApp.Color):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the values to show on a pivot table. Clears any existing visible or hidden values.\\n\\nYou can only use this criteria for filters on pivot tables that aren't connected to a\\ndatabase.\\n\\n```\\n// Gets the active sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\n// Gets the first pivot table on the sheet and adds a filter to it that\\n// sets the visible values to \\\"Northeast\\\" and \\\"Southwest.\\\"\\nlet pivotTable \\u003d ss.getPivotTables()[0];\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .setVisibleValues([\\\"Northeast\\\", \\\"Southwest\\\"])\\n                             .build();\\npivotTable.addFilter(2, criteria);\\n```\\n@param values The list of values to show.\\n@return This builder, for chaining.*/setVisibleValues(values:string[]):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show empty cells.\\n\\nYou can use this criteria with any type of filter.\\n\\n```\\n// Gets the existing filter on the range.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Sets criteria to column B that only shows empty cells.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenCellEmpty()\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@return This builder, for chaining.*/whenCellEmpty():SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells that aren't empty.\\n\\nYou can use this criteria with any type of filter.\\n\\n```\\n// Gets the existing filter on the range.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Sets criteria to column B that only shows cells that aren't empty.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenCellNotEmpty()\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@return This builder, for chaining.*/whenCellNotEmpty():SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets filter criteria that shows cells with dates that are after the specified date.\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a date. If the\\ndata isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a date, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the range.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Creates criteria that only shows cells with dates after June 1, 2022\\n// and sets it to column A.\\nlet date \\u003d new Date(\\\"June 1, 2022\\\");\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenDateAfter(date)\\n                             .build();\\nfilter.setColumnFilterCriteria(1, criteria);\\n```\\n@param date The latest date to hide.\\n@return This builder, for chaining.*/whenDateAfter(date:Date):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets filter criteria that shows cells with dates that are after the specified relative date. To\\nview the relative date options, refer to [Enum `RelativeDate`](/apps-script/reference/spreadsheet/relative-date).\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a date. If the\\ndata isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a date, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the range.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Creates criteria that only shows cells with dates after today's date\\n// and sets it to column A.\\nlet date \\u003d SpreadsheetApp.RelativeDate.TODAY;\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenDateAfter(date)\\n                             .build();\\nfilter.setColumnFilterCriteria(1, criteria);\\n```\\n@param date The latest relative date.\\n@return This builder, for chaining.*/whenDateAfter(date:SpreadsheetApp.RelativeDate):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets filter criteria that shows cells with dates that are before the specified date.\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a date. If the\\ndata isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a date, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the range.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Creates criteria that only shows cells with dates before June 1, 2022\\n// and sets it to column A.\\nlet date \\u003d new Date(\\\"June 1, 2022\\\");\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenDateBefore(date)\\n                             .build();\\nfilter.setColumnFilterCriteria(1, criteria);\\n```\\n@param date The earliest date to hide.\\n@return This builder, for chaining.*/whenDateBefore(date:Date):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets filter criteria that shows cells with dates that are before the specified relative date.\\nTo view the relative date options, refer to [Enum `RelativeDate`](/apps-script/reference/spreadsheet/relative-date).\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a date. If the\\ndata isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a date, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the range.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Creates criteria that only shows cells with dates before today's date\\n// and sets it to column A.\\nlet date \\u003d SpreadsheetApp.RelativeDate.TODAY;\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenDateBefore(date)\\n                             .build();\\nfilter.setColumnFilterCriteria(1, criteria);\\n```\\n@param date The earliest relative date to hide.\\n@return This builder, for chaining.*/whenDateBefore(date:SpreadsheetApp.RelativeDate):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets filter criteria that shows cells with dates that are equal to the specified date.\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a date. If the\\ndata isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a date, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the range.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Creates criteria that only shows cells with dates equal to June 1, 2022\\n// and sets it to column A.\\nlet date \\u003d new Date(\\\"June 1, 2022\\\");\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenDateEqualTo(date)\\n                             .build();\\nfilter.setColumnFilterCriteria(1, criteria);\\n```\\n@param date The date that cell values must match.\\n@return This builder, for chaining.*/whenDateEqualTo(date:Date):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets filter criteria that shows cells with dates that are equal to the specified relative date.\\nTo view the relative date options, refer to [Enum `RelativeDate`](/apps-script/reference/spreadsheet/relative-date).\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a date. If the\\ndata isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a date, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the range.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Creates criteria that only shows cells with dates that fall within the past month\\n// and sets it to column A.\\nlet date \\u003d SpreadsheetApp.RelativeDate.PAST_MONTH;\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenDateEqualTo(date)\\n                             .build();\\nfilter.setColumnFilterCriteria(1, criteria);\\n```\\n@param date The relative date that cell values must match.\\n@return This builder, for chaining.*/whenDateEqualTo(date:SpreadsheetApp.RelativeDate):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with dates that are equal to any of the specified dates.\\n\\nYou can only use this criteria with data connected to a database. For example, use this\\ncriteria with filters on a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet, a sheet that's connected to a\\ndatabase, or a [`DataSourcePivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html), a pivot table created from a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet.\\n\\n```\\n// Gets the sheet that's connected to a database.\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\\\"Data Sheet\\\");\\nlet dataSheet \\u003d ss.asDataSourceSheet();\\n// Adds criteria to the \\\"date\\\" column that shows cells with any of the below dates.\\nlet date1 \\u003d new Date(\\\"June 1, 2022\\\");\\nlet date2 \\u003d new Date(\\\"June 2, 2022\\\");\\nlet date3 \\u003d new Date(\\\"June 3, 2022\\\");\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenDateEqualToAny([date1, date2, date3])\\n                             .build();\\ndataSheet.addFilter(\\\"date\\\", criteria);\\n```\\n@param dates The dates to show.\\n@return This builder, for chaining.*/whenDateEqualToAny(dates:Date[]):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells that aren't equal to the specified date.\\n\\nYou can only use this criteria with data connected to a database. For example, use this\\ncriteria with filters on a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet, a sheet that's connected to a\\ndatabase, or a [`DataSourcePivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html), a pivot table created from a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet.\\n\\nThe data type of the column you're filtering by must be a date.\\n\\n```\\n// Gets a pivot table that's connected to a database.\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\\\"Pivot Table Sheet\\\");\\nlet dataPivotTable \\u003d ss.getDataSourcePivotTables()[0];\\n// Creates criteria that only shows cells that don't equal June 16, 2022\\n// and sets it to the \\\"date\\\" column.\\nlet date \\u003d new Date(\\\"June 16, 2022\\\");\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenDateNotEqualTo(date)\\n                             .build();\\ndataPivotTable.addFilter(\\\"date\\\", criteria);\\n```\\n@param date The date to hide.\\n@return This builder, for chaining.*/whenDateNotEqualTo(date:Date):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with dates that aren't equal to any of the specified\\ndates.\\n\\nYou can only use this criteria with data connected to a database. For example, use this\\ncriteria with filters on a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet, a sheet that's connected to a\\ndatabase, or a [`DataSourcePivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html), a pivot table created from a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet.\\n\\n```\\n// Gets the sheet that's connected to a database.\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\\\"Data Sheet\\\");\\nlet dataSheet \\u003d ss.asDataSourceSheet();\\n// Adds criteria to the \\\"date\\\" column that hides cells with any of the below dates.\\nlet date1 \\u003d new Date(\\\"June 1, 2022\\\");\\nlet date2 \\u003d new Date(\\\"June 2, 2022\\\");\\nlet date3 \\u003d new Date(\\\"June 3, 2022\\\");\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenDateNotEqualToAny([date1, date2, date3])\\n                             .build();\\ndataSheet.addFilter(\\\"date\\\", criteria);\\n```\\n@param dates The dates to hide.\\n@return This builder, for chaining.*/whenDateNotEqualToAny(dates:Date[]):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a specified formula (such as `\\u003dB:B\\u003cC:C`) that\\nevaluates to `true`.\\n\\nYou can only use this criteria to filter data that isn't connected to a database.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that shows the rows where the value in column B is less than the value in\\n// column C and sets it to column A.\\nlet formula \\u003d \\\"\\u003dB:B\\u003cC:C\\\";\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenFormulaSatisfied(formula)\\n                             .build();\\nfilter.setColumnFilterCriteria(1, criteria);\\n```\\n@param formula A custom formula that evaluates to `true` if the input is valid.\\n@return This builder, for chaining.*/whenFormulaSatisfied(formula:string):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a number that falls between, or is either of, 2\\nspecified numbers.\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a number. If\\nthe data isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a number, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that only shows cells with numbers that fall between 1-25, inclusively,\\n// and sets it to column A.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenNumberBetween(1, 25)\\n                             .build();\\nfilter.setColumnFilterCriteria(1, criteria);\\n```\\n@param start The lowest number to show.\\n@param end The highest number to show.\\n@return This builder, for chaining.*/whenNumberBetween(start:number,end:number):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a number that's equal to the specified number.\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a number. If\\nthe data isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a number, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that only shows cells that are equal to 25 and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenNumberEqualTo(25)\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param number The number to show.\\n@return This builder, for chaining.*/whenNumberEqualTo(number:number):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a number that's equal to any of the specified\\nnumbers.\\n\\nYou can only use this criteria with data connected to a database. For example, use this\\ncriteria with filters on a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet, a sheet that's connected to a\\ndatabase, or a [`DataSourcePivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html), a pivot table created from a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet.\\n\\n```\\n// Gets the sheet that's connected to a database.\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\\\"Data Sheet\\\");\\nlet dataSheet \\u003d ss.asDataSourceSheet();\\n// Adds criteria to the \\\"amount\\\" column that only shows cells with the number 10, 20, or 30.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenNumberEqualToAny([10,20,30])\\n                             .build();\\ndataSheet.addFilter(\\\"amount\\\", criteria);\\n```\\n@param numbers The numbers to show.\\n@return This builder, for chaining.*/whenNumberEqualToAny(numbers:number[]):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a number greater than the specified number\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a number. If\\nthe data isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a number, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that shows cells greater than 10 and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenNumberGreaterThan(10)\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param number The highest number to hide.\\n@return This builder, for chaining.*/whenNumberGreaterThan(number:number):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a number greater than or equal to the specified\\nnumber.\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a number. If\\nthe data isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a number, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that shows cells greater than or equal to 10 and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenNumberGreaterThanOrEqualTo(10)\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param number The lowest number to show.\\n@return This builder, for chaining.*/whenNumberGreaterThanOrEqualTo(number:number):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a number that's less than the specified number.\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a number. If\\nthe data isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a number, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that shows cells less than 10 and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenNumberLessThan(10)\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param number The lowest number to hide.\\n@return This builder, for chaining.*/whenNumberLessThan(number:number):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a number less than or equal to the specified\\nnumber.\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a number. If\\nthe data isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a number, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that shows cells less than or equal to 10 and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenNumberLessThanOrEqualTo(10)\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param number The highest number to show.\\n@return This builder, for chaining.*/whenNumberLessThanOrEqualTo(number:number):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a number doesn't fall between, and is neither of, 2\\nspecified numbers.\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a number. If\\nthe data isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a number, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that hides cells with numbers that fall between 1-25, inclusively,\\n// and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenNumberNotBetween(1, 25)\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param start The lowest number hide.\\n@param end The highest number to hide.\\n@return This builder, for chaining.*/whenNumberNotBetween(start:number,end:number):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a number that isn't equal to the specified number.\\n\\nYou can use this criteria with any type of filter. If you use this criteria with data that's\\nconnected to a database, the data type of the column you're filtering by must be a number. If\\nthe data isn't connected to a database, the data type of the column you're filtering by doesn't\\nneed to be a number, but if it's not, you might get unexpected results.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that hides cells that are equal to 25 and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenNumberNotEqualTo(25)\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param number The number to hide.\\n@return This builder, for chaining.*/whenNumberNotEqualTo(number:number):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with a number that isn't equal to any of the specified\\nnumbers.\\n\\nYou can only use this criteria with data connected to a database. For example, use this\\ncriteria with filters on a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet, a sheet that's connected to a\\ndatabase, or a [`DataSourcePivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html), a pivot table created from a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet.\\n\\n```\\n// Gets the sheet that's connected to a database.\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\\\"Data Sheet\\\");\\nlet dataSheet \\u003d ss.asDataSourceSheet();\\n// Adds criteria to the \\\"amount\\\" column that hides cells with the number 10, 20, or 30.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenNumberNotEqualToAny([10,20,30])\\n                             .build();\\ndataSheet.addFilter(\\\"amount\\\", criteria);\\n```\\n@param numbers The numbers to hide.\\n@return This builder, for chaining.*/whenNumberNotEqualToAny(numbers:number[]):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with text that contains the specified text. The text\\nisn't case-sensitive.\\n\\nYou can use this criteria with any type of filter.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that shows cells that contain \\\"Northwest\\\" and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenTextContains(\\\"Northwest\\\")\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param text The text that the cell must contain.\\n@return This builder, for chaining.*/whenTextContains(text:string):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with text that doesn't contain the specified text. The\\ntext isn't case-sensitive.\\n\\nYou can use this criteria with any type of filter.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that hides cells that contain \\\"Northwest\\\" and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenTextDoesNotContain(\\\"Northwest\\\")\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param text The text that the cell must not contain.\\n@return This builder, for chaining.*/whenTextDoesNotContain(text:string):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with text that ends with the specified text. The text\\nisn't case-sensitive.\\n\\nYou can use this criteria with any type of filter.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that shows cells with text that ends with \\\"est\\\" and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenTextEndsWith(\\\"est\\\")\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param text Text that the end of the cell's text must contain.\\n@return This builder, for chaining.*/whenTextEndsWith(text:string):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with text that's equal to the specified text. The text\\nisn't case-sensitive.\\n\\nYou can use this criteria with any type of filter.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that shows cells with text that equals \\\"hello\\\" and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenTextEqualTo(\\\"hello\\\")\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param text The text that the cell's text must equal.\\n@return This builder, for chaining.*/whenTextEqualTo(text:string):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with text that's equal to any of the specified text\\nvalues. The text isn't case-sensitive.\\n\\nYou can only use this criteria with data connected to a database. For example, use this\\ncriteria with filters on a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet, a sheet that's connected to a\\ndatabase, or a [`DataSourcePivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html), a pivot table created from a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet.\\n\\n```\\n// Gets the sheet that's connected to a database.\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\\\"Data Sheet\\\");\\nlet dataSheet \\u003d ss.asDataSourceSheet();\\n// Adds criteria to the \\\"category\\\" column that shows cells with the text \\\"tech\\\" or \\\"business.\\\"\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenTextEqualToAny([\\\"tech\\\",\\\"business\\\"])\\n                             .build();\\ndataSheet.addFilter(\\\"category\\\", criteria);\\n```\\n@param texts The text values that a cell must equal.\\n@return This builder, for chaining.*/whenTextEqualToAny(texts:string[]):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with text that isn't equal to the specified text. The\\ntext isn't case-sensitive.\\n\\nYou can only use this criteria with data connected to a database. For example, use this\\ncriteria with filters on a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet, a sheet that's connected to a\\ndatabase, or a [`DataSourcePivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html), a pivot table created from a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet.\\n\\n```\\n// Gets the sheet that's connected to a database.\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\\\"Data Sheet\\\");\\nlet dataSheet \\u003d ss.asDataSourceSheet();\\n// Adds criteria to the \\\"category\\\" column that hides cells with text equal to \\\"tech.\\\"\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenTextNotEqualTo(\\\"tech\\\")\\n                             .build();\\ndataSheet.addFilter(\\\"category\\\", criteria);\\n```\\n@param text The text that the cell's text can't equal.\\n@return This builder, for chaining.*/whenTextNotEqualTo(text:string):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with text that isn't equal to any of the specified\\nvalues. The text isn't case-sensitive.\\n\\nYou can only use this criteria with data connected to a database. For example, use this\\ncriteria with filters on a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet, a sheet that's connected to a\\ndatabase, or a [`DataSourcePivotTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html), a pivot table created from a [`DataSource`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheet.\\n\\n```\\n// Gets the sheet that's connected to a database.\\nlet ss \\u003d SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\\\"Data Sheet\\\");\\nlet dataSheet \\u003d ss.asDataSourceSheet();\\n// Adds criteria to the \\\"category\\\" column that hides cells with the text \\\"tech\\\" or \\\"business.\\\"\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenTextNotEqualToAny([\\\"tech\\\",\\\"business\\\"])\\n                             .build();\\ndataSheet.addFilter(\\\"category\\\", criteria);\\n```\\n@param texts The text values that a cell can't equal.\\n@return This builder, for chaining.*/whenTextNotEqualToAny(texts:string[]):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to show cells with text that starts with the specified text. The text\\nisn't case-sensitive.\\n\\nYou can use this criteria with any type of filter.\\n\\n```\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Creates criteria that shows cells with text that starts with \\\"pre\\\" and sets it to column B.\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .whenTextStartsWith(\\\"pre\\\")\\n                             .build();\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@param text Text that the start of the cell's text must contain.\\n@return This builder, for chaining.*/whenTextStartsWith(text:string):SpreadsheetApp.FilterCriteriaBuilder;\\n/**Sets the filter criteria to a boolean condition defined by [`BooleanCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-criteria.html) values, such\\nas `CELL_EMPTY` or `NUMBER_GREATER_THAN`. To copy the boolean condition from\\nexisting criteria, define the parameters for this method using [`getCriteriaType()`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html#getCriteriaType()) and [`getCriteriaValues()`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html#getCriteriaValues()) on an\\nexisting criteria.\\n\\nYou can use this criteria with any type of filter, but some [`BooleanCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-criteria.html) aren't\\napplicable for all filters.\\n\\n```\\n// Builds a filter criteria that is based on existing boolean conditions from another criteria.\\n// Gets the existing filter on the sheet.\\nconst ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Gets the existing boolean conditions applied to Column B and adds criteria to column C that\\n// has the same boolean conditions and additional criteria that hides the value, \\\"Northwest.\\\"\\nlet filter \\u003d ss.getFilter();\\nlet filterCriteria \\u003d filter.getColumnFilterCriteria(2);\\nlet criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n    .withCriteria(filterCriteria.getCriteriaType(), filterCriteria.getCriteriaValues())\\n    .setHiddenValues([\\\"Northwest\\\"])\\n    .build();\\nfilter.setColumnFilterCriteria(3, criteria);\\n```\\n@param criteria The type of boolean criteria.\\n@param args An array of arguments appropriate to the criteria type; the number of arguments and\\n    their type match the corresponding `when...()` methods above.\\n@return This builder, for chaining.*/withCriteria(criteria:SpreadsheetApp.BooleanCriteria,args:Object[]):SpreadsheetApp.FilterCriteriaBuilder;}interface FilterCriteria{\\n/**Copies this filter criteria and creates a criteria builder that you can apply to another\\nfilter.\\n\\nYou can use this method with any type of filter. If you're using a sheet filter, you can\\ncopy the criteria to another column.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Makes a copy of the filter criteria applied to column C.\\nlet criteria \\u003d filter.getColumnFilterCriteria(3).copy().build();\\n// Applies the copied criteria to column B. The copied criteria overwrites any existing\\n// criteria on column B.\\nfilter.setColumnFilterCriteria(2, criteria);\\n```\\n@return A filter criteria builder based on this filter criteria.*/copy():SpreadsheetApp.FilterCriteriaBuilder;\\n/**Returns the criteria's boolean type, for example, `CELL_EMPTY`. To learn about the types\\nof boolean criteria, see the [`BooleanCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-criteria.html) enum.\\n\\nPeople often use this method to add boolean condition criteria to a filter without replacing\\nexisting criteria.\\n\\n  + To get the arguments for the criteria, use [`getCriteriaValues()`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria.html#getCriteriaValues()).\\n  + To use the criteria type and criteria values to create or modify filter criteria, see\\n      [`FilterCriteriaBuilder.withCriteria(criteria, args)`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html#withCriteria(BooleanCriteria,Object)).\\n\\nYou can use this method for any type of filter. If the filter criteria isn't a boolean\\ncondition, returns `null`.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\n// Gets the filter on the active sheet.\\nlet filter \\u003d ss.getFilter();\\n// Gets the criteria type and returns a string representing the criteria type object.\\nlet criteriaType \\u003d filter.getColumnFilterCriteria(2)\\n                         .getCriteriaType()\\n                         .toString();\\n// Logs the criteria type.\\nconsole.log(criteriaType);\\n```\\n@return The type of boolean criteria, or `null` if the criteria isn't a boolean\\n    condition.*/getCriteriaType():SpreadsheetApp.BooleanCriteria;\\n/**Returns an array of arguments for boolean criteria. Some boolean criteria types don't have\\narguments and return an empty array, for example, `CELL_NOT_EMPTY`.\\n\\nPeople often use this method to add boolean condition criteria to a filter without replacing\\nexisting criteria.\\n\\n\\u003cul\\u003e\\n  + To get the boolean criteria type, use [`getCriteriaType()`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria.html#getCriteriaType()).\\n  + To use the criteria type and criteria values to create or modify a filter criteria, see\\n      [`FilterCriteriaBuilder.withCriteria(criteria, args)`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html#withCriteria(BooleanCriteria,Object)).\\n      \\n\\nYou can use this method for any type of filter.\\n      \\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Gets the values of the boolean criteria and logs them. For example, if the boolean\\n// condition is whenNumberGreaterThan(10), then the logged value is 10.\\nlet criteriaValues \\u003d filter.getColumnFilterCriteria(2).getCriteriaValues();\\nconsole.log(criteriaValues);\\n```\\n@return An array of arguments appropriate to the boolean criteria type. The number of arguments\\n    and their type match the corresponding `when...()` method of the [`FilterCriteriaBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html) class.*/getCriteriaValues():Object[];\\n/**Returns the values that the filter hides.\\n\\nUse this criteria with filters on [`Grid`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheets, the default type of sheet.\\nReturns `null` if you call this method for other types of filters.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\nlet filter \\u003d range.getFilter();\\n// Gets the filter criteria applied to column B, then gets the hidden values.\\nlet filterCriteria \\u003d filter.getColumnFilterCriteria(2).getHiddenValues();\\n// Logs the hidden values.\\nconsole.log(filterCriteria);\\n```\\n@return An array of values that the filter hides.*/getHiddenValues():string[];\\n/**Returns the background color used as filter criteria. Cells with this background color remain\\nvisible.\\n\\nUse this criteria with filters on [`Grid`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheets, the default type of sheet.\\nReturns `null` if you call this method for other types of filters.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\n// Logs the background color that column B is filtered by as a hexadecimal string.\\nlet filter \\u003d range.getFilter();\\nlet color \\u003d filter.getColumnFilterCriteria(2)\\n                  .getVisibleBackgroundColor()\\n                  .asRgbColor()\\n                  .asHexString();\\nconsole.log(color);\\n```\\n@return The background color used as filter criteria.*/getVisibleBackgroundColor():SpreadsheetApp.Color;\\n/**Returns the foreground color used as a filter criteria. Cells with this foreground color remain\\nvisible.\\n\\nUse this criteria with filters on [`Grid`](https://developers.google.com/apps-script/reference/spreadsheet/sheet-type.html) sheets, the default type of sheet.\\nReturns `null` if you call this method for other types of filters.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet range \\u003d ss.getRange(\\\"A1:C20\\\");\\n// Logs the foreground color that column B is filtered by as a hexadecimal string.\\nlet filter \\u003d range.getFilter();\\nlet color \\u003d filter.getColumnFilterCriteria(2)\\n                  .getVisibleForegroundColor()\\n                  .asRgbColor()\\n                  .asHexString();\\nconsole.log(color);\\n```\\n@return The foreground color used as a filter criteria.*/getVisibleForegroundColor():SpreadsheetApp.Color;\\n/**Returns the values that the pivot table filter shows.\\n\\nThis criteria is only for filters on pivot tables that aren't connected to a database.\\nReturns an empty array for other types of filters.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\n// Gets the first pivot table on the sheet, then gets the visible values of its first filter.\\npivotTable \\u003d ss.getPivotTables()[0];\\npivotFilterValues \\u003d pivotTable.getFilters()[0].getFilterCriteria().getVisibleValues();\\n// Logs the visible values.\\nconsole.log(pivotFilterValues);\\n```\\n@return An array of values that the pivot table filter shows.*/getVisibleValues():string[];}interface Filter{\\n/**Gets the filter criteria on the specified column, or `null` if the column doesn't have\\nfilter criteria applied to it.\\n\\nTo get more details about the filter criteria, chain this method with methods from the\\n[`FilterCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria.html) class.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n  // Gets the filter criteria applied to column B of the active sheet\\n  // and logs the hidden values.\\nlet filterCriteria \\u003d filter.getColumnFilterCriteria(2).getHiddenValues();\\nconsole.log(filterCriteria);\\n```\\n@param columnPosition The 1-indexed position of the column. For example, column B's index is 2.\\n@return The filter criteria.*/getColumnFilterCriteria(columnPosition:Integer):SpreadsheetApp.FilterCriteria;\\n/**Gets the range this filter applies to.\\n\\n```\\n// Gets the existing filter on the active sheet.\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Logs the range that the filter applies to in A1 notation.\\nconsole.log(filter.getRange().getA1Notation());\\n```\\n@return The filter's range. To get the range in A1 notation, chain this method with [`Range.getA1Notation()`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#getA1Notation()).*/getRange():SpreadsheetApp.Range;\\n/**Removes this filter.\\n\\n```\\n// Removes the filter from the active sheet.\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\nfilter.remove();\\n```*/remove():void;\\n/**Removes the filter criteria from the specified column.\\n\\n```\\n// Removes the filter criteria from column B.\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\nfilter.removeColumnFilterCriteria(2);\\n```\\n@param columnPosition The 1-indexed position of the column. For example, column B's index is 2.\\n@return The filter, for chaining.*/removeColumnFilterCriteria(columnPosition:Integer):SpreadsheetApp.Filter;\\n/**Sets the filter criteria on the specified column. First, create the filter criteria builder\\nusing [`SpreadsheetApp.newFilterCriteria()`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app.html#newFilterCriteria()). Then add criteria to the builder\\nusing the [`FilterCriteriaBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/filter-criteria-builder.html) class. After you've built your criteria, set it as the\\n`filterCriteria` parameter for this method.\\n\\n```\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\n// Builds the filter criteria to use as a parameter for setColumnFilterCriteria.\\nconst criteria \\u003d SpreadsheetApp.newFilterCriteria()\\n                             .setHiddenValues([\\\"Hello\\\", \\\"World\\\"])\\n                             .build();\\n// Sets the filter criteria for column C.\\nfilter.setColumnFilterCriteria(3, criteria);\\n```\\n@param columnPosition The 1-indexed position of the column. For example, column B's index is 2.\\n@param filterCriteria The filter criteria to set. If you set the criteria to `null`, it\\n    removes filter criteria from the specified column. You can also use [`removeColumnFilterCriteria(columnPosition)`](https://developers.google.com/apps-script/reference/spreadsheet/filter.html#removeColumnFilterCriteria(Integer)).\\n@return The filter, for chaining.*/setColumnFilterCriteria(columnPosition:Integer,filterCriteria:SpreadsheetApp.FilterCriteria):SpreadsheetApp.Filter;\\n/**Sorts the filtered range by the specified column, excluding the first row (the header row) in\\nthe range this filter applies to.\\n\\n```\\n// Gets the existing filter and sorts it by column B in ascending order.\\nlet ss \\u003d SpreadsheetApp.getActiveSheet();\\nlet filter \\u003d ss.getFilter();\\nfilter.sort(2, true);\\n```\\n@param columnPosition The 1-indexed position of the column. For example, column B's index is 2.\\n@param ascending If `true`, sorts the filtered range in ascending order; if `false`, sorts the filtered range in descending order.\\n@return The filter, for chaining.*/sort(columnPosition:Integer,ascending:boolean):SpreadsheetApp.Filter;\\n/**If the filter sorts the specified column, gets the sort specification, or `null` if the\\nfilter doesn't sort the column.\\n@param columnPosition The 1-indexed position of the column. For example, column B's index is 2.\\n@return The sort specification.*/getColumnSortSpec(columnPosition:Integer):SpreadsheetApp.SortSpec;}interface EmbeddedTableChartBuilder{\\n/**Adds a range to the chart this builder modifies. Does not add the range if it has already been\\nadded to the chart.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to add.\\n@return this builder, for chaining*/addRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the chart type to AreaChart and returns an [`EmbeddedAreaChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html).\\n@return a builder for an area chart*/asAreaChart():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the chart type to BarChart and returns an [`EmbeddedBarChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html).\\n@return a builder for a bar chart*/asBarChart():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the chart type to ColumnChart and returns an [`EmbeddedColumnChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html).\\n@return a builder for a column chart*/asColumnChart():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the chart type to ComboChart and returns an [`EmbeddedComboChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html).\\n@return a builder for a combo chart*/asComboChart():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the chart type to HistogramChart and returns an [`EmbeddedHistogramChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html).\\n@return a builder for a histogram chart*/asHistogramChart():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the chart type to LineChart and returns an [`EmbeddedLineChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html).\\n@return a builder for a line chart*/asLineChart():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the chart type to PieChart and returns an [`EmbeddedPieChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html).\\n@return a builder for a pie chart*/asPieChart():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart type to ScatterChart and returns an [`EmbeddedScatterChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html).\\n@return a builder for a scatter chart*/asScatterChart():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the chart type to TableChart and returns an [`EmbeddedTableChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html).\\n@return a builder for a table chart*/asTableChart():SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Builds the chart to reflect all changes made to it.\\n\\nThis method does not automatically draw the chart on top of the spreadsheet. A new chart\\nmust be inserted via `sheet.insertChart(chart)`, and an existing chart should be updated\\nvia `sheet.updateChart(chart)`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@return the created chart, which must still be added to the spreadsheet*/build():SpreadsheetApp.EmbeddedChart;\\n/**Removes all ranges from the chart this builder modifies.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code updates the chart to use only the new ranges while preserving the existing\\n// formatting of the chart.\\nvar chart \\u003d sheet.getCharts()[0];\\nvar newChart \\u003d chart\\n    .modify()\\n    .clearRanges()\\n    .addRange(sheet.getRange(\\\"A1:A5\\\"))\\n    .addRange(sheet.getRange(\\\"B1:B5\\\"))\\n    .build();\\nsheet.updateChart(newChart);\\n```\\n@return this builder, for chaining*/clearRanges():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets whether to enable paging through the data.\\n\\nThe default behavior is paging disabled. If paging is enabled the default page size is 10.\\n@param enablePaging `true` if paging should be enabled, `false` otherwise.\\n@return This builder, useful for chaining.*/enablePaging(enablePaging:boolean):SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Enables paging and sets the number of rows in each page.\\n\\nThe default page size is 10.\\n\\n```\\n// Creates a table chart builder and enables paging with page size of 5.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.enablePaging(5);\\n```\\n@param pageSize The number of rows in each page of the table.\\n@return This builder, useful for chaining.*/enablePaging(pageSize:Integer):SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Enables paging, sets the number of rows in each page and the first table page to display (page\\nnumbers are zero based).\\n\\nThe default page size is 10, and the default start page is 0.\\n\\n```\\n// Creates a table chart builder and enables paging with page size of 5 and displays page 2\\n// first.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.enablePaging(5, 2);\\n```\\n@param pageSize The number of rows in each page of the table.\\n@param startPage The first table page to display (page numbers are zero-based).\\n@return This builder, useful for chaining.*/enablePaging(pageSize:Integer,startPage:Integer):SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Adds basic support for right-to-left languages (such as Arabic or Hebrew) by reversing the\\ncolumn order of the table, so that column zero is the right-most column, and the last column is\\nthe left-most column.\\n\\nThis does not affect the column index in the underlying data, only the order of display.\\nFull bi-directional (BiDi) language display is not supported by the table visualization even\\nwith this option. This option is ignored if you enable paging (using the page option), or if\\nthe table has scroll bars because you have specified height and width options smaller than the\\nrequired table size. The default behavior is RTL support disabled.\\n@param rtlEnabled `true` if right-to-left support should be enabled, `false`\\n    otherwise.\\n@return This builder, useful for chaining.*/enableRtlTable(rtlEnabled:boolean):SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Sets whether to sort columns when the user clicks a column heading.\\n\\nIf sorting is enabled, when users click on the column header the rows are automatically\\nsorted. The default behavior is sorting enabled.\\n@param enableSorting `true` to enable sorting by clicking on column headers, `false` otherwise.\\n@return This builder, useful for chaining.*/enableSorting(enableSorting:boolean):SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Returns the current chart type.\\n@return the chart type*/getChartType():Charts.ChartType;\\n/**Return the chart [`ContainerInfo`](https://developers.google.com/apps-script/reference/spreadsheet/container-info.html), which encapsulates where the chart appears on the\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\n// This method returns the exact same data as Chart#getContainerInfo()\\nvar containerInfo \\u003d chartBuilder.getContainer();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainer():SpreadsheetApp.ContainerInfo;\\n/**Returns a copy of the list of ranges currently providing data for this chart. Use [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html#addRange(Range)) and [`removeRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html#removeRange(Range)) to modify this list.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\nvar ranges \\u003d chartBuilder.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as the chart to be built's data source*/getRanges():SpreadsheetApp.Range[];\\n/**Removes the specified range from the chart this builder modifies. Does not throw an error if\\nthe range is not in this chart.\\n\\nThe range removed must match up with a range added via [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html#addRange(Range));\\notherwise no change is made to the chart. This method cannot be used to partially remove values\\nfrom a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar firstRange \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar secondRange \\u003d sheet.getRange(\\\"A6:B8\\\");\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(firstRange)\\n    // This range will render in a different color\\n    .addRange(secondRange)\\n    .setPosition(5, 5, 0, 0);\\n\\n// Note that you can use either of these two formats, but the range\\n// MUST match up with a range that was added via addRange(), or it\\n// will not be removed, and will not throw an exception\\nchartBuilder.removeRange(firstRange);\\nchartBuilder.removeRange(sheet.getRange(\\\"A6:B8\\\"));\\n\\nvar chart \\u003d chartBuilder.build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to remove.\\n@return this builder, for chaining*/removeRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Changes the type of chart. Not all embedded chart types are currently supported. See [`ChartType`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-type.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param type The type to change this chart into.\\n@return this builder, for chaining*/setChartType(type:Charts.ChartType):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the row number for the first row in the data table.\\n\\nThe default row number of the first row is 1.\\n\\n```\\n// Creates a table chart builder and sets the first row to be 2.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setFirstRowNumber(2);\\n```\\n@param number The row number for the first row in the data table.\\n@return This builder, useful for chaining.*/setFirstRowNumber(number:Integer):SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Sets the strategy to use for hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param strategy The strategy to use for hidden rows and columns.\\n@return this builder, for chaining*/setHiddenDimensionStrategy(strategy:Charts.ChartHiddenDimensionStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the index of the column according to which the table should be initially sorted\\n(ascending).\\n\\nThe column os sorted in ascending order and is marked with a small arrow indicating that.\\n\\n```\\n// Creates a table chart builder and sorts it by the second column (ascending).\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setInitialSortingAscending(2);\\n```\\n@param column The number of the column according to which the table should be initially sorted.\\n@return This builder, useful for chaining.*/setInitialSortingAscending(column:Integer):SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Sets the index of the column according to which the table should be initially sorted\\n(descending).\\n\\nThe column os sorted in descending order and is marked with a a small arrow indicating that.\\n\\n```\\n// Creates a table chart builder and sorts it by the second column (descending).\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setInitialSortingDescending(2);\\n```\\n@param column The number of the column according to which the table should be initially sorted.\\n@return This builder, useful for chaining.*/setInitialSortingDescending(column:Integer):SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Sets the merge strategy to use when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), rows are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param mergeStrategy The merge strategy to use.\\n@return this builder, for chaining*/setMergeStrategy(mergeStrategy:Charts.ChartMergeStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the number of rows or columns of the range that should be treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param headers The number of rows or columns to treat as headers. Negative values cause headers\\n    to be auto-detected.\\n@return this builder, for chaining*/setNumHeaders(headers:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets advanced options for this chart. To view a list of the available options, see [Chart\\nconfiguration options](https://developers.google.com/apps-script/chart-configuration-options).\\n\\nThis method doesn't validate the option you specify is valid for this chart type nor if the\\nvalue is of the correct format/structure.\\n\\nThis example shows how to change the title and set a legend.\\n\\n```\\nbuilder.setOption('title', 'Earnings projections');\\nbuilder.setOption('legend', {position: 'top', textStyle: {color: 'blue', fontSize: 16}});\\n```\\n@param option The name of the option.\\n@param value The value of the option.\\n@return This builder, for chaining.*/setOption(option:string,value:Object):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position, changing where the chart appears on the sheet. `anchorRowPos` and\\n`anchorColPos` are 1-indexed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param anchorRowPos The chart's top side is anchored in this row.\\n@param anchorColPos The chart's left side is anchored in this column.\\n@param offsetX The chart's upper right-hand corner is offset by this many pixels.\\n@param offsetY The chart's lower left-hand corner is offset by this many pixels.\\n@return this builder, for chaining*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets whether the chart's rows and columns are transposed. If set to `true`, the rows and\\ncolumns are switched. Defaults to `false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param transpose If `true`, the rows and columns used to construct the chart are\\n    transposed.\\n@return this builder, for chaining*/setTransposeRowsAndColumns(transpose:boolean):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets whether to show the row number as the first column of the table.\\n\\nThe default behavior is not showing row numbers.\\n@param showRowNumber `true` if the first column of the table should show the row number,\\n    `false` otherwise.\\n@return This builder, useful for chaining.*/showRowNumberColumn(showRowNumber:boolean):SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Sets whether alternating color style is assigned to odd and even rows of a table chart.\\n\\nThe default behavior is the rows having alternating color style.\\n@param alternate `true` if color styles should be alternating, `false` otherwise.\\n@return This builder, useful for chaining.*/useAlternatingRowStyle(alternate:boolean):SpreadsheetApp.EmbeddedTableChartBuilder;}interface EmbeddedScatterChartBuilder{\\n/**Adds a range to the chart this builder modifies. Does not add the range if it has already been\\nadded to the chart.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to add.\\n@return this builder, for chaining*/addRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the chart type to AreaChart and returns an [`EmbeddedAreaChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html).\\n@return a builder for an area chart*/asAreaChart():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the chart type to BarChart and returns an [`EmbeddedBarChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html).\\n@return a builder for a bar chart*/asBarChart():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the chart type to ColumnChart and returns an [`EmbeddedColumnChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html).\\n@return a builder for a column chart*/asColumnChart():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the chart type to ComboChart and returns an [`EmbeddedComboChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html).\\n@return a builder for a combo chart*/asComboChart():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the chart type to HistogramChart and returns an [`EmbeddedHistogramChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html).\\n@return a builder for a histogram chart*/asHistogramChart():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the chart type to LineChart and returns an [`EmbeddedLineChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html).\\n@return a builder for a line chart*/asLineChart():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the chart type to PieChart and returns an [`EmbeddedPieChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html).\\n@return a builder for a pie chart*/asPieChart():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart type to ScatterChart and returns an [`EmbeddedScatterChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html).\\n@return a builder for a scatter chart*/asScatterChart():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the chart type to TableChart and returns an [`EmbeddedTableChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html).\\n@return a builder for a table chart*/asTableChart():SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Builds the chart to reflect all changes made to it.\\n\\nThis method does not automatically draw the chart on top of the spreadsheet. A new chart\\nmust be inserted via `sheet.insertChart(chart)`, and an existing chart should be updated\\nvia `sheet.updateChart(chart)`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@return the created chart, which must still be added to the spreadsheet*/build():SpreadsheetApp.EmbeddedChart;\\n/**Removes all ranges from the chart this builder modifies.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code updates the chart to use only the new ranges while preserving the existing\\n// formatting of the chart.\\nvar chart \\u003d sheet.getCharts()[0];\\nvar newChart \\u003d chart\\n    .modify()\\n    .clearRanges()\\n    .addRange(sheet.getRange(\\\"A1:A5\\\"))\\n    .addRange(sheet.getRange(\\\"B1:B5\\\"))\\n    .build();\\nsheet.updateChart(newChart);\\n```\\n@return this builder, for chaining*/clearRanges():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Returns the current chart type.\\n@return the chart type*/getChartType():Charts.ChartType;\\n/**Return the chart [`ContainerInfo`](https://developers.google.com/apps-script/reference/spreadsheet/container-info.html), which encapsulates where the chart appears on the\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\n// This method returns the exact same data as Chart#getContainerInfo()\\nvar containerInfo \\u003d chartBuilder.getContainer();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainer():SpreadsheetApp.ContainerInfo;\\n/**Returns a copy of the list of ranges currently providing data for this chart. Use [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html#addRange(Range)) and [`removeRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html#removeRange(Range)) to modify this list.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\nvar ranges \\u003d chartBuilder.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as the chart to be built's data source*/getRanges():SpreadsheetApp.Range[];\\n/**Removes the specified range from the chart this builder modifies. Does not throw an error if\\nthe range is not in this chart.\\n\\nThe range removed must match up with a range added via [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html#addRange(Range));\\notherwise no change is made to the chart. This method cannot be used to partially remove values\\nfrom a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar firstRange \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar secondRange \\u003d sheet.getRange(\\\"A6:B8\\\");\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(firstRange)\\n    // This range will render in a different color\\n    .addRange(secondRange)\\n    .setPosition(5, 5, 0, 0);\\n\\n// Note that you can use either of these two formats, but the range\\n// MUST match up with a range that was added via addRange(), or it\\n// will not be removed, and will not throw an exception\\nchartBuilder.removeRange(firstRange);\\nchartBuilder.removeRange(sheet.getRange(\\\"A6:B8\\\"));\\n\\nvar chart \\u003d chartBuilder.build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to remove.\\n@return this builder, for chaining*/removeRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Changes the type of chart. Not all embedded chart types are currently supported. See [`ChartType`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-type.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param type The type to change this chart into.\\n@return this builder, for chaining*/setChartType(type:Charts.ChartType):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the strategy to use for hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param strategy The strategy to use for hidden rows and columns.\\n@return this builder, for chaining*/setHiddenDimensionStrategy(strategy:Charts.ChartHiddenDimensionStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the merge strategy to use when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), rows are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param mergeStrategy The merge strategy to use.\\n@return this builder, for chaining*/setMergeStrategy(mergeStrategy:Charts.ChartMergeStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the number of rows or columns of the range that should be treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param headers The number of rows or columns to treat as headers. Negative values cause headers\\n    to be auto-detected.\\n@return this builder, for chaining*/setNumHeaders(headers:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets advanced options for this chart. To view a list of the available options, see [Chart\\nconfiguration options](https://developers.google.com/apps-script/chart-configuration-options).\\n\\nThis method doesn't validate the option you specify is valid for this chart type nor if the\\nvalue is of the correct format/structure.\\n\\nThis example shows how to change the title and set a legend.\\n\\n```\\nbuilder.setOption('title', 'Earnings projections');\\nbuilder.setOption('legend', {position: 'top', textStyle: {color: 'blue', fontSize: 16}});\\n```\\n@param option The name of the option.\\n@param value The value of the option.\\n@return This builder, for chaining.*/setOption(option:string,value:Object):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the style for points in the line. By default, points have no particular styles, and only\\nthe line is visible.\\n\\n```\\n// Creates a line chart builder and sets large point style.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setPointStyle(Charts.PointStyle.LARGE);\\n```\\n@param style The style to use for points in the line.\\n@return This builder, useful for chaining.*/setPointStyle(style:Charts.PointStyle):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the position, changing where the chart appears on the sheet. `anchorRowPos` and\\n`anchorColPos` are 1-indexed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param anchorRowPos The chart's top side is anchored in this row.\\n@param anchorColPos The chart's left side is anchored in this column.\\n@param offsetX The chart's upper right-hand corner is offset by this many pixels.\\n@param offsetY The chart's lower left-hand corner is offset by this many pixels.\\n@return this builder, for chaining*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets whether the chart's rows and columns are transposed. If set to `true`, the rows and\\ncolumns are switched. Defaults to `false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param transpose If `true`, the rows and columns used to construct the chart are\\n    transposed.\\n@return this builder, for chaining*/setTransposeRowsAndColumns(transpose:boolean):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Makes the horizontal axis into a logarithmic scale (requires all values to be positive).\\n@return This builder, useful for chaining.*/setXAxisLogScale():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the range for the horizontal axis of the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n\\n```\\n// Creates a scatter chart builder and sets the X-axis range to be 0 to 100.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setXAxisRange(0, 100);\\n```\\n@param start The value for the lowest grid line of the horizontal axis.\\n@param end The value for the highest grid line of the horizontal axis.\\n@return This builder, useful for chaining.*/setXAxisRange(start:number,end:number):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Makes the vertical axis into a logarithmic scale (requires all values to be positive).\\n@return This builder, useful for chaining.*/setYAxisLogScale():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the range for the vertical axis of the chart. If any data points fall outside the range,\\nthe range is expanded to include those data points.\\n\\n```\\n// Creates a scatter chart builder and sets the Y-axis range to be 0 to 100.\\nvar builder \\u003d Charts.newTableChart();\\nbuilder.setYAxisRange(0, 100);\\n```\\n@param start The value for the lowest grid line of the vertical axis.\\n@param end The value for the highest grid line of the vertical axis.\\n@return This builder, useful for chaining.*/setYAxisRange(start:number,end:number):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedScatterChartBuilder;}interface EmbeddedPieChartBuilder{\\n/**Adds a range to the chart this builder modifies. Does not add the range if it has already been\\nadded to the chart.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to add.\\n@return this builder, for chaining*/addRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the chart type to AreaChart and returns an [`EmbeddedAreaChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html).\\n@return a builder for an area chart*/asAreaChart():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the chart type to BarChart and returns an [`EmbeddedBarChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html).\\n@return a builder for a bar chart*/asBarChart():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the chart type to ColumnChart and returns an [`EmbeddedColumnChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html).\\n@return a builder for a column chart*/asColumnChart():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the chart type to ComboChart and returns an [`EmbeddedComboChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html).\\n@return a builder for a combo chart*/asComboChart():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the chart type to HistogramChart and returns an [`EmbeddedHistogramChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html).\\n@return a builder for a histogram chart*/asHistogramChart():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the chart type to LineChart and returns an [`EmbeddedLineChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html).\\n@return a builder for a line chart*/asLineChart():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the chart type to PieChart and returns an [`EmbeddedPieChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html).\\n@return a builder for a pie chart*/asPieChart():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart type to ScatterChart and returns an [`EmbeddedScatterChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html).\\n@return a builder for a scatter chart*/asScatterChart():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the chart type to TableChart and returns an [`EmbeddedTableChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html).\\n@return a builder for a table chart*/asTableChart():SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Builds the chart to reflect all changes made to it.\\n\\nThis method does not automatically draw the chart on top of the spreadsheet. A new chart\\nmust be inserted via `sheet.insertChart(chart)`, and an existing chart should be updated\\nvia `sheet.updateChart(chart)`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@return the created chart, which must still be added to the spreadsheet*/build():SpreadsheetApp.EmbeddedChart;\\n/**Removes all ranges from the chart this builder modifies.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code updates the chart to use only the new ranges while preserving the existing\\n// formatting of the chart.\\nvar chart \\u003d sheet.getCharts()[0];\\nvar newChart \\u003d chart\\n    .modify()\\n    .clearRanges()\\n    .addRange(sheet.getRange(\\\"A1:A5\\\"))\\n    .addRange(sheet.getRange(\\\"B1:B5\\\"))\\n    .build();\\nsheet.updateChart(newChart);\\n```\\n@return this builder, for chaining*/clearRanges():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Returns the current chart type.\\n@return the chart type*/getChartType():Charts.ChartType;\\n/**Return the chart [`ContainerInfo`](https://developers.google.com/apps-script/reference/spreadsheet/container-info.html), which encapsulates where the chart appears on the\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\n// This method returns the exact same data as Chart#getContainerInfo()\\nvar containerInfo \\u003d chartBuilder.getContainer();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainer():SpreadsheetApp.ContainerInfo;\\n/**Returns a copy of the list of ranges currently providing data for this chart. Use [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html#addRange(Range)) and [`removeRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html#removeRange(Range)) to modify this list.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\nvar ranges \\u003d chartBuilder.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as the chart to be built's data source*/getRanges():SpreadsheetApp.Range[];\\n/**Removes the specified range from the chart this builder modifies. Does not throw an error if\\nthe range is not in this chart.\\n\\nThe range removed must match up with a range added via [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html#addRange(Range));\\notherwise no change is made to the chart. This method cannot be used to partially remove values\\nfrom a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar firstRange \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar secondRange \\u003d sheet.getRange(\\\"A6:B8\\\");\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(firstRange)\\n    // This range will render in a different color\\n    .addRange(secondRange)\\n    .setPosition(5, 5, 0, 0);\\n\\n// Note that you can use either of these two formats, but the range\\n// MUST match up with a range that was added via addRange(), or it\\n// will not be removed, and will not throw an exception\\nchartBuilder.removeRange(firstRange);\\nchartBuilder.removeRange(sheet.getRange(\\\"A6:B8\\\"));\\n\\nvar chart \\u003d chartBuilder.build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to remove.\\n@return this builder, for chaining*/removeRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart to be three-dimensional.\\n@return This builder, useful for chaining.*/set3D():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Changes the type of chart. Not all embedded chart types are currently supported. See [`ChartType`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-type.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param type The type to change this chart into.\\n@return this builder, for chaining*/setChartType(type:Charts.ChartType):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the strategy to use for hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param strategy The strategy to use for hidden rows and columns.\\n@return this builder, for chaining*/setHiddenDimensionStrategy(strategy:Charts.ChartHiddenDimensionStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the merge strategy to use when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), rows are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param mergeStrategy The merge strategy to use.\\n@return this builder, for chaining*/setMergeStrategy(mergeStrategy:Charts.ChartMergeStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the number of rows or columns of the range that should be treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param headers The number of rows or columns to treat as headers. Negative values cause headers\\n    to be auto-detected.\\n@return this builder, for chaining*/setNumHeaders(headers:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets advanced options for this chart. To view a list of the available options, see [Chart\\nconfiguration options](https://developers.google.com/apps-script/chart-configuration-options).\\n\\nThis method doesn't validate the option you specify is valid for this chart type nor if the\\nvalue is of the correct format/structure.\\n\\nThis example shows how to change the title and set a legend.\\n\\n```\\nbuilder.setOption('title', 'Earnings projections');\\nbuilder.setOption('legend', {position: 'top', textStyle: {color: 'blue', fontSize: 16}});\\n```\\n@param option The name of the option.\\n@param value The value of the option.\\n@return This builder, for chaining.*/setOption(option:string,value:Object):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position, changing where the chart appears on the sheet. `anchorRowPos` and\\n`anchorColPos` are 1-indexed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param anchorRowPos The chart's top side is anchored in this row.\\n@param anchorColPos The chart's left side is anchored in this column.\\n@param offsetX The chart's upper right-hand corner is offset by this many pixels.\\n@param offsetY The chart's lower left-hand corner is offset by this many pixels.\\n@return this builder, for chaining*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets whether the chart's rows and columns are transposed. If set to `true`, the rows and\\ncolumns are switched. Defaults to `false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param transpose If `true`, the rows and columns used to construct the chart are\\n    transposed.\\n@return this builder, for chaining*/setTransposeRowsAndColumns(transpose:boolean):SpreadsheetApp.EmbeddedChartBuilder;}interface EmbeddedLineChartBuilder{\\n/**Adds a range to the chart this builder modifies. Does not add the range if it has already been\\nadded to the chart.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to add.\\n@return this builder, for chaining*/addRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the chart type to AreaChart and returns an [`EmbeddedAreaChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html).\\n@return a builder for an area chart*/asAreaChart():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the chart type to BarChart and returns an [`EmbeddedBarChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html).\\n@return a builder for a bar chart*/asBarChart():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the chart type to ColumnChart and returns an [`EmbeddedColumnChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html).\\n@return a builder for a column chart*/asColumnChart():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the chart type to ComboChart and returns an [`EmbeddedComboChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html).\\n@return a builder for a combo chart*/asComboChart():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the chart type to HistogramChart and returns an [`EmbeddedHistogramChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html).\\n@return a builder for a histogram chart*/asHistogramChart():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the chart type to LineChart and returns an [`EmbeddedLineChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html).\\n@return a builder for a line chart*/asLineChart():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the chart type to PieChart and returns an [`EmbeddedPieChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html).\\n@return a builder for a pie chart*/asPieChart():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart type to ScatterChart and returns an [`EmbeddedScatterChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html).\\n@return a builder for a scatter chart*/asScatterChart():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the chart type to TableChart and returns an [`EmbeddedTableChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html).\\n@return a builder for a table chart*/asTableChart():SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Builds the chart to reflect all changes made to it.\\n\\nThis method does not automatically draw the chart on top of the spreadsheet. A new chart\\nmust be inserted via `sheet.insertChart(chart)`, and an existing chart should be updated\\nvia `sheet.updateChart(chart)`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@return the created chart, which must still be added to the spreadsheet*/build():SpreadsheetApp.EmbeddedChart;\\n/**Removes all ranges from the chart this builder modifies.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code updates the chart to use only the new ranges while preserving the existing\\n// formatting of the chart.\\nvar chart \\u003d sheet.getCharts()[0];\\nvar newChart \\u003d chart\\n    .modify()\\n    .clearRanges()\\n    .addRange(sheet.getRange(\\\"A1:A5\\\"))\\n    .addRange(sheet.getRange(\\\"B1:B5\\\"))\\n    .build();\\nsheet.updateChart(newChart);\\n```\\n@return this builder, for chaining*/clearRanges():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Returns the current chart type.\\n@return the chart type*/getChartType():Charts.ChartType;\\n/**Return the chart [`ContainerInfo`](https://developers.google.com/apps-script/reference/spreadsheet/container-info.html), which encapsulates where the chart appears on the\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\n// This method returns the exact same data as Chart#getContainerInfo()\\nvar containerInfo \\u003d chartBuilder.getContainer();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainer():SpreadsheetApp.ContainerInfo;\\n/**Returns a copy of the list of ranges currently providing data for this chart. Use [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html#addRange(Range)) and [`removeRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html#removeRange(Range)) to modify this list.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\nvar ranges \\u003d chartBuilder.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as the chart to be built's data source*/getRanges():SpreadsheetApp.Range[];\\n/**Removes the specified range from the chart this builder modifies. Does not throw an error if\\nthe range is not in this chart.\\n\\nThe range removed must match up with a range added via [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html#addRange(Range));\\notherwise no change is made to the chart. This method cannot be used to partially remove values\\nfrom a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar firstRange \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar secondRange \\u003d sheet.getRange(\\\"A6:B8\\\");\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(firstRange)\\n    // This range will render in a different color\\n    .addRange(secondRange)\\n    .setPosition(5, 5, 0, 0);\\n\\n// Note that you can use either of these two formats, but the range\\n// MUST match up with a range that was added via addRange(), or it\\n// will not be removed, and will not throw an exception\\nchartBuilder.removeRange(firstRange);\\nchartBuilder.removeRange(sheet.getRange(\\\"A6:B8\\\"));\\n\\nvar chart \\u003d chartBuilder.build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to remove.\\n@return this builder, for chaining*/removeRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Changes the type of chart. Not all embedded chart types are currently supported. See [`ChartType`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-type.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param type The type to change this chart into.\\n@return this builder, for chaining*/setChartType(type:Charts.ChartType):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the style to use for curves in the chart. See [`CurveStyle`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/curve-style.html) for allowed curve\\nstyles.\\n\\n```\\n// Creates a line chart builder and curves the lines in the chart.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setCurveStyle(Charts.CurveStyle.SMOOTH)\\n```\\n@param style The style for curves in the chart.\\n@return This builder, useful for chaining.*/setCurveStyle(style:Charts.CurveStyle):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the strategy to use for hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param strategy The strategy to use for hidden rows and columns.\\n@return this builder, for chaining*/setHiddenDimensionStrategy(strategy:Charts.ChartHiddenDimensionStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the merge strategy to use when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), rows are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param mergeStrategy The merge strategy to use.\\n@return this builder, for chaining*/setMergeStrategy(mergeStrategy:Charts.ChartMergeStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the number of rows or columns of the range that should be treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param headers The number of rows or columns to treat as headers. Negative values cause headers\\n    to be auto-detected.\\n@return this builder, for chaining*/setNumHeaders(headers:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets advanced options for this chart. To view a list of the available options, see [Chart\\nconfiguration options](https://developers.google.com/apps-script/chart-configuration-options).\\n\\nThis method doesn't validate the option you specify is valid for this chart type nor if the\\nvalue is of the correct format/structure.\\n\\nThis example shows how to change the title and set a legend.\\n\\n```\\nbuilder.setOption('title', 'Earnings projections');\\nbuilder.setOption('legend', {position: 'top', textStyle: {color: 'blue', fontSize: 16}});\\n```\\n@param option The name of the option.\\n@param value The value of the option.\\n@return This builder, for chaining.*/setOption(option:string,value:Object):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the style for points in the line. By default, points have no particular styles, and only\\nthe line is visible.\\n\\n```\\n// Creates a line chart builder and sets large point style.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setPointStyle(Charts.PointStyle.LARGE);\\n```\\n@param style The style to use for points in the line.\\n@return This builder, useful for chaining.*/setPointStyle(style:Charts.PointStyle):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the position, changing where the chart appears on the sheet. `anchorRowPos` and\\n`anchorColPos` are 1-indexed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param anchorRowPos The chart's top side is anchored in this row.\\n@param anchorColPos The chart's left side is anchored in this column.\\n@param offsetX The chart's upper right-hand corner is offset by this many pixels.\\n@param offsetY The chart's lower left-hand corner is offset by this many pixels.\\n@return this builder, for chaining*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the range for the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n@param start The value for the lowest grid line of the range axis.\\n@param end The value for the highest grid line of the range axis.\\n@return This builder, useful for chaining.*/setRange(start:number,end:number):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets whether the chart's rows and columns are transposed. If set to `true`, the rows and\\ncolumns are switched. Defaults to `false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param transpose If `true`, the rows and columns used to construct the chart are\\n    transposed.\\n@return this builder, for chaining*/setTransposeRowsAndColumns(transpose:boolean):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Makes the range axis into a logarithmic scale (requires all values to be positive). The range\\naxis are the vertical axis for vertical charts (such as line, area, or column) and the\\nhorizontal axis for horizontal charts (such as bar).\\n@return This builder, useful for chaining.*/useLogScale():SpreadsheetApp.EmbeddedLineChartBuilder;}interface EmbeddedHistogramChartBuilder{\\n/**Adds a range to the chart this builder modifies. Does not add the range if it has already been\\nadded to the chart.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to add.\\n@return this builder, for chaining*/addRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the chart type to AreaChart and returns an [`EmbeddedAreaChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html).\\n@return a builder for an area chart*/asAreaChart():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the chart type to BarChart and returns an [`EmbeddedBarChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html).\\n@return a builder for a bar chart*/asBarChart():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the chart type to ColumnChart and returns an [`EmbeddedColumnChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html).\\n@return a builder for a column chart*/asColumnChart():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the chart type to ComboChart and returns an [`EmbeddedComboChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html).\\n@return a builder for a combo chart*/asComboChart():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the chart type to HistogramChart and returns an [`EmbeddedHistogramChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html).\\n@return a builder for a histogram chart*/asHistogramChart():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the chart type to LineChart and returns an [`EmbeddedLineChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html).\\n@return a builder for a line chart*/asLineChart():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the chart type to PieChart and returns an [`EmbeddedPieChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html).\\n@return a builder for a pie chart*/asPieChart():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart type to ScatterChart and returns an [`EmbeddedScatterChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html).\\n@return a builder for a scatter chart*/asScatterChart():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the chart type to TableChart and returns an [`EmbeddedTableChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html).\\n@return a builder for a table chart*/asTableChart():SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Builds the chart to reflect all changes made to it.\\n\\nThis method does not automatically draw the chart on top of the spreadsheet. A new chart\\nmust be inserted via `sheet.insertChart(chart)`, and an existing chart should be updated\\nvia `sheet.updateChart(chart)`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@return the created chart, which must still be added to the spreadsheet*/build():SpreadsheetApp.EmbeddedChart;\\n/**Removes all ranges from the chart this builder modifies.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code updates the chart to use only the new ranges while preserving the existing\\n// formatting of the chart.\\nvar chart \\u003d sheet.getCharts()[0];\\nvar newChart \\u003d chart\\n    .modify()\\n    .clearRanges()\\n    .addRange(sheet.getRange(\\\"A1:A5\\\"))\\n    .addRange(sheet.getRange(\\\"B1:B5\\\"))\\n    .build();\\nsheet.updateChart(newChart);\\n```\\n@return this builder, for chaining*/clearRanges():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Returns the current chart type.\\n@return the chart type*/getChartType():Charts.ChartType;\\n/**Return the chart [`ContainerInfo`](https://developers.google.com/apps-script/reference/spreadsheet/container-info.html), which encapsulates where the chart appears on the\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\n// This method returns the exact same data as Chart#getContainerInfo()\\nvar containerInfo \\u003d chartBuilder.getContainer();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainer():SpreadsheetApp.ContainerInfo;\\n/**Returns a copy of the list of ranges currently providing data for this chart. Use [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html#addRange(Range)) and [`removeRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html#removeRange(Range)) to modify this list.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\nvar ranges \\u003d chartBuilder.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as the chart to be built's data source*/getRanges():SpreadsheetApp.Range[];\\n/**Removes the specified range from the chart this builder modifies. Does not throw an error if\\nthe range is not in this chart.\\n\\nThe range removed must match up with a range added via [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html#addRange(Range));\\notherwise no change is made to the chart. This method cannot be used to partially remove values\\nfrom a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar firstRange \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar secondRange \\u003d sheet.getRange(\\\"A6:B8\\\");\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(firstRange)\\n    // This range will render in a different color\\n    .addRange(secondRange)\\n    .setPosition(5, 5, 0, 0);\\n\\n// Note that you can use either of these two formats, but the range\\n// MUST match up with a range that was added via addRange(), or it\\n// will not be removed, and will not throw an exception\\nchartBuilder.removeRange(firstRange);\\nchartBuilder.removeRange(sheet.getRange(\\\"A6:B8\\\"));\\n\\nvar chart \\u003d chartBuilder.build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to remove.\\n@return this builder, for chaining*/removeRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Changes the type of chart. Not all embedded chart types are currently supported. See [`ChartType`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-type.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param type The type to change this chart into.\\n@return this builder, for chaining*/setChartType(type:Charts.ChartType):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the strategy to use for hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param strategy The strategy to use for hidden rows and columns.\\n@return this builder, for chaining*/setHiddenDimensionStrategy(strategy:Charts.ChartHiddenDimensionStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the merge strategy to use when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), rows are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param mergeStrategy The merge strategy to use.\\n@return this builder, for chaining*/setMergeStrategy(mergeStrategy:Charts.ChartMergeStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the number of rows or columns of the range that should be treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param headers The number of rows or columns to treat as headers. Negative values cause headers\\n    to be auto-detected.\\n@return this builder, for chaining*/setNumHeaders(headers:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets advanced options for this chart. To view a list of the available options, see [Chart\\nconfiguration options](https://developers.google.com/apps-script/chart-configuration-options).\\n\\nThis method doesn't validate the option you specify is valid for this chart type nor if the\\nvalue is of the correct format/structure.\\n\\nThis example shows how to change the title and set a legend.\\n\\n```\\nbuilder.setOption('title', 'Earnings projections');\\nbuilder.setOption('legend', {position: 'top', textStyle: {color: 'blue', fontSize: 16}});\\n```\\n@param option The name of the option.\\n@param value The value of the option.\\n@return This builder, for chaining.*/setOption(option:string,value:Object):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position, changing where the chart appears on the sheet. `anchorRowPos` and\\n`anchorColPos` are 1-indexed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param anchorRowPos The chart's top side is anchored in this row.\\n@param anchorColPos The chart's left side is anchored in this column.\\n@param offsetX The chart's upper right-hand corner is offset by this many pixels.\\n@param offsetY The chart's lower left-hand corner is offset by this many pixels.\\n@return this builder, for chaining*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the range for the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n@param start The value for the lowest grid line of the range axis.\\n@param end The value for the highest grid line of the range axis.\\n@return This builder, useful for chaining.*/setRange(start:number,end:number):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Uses stacked lines, meaning that line and bar values are stacked (accumulated). By default,\\nthere is no stacking.\\n@return This builder, useful for chaining.*/setStacked():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets whether the chart's rows and columns are transposed. If set to `true`, the rows and\\ncolumns are switched. Defaults to `false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param transpose If `true`, the rows and columns used to construct the chart are\\n    transposed.\\n@return this builder, for chaining*/setTransposeRowsAndColumns(transpose:boolean):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Makes the range axis into a logarithmic scale (requires all values to be positive). The range\\naxis are the vertical axis for vertical charts (such as line, area, or column) and the\\nhorizontal axis for horizontal charts (such as bar).\\n@return This builder, useful for chaining.*/useLogScale():SpreadsheetApp.EmbeddedHistogramChartBuilder;}interface EmbeddedComboChartBuilder{\\n/**Adds a range to the chart this builder modifies. Does not add the range if it has already been\\nadded to the chart.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to add.\\n@return this builder, for chaining*/addRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the chart type to AreaChart and returns an [`EmbeddedAreaChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html).\\n@return a builder for an area chart*/asAreaChart():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the chart type to BarChart and returns an [`EmbeddedBarChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html).\\n@return a builder for a bar chart*/asBarChart():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the chart type to ColumnChart and returns an [`EmbeddedColumnChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html).\\n@return a builder for a column chart*/asColumnChart():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the chart type to ComboChart and returns an [`EmbeddedComboChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html).\\n@return a builder for a combo chart*/asComboChart():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the chart type to HistogramChart and returns an [`EmbeddedHistogramChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html).\\n@return a builder for a histogram chart*/asHistogramChart():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the chart type to LineChart and returns an [`EmbeddedLineChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html).\\n@return a builder for a line chart*/asLineChart():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the chart type to PieChart and returns an [`EmbeddedPieChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html).\\n@return a builder for a pie chart*/asPieChart():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart type to ScatterChart and returns an [`EmbeddedScatterChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html).\\n@return a builder for a scatter chart*/asScatterChart():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the chart type to TableChart and returns an [`EmbeddedTableChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html).\\n@return a builder for a table chart*/asTableChart():SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Builds the chart to reflect all changes made to it.\\n\\nThis method does not automatically draw the chart on top of the spreadsheet. A new chart\\nmust be inserted via `sheet.insertChart(chart)`, and an existing chart should be updated\\nvia `sheet.updateChart(chart)`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@return the created chart, which must still be added to the spreadsheet*/build():SpreadsheetApp.EmbeddedChart;\\n/**Removes all ranges from the chart this builder modifies.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code updates the chart to use only the new ranges while preserving the existing\\n// formatting of the chart.\\nvar chart \\u003d sheet.getCharts()[0];\\nvar newChart \\u003d chart\\n    .modify()\\n    .clearRanges()\\n    .addRange(sheet.getRange(\\\"A1:A5\\\"))\\n    .addRange(sheet.getRange(\\\"B1:B5\\\"))\\n    .build();\\nsheet.updateChart(newChart);\\n```\\n@return this builder, for chaining*/clearRanges():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Returns the current chart type.\\n@return the chart type*/getChartType():Charts.ChartType;\\n/**Return the chart [`ContainerInfo`](https://developers.google.com/apps-script/reference/spreadsheet/container-info.html), which encapsulates where the chart appears on the\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\n// This method returns the exact same data as Chart#getContainerInfo()\\nvar containerInfo \\u003d chartBuilder.getContainer();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainer():SpreadsheetApp.ContainerInfo;\\n/**Returns a copy of the list of ranges currently providing data for this chart. Use [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html#addRange(Range)) and [`removeRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html#removeRange(Range)) to modify this list.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\nvar ranges \\u003d chartBuilder.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as the chart to be built's data source*/getRanges():SpreadsheetApp.Range[];\\n/**Removes the specified range from the chart this builder modifies. Does not throw an error if\\nthe range is not in this chart.\\n\\nThe range removed must match up with a range added via [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html#addRange(Range));\\notherwise no change is made to the chart. This method cannot be used to partially remove values\\nfrom a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar firstRange \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar secondRange \\u003d sheet.getRange(\\\"A6:B8\\\");\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(firstRange)\\n    // This range will render in a different color\\n    .addRange(secondRange)\\n    .setPosition(5, 5, 0, 0);\\n\\n// Note that you can use either of these two formats, but the range\\n// MUST match up with a range that was added via addRange(), or it\\n// will not be removed, and will not throw an exception\\nchartBuilder.removeRange(firstRange);\\nchartBuilder.removeRange(sheet.getRange(\\\"A6:B8\\\"));\\n\\nvar chart \\u003d chartBuilder.build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to remove.\\n@return this builder, for chaining*/removeRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Changes the type of chart. Not all embedded chart types are currently supported. See [`ChartType`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-type.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param type The type to change this chart into.\\n@return this builder, for chaining*/setChartType(type:Charts.ChartType):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the strategy to use for hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param strategy The strategy to use for hidden rows and columns.\\n@return this builder, for chaining*/setHiddenDimensionStrategy(strategy:Charts.ChartHiddenDimensionStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the merge strategy to use when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), rows are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param mergeStrategy The merge strategy to use.\\n@return this builder, for chaining*/setMergeStrategy(mergeStrategy:Charts.ChartMergeStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the number of rows or columns of the range that should be treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param headers The number of rows or columns to treat as headers. Negative values cause headers\\n    to be auto-detected.\\n@return this builder, for chaining*/setNumHeaders(headers:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets advanced options for this chart. To view a list of the available options, see [Chart\\nconfiguration options](https://developers.google.com/apps-script/chart-configuration-options).\\n\\nThis method doesn't validate the option you specify is valid for this chart type nor if the\\nvalue is of the correct format/structure.\\n\\nThis example shows how to change the title and set a legend.\\n\\n```\\nbuilder.setOption('title', 'Earnings projections');\\nbuilder.setOption('legend', {position: 'top', textStyle: {color: 'blue', fontSize: 16}});\\n```\\n@param option The name of the option.\\n@param value The value of the option.\\n@return This builder, for chaining.*/setOption(option:string,value:Object):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position, changing where the chart appears on the sheet. `anchorRowPos` and\\n`anchorColPos` are 1-indexed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param anchorRowPos The chart's top side is anchored in this row.\\n@param anchorColPos The chart's left side is anchored in this column.\\n@param offsetX The chart's upper right-hand corner is offset by this many pixels.\\n@param offsetY The chart's lower left-hand corner is offset by this many pixels.\\n@return this builder, for chaining*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the range for the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n@param start The value for the lowest grid line of the range axis.\\n@param end The value for the highest grid line of the range axis.\\n@return This builder, useful for chaining.*/setRange(start:number,end:number):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Uses stacked lines, meaning that line and bar values are stacked (accumulated). By default,\\nthere is no stacking.\\n@return This builder, useful for chaining.*/setStacked():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets whether the chart's rows and columns are transposed. If set to `true`, the rows and\\ncolumns are switched. Defaults to `false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param transpose If `true`, the rows and columns used to construct the chart are\\n    transposed.\\n@return this builder, for chaining*/setTransposeRowsAndColumns(transpose:boolean):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Makes the range axis into a logarithmic scale (requires all values to be positive). The range\\naxis are the vertical axis for vertical charts (such as line, area, or column) and the\\nhorizontal axis for horizontal charts (such as bar).\\n@return This builder, useful for chaining.*/useLogScale():SpreadsheetApp.EmbeddedComboChartBuilder;}interface EmbeddedColumnChartBuilder{\\n/**Adds a range to the chart this builder modifies. Does not add the range if it has already been\\nadded to the chart.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to add.\\n@return this builder, for chaining*/addRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the chart type to AreaChart and returns an [`EmbeddedAreaChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html).\\n@return a builder for an area chart*/asAreaChart():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the chart type to BarChart and returns an [`EmbeddedBarChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html).\\n@return a builder for a bar chart*/asBarChart():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the chart type to ColumnChart and returns an [`EmbeddedColumnChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html).\\n@return a builder for a column chart*/asColumnChart():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the chart type to ComboChart and returns an [`EmbeddedComboChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html).\\n@return a builder for a combo chart*/asComboChart():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the chart type to HistogramChart and returns an [`EmbeddedHistogramChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html).\\n@return a builder for a histogram chart*/asHistogramChart():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the chart type to LineChart and returns an [`EmbeddedLineChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html).\\n@return a builder for a line chart*/asLineChart():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the chart type to PieChart and returns an [`EmbeddedPieChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html).\\n@return a builder for a pie chart*/asPieChart():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart type to ScatterChart and returns an [`EmbeddedScatterChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html).\\n@return a builder for a scatter chart*/asScatterChart():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the chart type to TableChart and returns an [`EmbeddedTableChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html).\\n@return a builder for a table chart*/asTableChart():SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Builds the chart to reflect all changes made to it.\\n\\nThis method does not automatically draw the chart on top of the spreadsheet. A new chart\\nmust be inserted via `sheet.insertChart(chart)`, and an existing chart should be updated\\nvia `sheet.updateChart(chart)`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@return the created chart, which must still be added to the spreadsheet*/build():SpreadsheetApp.EmbeddedChart;\\n/**Removes all ranges from the chart this builder modifies.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code updates the chart to use only the new ranges while preserving the existing\\n// formatting of the chart.\\nvar chart \\u003d sheet.getCharts()[0];\\nvar newChart \\u003d chart\\n    .modify()\\n    .clearRanges()\\n    .addRange(sheet.getRange(\\\"A1:A5\\\"))\\n    .addRange(sheet.getRange(\\\"B1:B5\\\"))\\n    .build();\\nsheet.updateChart(newChart);\\n```\\n@return this builder, for chaining*/clearRanges():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Returns the current chart type.\\n@return the chart type*/getChartType():Charts.ChartType;\\n/**Return the chart [`ContainerInfo`](https://developers.google.com/apps-script/reference/spreadsheet/container-info.html), which encapsulates where the chart appears on the\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\n// This method returns the exact same data as Chart#getContainerInfo()\\nvar containerInfo \\u003d chartBuilder.getContainer();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainer():SpreadsheetApp.ContainerInfo;\\n/**Returns a copy of the list of ranges currently providing data for this chart. Use [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html#addRange(Range)) and [`removeRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html#removeRange(Range)) to modify this list.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\nvar ranges \\u003d chartBuilder.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as the chart to be built's data source*/getRanges():SpreadsheetApp.Range[];\\n/**Removes the specified range from the chart this builder modifies. Does not throw an error if\\nthe range is not in this chart.\\n\\nThe range removed must match up with a range added via [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html#addRange(Range));\\notherwise no change is made to the chart. This method cannot be used to partially remove values\\nfrom a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar firstRange \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar secondRange \\u003d sheet.getRange(\\\"A6:B8\\\");\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(firstRange)\\n    // This range will render in a different color\\n    .addRange(secondRange)\\n    .setPosition(5, 5, 0, 0);\\n\\n// Note that you can use either of these two formats, but the range\\n// MUST match up with a range that was added via addRange(), or it\\n// will not be removed, and will not throw an exception\\nchartBuilder.removeRange(firstRange);\\nchartBuilder.removeRange(sheet.getRange(\\\"A6:B8\\\"));\\n\\nvar chart \\u003d chartBuilder.build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to remove.\\n@return this builder, for chaining*/removeRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Changes the type of chart. Not all embedded chart types are currently supported. See [`ChartType`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-type.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param type The type to change this chart into.\\n@return this builder, for chaining*/setChartType(type:Charts.ChartType):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the strategy to use for hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param strategy The strategy to use for hidden rows and columns.\\n@return this builder, for chaining*/setHiddenDimensionStrategy(strategy:Charts.ChartHiddenDimensionStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the merge strategy to use when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), rows are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param mergeStrategy The merge strategy to use.\\n@return this builder, for chaining*/setMergeStrategy(mergeStrategy:Charts.ChartMergeStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the number of rows or columns of the range that should be treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param headers The number of rows or columns to treat as headers. Negative values cause headers\\n    to be auto-detected.\\n@return this builder, for chaining*/setNumHeaders(headers:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets advanced options for this chart. To view a list of the available options, see [Chart\\nconfiguration options](https://developers.google.com/apps-script/chart-configuration-options).\\n\\nThis method doesn't validate the option you specify is valid for this chart type nor if the\\nvalue is of the correct format/structure.\\n\\nThis example shows how to change the title and set a legend.\\n\\n```\\nbuilder.setOption('title', 'Earnings projections');\\nbuilder.setOption('legend', {position: 'top', textStyle: {color: 'blue', fontSize: 16}});\\n```\\n@param option The name of the option.\\n@param value The value of the option.\\n@return This builder, for chaining.*/setOption(option:string,value:Object):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position, changing where the chart appears on the sheet. `anchorRowPos` and\\n`anchorColPos` are 1-indexed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param anchorRowPos The chart's top side is anchored in this row.\\n@param anchorColPos The chart's left side is anchored in this column.\\n@param offsetX The chart's upper right-hand corner is offset by this many pixels.\\n@param offsetY The chart's lower left-hand corner is offset by this many pixels.\\n@return this builder, for chaining*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the range for the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n@param start The value for the lowest grid line of the range axis.\\n@param end The value for the highest grid line of the range axis.\\n@return This builder, useful for chaining.*/setRange(start:number,end:number):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Uses stacked lines, meaning that line and bar values are stacked (accumulated). By default,\\nthere is no stacking.\\n@return This builder, useful for chaining.*/setStacked():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets whether the chart's rows and columns are transposed. If set to `true`, the rows and\\ncolumns are switched. Defaults to `false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param transpose If `true`, the rows and columns used to construct the chart are\\n    transposed.\\n@return this builder, for chaining*/setTransposeRowsAndColumns(transpose:boolean):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Makes the range axis into a logarithmic scale (requires all values to be positive). The range\\naxis are the vertical axis for vertical charts (such as line, area, or column) and the\\nhorizontal axis for horizontal charts (such as bar).\\n@return This builder, useful for chaining.*/useLogScale():SpreadsheetApp.EmbeddedColumnChartBuilder;}interface EmbeddedChartBuilder{\\n/**Adds a range to the chart this builder modifies. Does not add the range if it has already been\\nadded to the chart.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to add.\\n@return this builder, for chaining*/addRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the chart type to AreaChart and returns an [`EmbeddedAreaChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html).\\n@return a builder for an area chart*/asAreaChart():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the chart type to BarChart and returns an [`EmbeddedBarChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html).\\n@return a builder for a bar chart*/asBarChart():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the chart type to ColumnChart and returns an [`EmbeddedColumnChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html).\\n@return a builder for a column chart*/asColumnChart():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the chart type to ComboChart and returns an [`EmbeddedComboChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html).\\n@return a builder for a combo chart*/asComboChart():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the chart type to HistogramChart and returns an [`EmbeddedHistogramChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html).\\n@return a builder for a histogram chart*/asHistogramChart():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the chart type to LineChart and returns an [`EmbeddedLineChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html).\\n@return a builder for a line chart*/asLineChart():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the chart type to PieChart and returns an [`EmbeddedPieChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html).\\n@return a builder for a pie chart*/asPieChart():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart type to ScatterChart and returns an [`EmbeddedScatterChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html).\\n@return a builder for a scatter chart*/asScatterChart():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the chart type to TableChart and returns an [`EmbeddedTableChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html).\\n@return a builder for a table chart*/asTableChart():SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Builds the chart to reflect all changes made to it.\\n\\nThis method does not automatically draw the chart on top of the spreadsheet. A new chart\\nmust be inserted via `sheet.insertChart(chart)`, and an existing chart should be updated\\nvia `sheet.updateChart(chart)`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@return the created chart, which must still be added to the spreadsheet*/build():SpreadsheetApp.EmbeddedChart;\\n/**Removes all ranges from the chart this builder modifies.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code updates the chart to use only the new ranges while preserving the existing\\n// formatting of the chart.\\nvar chart \\u003d sheet.getCharts()[0];\\nvar newChart \\u003d chart\\n    .modify()\\n    .clearRanges()\\n    .addRange(sheet.getRange(\\\"A1:A5\\\"))\\n    .addRange(sheet.getRange(\\\"B1:B5\\\"))\\n    .build();\\nsheet.updateChart(newChart);\\n```\\n@return this builder, for chaining*/clearRanges():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Returns the current chart type.\\n@return the chart type*/getChartType():Charts.ChartType;\\n/**Return the chart [`ContainerInfo`](https://developers.google.com/apps-script/reference/spreadsheet/container-info.html), which encapsulates where the chart appears on the\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\n// This method returns the exact same data as Chart#getContainerInfo()\\nvar containerInfo \\u003d chartBuilder.getContainer();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainer():SpreadsheetApp.ContainerInfo;\\n/**Returns a copy of the list of ranges currently providing data for this chart. Use [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-chart-builder.html#addRange(Range)) and [`removeRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-chart-builder.html#removeRange(Range)) to modify this list.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\nvar ranges \\u003d chartBuilder.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as the chart to be built's data source*/getRanges():SpreadsheetApp.Range[];\\n/**Removes the specified range from the chart this builder modifies. Does not throw an error if\\nthe range is not in this chart.\\n\\nThe range removed must match up with a range added via [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-chart-builder.html#addRange(Range));\\notherwise no change is made to the chart. This method cannot be used to partially remove values\\nfrom a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar firstRange \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar secondRange \\u003d sheet.getRange(\\\"A6:B8\\\");\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(firstRange)\\n    // This range will render in a different color\\n    .addRange(secondRange)\\n    .setPosition(5, 5, 0, 0);\\n\\n// Note that you can use either of these two formats, but the range\\n// MUST match up with a range that was added via addRange(), or it\\n// will not be removed, and will not throw an exception\\nchartBuilder.removeRange(firstRange);\\nchartBuilder.removeRange(sheet.getRange(\\\"A6:B8\\\"));\\n\\nvar chart \\u003d chartBuilder.build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to remove.\\n@return this builder, for chaining*/removeRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Changes the type of chart. Not all embedded chart types are currently supported. See [`ChartType`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-type.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param type The type to change this chart into.\\n@return this builder, for chaining*/setChartType(type:Charts.ChartType):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the strategy to use for hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param strategy The strategy to use for hidden rows and columns.\\n@return this builder, for chaining*/setHiddenDimensionStrategy(strategy:Charts.ChartHiddenDimensionStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the merge strategy to use when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), rows are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param mergeStrategy The merge strategy to use.\\n@return this builder, for chaining*/setMergeStrategy(mergeStrategy:Charts.ChartMergeStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the number of rows or columns of the range that should be treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param headers The number of rows or columns to treat as headers. Negative values cause headers\\n    to be auto-detected.\\n@return this builder, for chaining*/setNumHeaders(headers:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets advanced options for this chart. To view a list of the available options, see [Chart\\nconfiguration options](https://developers.google.com/apps-script/chart-configuration-options).\\n\\nThis method doesn't validate the option you specify is valid for this chart type nor if the\\nvalue is of the correct format/structure.\\n\\nThis example shows how to change the title and set a legend.\\n\\n```\\nbuilder.setOption('title', 'Earnings projections');\\nbuilder.setOption('legend', {position: 'top', textStyle: {color: 'blue', fontSize: 16}});\\n```\\n@param option The name of the option.\\n@param value The value of the option.\\n@return This builder, for chaining.*/setOption(option:string,value:Object):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position, changing where the chart appears on the sheet. `anchorRowPos` and\\n`anchorColPos` are 1-indexed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param anchorRowPos The chart's top side is anchored in this row.\\n@param anchorColPos The chart's left side is anchored in this column.\\n@param offsetX The chart's upper right-hand corner is offset by this many pixels.\\n@param offsetY The chart's lower left-hand corner is offset by this many pixels.\\n@return this builder, for chaining*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets whether the chart's rows and columns are transposed. If set to `true`, the rows and\\ncolumns are switched. Defaults to `false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param transpose If `true`, the rows and columns used to construct the chart are\\n    transposed.\\n@return this builder, for chaining*/setTransposeRowsAndColumns(transpose:boolean):SpreadsheetApp.EmbeddedChartBuilder;}interface EmbeddedChart{\\n/**Casts to a data source chart instance if the chart is a data source chart, or `null`\\notherwise.\\n@return The data source chart.*/asDataSourceChart():SpreadsheetApp.DataSourceChart;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;\\n/**Returns a stable identifier for the chart that is unique across the spreadsheet containing the\\nchart or `null` if the chart is not in a spreadsheet.\\n@return A stable chart identifier.*/getChartId():Integer;\\n/**Returns information about where the chart is positioned within a sheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nvar containerInfo \\u003d chart.getContainerInfo();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainerInfo():SpreadsheetApp.ContainerInfo;\\n/**Returns the strategy to use for handling hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build()\\n\\n// Logs the strategy to use for hidden rows and columns which is\\n// Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS in this case.\\nLogger.log(chart.getHiddenDimensionStrategy());\\n```\\n@return The strategy to use for hidden rows and columns.*/getHiddenDimensionStrategy():Charts.ChartHiddenDimensionStrategy;\\n/**Returns the merge strategy used when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html#MERGE_ROWS), row are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html#MERGE_COLUMNS), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html#MERGE_COLUMNS).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C1:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build()\\n\\n// Logs whether rows of multiple ranges are merged, which is MERGE_ROWS in this case.\\nLogger.log(chart.getMergeStrategy());\\n```\\n@return [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html#MERGE_ROWS) if rows are merged across multiple\\n    ranges; [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html#MERGE_COLUMNS) if columns are merged\\n    across multiple ranges*/getMergeStrategy():Charts.ChartMergeStrategy;\\n/**Returns the number of rows or columns the range that are treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build()\\n\\n// Logs the number of rows or columns to use as headers, which is 1 in this case.\\nLogger.log(chart.getHeaders());\\n```\\n@return The number of rows or columns treated as headers. Negative values indicate the headers\\n    are auto-detected.*/getNumHeaders():Integer;\\n/**Returns the options for this chart, such as height, colors, and axes.\\n\\nThe returned options are immutable.\\n@return The options for this chart, such as height, colors, and axes.*/getOptions():Charts.ChartOptions;\\n/**Returns the ranges that this chart uses as a data source.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nvar ranges \\u003d chart.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as this chart's data source*/getRanges():SpreadsheetApp.Range[];\\n/**If `true`, the rows and columns used to populate the chart are switched. Defaults to\\n`false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .addRange(range)\\n    .setChartType(Charts.ChartType.BAR)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build()\\n\\n// Logs whether rows and columns should be transposed, which is true in this case.\\nLogger.log(chart.getTransposeRowsAndColumns());\\n```\\n@return `true` if the rows and columns used to construct the chart are transposed.*/getTransposeRowsAndColumns():boolean;\\n/**Returns an [`EmbeddedChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-chart-builder.html) that can be used to modify this chart. Invoke `sheet.updateChart(chart)` to save any changes.\\n\\n```\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar chart \\u003d sheet.getCharts()[0];\\nchart \\u003d chart.modify()\\n    .setOption('width', 800)\\n    .setOption('height', 640)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\nsheet.updateChart(chart);\\n```\\n@return a builder for creating embedded charts*/modify():SpreadsheetApp.EmbeddedChartBuilder;}interface EmbeddedBarChartBuilder{\\n/**Adds a range to the chart this builder modifies. Does not add the range if it has already been\\nadded to the chart.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to add.\\n@return this builder, for chaining*/addRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the chart type to AreaChart and returns an [`EmbeddedAreaChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html).\\n@return a builder for an area chart*/asAreaChart():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the chart type to BarChart and returns an [`EmbeddedBarChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html).\\n@return a builder for a bar chart*/asBarChart():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the chart type to ColumnChart and returns an [`EmbeddedColumnChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html).\\n@return a builder for a column chart*/asColumnChart():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the chart type to ComboChart and returns an [`EmbeddedComboChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html).\\n@return a builder for a combo chart*/asComboChart():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the chart type to HistogramChart and returns an [`EmbeddedHistogramChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html).\\n@return a builder for a histogram chart*/asHistogramChart():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the chart type to LineChart and returns an [`EmbeddedLineChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html).\\n@return a builder for a line chart*/asLineChart():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the chart type to PieChart and returns an [`EmbeddedPieChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html).\\n@return a builder for a pie chart*/asPieChart():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart type to ScatterChart and returns an [`EmbeddedScatterChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html).\\n@return a builder for a scatter chart*/asScatterChart():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the chart type to TableChart and returns an [`EmbeddedTableChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html).\\n@return a builder for a table chart*/asTableChart():SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Builds the chart to reflect all changes made to it.\\n\\nThis method does not automatically draw the chart on top of the spreadsheet. A new chart\\nmust be inserted via `sheet.insertChart(chart)`, and an existing chart should be updated\\nvia `sheet.updateChart(chart)`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@return the created chart, which must still be added to the spreadsheet*/build():SpreadsheetApp.EmbeddedChart;\\n/**Removes all ranges from the chart this builder modifies.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code updates the chart to use only the new ranges while preserving the existing\\n// formatting of the chart.\\nvar chart \\u003d sheet.getCharts()[0];\\nvar newChart \\u003d chart\\n    .modify()\\n    .clearRanges()\\n    .addRange(sheet.getRange(\\\"A1:A5\\\"))\\n    .addRange(sheet.getRange(\\\"B1:B5\\\"))\\n    .build();\\nsheet.updateChart(newChart);\\n```\\n@return this builder, for chaining*/clearRanges():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Returns the current chart type.\\n@return the chart type*/getChartType():Charts.ChartType;\\n/**Return the chart [`ContainerInfo`](https://developers.google.com/apps-script/reference/spreadsheet/container-info.html), which encapsulates where the chart appears on the\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\n// This method returns the exact same data as Chart#getContainerInfo()\\nvar containerInfo \\u003d chartBuilder.getContainer();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainer():SpreadsheetApp.ContainerInfo;\\n/**Returns a copy of the list of ranges currently providing data for this chart. Use [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html#addRange(Range)) and [`removeRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html#removeRange(Range)) to modify this list.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\nvar ranges \\u003d chartBuilder.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as the chart to be built's data source*/getRanges():SpreadsheetApp.Range[];\\n/**Removes the specified range from the chart this builder modifies. Does not throw an error if\\nthe range is not in this chart.\\n\\nThe range removed must match up with a range added via [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html#addRange(Range));\\notherwise no change is made to the chart. This method cannot be used to partially remove values\\nfrom a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar firstRange \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar secondRange \\u003d sheet.getRange(\\\"A6:B8\\\");\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(firstRange)\\n    // This range will render in a different color\\n    .addRange(secondRange)\\n    .setPosition(5, 5, 0, 0);\\n\\n// Note that you can use either of these two formats, but the range\\n// MUST match up with a range that was added via addRange(), or it\\n// will not be removed, and will not throw an exception\\nchartBuilder.removeRange(firstRange);\\nchartBuilder.removeRange(sheet.getRange(\\\"A6:B8\\\"));\\n\\nvar chart \\u003d chartBuilder.build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to remove.\\n@return this builder, for chaining*/removeRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Reverses the direction in which the bars grow along the horizontal axis. By default, values\\ngrow from left to right. Calling this method causes them to grow from right to left.\\n@return This builder, useful for chaining.*/reverseDirection():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Changes the type of chart. Not all embedded chart types are currently supported. See [`ChartType`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-type.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param type The type to change this chart into.\\n@return this builder, for chaining*/setChartType(type:Charts.ChartType):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the strategy to use for hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param strategy The strategy to use for hidden rows and columns.\\n@return this builder, for chaining*/setHiddenDimensionStrategy(strategy:Charts.ChartHiddenDimensionStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the merge strategy to use when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), rows are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param mergeStrategy The merge strategy to use.\\n@return this builder, for chaining*/setMergeStrategy(mergeStrategy:Charts.ChartMergeStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the number of rows or columns of the range that should be treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param headers The number of rows or columns to treat as headers. Negative values cause headers\\n    to be auto-detected.\\n@return this builder, for chaining*/setNumHeaders(headers:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets advanced options for this chart. To view a list of the available options, see [Chart\\nconfiguration options](https://developers.google.com/apps-script/chart-configuration-options).\\n\\nThis method doesn't validate the option you specify is valid for this chart type nor if the\\nvalue is of the correct format/structure.\\n\\nThis example shows how to change the title and set a legend.\\n\\n```\\nbuilder.setOption('title', 'Earnings projections');\\nbuilder.setOption('legend', {position: 'top', textStyle: {color: 'blue', fontSize: 16}});\\n```\\n@param option The name of the option.\\n@param value The value of the option.\\n@return This builder, for chaining.*/setOption(option:string,value:Object):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position, changing where the chart appears on the sheet. `anchorRowPos` and\\n`anchorColPos` are 1-indexed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param anchorRowPos The chart's top side is anchored in this row.\\n@param anchorColPos The chart's left side is anchored in this column.\\n@param offsetX The chart's upper right-hand corner is offset by this many pixels.\\n@param offsetY The chart's lower left-hand corner is offset by this many pixels.\\n@return this builder, for chaining*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the range for the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n@param start The value for the lowest grid line of the range axis.\\n@param end The value for the highest grid line of the range axis.\\n@return This builder, useful for chaining.*/setRange(start:number,end:number):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Uses stacked lines, meaning that line and bar values are stacked (accumulated). By default,\\nthere is no stacking.\\n@return This builder, useful for chaining.*/setStacked():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets whether the chart's rows and columns are transposed. If set to `true`, the rows and\\ncolumns are switched. Defaults to `false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param transpose If `true`, the rows and columns used to construct the chart are\\n    transposed.\\n@return this builder, for chaining*/setTransposeRowsAndColumns(transpose:boolean):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Makes the range axis into a logarithmic scale (requires all values to be positive). The range\\naxis are the vertical axis for vertical charts (such as line, area, or column) and the\\nhorizontal axis for horizontal charts (such as bar).\\n@return This builder, useful for chaining.*/useLogScale():SpreadsheetApp.EmbeddedBarChartBuilder;}interface EmbeddedAreaChartBuilder{\\n/**Adds a range to the chart this builder modifies. Does not add the range if it has already been\\nadded to the chart.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to add.\\n@return this builder, for chaining*/addRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the chart type to AreaChart and returns an [`EmbeddedAreaChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html).\\n@return a builder for an area chart*/asAreaChart():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the chart type to BarChart and returns an [`EmbeddedBarChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-bar-chart-builder.html).\\n@return a builder for a bar chart*/asBarChart():SpreadsheetApp.EmbeddedBarChartBuilder;\\n/**Sets the chart type to ColumnChart and returns an [`EmbeddedColumnChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-column-chart-builder.html).\\n@return a builder for a column chart*/asColumnChart():SpreadsheetApp.EmbeddedColumnChartBuilder;\\n/**Sets the chart type to ComboChart and returns an [`EmbeddedComboChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-combo-chart-builder.html).\\n@return a builder for a combo chart*/asComboChart():SpreadsheetApp.EmbeddedComboChartBuilder;\\n/**Sets the chart type to HistogramChart and returns an [`EmbeddedHistogramChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-histogram-chart-builder.html).\\n@return a builder for a histogram chart*/asHistogramChart():SpreadsheetApp.EmbeddedHistogramChartBuilder;\\n/**Sets the chart type to LineChart and returns an [`EmbeddedLineChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder.html).\\n@return a builder for a line chart*/asLineChart():SpreadsheetApp.EmbeddedLineChartBuilder;\\n/**Sets the chart type to PieChart and returns an [`EmbeddedPieChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-pie-chart-builder.html).\\n@return a builder for a pie chart*/asPieChart():SpreadsheetApp.EmbeddedPieChartBuilder;\\n/**Sets the chart type to ScatterChart and returns an [`EmbeddedScatterChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-scatter-chart-builder.html).\\n@return a builder for a scatter chart*/asScatterChart():SpreadsheetApp.EmbeddedScatterChartBuilder;\\n/**Sets the chart type to TableChart and returns an [`EmbeddedTableChartBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-table-chart-builder.html).\\n@return a builder for a table chart*/asTableChart():SpreadsheetApp.EmbeddedTableChartBuilder;\\n/**Builds the chart to reflect all changes made to it.\\n\\nThis method does not automatically draw the chart on top of the spreadsheet. A new chart\\nmust be inserted via `sheet.insertChart(chart)`, and an existing chart should be updated\\nvia `sheet.updateChart(chart)`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@return the created chart, which must still be added to the spreadsheet*/build():SpreadsheetApp.EmbeddedChart;\\n/**Removes all ranges from the chart this builder modifies.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\n// This code updates the chart to use only the new ranges while preserving the existing\\n// formatting of the chart.\\nvar chart \\u003d sheet.getCharts()[0];\\nvar newChart \\u003d chart\\n    .modify()\\n    .clearRanges()\\n    .addRange(sheet.getRange(\\\"A1:A5\\\"))\\n    .addRange(sheet.getRange(\\\"B1:B5\\\"))\\n    .build();\\nsheet.updateChart(newChart);\\n```\\n@return this builder, for chaining*/clearRanges():SpreadsheetApp.EmbeddedChartBuilder;\\n/**Returns the current chart type.\\n@return the chart type*/getChartType():Charts.ChartType;\\n/**Return the chart [`ContainerInfo`](https://developers.google.com/apps-script/reference/spreadsheet/container-info.html), which encapsulates where the chart appears on the\\nsheet.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\n// This method returns the exact same data as Chart#getContainerInfo()\\nvar containerInfo \\u003d chartBuilder.getContainer();\\n\\n// Logs the values we used in setPosition()\\nLogger.log(\\\"Anchor Column: %s\\\\r\\\\nAnchor Row %s\\\\r\\\\nOffset X %s\\\\r\\\\nOffset Y %s\\\",\\n          containerInfo.getAnchorColumn(),\\n          containerInfo.getAnchorRow(),\\n          containerInfo.getOffsetX(),\\n          containerInfo.getOffsetY());\\n```\\n@return an object containing the chart container's position*/getContainer():SpreadsheetApp.ContainerInfo;\\n/**Returns a copy of the list of ranges currently providing data for this chart. Use [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html#addRange(Range)) and [`removeRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html#removeRange(Range)) to modify this list.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(sheet.getRange(\\\"A1:B8\\\"))\\n    .setPosition(5, 5, 0, 0);\\n\\nvar ranges \\u003d chartBuilder.getRanges();\\n\\n// There's only one range as a data source for this chart,\\n// so this logs \\\"A1:B8\\\"\\nfor (var i in ranges) {\\n  var range \\u003d ranges[i];\\n  Logger.log(range.getA1Notation());\\n}\\n```\\n@return an array of ranges that serve as the chart to be built's data source*/getRanges():SpreadsheetApp.Range[];\\n/**Removes the specified range from the chart this builder modifies. Does not throw an error if\\nthe range is not in this chart.\\n\\nThe range removed must match up with a range added via [`addRange(range)`](https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder.html#addRange(Range));\\notherwise no change is made to the chart. This method cannot be used to partially remove values\\nfrom a range.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar firstRange \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar secondRange \\u003d sheet.getRange(\\\"A6:B8\\\");\\n\\nvar chartBuilder \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(firstRange)\\n    // This range will render in a different color\\n    .addRange(secondRange)\\n    .setPosition(5, 5, 0, 0);\\n\\n// Note that you can use either of these two formats, but the range\\n// MUST match up with a range that was added via addRange(), or it\\n// will not be removed, and will not throw an exception\\nchartBuilder.removeRange(firstRange);\\nchartBuilder.removeRange(sheet.getRange(\\\"A6:B8\\\"));\\n\\nvar chart \\u003d chartBuilder.build();\\n\\nsheet.insertChart(chart);\\n```\\n@param range The range to remove.\\n@return this builder, for chaining*/removeRange(range:SpreadsheetApp.Range):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Reverses the drawing of series in the domain axis. For vertical-range charts (such as line,\\narea or column charts), this means the horizontal axis is drawn from right to left. For\\nhorizontal-range charts (such as bar charts), this means the vertical axis is drawn from top to\\nbottom. For pie charts, this means the slices are drawn counterclockwise.\\n\\n```\\n// Creates a pie chart builder and sets drawing of the slices in a counter-clockwise manner.\\nvar builder \\u003d Charts.newPieChart();\\nbuilder.reverseCategories();\\n```\\n@return This builder, useful for chaining.*/reverseCategories():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the background color for the chart.\\n\\n```\\n// Creates a line chart builder and sets the background color to gray\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setBackgroundColor(\\\"gray\\\");\\n```\\n@param cssValue The CSS value for the color (such as `\\\"blue\\\"` or `\\\"#00f\\\"`).\\n@return This builder, useful for chaining.*/setBackgroundColor(cssValue:string):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Changes the type of chart. Not all embedded chart types are currently supported. See [`ChartType`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-type.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param type The type to change this chart into.\\n@return this builder, for chaining*/setChartType(type:Charts.ChartType):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the colors for the lines in the chart.\\n\\n```\\n// Creates a line chart builder and sets the first two lines to be drawn in green and red,\\n// respectively.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setColors([\\\"green\\\", \\\"red\\\"]);\\n```\\n@param cssValues An array of color CSS values, such as `[\\\"red\\\", \\\"#acf\\\"]`. The nth element\\n    in the array represents the color of the nth line in the chart.\\n@return This builder, useful for chaining.*/setColors(cssValues:string[]):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the strategy to use for hidden rows and columns. Defaults to [`IGNORE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-hidden-dimension-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setHiddenDimensionStrategy(Charts.ChartHiddenDimensionStrategy.IGNORE_COLUMNS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param strategy The strategy to use for hidden rows and columns.\\n@return this builder, for chaining*/setHiddenDimensionStrategy(strategy:Charts.ChartHiddenDimensionStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the position of the legend with respect to the chart. By default, there is no legend.\\n\\n```\\n// Creates a line chart builder and sets the legend position to right.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendPosition(Charts.Position.RIGHT);\\n```\\n@param position The position of the legend.\\n@return This builder, useful for chaining.*/setLegendPosition(position:Charts.Position):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the text style of the chart legend.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point legend.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setLegendTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart legend.\\n@return This builder, useful for chaining.*/setLegendTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the merge strategy to use when more than one range exists. If [`MERGE_ROWS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), rows are merged; if [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html), columns are merged. Defaults to [`MERGE_COLUMNS`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/chart-merge-strategy.html).\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B10\\\");\\nvar range2 \\u003d sheet.getRange(\\\"C:C10\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .addRange(range2)\\n    .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_ROWS)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param mergeStrategy The merge strategy to use.\\n@return this builder, for chaining*/setMergeStrategy(mergeStrategy:Charts.ChartMergeStrategy):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the number of rows or columns of the range that should be treated as headers.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setNumHeaders(1)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param headers The number of rows or columns to treat as headers. Negative values cause headers\\n    to be auto-detected.\\n@return this builder, for chaining*/setNumHeaders(headers:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets advanced options for this chart. To view a list of the available options, see [Chart\\nconfiguration options](https://developers.google.com/apps-script/chart-configuration-options).\\n\\nThis method doesn't validate the option you specify is valid for this chart type nor if the\\nvalue is of the correct format/structure.\\n\\nThis example shows how to change the title and set a legend.\\n\\n```\\nbuilder.setOption('title', 'Earnings projections');\\nbuilder.setOption('legend', {position: 'top', textStyle: {color: 'blue', fontSize: 16}});\\n```\\n@param option The name of the option.\\n@param value The value of the option.\\n@return This builder, for chaining.*/setOption(option:string,value:Object):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the style for points in the line. By default, points have no particular styles, and only\\nthe line is visible.\\n\\n```\\n// Creates a line chart builder and sets large point style.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setPointStyle(Charts.PointStyle.LARGE);\\n```\\n@param style The style to use for points in the line.\\n@return This builder, useful for chaining.*/setPointStyle(style:Charts.PointStyle):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the position, changing where the chart appears on the sheet. `anchorRowPos` and\\n`anchorColPos` are 1-indexed.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param anchorRowPos The chart's top side is anchored in this row.\\n@param anchorColPos The chart's left side is anchored in this column.\\n@param offsetX The chart's upper right-hand corner is offset by this many pixels.\\n@param offsetY The chart's lower left-hand corner is offset by this many pixels.\\n@return this builder, for chaining*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the range for the chart.\\n\\nIf any data points fall outside the range, the range is expanded to include those data\\npoints.\\n@param start The value for the lowest grid line of the range axis.\\n@param end The value for the highest grid line of the range axis.\\n@return This builder, useful for chaining.*/setRange(start:number,end:number):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Uses stacked lines, meaning that line and bar values are stacked (accumulated). By default,\\nthere is no stacking.\\n@return This builder, useful for chaining.*/setStacked():SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the title of the chart. The title is displayed centered above the chart.\\n\\n```\\n// Creates a line chart builder and title to 'My Line Chart'.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('My Line Chart')\\n```\\n@param chartTitle the chart title.\\n@return This builder, useful for chaining.*/setTitle(chartTitle:string):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the text style of the chart title.\\n\\n```\\n// Creates a line chart builder and sets it up for a  blue, 26-point title.\\nvar textStyleBuilder \\u003d Charts.newTextStyle().setColor('#0000FF').setFontSize(26);\\nvar style \\u003d textStyleBuilder.build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitleTextStyle(style);\\n```\\n@param textStyle The text style to use for the chart title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets whether the chart's rows and columns are transposed. If set to `true`, the rows and\\ncolumns are switched. Defaults to `false`.\\n\\n```\\nvar ss \\u003d SpreadsheetApp.getActiveSpreadsheet();\\nvar sheet \\u003d ss.getSheets()[0];\\n\\nvar range \\u003d sheet.getRange(\\\"A1:B5\\\");\\nvar chart \\u003d sheet.newChart()\\n    .setChartType(Charts.ChartType.BAR)\\n    .addRange(range)\\n    .setTransposeRowsAndColumns(true)\\n    .setPosition(5, 5, 0, 0)\\n    .build();\\n\\nsheet.insertChart(chart);\\n```\\n@param transpose If `true`, the rows and columns used to construct the chart are\\n    transposed.\\n@return this builder, for chaining*/setTransposeRowsAndColumns(transpose:boolean):SpreadsheetApp.EmbeddedChartBuilder;\\n/**Sets the horizontal axis text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Adds a title to the horizontal axis. The title is centered and appears below the axis value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setTitle('X-axis Title')\\n```\\n@param title The title for the X-axis.\\n@return This builder, useful for chaining.*/setXAxisTitle(title:string):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the horizontal axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the X-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setXAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setXAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the vertical axis text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Adds a title to the vertical axis. The title is centered and appears to the left of the value\\nlabels.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title.\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitle('Y-axis Title')\\n```\\n@param title The title for the Y-axis.\\n@return This builder, useful for chaining.*/setYAxisTitle(title:string):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Sets the vertical axis title text style.\\n\\n```\\n// Creates a line chart builder and sets the Y-axis title text style to blue, 18-point font.\\nvar textStyle \\u003d Charts.newTextStyle().setColor('blue').setFontSize(18).build();\\nvar builder \\u003d Charts.newLineChart();\\nbuilder.setYAxisTitleTextStyle(textStyle);\\n```\\n@param textStyle The text style to use for the horizontal axis title. You can create a [`TextStyleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/text-style-builder.html) object by calling [`Charts.newTextStyle()`](https://developers.google.com/apps-script/reference/spreadsheet/../charts/charts.html#newTextStyle()).\\n@return This builder, useful for chaining.*/setYAxisTitleTextStyle(textStyle:Charts.TextStyle):SpreadsheetApp.EmbeddedAreaChartBuilder;\\n/**Makes the range axis into a logarithmic scale (requires all values to be positive). The range\\naxis are the vertical axis for vertical charts (such as line, area, or column) and the\\nhorizontal axis for horizontal charts (such as bar).\\n@return This builder, useful for chaining.*/useLogScale():SpreadsheetApp.EmbeddedAreaChartBuilder;}interface Drawing{\\n/**Gets information about where the drawing is positioned in the sheet.\\n@return An object containing the drawing's container position.*/getContainerInfo():SpreadsheetApp.ContainerInfo;\\n/**Returns the actual height of this drawing in pixels.\\n\\n```\\n// Logs the height of all drawings in a sheet\\nvar drawings \\u003d SpreadsheetApp.getActiveSheet().getDrawings();\\nfor (var i \\u003d 0; i \\u003c drawings.length; i++) {\\n  Logger.log(drawings[i].getHeight());\\n}\\n```\\n@return The height of the drawing in pixels.*/getHeight():Integer;\\n/**Returns the name of the macro attached to this drawing.\\n\\n```\\n// Logs the macro name of all drawings on the active sheet.\\nvar drawings \\u003d SpreadsheetApp.getActiveSheet().getDrawings();\\nfor (var i \\u003d 0; i \\u003c drawings.length; i++) {\\n  Logger.log(drawings[i].getOnAction());\\n}\\n```\\n@return The macro name attached to this drawing.*/getOnAction():string;\\n/**Returns the sheet this drawing appears on.\\n\\n```\\n// Logs the parent sheet of all drawings on the active sheet.\\nvar drawings \\u003d SpreadsheetApp.getActiveSheet().getDrawings();\\nfor (var i \\u003d 0; i \\u003c drawings.length; i++) {\\n  Logger.log(drawings[i].getSheet());\\n}\\n```\\n@return The sheet the drawing appears on.*/getSheet():SpreadsheetApp.Sheet;\\n/**Returns the actual width of this drawing in pixels.\\n\\n```\\n// Logs the width of all drawings in a sheet\\nvar drawings \\u003d SpreadsheetApp.getActiveSheet().getDrawings();\\nfor (var i \\u003d 0; i \\u003c drawings.length; i++) {\\n  Logger.log(drawings[i].getWidth());\\n}\\n```\\n@return The width of the drawing in pixels.*/getWidth():Integer;\\n/**Returns the z-index of this drawing.\\n\\n```\\n// Logs the z-index of all drawings on the active sheet.\\nvar drawings \\u003d SpreadsheetApp.getActiveSheet().getDrawings();\\nfor (var i \\u003d 0; i \\u003c drawings.length; i++) {\\n  Logger.log(drawings[i].getZIndex());\\n}\\n```\\n@return Z-Index of this drawing.*/getZIndex():number;\\n/**Deletes this drawing from the spreadsheet. Any further operation on the drawing results in a\\nscript error.\\n\\n```\\n// Deletes all drawings from the active sheet.\\nvar drawings \\u003d SpreadsheetApp.getActiveSheet().getDrawings();\\nfor (var i \\u003d 0; i \\u003c drawings.length; i++) {\\n  drawings[i].remove();\\n}\\n```*/remove():void;\\n/**Sets the actual height of this drawing in pixels.\\n@param height The desired height in pixels.\\n@return This drawing, for chaining.*/setHeight(height:Integer):SpreadsheetApp.Drawing;\\n/**Assigns a macro function to this drawing.\\n@param macroName Name of the macro function.\\n@return This drawing, for chaining.*/setOnAction(macroName:string):SpreadsheetApp.Drawing;\\n/**Sets the position where the drawing appears on the sheet. The anchor row and column position\\nindices are 1-indexed.\\n@param anchorRowPos The drawing's top side is anchored in this row.\\n@param anchorColPos The drawing's top side is anchored in this col.\\n@param offsetX The horizontal offset from the cell corner in pixels.\\n@param offsetY The vertical offset from the cell corner in pixels.\\n@return This drawing, for chaining.*/setPosition(anchorRowPos:Integer,anchorColPos:Integer,offsetX:Integer,offsetY:Integer):SpreadsheetApp.Drawing;\\n/**Sets the actual width of this drawing in pixels.\\n@param width The desired width in pixels.\\n@return This drawing, for chaining.*/setWidth(width:Integer):SpreadsheetApp.Drawing;\\n/**Sets the z-index of this drawing.\\n@param zIndex Z-Index of this drawing.\\n@return This drawing, for chaining.*/setZIndex(zIndex:number):SpreadsheetApp.Drawing;}interface Direction{}interface _Direction{\\n/**The direction of increasing row indices.*/DOWN:Direction;\\n/**The direction of increasing column indices.*/NEXT:Direction;\\n/**The direction of decreasing column indices.*/PREVIOUS:Direction;\\n/**The direction of decreasing row indices.*/UP:Direction;}interface Dimension{}interface _Dimension{\\n/**The column (vertical) dimension.*/COLUMNS:Dimension;\\n/**The row (horizontal) dimension.*/ROWS:Dimension;}interface DeveloperMetadataVisibility{}interface _DeveloperMetadataVisibility{\\n/**Document-visible metadata is accessible from any developer project with access to the document.*/DOCUMENT:DeveloperMetadataVisibility;\\n/**Project-visible metadata is only visible to and accessible by the developer project that\\ncreated the metadata. Do not use project-visible developer metadata as a security mechanism or\\nto store secrets. It can be exposed to users with view access to the document.*/PROJECT:DeveloperMetadataVisibility;}interface DeveloperMetadataLocationType{}interface _DeveloperMetadataLocationType{\\n/**The location type for developer metadata associated with a column.*/COLUMN:DeveloperMetadataLocationType;\\n/**The location type for developer metadata associated with a row.*/ROW:DeveloperMetadataLocationType;\\n/**The location type for developer metadata associated with a whole sheet.*/SHEET:DeveloperMetadataLocationType;\\n/**The location type for developer metadata associated with the top-level spreadsheet.*/SPREADSHEET:DeveloperMetadataLocationType;}interface DeveloperMetadataLocation{\\n/**Returns the [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) for the column location of this metadata, or `null` if the\\nlocation type is not `DeveloperMetadataLocationType.COLUMN`.\\n@return The [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) for the column location of this metadata, or `null` if the\\n    location type is not `DeveloperMetadataLocationType.COLUMN`.*/getColumn():SpreadsheetApp.Range;\\n/**Gets the type of location.\\n@return The location type.*/getLocationType():SpreadsheetApp.DeveloperMetadataLocationType;\\n/**Returns the [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) for the row location of this metadata, or `null` if the\\nlocation type is not `DeveloperMetadataLocationType.ROW`.\\n@return The [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) for the row location of this metadata, or `null` if the\\n    location type is not `DeveloperMetadataLocationType.ROW`.*/getRow():SpreadsheetApp.Range;\\n/**Returns the [`Sheet`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html) location of this metadata, or `null` if the location type is\\nnot `DeveloperMetadataLocationType.SHEET`.\\n@return The [`Sheet`](https://developers.google.com/apps-script/reference/spreadsheet/sheet.html) location of this metadata, or `null` if the location type is\\n    not `DeveloperMetadataLocationType.SHEET`.*/getSheet():SpreadsheetApp.Sheet;\\n/**Returns the [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) location of this metadata, or `null` if the location\\ntype is not `DeveloperMetadataLocationType.SPREADSHEET`.\\n@return The [`Spreadsheet`](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet.html) location of this metadata, or `null` if the location\\n    type is not `DeveloperMetadataLocationType.SPREADSHEET`.*/getSpreadsheet():SpreadsheetApp.Spreadsheet;}interface DeveloperMetadataFinder{\\n/**Executes this search and returns the matching metadata.\\n@return The developer metadata that match the search criteria.*/find():SpreadsheetApp.DeveloperMetadata[];\\n/**Configures the search to consider intersecting locations that have metadata. This option is\\nonly valid for range-scoped searches.\\n@return The developer metadata finder, for chaining.*/onIntersectingLocations():SpreadsheetApp.DeveloperMetadataFinder;\\n/**Limits this search to consider only metadata that match the specified ID.\\n@param id The ID to match when searching for metadata.\\n@return The developer metadata finder, for chaining.*/withId(id:Integer):SpreadsheetApp.DeveloperMetadataFinder;\\n/**Limits this search to consider only metadata that match the specified key.\\n@param key The key to match when searching for metadata.\\n@return The developer metadata finder, for chaining.*/withKey(key:string):SpreadsheetApp.DeveloperMetadataFinder;\\n/**Limits this search to consider only metadata that match the specified location type.\\n@param locationType The location type to match when searching for metadata.\\n@return The developer metadata finder, for chaining.*/withLocationType(locationType:SpreadsheetApp.DeveloperMetadataLocationType):SpreadsheetApp.DeveloperMetadataFinder;\\n/**Limits this search to consider only metadata that match the specified value.\\n@param value The value to match when searching for metadata.\\n@return The developer metadata finder, for chaining.*/withValue(value:string):SpreadsheetApp.DeveloperMetadataFinder;\\n/**Limits this search to consider only metadata that match the specified visibility.\\n@param visibility The visibility to match when searching for metadata.\\n@return The developer metadata finder, for chaining.*/withVisibility(visibility:SpreadsheetApp.DeveloperMetadataVisibility):SpreadsheetApp.DeveloperMetadataFinder;}interface DeveloperMetadata{\\n/**Returns the unique ID associated with this developer metadata.\\n@return The unique ID associated with this developer metadata.*/getId():Integer;\\n/**Returns the key associated with this developer metadata.\\n@return The key associated with this developer metadata.*/getKey():string;\\n/**Returns the location of this developer metadata.\\n@return The location of this developer metadata.*/getLocation():SpreadsheetApp.DeveloperMetadataLocation;\\n/**Returns the value associated with this developer metadata, or `null` if this metadata has\\nno value.\\n@return The value associated with this developer metadata, or `null` if this metadata has\\n    no value.*/getValue():string;\\n/**Returns the visibility of this developer metadata.\\n@return The visibility of this developer metadata.*/getVisibility():SpreadsheetApp.DeveloperMetadataVisibility;\\n/**Moves this developer metadata to the specified column. If the specified range does not\\nrepresent a single column this throws an exception.\\n@param column The range representing the column that is the new location for this developer\\n    metadata.\\n@return The developer metadata, for chaining.*/moveToColumn(column:SpreadsheetApp.Range):SpreadsheetApp.DeveloperMetadata;\\n/**Moves this developer metadata to the specified row. If the specified range does not represent a\\nsingle row this throws an exception.\\n@param row The range representing the row that is the new location for this developer metadata.\\n@return The developer metadata, for chaining.*/moveToRow(row:SpreadsheetApp.Range):SpreadsheetApp.DeveloperMetadata;\\n/**Moves this developer metadata to the specified sheet.\\n@param sheet The sheet that is the new location for this developer metata.\\n@return The developer metadata, for chaining.*/moveToSheet(sheet:SpreadsheetApp.Sheet):SpreadsheetApp.DeveloperMetadata;\\n/**Moves this developer metadata to the top-level spreadsheet.\\n@return The developer metadata, for chaining.*/moveToSpreadsheet():SpreadsheetApp.DeveloperMetadata;\\n/**Deletes this metadata.*/remove():void;\\n/**Sets the key of this developer metadata to the specified value.\\n@param key The new key to set for this metadata.\\n@return The developer metadata, for chaining.*/setKey(key:string):SpreadsheetApp.DeveloperMetadata;\\n/**Sets the value associated with this developer metadata to the specified value.\\n@param value The new value to set for this metadata.\\n@return The developer metadata, for chaining.*/setValue(value:string):SpreadsheetApp.DeveloperMetadata;\\n/**Sets the visibility of this developer metadata to the specified visibility.\\n@param visibility The new visibility to set for this metadata.\\n@return The developer metadata, for chaining.*/setVisibility(visibility:SpreadsheetApp.DeveloperMetadataVisibility):SpreadsheetApp.DeveloperMetadata;}interface DateTimeGroupingRuleType{}interface _DateTimeGroupingRuleType{\\n/**Group date-time by day and month, for example `22-Nov`.*/DAY_MONTH:DateTimeGroupingRuleType;\\n/**Group date-time by day of month, from 1 to 31.*/DAY_OF_MONTH:DateTimeGroupingRuleType;\\n/**Group date-time by day of week, for example `Sunday`.*/DAY_OF_WEEK:DateTimeGroupingRuleType;\\n/**Group date-time by day of year, from 1 to 366.*/DAY_OF_YEAR:DateTimeGroupingRuleType;\\n/**Group date-time by hour using a 24-hour system, from 0 to 23.*/HOUR:DateTimeGroupingRuleType;\\n/**Group date-time by hour and minute using a 24-hour system, for example `19:45`.*/HOUR_MINUTE:DateTimeGroupingRuleType;\\n/**Group date-time by hour and minute using a 12-hour system, for example `7:45 PM`.*/HOUR_MINUTE_AMPM:DateTimeGroupingRuleType;\\n/**Group date-time by minute, from 0 to 59.*/MINUTE:DateTimeGroupingRuleType;\\n/**Group date-time by month, for example `Nov`.*/MONTH:DateTimeGroupingRuleType;\\n/**Group date-time by quarter, for example Q1 (which represents Jan-Mar).*/QUARTER:DateTimeGroupingRuleType;\\n/**Group date-time by second, from 0 to 59.*/SECOND:DateTimeGroupingRuleType;\\n/**A date-time grouping rule type that is not supported.*/UNSUPPORTED:DateTimeGroupingRuleType;\\n/**Group date-time by year, for example 2008.*/YEAR:DateTimeGroupingRuleType;\\n/**Group date-time by year and month, for example `2008-Nov`.*/YEAR_MONTH:DateTimeGroupingRuleType;\\n/**Group date-time by year, month, and day, for example `2008-11-22`.*/YEAR_MONTH_DAY:DateTimeGroupingRuleType;\\n/**Group date-time by year and quarter, for example `2008 Q4` .*/YEAR_QUARTER:DateTimeGroupingRuleType;}interface DateTimeGroupingRule{\\n/**Gets the type of the date-time grouping rule.\\n@return The rule type.*/getRuleType():SpreadsheetApp.DateTimeGroupingRuleType;}interface DataValidationCriteria{}interface _DataValidationCriteria{\\n/**Requires that the input is a custom value or a boolean; rendered as a checkbox.*/CHECKBOX:DataValidationCriteria;\\n/**Requires that the input makes the given formula evaluate to `true`.*/CUSTOM_FORMULA:DataValidationCriteria;\\n/**Requires a date that is after the given value.*/DATE_AFTER:DataValidationCriteria;\\n/**Requires a date that is before the given value.*/DATE_BEFORE:DataValidationCriteria;\\n/**Requires a date that is between the given values.*/DATE_BETWEEN:DataValidationCriteria;\\n/**Requires a date that is equal to the given value.*/DATE_EQUAL_TO:DataValidationCriteria;\\n/**Requires a date.*/DATE_IS_VALID_DATE:DataValidationCriteria;\\n/**Requires a date that is not between the given values.*/DATE_NOT_BETWEEN:DataValidationCriteria;\\n/**Require a date that is on or after the given value.*/DATE_ON_OR_AFTER:DataValidationCriteria;\\n/**Requires a date that is on or before the given value.*/DATE_ON_OR_BEFORE:DataValidationCriteria;\\n/**Requires a number that is between the given values.*/NUMBER_BETWEEN:DataValidationCriteria;\\n/**Requires a number that is equal to the given value.*/NUMBER_EQUAL_TO:DataValidationCriteria;\\n/**Require a number that is greater than the given value.*/NUMBER_GREATER_THAN:DataValidationCriteria;\\n/**Requires a number that is greater than or equal to the given value.*/NUMBER_GREATER_THAN_OR_EQUAL_TO:DataValidationCriteria;\\n/**Requires a number that is less than the given value.*/NUMBER_LESS_THAN:DataValidationCriteria;\\n/**Requires a number that is less than or equal to the given value.*/NUMBER_LESS_THAN_OR_EQUAL_TO:DataValidationCriteria;\\n/**Requires a number that is not between the given values.*/NUMBER_NOT_BETWEEN:DataValidationCriteria;\\n/**Requires a number that is not equal to the given value.*/NUMBER_NOT_EQUAL_TO:DataValidationCriteria;\\n/**Requires that the input contains the given value.*/TEXT_CONTAINS:DataValidationCriteria;\\n/**Requires that the input does not contain the given value.*/TEXT_DOES_NOT_CONTAIN:DataValidationCriteria;\\n/**Requires that the input is equal to the given value.*/TEXT_EQUAL_TO:DataValidationCriteria;\\n/**Requires that the input is in the form of an email address.*/TEXT_IS_VALID_EMAIL:DataValidationCriteria;\\n/**Requires that the input is in the form of a URL.*/TEXT_IS_VALID_URL:DataValidationCriteria;\\n/**Requires that the input is equal to one of the given values.*/VALUE_IN_LIST:DataValidationCriteria;\\n/**Requires that the input is equal to a value in the given range.*/VALUE_IN_RANGE:DataValidationCriteria;}interface DataValidationBuilder{\\n/**Constructs a data validation rule from the settings applied to the builder.\\n@return a representation of the data validation rule*/build():SpreadsheetApp.DataValidation;\\n/**Creates a builder for a data validation rule based on this rule's settings.\\n\\n```\\n// Change existing data validation rules that require a date in 2013 to require a date in 2014.\\nvar oldDates \\u003d [new Date('1/1/2013'), new Date('12/31/2013')];\\nvar newDates \\u003d [new Date('1/1/2014'), new Date('12/31/2014')];\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns());\\nvar rules \\u003d range.getDataValidations();\\n\\nfor (var i \\u003d 0; i \\u003c rules.length; i++) {\\n  for (var j \\u003d 0; j \\u003c rules[i].length; j++) {\\n    var rule \\u003d rules[i][j];\\n\\n    if (rule !\\u003d null) {\\n      var criteria \\u003d rule.getCriteriaType();\\n      var args \\u003d rule.getCriteriaValues();\\n\\n      if (criteria \\u003d\\u003d SpreadsheetApp.DataValidationCriteria.DATE_BETWEEN\\n          \\u0026\\u0026 args[0].getTime() \\u003d\\u003d oldDates[0].getTime()\\n          \\u0026\\u0026 args[1].getTime() \\u003d\\u003d oldDates[1].getTime()) {\\n        // Create a builder from the existing rule, then change the dates.\\n        rules[i][j] \\u003d rule.copy().withCriteria(criteria, newDates).build();\\n      }\\n    }\\n  }\\n}\\nrange.setDataValidations(rules);\\n```\\n@return a builder based on this rule's settings*/copy():SpreadsheetApp.DataValidationBuilder;\\n/**Returns `true` if the rule shows a warning when input fails data validation, or `false` if it rejects the input entirely. The default for new data validation rules is `true`.\\n@return `true` if the rule allows input that fails data validation; `false` if not*/getAllowInvalid():boolean;\\n/**Gets the rule's criteria type as defined in the [`DataValidationCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-criteria.html) enum. To get the\\narguments for the criteria, use [`getCriteriaValues()`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-builder.html#getCriteriaValues()). To use these values to create or\\nmodify a data validation rule, see [`withCriteria(criteria, args)`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-builder.html#withCriteria(DataValidationCriteria,Object)).\\n\\n```\\n// Log information about the data validation rule for cell A1.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d cell.getDataValidation();\\nif (rule !\\u003d null) {\\n  var criteria \\u003d rule.getCriteriaType();\\n  var args \\u003d rule.getCriteriaValues();\\n  Logger.log('The data validation rule is %s %s', criteria, args);\\n} else {\\n  Logger.log('The cell does not have a data validation rule.')\\n}\\n```\\n@return the type of data validation criteria*/getCriteriaType():SpreadsheetApp.DataValidationCriteria;\\n/**Gets an array of arguments for the rule's criteria. To get the criteria type, use [`getCriteriaType()`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-builder.html#getCriteriaType()). To use these values to create or modify a data validation rule, see [`withCriteria(criteria, args)`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-builder.html#withCriteria(DataValidationCriteria,Object)).\\n\\n```\\n// Log information about the data validation rule for cell A1.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d cell.getDataValidation();\\nif (rule !\\u003d null) {\\n  var criteria \\u003d rule.getCriteriaType();\\n  var args \\u003d rule.getCriteriaValues();\\n  Logger.log('The data validation rule is %s %s', criteria, args);\\n} else {\\n  Logger.log('The cell does not have a data validation rule.')\\n}\\n```\\n@return an array of arguments appropriate to the rule's criteria type; the number of arguments\\n    and their type match the corresponding `require...()` method of the [`DataValidationBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-builder.html) class*/getCriteriaValues():Object[];\\n/**Gets the rule's help text, or `null` if no help text is set.\\n@return the rule's help text, or `null` if no help text is set*/getHelpText():string;\\n/**Sets the data validation rule to require that the input is a boolean value; this value is\\nrendered as a checkbox.\\n\\n```\\n// Set the data validation for cell A1 to require a boolean value; the value is rendered as a\\n// checkbox.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireCheckbox().build();\\ncell.setDataValidation(rule);\\n```\\n@return this builder, for chaining*/requireCheckbox():SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input is the specified value or blank. When\\nthe input matches the specified value the cell is rendered as a checked checkbox. When the\\ninput is blank the cell is rendered as an unchecked checkbox.\\n\\n```\\n// Set the data validation for cell A1 to require a custom checked value that is rendered as a\\n// checkbox.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireCheckbox('APPROVED').build();\\ncell.setDataValidation(rule);\\n```\\n@param checkedValue The value assigned to a checked box.\\n@return this builder, for chaining*/requireCheckbox(checkedValue:Object):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input is one of the specified values. When\\nthe input is `checkedValue` the cell is rendered as a checked checkbox. When the\\ninput is `uncheckedValue` the cell is rendered as an unchecked checkbox.\\n\\n```\\n// Set the data validation for cell A1 to require custom checked values that are rendered as a\\n// checkbox.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireCheckbox('APPROVED', 'PENDING').build();\\ncell.setDataValidation(rule);\\n```\\n@param checkedValue The value assigned to a checked box.\\n@param uncheckedValue The value assigned to an unchecked box.\\n@return this builder, for chaining*/requireCheckbox(checkedValue:Object,uncheckedValue:Object):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a date.\\n\\n```\\n// Set the data validation for cell A1 to require a date.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireDate().build();\\ncell.setDataValidation(rule);\\n```\\n@return this builder, for chaining*/requireDate():SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a date after the given value. The time fields of the\\n`Date` object are ignored; only the day, month, and year fields are used.\\n\\n```\\n// Set the data validation for cell A1 to require a date after January 1, 2013.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireDateAfter(new Date('1/1/2013')).build();\\ncell.setDataValidation(rule);\\n```\\n@param date The latest unacceptable date.\\n@return this builder, for chaining*/requireDateAfter(date:Date):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a date before the given value. The time fields of the\\n`Date` object are ignored; only the day, month, and year fields are used.\\n\\n```\\n// Set the data validation for cell A1 to require a date before January 1, 2013.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireDateBefore(new Date('1/1/2013')).build();\\ncell.setDataValidation(rule);\\n```\\n@param date The earliest unacceptable date.\\n@return this builder, for chaining*/requireDateBefore(date:Date):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a date that falls between, or is either of, two\\nspecified dates. The time fields of the `Date` objects are ignored; only the day, month,\\nand year fields are used.\\n\\n```\\n// Set the data validation for cell A1 to require a date in 2013.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation()\\n    .requireDateBetween(new Date('1/1/2013'), new Date('12/31/2013')).build();\\ncell.setDataValidation(rule);\\n```\\n@param start The earliest acceptable date.\\n@param end The latest acceptable date.\\n@return this builder, for chaining*/requireDateBetween(start:Date,end:Date):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a date equal to the given value. The time fields of\\nthe `Date` object are ignored; only the day, month, and year fields are used.\\n\\n```\\n// Set the data validation for cell A1 to require a date equal to January 1, 2013.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireDateEqualTo(new Date('1/1/2013'))\\n    .build();\\ncell.setDataValidation(rule);\\n```\\n@param date The sole acceptable date.\\n@return this builder, for chaining*/requireDateEqualTo(date:Date):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a date that does not fall between, and is neither of,\\ntwo specified dates. The time fields of the `Date` objects are ignored; only the day,\\nmonth, and year fields are used.\\n\\n```\\n// Set the data validation for cell A1 to require a date not in 2013.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation()\\n    .requireDateNotBetween(new Date('1/1/2013'), new Date('12/31/2013')).build();\\ncell.setDataValidation(rule);\\n```\\n@param start The earliest unacceptable date.\\n@param end The latest unacceptable date.\\n@return this builder, for chaining*/requireDateNotBetween(start:Date,end:Date):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a date on or after the given value. The time fields of\\nthe `Date` object are ignored; only the day, month, and year fields are used.\\n\\n```\\n// Set the data validation for cell A1 to require a date on or after January 1, 2013.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation()\\n    .requireDateOnOrAfter(new Date('1/1/2013')).build();\\ncell.setDataValidation(rule);\\n```\\n@param date The earliest acceptable date.\\n@return this builder, for chaining*/requireDateOnOrAfter(date:Date):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a date on or before the given value. The time fields\\nof the `Date` object are ignored; only the day, month, and year fields are used.\\n\\n```\\n// Set the data validation for cell A1 to require a date on or before January 1, 2013.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation()\\n    .requireDateOnOrBefore(new Date('1/1/2013')).build();\\ncell.setDataValidation(rule);\\n```\\n@param date The latest acceptable date.\\n@return this builder, for chaining*/requireDateOnOrBefore(date:Date):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the given formula evaluates to `true`.\\n\\n```\\n// Set the data validation for cell A1 to equal B1 with a custom formula.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireFormulaSatisfied('\\u003dEQ(A1,B1)').build();\\ncell.setDataValidation(rule);\\n```\\n@param formula A custom formula that evaluates to `true` if the input is valid.\\n@return this builder, for chaining*/requireFormulaSatisfied(formula:string):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a number that falls between, or is either of, two\\nspecified numbers.\\n\\n```\\n// Set the data validation for cell A1 to require a number between 1 and 10.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireNumberBetween(1, 10).build();\\ncell.setDataValidation(rule);\\n```\\n@param start The lowest acceptable value.\\n@param end The highest acceptable value.\\n@return this builder, for chaining*/requireNumberBetween(start:number,end:number):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a number equal to the given value.\\n\\n```\\n// Set the data validation for cell A1 to require a number equal to 3.1415926536.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireNumberEqualTo(3.1415926536).build();\\ncell.setDataValidation(rule);\\n```\\n@param number The sole acceptable value.\\n@return this builder, for chaining*/requireNumberEqualTo(number:number):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a number greater than the given value.\\n\\n```\\n// Set the data validation for cell A1 to require a number greater than 0.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireNumberGreaterThan(0).build();\\ncell.setDataValidation(rule);\\n```\\n@param number The highest unacceptable value.\\n@return this builder, for chaining*/requireNumberGreaterThan(number:number):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a number greater than or equal to the given value.\\n\\n```\\n// Set the data validation for cell A1 to require a number greater than or equal to 0.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireNumberGreaterThanOrEqualTo(0).build();\\ncell.setDataValidation(rule);\\n```\\n@param number The lowest acceptable value.\\n@return this builder, for chaining*/requireNumberGreaterThanOrEqualTo(number:number):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a number less than the given value.\\n\\n```\\n// Set the data validation for cell A1 to require a number less than 0.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireNumberLessThan(0).build();\\ncell.setDataValidation(rule);\\n```\\n@param number The lowest unacceptable value.\\n@return this builder, for chaining*/requireNumberLessThan(number:number):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a number less than or equal to the given value.\\n\\n```\\n// Set the data validation for cell A1 to require a number less than or equal to 0.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireNumberLessThanOrEqualTo(0).build();\\ncell.setDataValidation(rule);\\n```\\n@param number The highest acceptable value.\\n@return this builder, for chaining*/requireNumberLessThanOrEqualTo(number:number):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a number that does not fall between, and is neither\\nof, two specified numbers.\\n\\n```\\n// Set the data validation for cell A1 to require a number not between 1 and 10.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireNumberNotBetween(1, 10).build();\\ncell.setDataValidation(rule);\\n```\\n@param start The lowest unacceptable value.\\n@param end The highest unacceptable value.\\n@return this builder, for chaining*/requireNumberNotBetween(start:number,end:number):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require a number not equal to the given value.\\n\\n```\\n// Set the data validation for cell A1 to require a number not equal to 0.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireNumberNotEqualTo(0).build();\\ncell.setDataValidation(rule);\\n```\\n@param number The sole unacceptable value.\\n@return this builder, for chaining*/requireNumberNotEqualTo(number:number):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input contains the given value.\\n\\n```\\n// Set the data validation for cell A1 to require any value that includes \\\"Google\\\".\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireTextContains('Google').build();\\ncell.setDataValidation(rule);\\n```\\n@param text The value that the input must contain.\\n@return this builder, for chaining*/requireTextContains(text:string):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input does not contain the given value.\\n\\n```\\n// Set the data validation for cell A1 to require any value that does not include \\\"@\\\".\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireTextDoesNotContain('@').build();\\ncell.setDataValidation(rule);\\n```\\n@param text The value that the input must not contain.\\n@return this builder, for chaining*/requireTextDoesNotContain(text:string):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input is equal to the given value.\\n\\n```\\n// Set the data validation for cell A1 to require \\\"Yes\\\".\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireTextEqualTo('Yes').build();\\ncell.setDataValidation(rule);\\n```\\n@param text The sole acceptable value.\\n@return this builder, for chaining*/requireTextEqualTo(text:string):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input is in the form of an email address.\\n\\n```\\n// Set the data validation for cell A1 to require text in the form of an email address.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireTextIsEmail().build();\\ncell.setDataValidation(rule);\\n```\\n@return this builder, for chaining*/requireTextIsEmail():SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input is in the form of a URL.\\n\\n```\\n// Set the data validation for cell A1 to require text in the form of a URL.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireTextIsUrl().build();\\ncell.setDataValidation(rule);\\n```\\n@return this builder, for chaining*/requireTextIsUrl():SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input is equal to one of the given values.\\n\\n```\\n// Set the data validation for cell A1 to require \\\"Yes\\\" or \\\"No\\\", with a dropdown menu.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireValueInList(['Yes', 'No']).build();\\ncell.setDataValidation(rule);\\n```\\n@param values An array of acceptable values.\\n@return this builder, for chaining*/requireValueInList(values:string[]):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input is equal to one of the given values,\\nwith an option to hide the dropdown menu.\\n\\n```\\n// Set the data validation for cell A1 to require \\\"Yes\\\" or \\\"No\\\", with no dropdown menu.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireValueInList(['Yes', 'No'], false).build();\\ncell.setDataValidation(rule);\\n```\\n@param values An array of acceptable values.\\n@param showDropdown `true` if the spreadsheet should show a dropdown menu for the values;\\n    `false` if not.\\n@return this builder, for chaining*/requireValueInList(values:string[],showDropdown:boolean):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input is equal to a value in the given range.\\n\\n```\\n// Set the data validation for cell A1 to require a value from B1:B10, with a dropdown menu.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar range \\u003d SpreadsheetApp.getActive().getRange('B1:B10');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireValueInRange(range).build();\\ncell.setDataValidation(rule);\\n```\\n@param range A range that contains the acceptable values.\\n@return this builder, for chaining*/requireValueInRange(range:SpreadsheetApp.Range):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to require that the input is equal to a value in the given range,\\nwith an option to hide the dropdown menu.\\n\\n```\\n// Set the data validation for cell A1 to require value from B1:B10, with no dropdown menu.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar range \\u003d SpreadsheetApp.getActive().getRange('B1:B10');\\nvar rule \\u003d SpreadsheetApp.newDataValidation().requireValueInRange(range, false).build();\\ncell.setDataValidation(rule);\\n```\\n@param range A range that contains the acceptable values.\\n@param showDropdown `true` if the spreadsheet should show a dropdown menu for the values;\\n    `false` if not.\\n@return this builder, for chaining*/requireValueInRange(range:SpreadsheetApp.Range,showDropdown:boolean):SpreadsheetApp.DataValidationBuilder;\\n/**Sets whether to show a warning when input fails data validation or whether to reject the input\\nentirely. The default for new data validation rules is `true`.\\n@param allowInvalidData `true` if the rule should allow input that fails data validation;\\n    `false` if not.\\n@return this builder, for chaining*/setAllowInvalid(allowInvalidData:boolean):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the help text that appears when the user hovers over the cell on which data validation is\\nset.\\n@param helpText The help text to set.\\n@return this builder, for chaining*/setHelpText(helpText:string):SpreadsheetApp.DataValidationBuilder;\\n/**Sets the data validation rule to criteria defined by [`DataValidationCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-criteria.html) values,\\ntypically taken from the [`criteria`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-builder.html#getCriteriaType()) and [`arguments`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-builder.html#getCriteriaValues()) of an existing rule.\\n\\n```\\n// Change existing data validation rules that require a date in 2013 to require a date in 2014.\\nvar oldDates \\u003d [new Date('1/1/2013'), new Date('12/31/2013')];\\nvar newDates \\u003d [new Date('1/1/2014'), new Date('12/31/2014')];\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns());\\nvar rules \\u003d range.getDataValidations();\\n\\nfor (var i \\u003d 0; i \\u003c rules.length; i++) {\\n  for (var j \\u003d 0; j \\u003c rules[i].length; j++) {\\n    var rule \\u003d rules[i][j];\\n\\n    if (rule !\\u003d null) {\\n      var criteria \\u003d rule.getCriteriaType();\\n      var args \\u003d rule.getCriteriaValues();\\n\\n      if (criteria \\u003d\\u003d SpreadsheetApp.DataValidationCriteria.DATE_BETWEEN\\n          \\u0026\\u0026 args[0].getTime() \\u003d\\u003d oldDates[0].getTime()\\n          \\u0026\\u0026 args[1].getTime() \\u003d\\u003d oldDates[1].getTime()) {\\n        // Create a builder from the existing rule, then change the dates.\\n        rules[i][j] \\u003d rule.copy().withCriteria(criteria, newDates).build();\\n      }\\n    }\\n  }\\n}\\nrange.setDataValidations(rules);\\n```\\n@param criteria The type of data validation criteria.\\n@param args An array of arguments appropriate to the criteria type; the number of arguments and\\n    their type match the corresponding `require...()` method above.\\n@return this builder, for chaining*/withCriteria(criteria:SpreadsheetApp.DataValidationCriteria,args:Object[]):SpreadsheetApp.DataValidationBuilder;}interface DataValidation{\\n/**Creates a builder for a data validation rule based on this rule's settings.\\n\\n```\\n// Change existing data validation rules that require a date in 2013 to require a date in 2014.\\nvar oldDates \\u003d [new Date('1/1/2013'), new Date('12/31/2013')];\\nvar newDates \\u003d [new Date('1/1/2014'), new Date('12/31/2014')];\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns());\\nvar rules \\u003d range.getDataValidations();\\n\\nfor (var i \\u003d 0; i \\u003c rules.length; i++) {\\n  for (var j \\u003d 0; j \\u003c rules[i].length; j++) {\\n    var rule \\u003d rules[i][j];\\n\\n    if (rule !\\u003d null) {\\n      var criteria \\u003d rule.getCriteriaType();\\n      var args \\u003d rule.getCriteriaValues();\\n\\n      if (criteria \\u003d\\u003d SpreadsheetApp.DataValidationCriteria.DATE_BETWEEN\\n          \\u0026\\u0026 args[0].getTime() \\u003d\\u003d oldDates[0].getTime()\\n          \\u0026\\u0026 args[1].getTime() \\u003d\\u003d oldDates[1].getTime()) {\\n        // Create a builder from the existing rule, then change the dates.\\n        rules[i][j] \\u003d rule.copy().withCriteria(criteria, newDates).build();\\n      }\\n    }\\n  }\\n}\\nrange.setDataValidations(rules);\\n```\\n@return a builder based on this rule's settings*/copy():SpreadsheetApp.DataValidationBuilder;\\n/**Returns `true` if the rule shows a warning when input fails data validation, or `false` if it rejects the input entirely. The default for new data validation rules is `true`.\\n@return `true` if the rule allows input that fails data validation; `false` if not*/getAllowInvalid():boolean;\\n/**Gets the rule's criteria type as defined in the [`DataValidationCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-criteria.html) enum. To get the\\narguments for the criteria, use [`getCriteriaValues()`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation.html#getCriteriaValues()). To use these values to create or\\nmodify a data validation rule, see [`DataValidationBuilder.withCriteria(criteria, args)`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-builder.html#withCriteria(DataValidationCriteria,Object)).\\n\\n```\\n// Log information about the data validation rule for cell A1.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d cell.getDataValidation();\\nif (rule !\\u003d null) {\\n  var criteria \\u003d rule.getCriteriaType();\\n  var args \\u003d rule.getCriteriaValues();\\n  Logger.log('The data validation rule is %s %s', criteria, args);\\n} else {\\n  Logger.log('The cell does not have a data validation rule.')\\n}\\n```\\n@return the type of data validation criteria*/getCriteriaType():SpreadsheetApp.DataValidationCriteria;\\n/**Gets an array of arguments for the rule's criteria. To get the criteria type, use [`getCriteriaType()`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation.html#getCriteriaType()). To use these values to create or modify a data validation rule, see [`DataValidationBuilder.withCriteria(criteria, args)`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-builder.html#withCriteria(DataValidationCriteria,Object)).\\n\\n```\\n// Log information about the data validation rule for cell A1.\\nvar cell \\u003d SpreadsheetApp.getActive().getRange('A1');\\nvar rule \\u003d cell.getDataValidation();\\nif (rule !\\u003d null) {\\n  var criteria \\u003d rule.getCriteriaType();\\n  var args \\u003d rule.getCriteriaValues();\\n  Logger.log('The data validation rule is %s %s', criteria, args);\\n} else {\\n  Logger.log('The cell does not have a data validation rule.')\\n}\\n```\\n@return an array of arguments appropriate to the rule's criteria type; the number of arguments\\n    and their type match the corresponding `require...()` method of the [`DataValidationBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/data-validation-builder.html) class*/getCriteriaValues():Object[];\\n/**Gets the rule's help text, or `null` if no help text is set.\\n@return the rule's help text, or `null` if no help text is set*/getHelpText():string;}interface DataSourceType{}interface _DataSourceType{\\n/**A BigQuery data source.*/BIGQUERY:DataSourceType;\\n/**A data source type that is not supported in Apps Script.*/DATA_SOURCE_TYPE_UNSUPPORTED:DataSourceType;\\n/**A Looker data source.*/LOOKER:DataSourceType;}interface DataSourceTableFilter{\\n/**Returns the data source column this filter applies to.\\n@return The data source column.*/getDataSourceColumn():SpreadsheetApp.DataSourceColumn;\\n/**Returns the [`DataSourceTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-table.html) that this filter belongs to.\\n@return The data source table, to which this filter belongs.*/getDataSourceTable():SpreadsheetApp.DataSourceTable;\\n/**Returns the filter criteria for this filter.\\n@return The filter criteria for this filter.*/getFilterCriteria():SpreadsheetApp.FilterCriteria;\\n/**Removes this filter from the data source object.*/remove():void;\\n/**Sets the filter criteria for this filter.\\n@param filterCriteria The filter criteria to set.\\n@return The filter for chaining.*/setFilterCriteria(filterCriteria:SpreadsheetApp.FilterCriteria):SpreadsheetApp.DataSourceTableFilter;}interface DataSourceTableColumn{\\n/**Gets the data source column.\\n@return The data source column.*/getDataSourceColumn():SpreadsheetApp.DataSourceColumn;\\n/**Removes the column from the [`DataSourceTable`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-table.html).*/remove():void;}interface DataSourceTable{\\n/**Adds columns to the data source table.\\n@param columnNames The list of the names of the columns to add.\\n@return The data source table, for chaining.*/addColumns(columnNames:string[]):SpreadsheetApp.DataSourceTable;\\n/**Adds a filter applied to the data source table.\\n@param columnName The name of the column to apply this filter to.\\n@param filterCriteria The filter criteria to apply.\\n@return The data source table, for chaining.*/addFilter(columnName:string,filterCriteria:SpreadsheetApp.FilterCriteria):SpreadsheetApp.DataSourceTable;\\n/**Adds a sort spec on a column in the data source table.\\n@param columnName The name of the column to sort.\\n@param ascending If `true`, sort the column in ascending order; if `false`, sort\\n    the column in descending order.\\n@return The data source sheet, for chaining.*/addSortSpec(columnName:string,ascending:boolean):SpreadsheetApp.DataSourceTable;\\n/**Adds a sort spec on a column in the data source table.\\n@param columnName The name of the column to sort.\\n@param sortOrder The sort order.\\n@return The data source sheet, for chaining.*/addSortSpec(columnName:string,sortOrder:SpreadsheetApp.SortOrder):SpreadsheetApp.DataSourceTable;\\n/**Cancels the data refresh associated with this object if it's currently running.\\n\\nThis example shows how to cancel a formula refresh.\\n\\n```\\nconst spreadsheet \\u003d SpreadsheetApp.getActive();\\nconst formula \\u003d spreadsheet.getDataSourceFormulas()[0];\\n// Cancel the ongoing refresh on the formula.\\nformula.cancelDataRefresh();\\n```\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/cancelDataRefresh():SpreadsheetApp.DataSourceTable;\\n/**Refreshes the data of this object regardless of the current state. See [`refreshData()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-table.html#refreshData()) for\\nmore details. If you want to cancel a currently running refresh of this object, see [`cancelDataRefresh()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-table.html#cancelDataRefresh()).\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/forceRefreshData():SpreadsheetApp.DataSourceTable;\\n/**Gets all the data source columns added to the data source table.\\n@return A list of data source table columns.*/getColumns():SpreadsheetApp.DataSourceTableColumn[];\\n/**Gets the data source the object is linked to.\\n@return The data source.*/getDataSource():SpreadsheetApp.DataSource;\\n/**Returns all filters applied to the data source table.\\n@return An array of all filters applied to the data source table.*/getFilters():SpreadsheetApp.DataSourceTableFilter[];\\n/**Gets the [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) this data source table spans.\\n@return The range.*/getRange():SpreadsheetApp.Range;\\n/**Returns the row limit for the data source table.\\n@return The row limit for the data source table, or `null` if no limit is set and the\\n    table uses the default max limit as in Google Sheets UI.*/getRowLimit():Integer;\\n/**Gets all the sort specs in the data source table.\\n@return A list of sort specs.*/getSortSpecs():SpreadsheetApp.SortSpec[];\\n/**Gets the data execution status of the object.\\n@return The data execution status.*/getStatus():SpreadsheetApp.DataExecutionStatus;\\n/**Returns whether the data source table is syncing all columns in the associated data source.\\n@return `True` if the data source table is syncing all columns in the associated data\\n    source, or `false` otherwise.*/isSyncingAllColumns():boolean;\\n/**Refreshes the data of the object.\\n\\nThrows an exception if currently in [`error`](https://developers.google.com/apps-script/reference/spreadsheet/data-execution-state.html#ERROR) state. Use [`DataSource#updateSpec()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)) to update the specification. The method is\\npreferred over [`forceRefreshData()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-table.html#forceRefreshData()) to prevent unexpected edits on data source.\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/refreshData():SpreadsheetApp.DataSourceTable;\\n/**Removes all the columns in the data source table.\\n@return The data source table, for chaining.*/removeAllColumns():SpreadsheetApp.DataSourceTable;\\n/**Removes all the sort specs in the data source table.\\n@return The data source sheet, for chaining.*/removeAllSortSpecs():SpreadsheetApp.DataSourceTable;\\n/**Updates the row limit for the data source table. If the provided row limit is `null`,\\nthen updates the data source table to use the default max row limit as in Google Sheets UI.\\n@param rowLimit The new row limit for the data table. If `null`, updates the table to use\\n    the default row limit.\\n@return The data source table, for chaining.*/setRowLimit(rowLimit:Integer):SpreadsheetApp.DataSourceTable;\\n/**Sync all current and future columns in the associated data source to the data source table.\\n@return The data source table, for chaining.*/syncAllColumns():SpreadsheetApp.DataSourceTable;\\n/**Waits until the current execution completes, timing out after the provided number of seconds.\\nThrows an exception if the execution is not completed when timing out, but does not cancel the\\ndata execution.\\n@param timeoutInSeconds The time to wait for data execution, in seconds. The maximum is 300\\n    seconds.\\n@return The data execution status.*/waitForCompletion(timeoutInSeconds:Integer):SpreadsheetApp.DataExecutionStatus;}interface DataSourceSpecBuilder{\\n/**Gets the builder for BigQuery data source.\\n@return The BigQuery data source specification builder.*/asBigQuery():SpreadsheetApp.BigQueryDataSourceSpecBuilder;\\n/**Gets the builder for Looker data source.\\n\\n```\\nvar spec \\u003d SpreadsheetApp.newDataSourceSpec()\\n           .asLooker()\\n           .setInstanceUrl('https://looker_instance_url.com')\\n           .setModelName('model_name')\\n           .setExploreName('explore_name')\\n           .build();\\n```\\n@return The Looker data source specification builder.*/asLooker():SpreadsheetApp.LookerDataSourceSpecBuilder;\\n/**Builds a data source specification from the settings in this builder. Must use `as...()`\\nto specify a data source type before building.\\n\\nThe following code sample builds a BigQuery DataSource Spec.\\n\\n```\\nvar bigQueryDataSourceSpec \\u003d SpreadsheetApp.newDataSourceSpec().asBigQuery();\\n// TODO(developer): Replace with the required dataset, project and table IDs.\\nbigQueryDataSourceSpec.setDatasetId(\\\"my data set id\\\");\\nbigQueryDataSourceSpec.setProjectId(\\\"my project id\\\");\\nbigQueryDataSourceSpec.setTableId(\\\"my table id\\\");\\n\\nbigQueryDataSourceSpec.build();\\n\\n```\\n\\nThe following code sample builds a Looker DataSource Spec.\\n\\n```\\nvar lookerDataSourceSpecBuilder \\u003d SpreadsheetApp.newDataSourceSpec().asLooker();\\nvar lookerSpec \\u003d lookerDataSourceSpecBuilder.setExploreName(\\\"my explore name\\\")\\n                                            .setInstanceUrl(\\\"my instance url\\\")\\n                                            .setModelName(\\\"my model name\\\")\\n                                            .build();\\n```\\n@return The data source specification.*/build():SpreadsheetApp.DataSourceSpec;\\n/**Creates a [`DataSourceSpecBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-spec-builder.html) based on this data source's settings.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\n\\nvar newSpec \\u003d spec.copy();\\n```\\n@return The builder.*/copy():SpreadsheetApp.DataSourceSpecBuilder;\\n/**Gets the parameters of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar parameters \\u003d spec.getParameters();\\n```\\n\\nThis method is only available for BigQuery data sources.\\n@return The parameter list.*/getParameters():SpreadsheetApp.DataSourceParameter[];\\n/**Gets the type of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar type \\u003d spec.getType();\\n```\\n@return The data source type.*/getType():SpreadsheetApp.DataSourceType;\\n/**Removes all the parameters.\\n\\n```\\nvar specBuilder \\u003d SpreadsheetApp.newDataSourceSpec();\\nspecBuilder.removeAllParameters();\\n```\\n@return The builder, for chaining.*/removeAllParameters():SpreadsheetApp.DataSourceSpecBuilder;\\n/**Removes the specified parameter.\\n\\n```\\nvar specBuilder \\u003d SpreadsheetApp.newDataSourceSpec();\\nspecBuilder.removeParameter(\\\"x\\\");\\n```\\n@param parameterName The name of the parameter to remove.\\n@return The builder, for chaining.*/removeParameter(parameterName:string):SpreadsheetApp.DataSourceSpecBuilder;\\n/**Adds a parameter, or if the parameter with the name exists, updates its source cell for data\\nsource spec builders of type [`DataSourceType.BIGQUERY`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-type.html#BIGQUERY).\\n\\nThis method is only available for BigQuery data sources.\\n\\n```\\nvar specBuilder \\u003d SpreadsheetApp.newDataSourceSpec().asBigQuery();\\nspecBuilder.setParameterFromCell(\\\"x\\\", \\\"A1\\\");\\nvar bigQuerySpec \\u003d specBuilder.build();\\n```\\n@param parameterName The parameter name.\\n@param sourceCell The source cell, as specified in A1 notation.\\n@return The builder, for chaining.*/setParameterFromCell(parameterName:string,sourceCell:string):SpreadsheetApp.DataSourceSpecBuilder;}interface DataSourceSpec{\\n/**Gets the spec for BigQuery data source.\\n@return The BigQuery data source spec.*/asBigQuery():SpreadsheetApp.BigQueryDataSourceSpec;\\n/**Gets the spec for Looker data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec().asLooker();\\n```\\n@return The Looker data source spec.*/asLooker():SpreadsheetApp.LookerDataSourceSpec;\\n/**Creates a [`DataSourceSpecBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-spec-builder.html) based on this data source's settings.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\n\\nvar newSpec \\u003d spec.copy();\\n```\\n@return The builder.*/copy():SpreadsheetApp.DataSourceSpecBuilder;\\n/**Gets the parameters of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar parameters \\u003d spec.getParameters();\\n```\\n\\nThis method is only available for BigQuery data sources.\\n@return The parameter list.*/getParameters():SpreadsheetApp.DataSourceParameter[];\\n/**Gets the type of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar type \\u003d spec.getType();\\n```\\n@return The data source type.*/getType():SpreadsheetApp.DataSourceType;}interface DataSourceSheetFilter{\\n/**Returns the data source column this filter applies to.\\n@return The data source column.*/getDataSourceColumn():SpreadsheetApp.DataSourceColumn;\\n/**Returns the [`DataSourceSheet`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-sheet.html) that this filter belongs to.\\n@return The data source sheet, to which this filter belongs.*/getDataSourceSheet():SpreadsheetApp.DataSourceSheet;\\n/**Returns the filter criteria for this filter.\\n@return The filter criteria for this filter.*/getFilterCriteria():SpreadsheetApp.FilterCriteria;\\n/**Removes this filter from the data source object.*/remove():void;\\n/**Sets the filter criteria for this filter.\\n@param filterCriteria The filter criteria to set.\\n@return The filter for chaining.*/setFilterCriteria(filterCriteria:SpreadsheetApp.FilterCriteria):SpreadsheetApp.DataSourceSheetFilter;}interface DataSourceSheet{\\n/**Adds a filter applied to the data source sheet.\\n@param columnName The name of the column to apply this filter to.\\n@param filterCriteria The filter criteria to apply.\\n@return The data source sheet, for method chaining.*/addFilter(columnName:string,filterCriteria:SpreadsheetApp.FilterCriteria):SpreadsheetApp.DataSourceSheet;\\n/**Returns the data source sheet as a regular sheet object.\\n@return The regular sheet.*/asSheet():SpreadsheetApp.Sheet;\\n/**Auto resizes the width of the specified column.\\n@param columnName The column name.\\n@return This data source sheet, for chaining.*/autoResizeColumn(columnName:string):SpreadsheetApp.DataSourceSheet;\\n/**Auto resizes the width of the specified columns.\\n@param columnNames The list of column names to update.\\n@return This data source sheet, for chaining.*/autoResizeColumns(columnNames:string[]):SpreadsheetApp.DataSourceSheet;\\n/**Cancels the data refresh associated with this object if it's currently running.\\n\\nThis example shows how to cancel a formula refresh.\\n\\n```\\nconst spreadsheet \\u003d SpreadsheetApp.getActive();\\nconst formula \\u003d spreadsheet.getDataSourceFormulas()[0];\\n// Cancel the ongoing refresh on the formula.\\nformula.cancelDataRefresh();\\n```\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/cancelDataRefresh():SpreadsheetApp.DataSourceSheet;\\n/**Refreshes the data of this object regardless of the current state. See [`refreshData()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-sheet.html#refreshData()) for\\nmore details. If you want to cancel a currently running refresh of this object, see [`cancelDataRefresh()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-sheet.html#cancelDataRefresh()).\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/forceRefreshData():SpreadsheetApp.DataSourceSheet;\\n/**Returns the width of the specified column.\\n@param columnName The column name.\\n@return The column's width, or `null` if the column uses the default width.*/getColumnWidth(columnName:string):Integer;\\n/**Gets the data source the object is linked to.\\n@return The data source.*/getDataSource():SpreadsheetApp.DataSource;\\n/**Returns all filters applied to the data source sheet.\\n@return An array of all filters applied to the data source sheet.*/getFilters():SpreadsheetApp.DataSourceSheetFilter[];\\n/**Returns all the values for the data source sheet for the provided column name.\\n@param columnName The data source column name to fetch values for.\\n@return A one-dimensional array of values.*/getSheetValues(columnName:string):Object[];\\n/**Returns all the values for the data source sheet for the provided column name from the provided\\nstart row (based-1) and up to the provided `numRows`.\\n@param columnName The data source column name to fetch values for.\\n@param startRow The row position to start fetching values from.\\n@param numRows The number of rows to fetch.\\n@return A one-dimensional array of values.*/getSheetValues(columnName:string,startRow:Integer,numRows:Integer):Object[];\\n/**Gets all the sort specs in the data source sheet.\\n@return A list of sort specs.*/getSortSpecs():SpreadsheetApp.SortSpec[];\\n/**Gets the data execution status of the object.\\n@return The data execution status.*/getStatus():SpreadsheetApp.DataExecutionStatus;\\n/**Refreshes the data of the object.\\n\\nThrows an exception if currently in [`error`](https://developers.google.com/apps-script/reference/spreadsheet/data-execution-state.html#ERROR) state. Use [`DataSource#updateSpec()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)) to update the specification. The method is\\npreferred over [`forceRefreshData()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-sheet.html#forceRefreshData()) to prevent unexpected edits on data source.\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/refreshData():SpreadsheetApp.DataSourceSheet;\\n/**Removes all filters applied to the data source sheet column.\\n@param columnName The name of the column to remove filters from.\\n@return The data source sheet, for method chaining.*/removeFilters(columnName:string):SpreadsheetApp.DataSourceSheet;\\n/**Removes the sort spec on a column in the data source sheet.\\n@param columnName The name of the column.\\n@return The data source sheet, for chaining.*/removeSortSpec(columnName:string):SpreadsheetApp.DataSourceSheet;\\n/**Sets the width of the specified column.\\n@param columnName The column name.\\n@param width The new width for the column.\\n@return This data source sheet, for chaining.*/setColumnWidth(columnName:string,width:Integer):SpreadsheetApp.DataSourceSheet;\\n/**Sets the width of the specified columns.\\n@param columnNames The list of column names to update.\\n@param width The new width for the columns.\\n@return This data source sheet, for chaining.*/setColumnWidths(columnNames:string[],width:Integer):SpreadsheetApp.DataSourceSheet;\\n/**Sets the sort spec on a column in the data source sheet.\\n@param columnName The name of the column to sort.\\n@param ascending If `true`, sort the column in ascending order; if `false`, sort\\n    the column in descending order.\\n@return The data source sheet, for chaining.*/setSortSpec(columnName:string,ascending:boolean):SpreadsheetApp.DataSourceSheet;\\n/**Sets the sort spec on a column in the data source sheet.\\n@param columnName The name of the column to sort.\\n@param sortOrder The sort order.\\n@return The data source sheet, for chaining.*/setSortSpec(columnName:string,sortOrder:SpreadsheetApp.SortOrder):SpreadsheetApp.DataSourceSheet;\\n/**Waits until the current execution completes, timing out after the provided number of seconds.\\nThrows an exception if the execution is not completed when timing out, but does not cancel the\\ndata execution.\\n@param timeoutInSeconds The time to wait for data execution, in seconds. The maximum is 300\\n    seconds.\\n@return The data execution status.*/waitForCompletion(timeoutInSeconds:Integer):SpreadsheetApp.DataExecutionStatus;}interface DataSourceRefreshScope{}interface _DataSourceRefreshScope{\\n/**The refresh applies to all data sources in the spreadsheet.*/ALL_DATA_SOURCES:DataSourceRefreshScope;\\n/**The data source refresh scope is unsupported.*/DATA_SOURCE_REFRESH_SCOPE_UNSUPPORTED:DataSourceRefreshScope;}interface DataSourceRefreshScheduleFrequency{\\n/**Gets the days of the month as numbers (1-28) on which to refresh the data source. Only applies\\nif frequency type is monthly.\\n@return The days of the month on which to refresh.*/getDaysOfTheMonth():Integer[];\\n/**Gets the days of the week on which to refresh the data source. Only applies if the frequency\\ntype is weekly.\\n@return The days of the week on which to refresh.*/getDaysOfTheWeek():Weekday[];\\n/**Gets the frequency type.\\n@return The frequency type.*/getFrequencyType():SpreadsheetApp.FrequencyType;\\n/**Gets the start hour (as a number 0-23) of the time interval during which the refresh schedule\\nruns. For example, if the start hour is 13 and the time interval's duration is 4 hours, then\\nthe data source is refreshed between 1 p.m. and 5 p.m. The hour is in the timezone of the\\nspreadsheet.\\n@return The start hour.*/getStartHour():Integer;}interface DataSourceRefreshSchedule{\\n/**Gets the refresh schedule frequency, which specifies how often and when to refresh.\\n@return The refresh schedule frequency.*/getFrequency():SpreadsheetApp.DataSourceRefreshScheduleFrequency;\\n/**Gets the scope of this refresh schedule.\\n@return The refresh scope.*/getScope():SpreadsheetApp.DataSourceRefreshScope;\\n/**Gets the time window of the next run of this refresh schedule. Only applies if this refresh\\nschedule is enabled.\\n@return The time window of the next run.*/getTimeIntervalOfNextRun():TimeInterval;\\n/**Determines whether this refresh schedule is enabled.\\n@return Whether this refresh schedule is enabled.*/isEnabled():boolean;}interface DataSourcePivotTable{\\n/**Adds a new pivot column group based on the specified data source column.\\n@param columnName The data source column name the pivot group is based on.\\n@return The new pivot group.*/addColumnGroup(columnName:string):SpreadsheetApp.PivotGroup;\\n/**Adds a new filter based on the specified data source column with the specified filter criteria.\\n@param columnName The data source column name the filter is based on.\\n@param filterCriteria The criteria the filter uses.\\n@return The new filter.*/addFilter(columnName:string,filterCriteria:SpreadsheetApp.FilterCriteria):SpreadsheetApp.PivotFilter;\\n/**Adds a new pivot value based on the specified data source column without any summarize\\nfunction. For Looker measures only.\\n\\nThe following code shows how you can add a Looker measure as a pivot value.\\n\\n```\\n// TODO(developer): Replace with your spreadsheet ID which has a Looker data source.\\nvar spreadsheet \\u003d SpreadsheetApp.openById(\\\"abcd1234\\\")\\nvar datasource \\u003d spreadsheet.getDataSources()[0];\\nvar pivotTable \\u003d datasource.createDataSourcePivotTableOnNewSheet();\\n\\npivotTable.addPivotValue(\\\"columnName\\\");\\n```\\n\\nThis method is only available for Looker data sources.\\n@param columnName The data source column name the pivot value is based on.\\n@return The new pivot value.*/addPivotValue(columnName:string):SpreadsheetApp.PivotValue;\\n/**Adds a new pivot value based on the specified data source column with the specified summarize\\nfunction.\\n\\nIn order to add pivot values for Looker measures, use [`addPivotValue(columnName)`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html#addPivotValue(String)).\\n@param columnName The data source column name the pivot value is based on.\\n@param summarizeFunction The summarize function the pivot value uses.\\n@return The new pivot value.*/addPivotValue(columnName:string,summarizeFunction:SpreadsheetApp.PivotTableSummarizeFunction):SpreadsheetApp.PivotValue;\\n/**Adds a new pivot row group based on the specified data source column.\\n@param columnName The data source column name the pivot group is based on.\\n@return The new pivot group.*/addRowGroup(columnName:string):SpreadsheetApp.PivotGroup;\\n/**Returns the data source pivot table as a regular pivot table object.\\n@return The pivot table.*/asPivotTable():SpreadsheetApp.PivotTable;\\n/**Cancels the data refresh associated with this object if it's currently running.\\n\\nThis example shows how to cancel a formula refresh.\\n\\n```\\nconst spreadsheet \\u003d SpreadsheetApp.getActive();\\nconst formula \\u003d spreadsheet.getDataSourceFormulas()[0];\\n// Cancel the ongoing refresh on the formula.\\nformula.cancelDataRefresh();\\n```\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/cancelDataRefresh():SpreadsheetApp.DataSourcePivotTable;\\n/**Refreshes the data of this object regardless of the current state. See [`refreshData()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html#refreshData()) for\\nmore details. If you want to cancel a currently running refresh of this object, see [`cancelDataRefresh()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html#cancelDataRefresh()).\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/forceRefreshData():SpreadsheetApp.DataSourcePivotTable;\\n/**Gets the data source the object is linked to.\\n@return The data source.*/getDataSource():SpreadsheetApp.DataSource;\\n/**Gets the data execution status of the object.\\n@return The data execution status.*/getStatus():SpreadsheetApp.DataExecutionStatus;\\n/**Refreshes the data of the object.\\n\\nThrows an exception if currently in [`error`](https://developers.google.com/apps-script/reference/spreadsheet/data-execution-state.html#ERROR) state. Use [`DataSource#updateSpec()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)) to update the specification. The method is\\npreferred over [`forceRefreshData()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-pivot-table.html#forceRefreshData()) to prevent unexpected edits on data source.\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/refreshData():SpreadsheetApp.DataSourcePivotTable;\\n/**Waits until the current execution completes, timing out after the provided number of seconds.\\nThrows an exception if the execution is not completed when timing out, but does not cancel the\\ndata execution.\\n@param timeoutInSeconds The time to wait for data execution, in seconds. The maximum is 300\\n    seconds.\\n@return The data execution status.*/waitForCompletion(timeoutInSeconds:Integer):SpreadsheetApp.DataExecutionStatus;}interface DataSourceParameterType{}interface _DataSourceParameterType{\\n/**The data source parameter is valued based on a cell.*/CELL:DataSourceParameterType;\\n/**A data source parameter type that is not supported in Apps Script.*/DATA_SOURCE_PARAMETER_TYPE_UNSUPPORTED:DataSourceParameterType;}interface DataSourceParameter{\\n/**Gets the parameter name.\\n@return The parameter name.*/getName():string;\\n/**Gets the source cell the parameter is valued based on, or `null` if the parameter type is\\nnot [`DataSourceParameterType.CELL`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-parameter-type.html#CELL).\\n@return The source cell, as specified in A1 notation.*/getSourceCell():string;\\n/**Gets the parameter type.\\n@return The parameter type.*/getType():SpreadsheetApp.DataSourceParameterType;}interface DataSourceFormula{\\n/**Cancels the data refresh associated with this object if it's currently running.\\n\\nThis example shows how to cancel a formula refresh.\\n\\n```\\nconst spreadsheet \\u003d SpreadsheetApp.getActive();\\nconst formula \\u003d spreadsheet.getDataSourceFormulas()[0];\\n// Cancel the ongoing refresh on the formula.\\nformula.cancelDataRefresh();\\n```\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/cancelDataRefresh():SpreadsheetApp.DataSourceFormula;\\n/**Refreshes the data of this object regardless of the current state. See [`refreshData()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-formula.html#refreshData()) for\\nmore details. If you want to cancel a currently running refresh of this object, see [`cancelDataRefresh()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-formula.html#cancelDataRefresh()).\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/forceRefreshData():SpreadsheetApp.DataSourceFormula;\\n/**Returns the [`Range`](https://developers.google.com/apps-script/reference/spreadsheet/range.html) representing the cell where this data source formula is anchored.\\n@return The anchor cell.*/getAnchorCell():SpreadsheetApp.Range;\\n/**Gets the data source the object is linked to.\\n@return The data source.*/getDataSource():SpreadsheetApp.DataSource;\\n/**Returns the display value of the data source formula.\\n@return The display value.*/getDisplayValue():string;\\n/**Returns the formula for this data source formula.\\n@return The formula.*/getFormula():string;\\n/**Gets the data execution status of the object.\\n@return The data execution status.*/getStatus():SpreadsheetApp.DataExecutionStatus;\\n/**Refreshes the data of the object.\\n\\nThrows an exception if currently in [`error`](https://developers.google.com/apps-script/reference/spreadsheet/data-execution-state.html#ERROR) state. Use [`DataSource#updateSpec()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)) to update the specification. The method is\\npreferred over [`forceRefreshData()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-formula.html#forceRefreshData()) to prevent unexpected edits on data source.\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/refreshData():SpreadsheetApp.DataSourceFormula;\\n/**Updates the formula.\\n@param formula The new formula.\\n@return The data source formula, for chaining.*/setFormula(formula:string):SpreadsheetApp.DataSourceFormula;\\n/**Waits until the current execution completes, timing out after the provided number of seconds.\\nThrows an exception if the execution is not completed when timing out, but does not cancel the\\ndata execution.\\n@param timeoutInSeconds The time to wait for data execution, in seconds. The maximum is 300\\n    seconds.\\n@return The data execution status.*/waitForCompletion(timeoutInSeconds:Integer):SpreadsheetApp.DataExecutionStatus;}interface DataSourceColumn{\\n/**Gets the data source associated with the data source column.\\n@return The data source.*/getDataSource():SpreadsheetApp.DataSource;\\n/**Gets the formula for the data source column. Returns an empty string if the data source column\\nis not a [`calculated column`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-column.html#isCalculatedColumn()).\\n@return The formula.*/getFormula():string;\\n/**Gets the name for the data source column.\\n@return The column name.*/getName():string;\\n/**Returns whether the column has an array dependency.\\n@return `true` if the column has an array dependency, or `false` otherwise.*/hasArrayDependency():boolean;\\n/**Returns whether the column is a calculated column.\\n@return `true` if the column is a calculated column, or `false` otherwise.*/isCalculatedColumn():boolean;\\n/**Removes the data source column.\\n\\nOnly supported for [`calculated columns`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-column.html#isCalculatedColumn()).*/remove():void;\\n/**Sets the formula for the data source column.\\n\\nOnly supported for [`calculated columns`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-column.html#isCalculatedColumn()).\\n@param formula The new formula.\\n@return The data source column, for chaining.*/setFormula(formula:string):SpreadsheetApp.DataSourceColumn;\\n/**Sets the name of the data source column.\\n\\nOnly supported for [`calculated columns`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-column.html#isCalculatedColumn()).\\n@param name The name to set.\\n@return The data source column, for chaining.*/setName(name:string):SpreadsheetApp.DataSourceColumn;}interface DataSourceChart{\\n/**Cancels the data refresh associated with this object if it's currently running.\\n\\nThis example shows how to cancel a formula refresh.\\n\\n```\\nconst spreadsheet \\u003d SpreadsheetApp.getActive();\\nconst formula \\u003d spreadsheet.getDataSourceFormulas()[0];\\n// Cancel the ongoing refresh on the formula.\\nformula.cancelDataRefresh();\\n```\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/cancelDataRefresh():SpreadsheetApp.DataSourceChart;\\n/**Refreshes the data of this object regardless of the current state. See [`refreshData()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-chart.html#refreshData()) for\\nmore details. If you want to cancel a currently running refresh of this object, see [`cancelDataRefresh()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-chart.html#cancelDataRefresh()).\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/forceRefreshData():SpreadsheetApp.DataSourceChart;\\n/**Gets the data source the object is linked to.\\n@return The data source.*/getDataSource():SpreadsheetApp.DataSource;\\n/**Gets the data execution status of the object.\\n@return The data execution status.*/getStatus():SpreadsheetApp.DataExecutionStatus;\\n/**Refreshes the data of the object.\\n\\nThrows an exception if currently in [`error`](https://developers.google.com/apps-script/reference/spreadsheet/data-execution-state.html#ERROR) state. Use [`DataSource#updateSpec()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)) to update the specification. The method is\\npreferred over [`forceRefreshData()`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-chart.html#forceRefreshData()) to prevent unexpected edits on data source.\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for specific data source\\ntype.\\n@return The data object.*/refreshData():SpreadsheetApp.DataSourceChart;\\n/**Waits until the current execution completes, timing out after the provided number of seconds.\\nThrows an exception if the execution is not completed when timing out, but does not cancel the\\ndata execution.\\n@param timeoutInSeconds The time to wait for data execution, in seconds. The maximum is 300\\n    seconds.\\n@return The data execution status.*/waitForCompletion(timeoutInSeconds:Integer):SpreadsheetApp.DataExecutionStatus;}interface DataSource{\\n/**Cancels all currently running refreshes of data source objects linked to this data source.\\n\\nThis example shows how to cancel all the refreshes of a data source.\\n\\n```\\nSpreadsheetApp.enableBigQueryExecution();\\nconst dataSource \\u003d spreadsheet.getDataSources()[0];\\ndataSource.cancelAllLinkedDataSourceObjectRefreshes();\\n```\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for the specific data\\nsource type.*/cancelAllLinkedDataSourceObjectRefreshes():void;\\n/**Creates a calculated column. This method is only available for BigQuery data sources.\\n@param name The name of the calculated column.\\n@param formula The calculated column formula.\\n@return The newly created calculated column.*/createCalculatedColumn(name:string,formula:string):SpreadsheetApp.DataSourceColumn;\\n/**Creates a data source pivot table from this data source in the first cell of a new sheet. As a\\nside effect, makes the new sheet the active sheet.\\n@return The newly created data source pivot table.*/createDataSourcePivotTableOnNewSheet():SpreadsheetApp.DataSourcePivotTable;\\n/**Creates a data source table from this data source in the first cell of a new sheet. As a side\\neffect, makes the new sheet the active sheet.\\n\\nThis method is only available for BigQuery data sources.\\n@return The newly created data source table.*/createDataSourceTableOnNewSheet():SpreadsheetApp.DataSourceTable;\\n/**Returns the calculated column in the data source that matches the column name.\\n@param columnName The name of the calculated column to get.\\n@return The calculated column that matches the column name, or `null` if there is no such\\n    calculated column.*/getCalculatedColumnByName(columnName:string):SpreadsheetApp.DataSourceColumn;\\n/**Returns all the calculated columns in the data source.\\n\\nData source specs of [`DataSourceType.LOOKER`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-type.html#LOOKER) type returns an empty array.\\n@return An array of all the calculated columns in the data source.*/getCalculatedColumns():SpreadsheetApp.DataSourceColumn[];\\n/**Returns all the columns in the data source.\\n@return An array of all the [`DataSourceColumn`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-column.html) in the data source.*/getColumns():SpreadsheetApp.DataSourceColumn[];\\n/**Returns the data source sheets associated with this data source.\\n@return An array of data source sheets.*/getDataSourceSheets():SpreadsheetApp.DataSourceSheet[];\\n/**Gets the data source specification.\\n@return The data source specification.*/getSpec():SpreadsheetApp.DataSourceSpec;\\n/**Refreshes all data source objects linked to the data source.\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for the specific data\\nsource type.*/refreshAllLinkedDataSourceObjects():void;\\n/**Updates the data source specification and refreshes the data source objects linked with this\\ndata source with the new specification.\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for the specific data\\nsource type.\\n\\nThrows an exception if the data source specification type is of a different type than the\\ncurrent data source type.\\n@param spec The data source specification to update with.\\n@return The data source.*/updateSpec(spec:SpreadsheetApp.DataSourceSpec):SpreadsheetApp.DataSource;\\n/**Updates the data source specification and refreshes the linked [`data\\nsource sheets`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-sheet.html) with the new specification.\\n\\nThrows an exception if the data source type is not enabled. Use `SpreadsheetApp#enable...Execution()` methods to enable data execution for the specific data\\nsource type.\\n\\nThrows an exception if the data source specification type is of a different type than the\\ncurrent data source type.\\n@param spec The data source specification to update with.\\n@param refreshAllLinkedObjects If `true`, also refreshes all the data source objects\\n    linked with this data source.\\n@return The data source.*/updateSpec(spec:SpreadsheetApp.DataSourceSpec,refreshAllLinkedObjects:boolean):SpreadsheetApp.DataSource;\\n/**Waits until all the current executions of the linked data source objects complete, timing out\\nafter the provided number of seconds. Throws an exception if the executions are not completed\\nwhen timing out, but does not cancel the data executions.\\n@param timeoutInSeconds The time to wait for data executions, in seconds. The maximum is 300\\n    seconds.*/waitForAllDataExecutionsCompletion(timeoutInSeconds:Integer):void;}interface DataExecutionStatus{\\n/**Gets the error code of the data execution.\\n@return The error code.*/getErrorCode():SpreadsheetApp.DataExecutionErrorCode;\\n/**Gets the error message of the data execution. The message may be empty.\\n@return The error message.*/getErrorMessage():string;\\n/**Gets the state of the data execution.\\n@return The execution state.*/getExecutionState():SpreadsheetApp.DataExecutionState;\\n/**Gets the time the last data execution completed regardless of the execution state.\\n@return The last execution time, or `null` if there has never been a data execution.*/getLastExecutionTime():Date;\\n/**Gets the time the data last successfully refreshed.\\n@return The last successfully refreshed time, or `null` if there is never a successful\\n    data execution.*/getLastRefreshedTime():Date;\\n/**Returns `true` if the data from last successful execution is truncated, or `false`\\notherwise.\\n@return `True` if the data from execution is truncated, or `false` otherwise.*/isTruncated():boolean;}interface DataExecutionState{}interface _DataExecutionState{\\n/**A data execution state is not supported in Apps Script.*/DATA_EXECUTION_STATE_UNSUPPORTED:DataExecutionState;\\n/**The data execution is completed and has errors.*/ERROR:DataExecutionState;\\n/**The data execution has not started.*/NOT_STARTED:DataExecutionState;\\n/**The data execution has started and is running.*/RUNNING:DataExecutionState;\\n/**The data execution is completed and successful.*/SUCCESS:DataExecutionState;}interface DataExecutionErrorCode{}interface _DataExecutionErrorCode{\\n/**A data execution error code that is not supported in Apps Script.*/DATA_EXECUTION_ERROR_CODE_UNSUPPORTED:DataExecutionErrorCode;\\n/**The database referenced by the data source is not found. Please update the data source [`specification`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)).*/DATA_NOT_FOUND:DataExecutionErrorCode;\\n/**The data execution returns duplicate column names. Please update the data source [`specification`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)).*/DUPLICATE_COLUMN_NAMES:DataExecutionErrorCode;\\n/**Data execution engine error. Use [`DataExecutionStatus.getErrorMessage()`](https://developers.google.com/apps-script/reference/spreadsheet/data-execution-status.html#getErrorMessage()) for details.*/ENGINE:DataExecutionErrorCode;\\n/**The data execution is interrupted. Please refresh later.*/INTERRUPTED:DataExecutionErrorCode;\\n/**The data execution has no error.*/NONE:DataExecutionErrorCode;\\n/**Other errors.*/OTHER:DataExecutionErrorCode;\\n/**Invalid data execution parameter. The source cell must exist and contain only a number or text.\\nPlease update the data source [`specification`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)).*/PARAMETER_INVALID:DataExecutionErrorCode;\\n/**The user does not have access to the database referenced by the data source. Please update the\\ndata source [`specification`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)) or contact the owner of the billing\\nproject to request access.*/PERMISSION_DENIED:DataExecutionErrorCode;\\n/**The data execution timed out. Please update the data source [`specification`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)).*/TIME_OUT:DataExecutionErrorCode;\\n/**The data execution returns more cells than the limit. Please update the data source [`specification`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)).*/TOO_MANY_CELLS:DataExecutionErrorCode;\\n/**The data execution returns values that exceed the maximum characters allowed in a single cell.\\nPlease update the data source [`specification`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)).*/TOO_MANY_CHARS_PER_CELL:DataExecutionErrorCode;\\n/**The data execution returns more columns than the limit. Please update the data source [`specification`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)).*/TOO_MANY_COLUMNS:DataExecutionErrorCode;\\n/**The data execution returns more rows than the limit. Please update the data source [`specification`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)).*/TOO_MANY_ROWS:DataExecutionErrorCode;\\n/**The data execution returns unsupported data type. Please update the data source [`specification`](https://developers.google.com/apps-script/reference/spreadsheet/data-source.html#updateSpec(DataSourceSpec)).\\n\\nFor BigQuery, `ARRAY` or `STRUCT` type is not supported.*/UNSUPPORTED_DATA_TYPE:DataExecutionErrorCode;}interface CopyPasteType{}interface _CopyPasteType{\\n/**Paste the column widths only.*/PASTE_COLUMN_WIDTHS:CopyPasteType;\\n/**Paste the color rules only.*/PASTE_CONDITIONAL_FORMATTING:CopyPasteType;\\n/**Paste the data validation only.*/PASTE_DATA_VALIDATION:CopyPasteType;\\n/**Paste the format only.*/PASTE_FORMAT:CopyPasteType;\\n/**Paste the formulas only.*/PASTE_FORMULA:CopyPasteType;\\n/**Paste values, formulas, formats and merges.*/PASTE_NORMAL:CopyPasteType;\\n/**Paste values, formulas, formats and merges but without borders.*/PASTE_NO_BORDERS:CopyPasteType;\\n/**Paste the values ONLY without formats, formulas or merges.*/PASTE_VALUES:CopyPasteType;}interface ContainerInfo{\\n/**The chart's left side is anchored in this column.\\n@return 1-indexed column (that is, column C is 3)*/getAnchorColumn():Integer;\\n/**The chart's top side is anchored in this row.\\n@return 1-indexed row (that is, row 5 returns 5)*/getAnchorRow():Integer;\\n/**The chart's upper left hand corner is offset from the anchor column by this many pixels.\\n@return the horizontal offset in pixels for the upper left hand corner of the chart*/getOffsetX():Integer;\\n/**The chart's upper left hand corner is offset from the anchor row by this many pixels.\\n@return the vertical offset in pixels for the upper left hand corner of the chart*/getOffsetY():Integer;}interface ConditionalFormatRuleBuilder{\\n/**Constructs a conditional format rule from the settings applied to the builder.\\n@return a representation of the conditional format rule*/build():SpreadsheetApp.ConditionalFormatRule;\\n/**Returns a rule builder preset with this rule's settings.\\n@return a builder based on this rule's settings*/copy():SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Retrieves the rule's [`BooleanCondition`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-condition.html) information if this rule uses\\nboolean condition criteria. Otherwise returns `null`.\\n\\n```\\n// Log the boolean criteria type of the first conditional format rules of a sheet.\\nvar rule \\u003d SpreadsheetApp.getActiveSheet().getConditionalFormatRules()[0];\\nvar booleanCondition \\u003d rule.getBooleanCondition();\\nif (booleanCondition !\\u003d null) {\\n  Logger.log(booleanCondition.getCriteriaType());\\n}\\n```\\n@return the boolean condition object, or `null` if the rule does not use a boolean\\n    condition.*/getBooleanCondition():SpreadsheetApp.BooleanCondition;\\n/**Retrieves the rule's [`GradientCondition`](https://developers.google.com/apps-script/reference/spreadsheet/gradient-condition.html) information, if this rule\\nuses gradient condition criteria. Otherwise returns `null`.\\n\\n```\\n// Log the gradient minimum color of the first conditional format rule of a sheet.\\nvar rule \\u003d SpreadsheetApp.getActiveSheet().getConditionalFormatRules()[0];\\nvar gradientCondition \\u003d rule.getGradientCondition();\\nif (gradientCondition !\\u003d null) {\\n  // Assume the color has ColorType.RGB.\\n  Logger.log(gradientCondition.getMinColorObject().asRgbColor().asHexString());\\n}\\n```\\n@return The gradient condition object, or `null` if the rule does not use a gradient\\n    condition.*/getGradientCondition():SpreadsheetApp.GradientCondition;\\n/**Retrieves the ranges to which this conditional format rule is applied.\\n\\n```\\n// Log each range of the first conditional format rule of a sheet.\\nvar rule \\u003d SpreadsheetApp.getActiveSheet().getConditionalFormatRules()[0];\\nvar ranges \\u003d rule.getRanges();\\nfor (var i \\u003d 0; i \\u003c ranges.length; i++) {\\n  Logger.log(ranges[i].getA1Notation());\\n}\\n```\\n@return the ranges to which this conditional format rule is applied.*/getRanges():SpreadsheetApp.Range[];\\n/**Sets the background color for the conditional format rule's format. Passing in `null`\\nremoves the background color format setting from the rule.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color to red if the cell has text equal to \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextEqualTo(\\\"hello\\\")\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The desired color or `null` to clear.\\n@return the builder, for chaining*/setBackground(color:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the background color for the conditional format rule's format. Passing in `null`\\nremoves the background color format setting from the rule.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color to theme background color if the cell has text equal to \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar color \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.BACKGROUND)\\n    .build();\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextEqualTo(\\\"hello\\\")\\n    .setBackground(color)\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The desired color object or `null` to clear.\\n@return The builder, for chaining.*/setBackgroundObject(color:SpreadsheetApp.Color):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets text bolding for the conditional format rule's format. If `bold` is `true`,\\nthe rule bolds text if the condition is met; if `false`, the rule removes any existing\\nbolding if the condition is met. Passing in `null` removes the bold format setting from\\nthe rule.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn their\\n// text bold if the cell has text equal to \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextEqualTo(\\\"hello\\\")\\n    .setBold(true)\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param bold Whether or not the text should be bolded if the format condition is met; `null` removes this setting.\\n@return the builder, for chaining*/setBold(bold:boolean):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the font color for the conditional format rule's format. Passing in `null` removes\\nthe font color format setting from the rule.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their font\\n// color to red if the cell has text equal to \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextEqualTo(\\\"hello\\\")\\n    .setFontColor(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The desired color or `null` to clear.\\n@return the builder, for chaining*/setFontColor(color:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the font color for the conditional format rule's format. Passing in `null` removes\\nthe font color format setting from the rule.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their font\\n// color to theme text color if the cell has text equal to \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar color \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.TEXT)\\n    .build();\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextEqualTo(\\\"hello\\\")\\n    .setFontColor(color)\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The desired color object or `null` to clear.\\n@return The builder, for chaining.*/setFontColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Clears the conditional format rule's gradient maxpoint value, and instead uses the maximum\\nvalue in the rule's ranges. Also sets the gradient's maxpoint color to the input color.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color somewhere between white and red, based on their values in comparison to\\n// the ranges minimum and maximum values.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .setGradientMaxpoint(\\\"#FF0000\\\")\\n    .setGradientMinpoint(\\\"#FFFFFF\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The maxpoint color to set.\\n@return the builder, for chaining*/setGradientMaxpoint(color:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Clears the conditional format rule's gradient maxpoint value, and instead uses the maximum\\nvalue in the rule's ranges. Also sets the gradient's maxpoint color to the input color.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color somewhere between theme text and background colors, based on their values\\n// in comparison to the ranges minimum and maximum values.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar textColor \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.TEXT)\\n    .build();\\nvar backgroundColor \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.BACKGROUND)\\n    .build();\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .setGradientMaxpoint(textColor)\\n    .setGradientMinpoint(backgroundColor)\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The maxpoint color object to set.\\n@return The builder, for chaining.*/setGradientMaxpointObject(color:SpreadsheetApp.Color):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule's gradient maxpoint fields.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color somewhere from theme accent 1, accent 2 to accent 3 colors, based on their\\n// values in comparison to the values 0, 50, and 100.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar color1 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT1)\\n    .build();\\nvar color2 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT2)\\n    .build();\\nvar color3 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT3)\\n    .build();\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .setGradientMaxpointWithValue(color1, SpreadsheetApp.InterpolationType.NUMBER, \\\"100\\\")\\n    .setGradientMidpointWithValue(color2, SpreadsheetApp.InterpolationType.NUMBER, \\\"50\\\")\\n    .setGradientMinpointWithValue(color3, SpreadsheetApp.InterpolationType.NUMBER, \\\"0\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The maxpoint color to set.\\n@param type The maxpoint interpolation type to set.\\n@param value The maxpoint value to set.\\n@return The builder, for chaining.*/setGradientMaxpointObjectWithValue(color:SpreadsheetApp.Color,type:SpreadsheetApp.InterpolationType,value:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule's gradient maxpoint fields.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color somewhere from red green to blue, based on their values in comparison to\\n// the values 0, 50, and 100.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .setGradientMaxpointWithValue(\\\"#0000FF\\\", SpreadsheetApp.InterpolationType.NUMBER, \\\"100\\\")\\n    .setGradientMidpointWithValue(\\\"#00FF00\\\", SpreadsheetApp.InterpolationType.NUMBER, \\\"50\\\")\\n    .setGradientMinpointWithValue(\\\"#FF0000\\\", SpreadsheetApp.InterpolationType.NUMBER, \\\"0\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The maxpoint color to set.\\n@param type The maxpoint interpolation type to set.\\n@param value The maxpoint value to set.\\n@return the builder, for chaining*/setGradientMaxpointWithValue(color:string,type:SpreadsheetApp.InterpolationType,value:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule's gradient midpoint fields. Clears all of the midpoint fields\\nif the passed in interpolation type is `null`.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color somewhere from theme accent 1 to accent 2 to accent 3 colors, based on\\n// their values in comparison to the values 0, 50, and 100.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar color1 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT1)\\n    .build();\\nvar color2 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT2)\\n    .build();\\nvar color3 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT3)\\n    .build();\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .setGradientMaxpointWithValue(color1, SpreadsheetApp.InterpolationType.NUMBER, \\\"100\\\")\\n    .setGradientMidpointWithValue(color2, SpreadsheetApp.InterpolationType.NUMBER, \\\"50\\\")\\n    .setGradientMinpointWithValue(color3, SpreadsheetApp.InterpolationType.NUMBER, \\\"0\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The midpoint color to set.\\n@param type The midpoint interpolation type to set or `null` to clear.\\n@param value The midpoint value to set.\\n@return The builder, for chaining.*/setGradientMidpointObjectWithValue(color:SpreadsheetApp.Color,type:SpreadsheetApp.InterpolationType,value:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule's gradient midpoint fields. Clears all of the midpoint fields\\nif the passed in interpolation type is `null`.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color somewhere from red green to blue, based on their values in comparison to\\n// the values 0, 50, and 100.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .setGradientMaxpointWithValue(\\\"#0000FF\\\", SpreadsheetApp.InterpolationType.NUMBER, \\\"100\\\")\\n    .setGradientMidpointWithValue(\\\"#00FF00\\\", SpreadsheetApp.InterpolationType.NUMBER, \\\"50\\\")\\n    .setGradientMinpointWithValue(\\\"#FF0000\\\", SpreadsheetApp.InterpolationType.NUMBER, \\\"0\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The midpoint color to set.\\n@param type The midpoint interpolation type to set or `null` to clear.\\n@param value The midpoint value to set.\\n@return the builder, for chaining*/setGradientMidpointWithValue(color:string,type:SpreadsheetApp.InterpolationType,value:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Clears the conditional format rule's gradient minpoint value, and instead uses the minimum\\nvalue in the rule's ranges. Also sets the gradient's minpoint color to the input color.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color somewhere between white and red, based on their values in comparison to\\n// the ranges minimum and maximum values.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .setGradientMaxpoint(\\\"#FF0000\\\")\\n    .setGradientMinpoint(\\\"#FFFFFF\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The minpoint color to set.\\n@return the builder, for chaining*/setGradientMinpoint(color:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Clears the conditional format rule's gradient minpoint value, and instead uses the minimum\\nvalue in the rule's ranges. Also sets the gradient's minpoint color to the input color.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color somewhere between theme text and background colors, based on their values\\n// in comparison to the ranges minimum and maximum values.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar textColor \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.TEXT)\\n    .build();\\nvar backgroundColor \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.BACKGROUND)\\n    .build();\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .setGradientMaxpoint(textColor)\\n    .setGradientMinpoint(backgroundColor)\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The minpoint color object to set.\\n@return The builder, for chaining.*/setGradientMinpointObject(color:SpreadsheetApp.Color):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule's gradient minpoint fields.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color somewhere from theme accent 1 to accent 2 to accent 3 colors, based on\\n// their values in comparison to the values 0, 50, and 100.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar color1 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT1)\\n    .build();\\nvar color2 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT2)\\n    .build();\\nvar color3 \\u003d SpreadsheetApp.newColor()\\n    .setThemeColor(SpreadsheetApp.ThemeColorType.ACCENT3)\\n    .build();\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .setGradientMaxpointWithValue(color1, SpreadsheetApp.InterpolationType.NUMBER, \\\"100\\\")\\n    .setGradientMidpointWithValue(color2, SpreadsheetApp.InterpolationType.NUMBER, \\\"50\\\")\\n    .setGradientMinpointWithValue(color3, SpreadsheetApp.InterpolationType.NUMBER, \\\"0\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The minpoint color to set.\\n@param type The minpoint interpolation type to set.\\n@param value The minpoint value to set.\\n@return The builder, for chaining.*/setGradientMinpointObjectWithValue(color:SpreadsheetApp.Color,type:SpreadsheetApp.InterpolationType,value:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule's gradient minpoint fields.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to set their\\n// background color somewhere from red to green to blue, based on their values in comparison to\\n// the values 0, 50, and 100.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .setGradientMaxpointWithValue(\\\"#0000FF\\\", SpreadsheetApp.InterpolationType.NUMBER, \\\"100\\\")\\n    .setGradientMidpointWithValue(\\\"#00FF00\\\", SpreadsheetApp.InterpolationType.NUMBER, \\\"50\\\")\\n    .setGradientMinpointWithValue(\\\"#FF0000\\\", SpreadsheetApp.InterpolationType.NUMBER, \\\"0\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param color The minpoint color to set.\\n@param type The minpoint interpolation type to set.\\n@param value The minpoint value to set.\\n@return the builder, for chaining*/setGradientMinpointWithValue(color:string,type:SpreadsheetApp.InterpolationType,value:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets text italics for the conditional format rule's format. If `italic` is `true`,\\nthe rule italicises text if the condition is met; if `false`, the rule removes any\\nexisting italicization if the condition is met. Passing in `null` removes the italic\\nformat setting from the rule.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn their\\n// text italic if the cell has text equal to \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextEqualTo(\\\"hello\\\")\\n    .setItalic(true)\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param italic Whether or not the text should be italicised if the format condition is met;\\n    `null` removes this setting.\\n@return the builder, for chaining*/setItalic(italic:boolean):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets one or more ranges to which this conditional format rule is applied. This operation\\nreplaces any existing ranges. Setting an empty array clears any existing ranges. A rule must\\nhave at least one range.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 and range D4:F6\\n// to turn red if they contain a number between 1 and 10.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rangeOne \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rangeTwo \\u003d sheet.getRange(\\\"D4:F6\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenNumberBetween(1, 10)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([rangeOne, rangeTwo])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param ranges The ranges to which this conditional format rule is applied.\\n@return the builder, for chaining*/setRanges(ranges:SpreadsheetApp.Range[]):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets text strikethrough for the conditional format rule's format. If `strikethrough` is\\n`true`, the rule strikesthrough text if the condition is met; if `false`, the rule\\nremoves any existing strikethrough formatting if the condition is met. Passing in `null`\\nremoves the strikethrough format setting from the rule.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to strikethrough\\n// their text if the cell has text equal to \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextEqualTo(\\\"hello\\\")\\n    .setStrikethrough(true)\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param strikethrough Whether or not the text should be struckthrough if the format condition is\\n    met; `null` removes this setting.\\n@return the builder, for chaining*/setStrikethrough(strikethrough:boolean):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets text underlining for the conditional format rule's format. If `underline` is `true`, the rule underlines text if the condition is met; if `false`, the rule removes any\\nexisting underlines if the condition is met. Passing in `null` removes the underline\\nformat setting from the rule.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to underline\\n// their text if the cell has text equal to \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextEqualTo(\\\"hello\\\")\\n    .setUnderline(true)\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param underline Whether or not the text should be underlined if the format condition is met;\\n    `null` removes this setting.\\n@return the builder, for chaining*/setUnderline(underline:boolean):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when the cell is empty.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they are empty.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenCellEmpty()\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@return the builder, for chaining*/whenCellEmpty():SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when the cell is not empty.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they are not empty.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenCellNotEmpty()\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@return the builder, for chaining*/whenCellNotEmpty():SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a date is after the given value.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain a date after 11/4/1993.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenDateAfter(new Date(\\\"11/4/1993\\\"))\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param date The latest date.\\n@return the builder, for chaining*/whenDateAfter(date:Date):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a date is after the given relative date.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain a date after today.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenDateAfter(SpreadsheetApp.RelativeDate.TODAY)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param date The latest date relative to the date type selected.\\n@return the builder, for chaining*/whenDateAfter(date:SpreadsheetApp.RelativeDate):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a date is before the given date.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain a date before 11/4/1993.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenDateBefore(new Date(\\\"11/4/1993\\\"))\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param date The earliest unacceptable date.\\n@return the builder, for chaining*/whenDateBefore(date:Date):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a date is before the given relative date.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain a date before today.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenDateBefore(SpreadsheetApp.RelativeDate.TODAY)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param date The latest date relative to the date type selected.\\n@return the builder, for chaining*/whenDateBefore(date:SpreadsheetApp.RelativeDate):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a date is equal to the given date.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain the date 11/4/1993.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenDateEqualTo(new Date(\\\"11/4/1993\\\"))\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param date The sole acceptable date.\\n@return the builder, for chaining*/whenDateEqualTo(date:Date):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a date is equal to the given relative date.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain todays date.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenDateEqualTo(SpreadsheetApp.RelativeDate.TODAY)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param date The latest date relative to the date type selected.\\n@return the builder, for chaining*/whenDateEqualTo(date:SpreadsheetApp.RelativeDate):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when that the given formula evaluates to `true`.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they satisfy the condition \\\"\\u003dEQ(B4, C3)\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenFormulaSatisfied(\\\"\\u003dEQ(B4, C3)\\\")\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param formula A custom formula that evaluates to `true` if the input is valid.\\n@return the builder, for chaining*/whenFormulaSatisfied(formula:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a number falls between, or is either of, two\\nspecified values.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain a number between 1 and 10.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenNumberBetween(1, 10)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param start The lowest acceptable value.\\n@param end The highest acceptable value.\\n@return the builder, for chaining*/whenNumberBetween(start:number,end:number):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a number is equal to the given value.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain the number 10.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenNumberEqualTo(10)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param number The sole acceptable value.\\n@return the builder, for chaining*/whenNumberEqualTo(number:number):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a number is greater than the given value.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red\\n// if they contain a number greater than 10.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenNumberGreaterThan(10)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param number The highest unacceptable value.\\n@return the builder, for chaining*/whenNumberGreaterThan(number:number):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a number is greater than or equal to the given\\nvalue.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain a number greater than or equal to 10.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenNumberGreaterThanOrEqualTo(10)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param number The lowest acceptable value.\\n@return the builder, for chaining*/whenNumberGreaterThanOrEqualTo(number:number):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional conditional format rule to trigger when a number less than the given\\nvalue.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain a number less than 10.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenNumberLessThan(10)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param number The lowest unacceptable value.\\n@return the builder, for chaining*/whenNumberLessThan(number:number):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a number less than or equal to the given\\nvalue.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain a number less than or equal to 10.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenNumberLessThanOrEqualTo(10)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param number The highest acceptable value.\\n@return the builder, for chaining*/whenNumberLessThanOrEqualTo(number:number):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a number does not fall between, and is neither\\nof, two specified values.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain a number not between 1 and 10.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenNumberNotBetween(1, 10)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param start The lowest unacceptable value.\\n@param end The highest unacceptable value.\\n@return the builder, for chaining*/whenNumberNotBetween(start:number,end:number):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when a number is not equal to the given value.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they don't contain the number 10.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenNumberNotEqualTo(10)\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param number The sole unacceptable value.\\n@return the builder, for chaining*/whenNumberNotEqualTo(number:number):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when that the input contains the given value.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they contain the text \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextContains(\\\"hello\\\")\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param text The value that the input must contain.\\n@return the builder, for chaining*/whenTextContains(text:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when that the input does not contain the given\\nvalue.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they don't contain the text \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextDoesNotContain(\\\"hello\\\")\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param text The value that the input must not contain.\\n@return the builder, for chaining*/whenTextDoesNotContain(text:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when that the input ends with the given value.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they end with the text \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextEndsWith(\\\"hello\\\")\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param text Text to compare against the end of the string.\\n@return the builder, for chaining*/whenTextEndsWith(text:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when that the input is equal to the given value.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they have text equal to \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextEqualTo(\\\"hello\\\")\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param text The sole acceptable value.\\n@return the builder, for chaining*/whenTextEqualTo(text:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to trigger when that the input starts with the given value.\\n\\n```\\n// Adds a conditional format rule to a sheet that causes cells in range A1:B3 to turn red if\\n// they start with the text \\\"hello\\\".\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar range \\u003d sheet.getRange(\\\"A1:B3\\\");\\nvar rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n    .whenTextStartsWith(\\\"hello\\\")\\n    .setBackground(\\\"#FF0000\\\")\\n    .setRanges([range])\\n    .build();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nrules.push(rule);\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param text Text to compare against the beginning of the string.\\n@return the builder, for chaining*/whenTextStartsWith(text:string):SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Sets the conditional format rule to criteria defined by [`BooleanCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-criteria.html) values,\\ntypically taken from the [`criteria`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-condition.html#getCriteriaType()) and [`arguments`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-condition.html#getCriteriaValues()) of an\\nexisting rule.\\n\\n```\\n// Adds a new conditional format rule that is a copy of the first active\\n// conditional format rule, except it instead sets its cells to have a black\\n// background color.\\n\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nvar booleanCondition \\u003d rules[0].getBooleanCondition();\\nif (booleanCondition !\\u003d null) {\\n  var rule \\u003d SpreadsheetApp.newConditionalFormatRule()\\n      .withCriteria(booleanCondition.getCriteriaType(),\\n         booleanCondition.getCriteriaValues())\\n      .setBackground(\\\"#000000\\\")\\n      .setRanges(rule.getRanges())\\n      .build();\\n  rules.push(rule);\\n}\\nsheet.setConditionalFormatRules(rules);\\n```\\n@param criteria The type of conditional format criteria.\\n@param args An array of arguments appropriate to the criteria type; the number of arguments and\\n    their type match the corresponding `when...()` method above.\\n@return the builder, for chaining*/withCriteria(criteria:SpreadsheetApp.BooleanCriteria,args:Object[]):SpreadsheetApp.ConditionalFormatRuleBuilder;}interface ConditionalFormatRule{\\n/**Returns a rule builder preset with this rule's settings.\\n@return a builder based on this rule's settings*/copy():SpreadsheetApp.ConditionalFormatRuleBuilder;\\n/**Retrieves the rule's [`BooleanCondition`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-condition.html) information if this rule uses\\nboolean condition criteria. Otherwise returns `null`.\\n\\n```\\n// Log the boolean criteria type of the first conditional format rules of a sheet.\\nvar rule \\u003d SpreadsheetApp.getActiveSheet().getConditionalFormatRules()[0];\\nvar booleanCondition \\u003d rule.getBooleanCondition();\\nif (booleanCondition !\\u003d null) {\\n  Logger.log(booleanCondition.getCriteriaType());\\n}\\n```\\n@return the boolean condition object, or `null` if the rule does not use a boolean\\n    condition.*/getBooleanCondition():SpreadsheetApp.BooleanCondition;\\n/**Retrieves the rule's [`GradientCondition`](https://developers.google.com/apps-script/reference/spreadsheet/gradient-condition.html) information, if this rule\\nuses gradient condition criteria. Otherwise returns `null`.\\n\\n```\\n// Log the gradient minimum color of the first conditional format rule of a sheet.\\nvar rule \\u003d SpreadsheetApp.getActiveSheet().getConditionalFormatRules()[0];\\nvar gradientCondition \\u003d rule.getGradientCondition();\\nif (gradientCondition !\\u003d null) {\\n  // Assume the color has ColorType.RGB.\\n  Logger.log(gradientCondition.getMinColorObject().asRgbColor().asHexString());\\n}\\n```\\n@return The gradient condition object, or `null` if the rule does not use a gradient\\n    condition.*/getGradientCondition():SpreadsheetApp.GradientCondition;\\n/**Retrieves the ranges to which this conditional format rule is applied.\\n\\n```\\n// Log each range of the first conditional format rule of a sheet.\\nvar rule \\u003d SpreadsheetApp.getActiveSheet().getConditionalFormatRules()[0];\\nvar ranges \\u003d rule.getRanges();\\nfor (var i \\u003d 0; i \\u003c ranges.length; i++) {\\n  Logger.log(ranges[i].getA1Notation());\\n}\\n```\\n@return the ranges to which this conditional format rule is applied.*/getRanges():SpreadsheetApp.Range[];}interface ColorBuilder{\\n/**Converts this color to an [`RgbColor`](https://developers.google.com/apps-script/reference/spreadsheet/../base/rgb-color.html).\\n@return The RGB color.*/asRgbColor():RgbColor;\\n/**Converts this color to a [`ThemeColor`](https://developers.google.com/apps-script/reference/spreadsheet/theme-color.html).\\n@return The theme color.*/asThemeColor():SpreadsheetApp.ThemeColor;\\n/**Creates a color object from the settings supplied to the builder.\\n@return A color object created from this builder.*/build():SpreadsheetApp.Color;\\n/**Get the type of this color.\\n@return The color type.*/getColorType():ColorType;\\n/**Sets as RGB color.\\n@param cssString The RGB color in CSS notation (such as '#ffffff').\\n@return This builder, for chaining.*/setRgbColor(cssString:string):SpreadsheetApp.ColorBuilder;\\n/**Sets as theme color.\\n@param themeColorType The theme color type.\\n@return This builder, for chaining.*/setThemeColor(themeColorType:SpreadsheetApp.ThemeColorType):SpreadsheetApp.ColorBuilder;}interface Color{\\n/**Converts this color to an [`RgbColor`](https://developers.google.com/apps-script/reference/spreadsheet/../base/rgb-color.html).\\n@return The RGB color.*/asRgbColor():RgbColor;\\n/**Converts this color to a [`ThemeColor`](https://developers.google.com/apps-script/reference/spreadsheet/theme-color.html).\\n@return The theme color.*/asThemeColor():SpreadsheetApp.ThemeColor;\\n/**Get the type of this color.\\n@return The color type.*/getColorType():ColorType;}interface CellImageBuilder{\\n/**A field set to `ValueType.IMAGE`, representing the image value type.*/valueType:SpreadsheetApp._ValueType;\\n/**Creates the image value type needed to add an image to a cell. The image value is built from\\nthe image properties added to the builder, such as the source URL.\\n@return A representation of the image to add to a cell.*/build():SpreadsheetApp.CellImage;\\n/**Returns the alt text description for this image.\\n@return The alt text description.*/getAltTextDescription():string;\\n/**Returns the alt text title for this image.\\n@return The alt text title.*/getAltTextTitle():string;\\n/**Returns a Google-hosted URL to the image. This URL is tagged with the account of the requester,\\nso anyone with the URL effectively accesses the image as the original requester. Access to the\\nimage might be lost if the spreadsheet's sharing settings change. The returned URL expires\\nafter a short period of time.\\n@return The Google-hosted URL of the image.*/getContentUrl():string;\\n/**Gets the image's source URL; returns `null` if the URL is unavailable. If the image was\\ninserted by URL using an API, this method returns the URL provided during image insertion.\\n@return The image URL if available; returns `null` if the image is unavailable or doesn't\\n    have a source URL.*/getUrl():string;\\n/**Sets the alt-text description for this image.\\n@param description The new alt text description for the image.\\n@return This image, for chaining.*/setAltTextDescription(description:string):SpreadsheetApp.CellImage;\\n/**Sets the alt text title for this image.\\n@param title The new alt text title for the image.\\n@return This image, for chaining.*/setAltTextTitle(title:string):SpreadsheetApp.CellImage;\\n/**Sets the image source URL.\\n@param url The URL for the image.\\n@return This builder, for chaining.*/setSourceUrl(url:string):SpreadsheetApp.CellImageBuilder;\\n/**Creates a builder that turns an image into an image value type so that you can place it into a\\ncell. Before an image is placed into a cell, it needs to be created as an image value type.\\nThen you can add it to a cell using [`Range.setValue(value)`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#setValue(Object)) or [`Range.setValues(values)`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#setValues(Object)).\\n@return A builder that creates an image value type based on the given image properties.*/toBuilder():SpreadsheetApp.CellImageBuilder;}interface CellImage{\\n/**A field set to `ValueType.IMAGE`, representing the image value type.*/valueType:SpreadsheetApp._ValueType;\\n/**Returns the alt text description for this image.\\n@return The alt text description.*/getAltTextDescription():string;\\n/**Returns the alt text title for this image.\\n@return The alt text title.*/getAltTextTitle():string;\\n/**Returns a Google-hosted URL to the image. This URL is tagged with the account of the requester,\\nso anyone with the URL effectively accesses the image as the original requester. Access to the\\nimage might be lost if the spreadsheet's sharing settings change. The returned URL expires\\nafter a short period of time.\\n@return The Google-hosted URL of the image.*/getContentUrl():string;\\n/**Gets the image's source URL; returns `null` if the URL is unavailable. If the image was\\ninserted by URL using an API, this method returns the URL provided during image insertion.\\n@return The image URL if available; returns `null` if the image is unavailable or doesn't\\n    have a source URL.*/getUrl():string;\\n/**Creates a builder that turns an image into an image value type so that you can place it into a\\ncell. Before an image is placed into a cell, it needs to be created as an image value type.\\nThen you can add it to a cell using [`Range.setValue(value)`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#setValue(Object)) or [`Range.setValues(values)`](https://developers.google.com/apps-script/reference/spreadsheet/range.html#setValues(Object)).\\n@return A builder that creates an image value type based on the given image properties.*/toBuilder():SpreadsheetApp.CellImageBuilder;}interface Borders{\\n/**Returns the bottom border.\\n@return The bottom border.*/getBottom():SpreadsheetApp.Border;\\n/**Returns the left border.\\n@return The left border.*/getLeft():SpreadsheetApp.Border;\\n/**Returns the right border.\\n@return The right border.*/getRight():SpreadsheetApp.Border;\\n/**Returns the top border.\\n@return The top border.*/getTop():SpreadsheetApp.Border;}interface BorderStyle{}interface _BorderStyle{\\n/**Dashed line borders.*/DASHED:BorderStyle;\\n/**Dotted line borders.*/DOTTED:BorderStyle;\\n/**Two solid line borders.*/DOUBLE:BorderStyle;\\n/**Thin solid line borders.*/SOLID:BorderStyle;\\n/**Medium solid line borders.*/SOLID_MEDIUM:BorderStyle;\\n/**Thick solid line borders.*/SOLID_THICK:BorderStyle;}interface Border{\\n/**Returns the style of this border or `null` if the border does not contains a border\\nstyle.\\n@return The border style.*/getBorderStyle():SpreadsheetApp.BorderStyle;\\n/**Returns the color of this border or `null` if the color is not specified in this border.\\n@return The border color.*/getColor():SpreadsheetApp.Color;}interface BooleanCriteria{}interface _BooleanCriteria{\\n/**The criteria is met when a cell is empty.*/CELL_EMPTY:BooleanCriteria;\\n/**The criteria is met when a cell is not empty.*/CELL_NOT_EMPTY:BooleanCriteria;\\n/**The criteria is met when the input makes the given formula evaluate to `true`.*/CUSTOM_FORMULA:BooleanCriteria;\\n/**The criteria is met when a date is after the given value.*/DATE_AFTER:BooleanCriteria;\\n/**The criteria is met when a date is after the relative date value.*/DATE_AFTER_RELATIVE:BooleanCriteria;\\n/**The criteria is met when a date is before the given value.*/DATE_BEFORE:BooleanCriteria;\\n/**The criteria is met when a date is before the relative date value.*/DATE_BEFORE_RELATIVE:BooleanCriteria;\\n/**The criteria is met when a date is equal to the given value.*/DATE_EQUAL_TO:BooleanCriteria;\\n/**The criteria is met when a date is equal to the relative date value.*/DATE_EQUAL_TO_RELATIVE:BooleanCriteria;\\n/**The criteria is met when a date is not equal to the given value.*/DATE_NOT_EQUAL_TO:BooleanCriteria;\\n/**The criteria is met when a number that is between the given values.*/NUMBER_BETWEEN:BooleanCriteria;\\n/**The criteria is met when a number that is equal to the given value.*/NUMBER_EQUAL_TO:BooleanCriteria;\\n/**The criteria is met when a number that is greater than the given value.*/NUMBER_GREATER_THAN:BooleanCriteria;\\n/**The criteria is met when a number that is greater than or equal to the given value.*/NUMBER_GREATER_THAN_OR_EQUAL_TO:BooleanCriteria;\\n/**The criteria is met when a number that is less than the given value.*/NUMBER_LESS_THAN:BooleanCriteria;\\n/**The criteria is met when a number that is less than or equal to the given value.*/NUMBER_LESS_THAN_OR_EQUAL_TO:BooleanCriteria;\\n/**The criteria is met when a number that is not between the given values.*/NUMBER_NOT_BETWEEN:BooleanCriteria;\\n/**The criteria is met when a number that is not equal to the given value.*/NUMBER_NOT_EQUAL_TO:BooleanCriteria;\\n/**The criteria is met when the input contains the given value.*/TEXT_CONTAINS:BooleanCriteria;\\n/**The criteria is met when the input does not contain the given value.*/TEXT_DOES_NOT_CONTAIN:BooleanCriteria;\\n/**The criteria is met when the input ends with the given value.*/TEXT_ENDS_WITH:BooleanCriteria;\\n/**The criteria is met when the input is equal to the given value.*/TEXT_EQUAL_TO:BooleanCriteria;\\n/**The criteria is met when the input is not equal to the given value.*/TEXT_NOT_EQUAL_TO:BooleanCriteria;\\n/**The criteria is met when the input begins with the given value.*/TEXT_STARTS_WITH:BooleanCriteria;}interface BooleanCondition{\\n/**Gets the background color string for this boolean condition. Returns `null` if not set.\\n\\n```\\n// Logs the boolean condition background color for each conditional format rule on a sheet.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nfor (int i \\u003d 0; i \\u003c rules.length; i++) {\\n  var color \\u003d rules[i].getBooleanCondition().getBackground();\\n  Logger.log(\\\"The background color for rule %s is %s\\\", i, color);\\n}\\n```\\n@deprecated\\n@return The background color string, or `null` if not set for this condition.*/getBackground():string;\\n/**Gets the background color for this boolean condition. Returns `null` if not set.\\n\\n```\\n// Logs the boolean condition background color for each conditional format rule on a sheet.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nfor (int i \\u003d 0; i \\u003c rules.length; i++) {\\n  var color \\u003d rules[i].getBooleanCondition().getBackgroundObject();\\n  Logger.log(\\\"The background color for rule %s is %s\\\", i, color.asRgbColor().asHexString());\\n}\\n```\\n@return The background color, or `null` if not set for this condition.*/getBackgroundObject():SpreadsheetApp.Color;\\n/**Returns `true` if this boolean condition bolds the text and returns `false` if this\\nboolean condition removes bolding from the text. Returns `null` if bolding is unaffected.\\n\\n```\\n// Logs the boolean condition font weight for each conditional format rule on a sheet.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nfor (int i \\u003d 0; i \\u003c rules.length; i++) {\\n  var bold \\u003d rules[i].getBooleanCondition().getBold();\\n  Logger.log(\\\"The font bold setting for rule %s is %b\\\", i, weight);\\n}\\n```\\n@return whether or not the boolean condition bolds the text, or `null` if bolding is\\n    unaffected*/getBold():boolean;\\n/**Gets the rule's criteria type as defined in the [`BooleanCriteria`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-criteria.html) enum. To get the\\narguments for the criteria, use [`getCriteriaValues()`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-condition.html#getCriteriaValues()). To use these values to create or\\nmodify a conditional formatting rule, see [`ConditionalFormatRuleBuilder.withCriteria(criteria, args)`](https://developers.google.com/apps-script/reference/spreadsheet/conditional-format-rule-builder.html#withCriteria(BooleanCriteria,Object)).\\n\\n```\\n// Log information about the conditional formats on the active sheet that use\\n// boolean conditions.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet;\\nvar formats \\u003d sheet.getConditionalFormats();\\nsheet.getConditionalFormats().forEach(function(format) {\\n  var booleanCondition \\u003d format.getBooleanCondition();\\n  if (booleanCondition) {\\n    var criteria \\u003d booleanCondition.getCriteriaType();\\n    var args \\u003d booleanCondition.getCriteriaValues();\\n    Logger.log('The conditional format rule is %s %s', criteria, args);\\n  }\\n});\\n```\\n@return the type of conditional formatting criteria*/getCriteriaType():SpreadsheetApp.BooleanCriteria;\\n/**Gets an array of arguments for the rule's criteria. To get the criteria type, use [`getCriteriaType()`](https://developers.google.com/apps-script/reference/spreadsheet/boolean-condition.html#getCriteriaType()). To use these values to create or modify a conditional formatting rule, see\\n[`ConditionalFormatRuleBuilder.withCriteria(criteria, args)`](https://developers.google.com/apps-script/reference/spreadsheet/conditional-format-rule-builder.html#withCriteria(BooleanCriteria,Object)).\\n\\n```\\n// Log information about the conditional formats on the active sheet that use\\n// boolean conditions.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet;\\nvar formats \\u003d sheet.getConditionalFormats();\\nsheet.getConditionalFormats().forEach(function(format) {\\n  var booleanCondition \\u003d format.getBooleanCondition();\\n  if (booleanCondition) {\\n    var criteria \\u003d booleanCondition.getCriteriaType();\\n    var args \\u003d booleanCondition.getCriteriaValues();\\n    Logger.log('The conditional format rule is %s %s', criteria, args);\\n  }\\n});\\n```\\n@return an array of arguments appropriate to the rule's criteria type; the number of arguments\\n    and their type match the corresponding `when...()` method of the [`ConditionalFormatRuleBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/conditional-format-rule-builder.html) class*/getCriteriaValues():Object[];\\n/**Gets the font color string for this boolean condition. Returns `null` if not set.\\n\\n```\\n// Logs the boolean condition font color for each conditional format rule on a sheet.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nfor (int i \\u003d 0; i \\u003c rules.length; i++) {\\n  var color \\u003d rules[i].getBooleanCondition().getFontColor();\\n  Logger.log(\\\"The font color for rule %s is %s\\\", i, color);\\n}\\n```\\n@deprecated\\n@return The font color string, or `null` if not set for this condition.*/getFontColor():string;\\n/**Gets the font color for this boolean condition. Returns `null` if not set.\\n\\n```\\n// Logs the boolean condition font color for each conditional format rule on a sheet.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nfor (int i \\u003d 0; i \\u003c rules.length; i++) {\\n  var color \\u003d rules[i].getBooleanCondition().getFontColorObject();\\n  Logger.log(\\\"The font color for rule %s is %s\\\", i, color.asRgbColor().asHexString());\\n}\\n```\\n@return The font color, or `null` if not set for this condition.*/getFontColorObject():SpreadsheetApp.Color;\\n/**Returns `true` if this boolean condition italicises the text and returns `false` if\\nthis boolean condition removes italics from the text. Returns `null` if italics are\\nunaffected.\\n\\n```\\n// Logs the boolean condition font style for each conditional format rule on a sheet.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nfor (int i \\u003d 0; i \\u003c rules.length; i++) {\\n  var italic \\u003d rules[i].getBooleanCondition().getItalic();\\n  Logger.log(\\\"The font italic setting for rule %s is %b\\\", i, italic);\\n}\\n```\\n@return whether or not the boolean condition italicises the text, or `null` if\\n    italicising is unaffected*/getItalic():boolean;\\n/**Returns `true` if this boolean condition strikes through the text and returns `false` if this boolean condition removes strikethrough from the text. Returns `null` if\\nstrikethrough is unaffected.\\n\\n```\\n// Logs the boolean condition strikethrough setting for each conditional format rule on a\\n// sheet.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nfor (int i \\u003d 0; i \\u003c rules.length; i++) {\\n  var strikethrough \\u003d rules[i].getBooleanCondition().getStrikethrough();\\n  Logger.log(\\\"The font strikethrough setting for rule %s is %b\\\", i, strikethrough);\\n}\\n```\\n@return whether or not the boolean condition strikes through the text, or `null` if\\n    strikethrough is unaffected*/getStrikethrough():boolean;\\n/**Returns `true` if this boolean condition underlines the text and returns `false` if\\nthis boolean condition removes underlining from the text. Returns `null` if underlining\\nis unaffected.\\n\\n```\\n// Logs the boolean condition underline setting for each conditional format rule on a sheet.\\nvar sheet \\u003d SpreadsheetApp.getActiveSheet();\\nvar rules \\u003d sheet.getConditionalFormatRules();\\nfor (int i \\u003d 0; i \\u003c rules.length; i++) {\\n  var underline \\u003d rules[i].getBooleanCondition().getUnderline();\\n  Logger.log(\\\"The font underline setting for rule %s is %b\\\", i, underline);\\n}\\n```\\n@return whether or not the boolean condition underlines the text, or `null` if\\n    underlining is unaffected*/getUnderline():boolean;}interface BigQueryDataSourceSpecBuilder{\\n/**Builds a data source specification from the settings in this builder. Must use `as...()`\\nto specify a data source type before building.\\n\\nThe following code sample builds a BigQuery DataSource Spec.\\n\\n```\\nvar bigQueryDataSourceSpec \\u003d SpreadsheetApp.newDataSourceSpec().asBigQuery();\\n// TODO(developer): Replace with the required dataset, project and table IDs.\\nbigQueryDataSourceSpec.setDatasetId(\\\"my data set id\\\");\\nbigQueryDataSourceSpec.setProjectId(\\\"my project id\\\");\\nbigQueryDataSourceSpec.setTableId(\\\"my table id\\\");\\n\\nbigQueryDataSourceSpec.build();\\n\\n```\\n\\nThe following code sample builds a Looker DataSource Spec.\\n\\n```\\nvar lookerDataSourceSpecBuilder \\u003d SpreadsheetApp.newDataSourceSpec().asLooker();\\nvar lookerSpec \\u003d lookerDataSourceSpecBuilder.setExploreName(\\\"my explore name\\\")\\n                                            .setInstanceUrl(\\\"my instance url\\\")\\n                                            .setModelName(\\\"my model name\\\")\\n                                            .build();\\n```\\n@return The data source specification.*/build():SpreadsheetApp.DataSourceSpec;\\n/**Creates a [`DataSourceSpecBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-spec-builder.html) based on this data source's settings.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\n\\nvar newSpec \\u003d spec.copy();\\n```\\n@return The builder.*/copy():SpreadsheetApp.DataSourceSpecBuilder;\\n/**Gets the BigQuery dataset ID.\\n@return The dataset ID, or an empty string if the data source spec is defined by a raw query.*/getDatasetId():string;\\n/**Gets the parameters of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar parameters \\u003d spec.getParameters();\\n```\\n\\nThis method is only available for BigQuery data sources.\\n@return The parameter list.*/getParameters():SpreadsheetApp.DataSourceParameter[];\\n/**Gets the billing project ID.\\n@return The project ID.*/getProjectId():string;\\n/**Gets the raw query string.\\n@return The raw query string.*/getRawQuery():string;\\n/**Gets the BigQuery table ID.\\n@return The table ID, or an empty string if the data source spec is defined by a raw query.*/getTableId():string;\\n/**Gets the BigQuery project ID for the table.\\n@return The table project ID, or an empty string if the data source spec is defined by a raw\\n    query.*/getTableProjectId():string;\\n/**Gets the type of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar type \\u003d spec.getType();\\n```\\n@return The data source type.*/getType():SpreadsheetApp.DataSourceType;\\n/**Removes all the parameters.\\n\\n```\\nvar specBuilder \\u003d SpreadsheetApp.newDataSourceSpec();\\nspecBuilder.removeAllParameters();\\n```\\n@return The builder, for chaining.*/removeAllParameters():SpreadsheetApp.BigQueryDataSourceSpecBuilder;\\n/**Removes the specified parameter.\\n\\n```\\nvar specBuilder \\u003d SpreadsheetApp.newDataSourceSpec();\\nspecBuilder.removeParameter(\\\"x\\\");\\n```\\n@param parameterName The name of the parameter to remove.\\n@return The builder, for chaining.*/removeParameter(parameterName:string):SpreadsheetApp.BigQueryDataSourceSpecBuilder;\\n/**Sets the BigQuery dataset ID.\\n@param datasetId The ID of the dataset.\\n@return This builder, for chaining.*/setDatasetId(datasetId:string):SpreadsheetApp.BigQueryDataSourceSpecBuilder;\\n/**Adds a parameter, or if the parameter with the name exists, updates its source cell for data\\nsource spec builders of type [`DataSourceType.BIGQUERY`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-type.html#BIGQUERY).\\n\\nThis method is only available for BigQuery data sources.\\n\\n```\\nvar specBuilder \\u003d SpreadsheetApp.newDataSourceSpec().asBigQuery();\\nspecBuilder.setParameterFromCell(\\\"x\\\", \\\"A1\\\");\\nvar bigQuerySpec \\u003d specBuilder.build();\\n```\\n@param parameterName The parameter name.\\n@param sourceCell The source cell, as specified in A1 notation.\\n@return The builder, for chaining.*/setParameterFromCell(parameterName:string,sourceCell:string):SpreadsheetApp.BigQueryDataSourceSpecBuilder;\\n/**Sets the billing BigQuery project ID.\\n@param projectId The ID of the billing project.\\n@return The builder, for chaining.*/setProjectId(projectId:string):SpreadsheetApp.BigQueryDataSourceSpecBuilder;\\n/**Sets the raw query string.\\n@param rawQuery The raw query string.\\n@return The builder, for chaining.*/setRawQuery(rawQuery:string):SpreadsheetApp.BigQueryDataSourceSpecBuilder;\\n/**Sets the BigQuery table ID.\\n@param tableId The ID of the table.\\n@return This builder, for chaining.*/setTableId(tableId:string):SpreadsheetApp.BigQueryDataSourceSpecBuilder;\\n/**Sets the BigQuery project ID for the table.\\n@param projectId The project ID of the BigQuery table.\\n@return The builder, for chaining.*/setTableProjectId(projectId:string):SpreadsheetApp.BigQueryDataSourceSpecBuilder;}interface BigQueryDataSourceSpec{\\n/**Creates a [`DataSourceSpecBuilder`](https://developers.google.com/apps-script/reference/spreadsheet/data-source-spec-builder.html) based on this data source's settings.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\n\\nvar newSpec \\u003d spec.copy();\\n```\\n@return The builder.*/copy():SpreadsheetApp.DataSourceSpecBuilder;\\n/**Gets the BigQuery dataset ID.\\n@return The dataset ID, or an empty string if the data source spec is defined by a raw query.*/getDatasetId():string;\\n/**Gets the parameters of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar parameters \\u003d spec.getParameters();\\n```\\n\\nThis method is only available for BigQuery data sources.\\n@return The parameter list.*/getParameters():SpreadsheetApp.DataSourceParameter[];\\n/**Gets the billing project ID.\\n@return The project ID.*/getProjectId():string;\\n/**Gets the raw query string.\\n@return The raw query string.*/getRawQuery():string;\\n/**Gets the BigQuery table ID.\\n@return The table ID, or an empty string if the data source spec is defined by a raw query.*/getTableId():string;\\n/**Gets the BigQuery project ID for the table.\\n@return The table project ID, or an empty string if the data source spec is defined by a raw\\n    query.*/getTableProjectId():string;\\n/**Gets the type of the data source.\\n\\n```\\n// TODO(developer): Replace the URL with your own.\\nconst ss \\u003d SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit');\\nvar spec \\u003d ss.getDataSources()[0].getSpec();\\nvar type \\u003d spec.getType();\\n```\\n@return The data source type.*/getType():SpreadsheetApp.DataSourceType;}interface BandingTheme{}interface _BandingTheme{\\n/**A blue banding theme.*/BLUE:BandingTheme;\\n/**A brown banding theme.*/BROWN:BandingTheme;\\n/**A cyan banding theme.*/CYAN:BandingTheme;\\n/**A green banding theme.*/GREEN:BandingTheme;\\n/**A grey banding theme.*/GREY:BandingTheme;\\n/**An indigo banding theme.*/INDIGO:BandingTheme;\\n/**A light green banding theme.*/LIGHT_GREEN:BandingTheme;\\n/**A light grey banding theme.*/LIGHT_GREY:BandingTheme;\\n/**An orange banding theme.*/ORANGE:BandingTheme;\\n/**A pink banding theme.*/PINK:BandingTheme;\\n/**A teal banding theme.*/TEAL:BandingTheme;\\n/**A yellow banding theme.*/YELLOW:BandingTheme;}interface Banding{\\n/**Copies this banding to another range.\\n@param range The range to copy this banding to.\\n@return The new banding.*/copyTo(range:SpreadsheetApp.Range):SpreadsheetApp.Banding;\\n/**Returns the first column color that is alternating, or `null` if no color is set.\\n@deprecated\\n@return The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` if no color is set.*/getFirstColumnColor():string;\\n/**Returns the first alternating column color in the banding, or `null` if no color is set.\\n@return The first alternating column color in the banding, or `null` if no color is set.*/getFirstColumnColorObject():SpreadsheetApp.Color;\\n/**Returns the first row color that is alternating or `null` if no color is set.\\n@deprecated\\n@return The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` if no color is set.*/getFirstRowColor():string;\\n/**Returns the first alternating row color, or `null` if no color is set.\\n@return The first alternating row color in the banding, or `null` if no color is set.*/getFirstRowColorObject():SpreadsheetApp.Color;\\n/**Returns the color of the last column, or `null` if no color is set.\\n@deprecated\\n@return The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` if no color is set.*/getFooterColumnColor():string;\\n/**Returns the color of the last column in the banding, or `null` if no color is set.\\n@return The last column color in the banding, or `null` if no color is set.*/getFooterColumnColorObject():SpreadsheetApp.Color;\\n/**Returns the color of the last row, or `null` if no color is set.\\n@deprecated\\n@return The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` if no color is set.*/getFooterRowColor():string;\\n/**Returns the last row color in the banding, or `null` if no color is set.\\n@return The footer row color in the banding, or `null` if no color is set.*/getFooterRowColorObject():SpreadsheetApp.Color;\\n/**Returns the color of the header column, or `null` if no color is set.\\n@deprecated\\n@return The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` if no color is set.*/getHeaderColumnColor():string;\\n/**Returns the color of the first column in the banding, or `null` if no color is set.\\n@return The first column color in the banding, or `null` if no color is set.*/getHeaderColumnColorObject():SpreadsheetApp.Color;\\n/**Returns the color of the header row or `null` if no color is set.\\n@deprecated\\n@return The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` if no color is set.*/getHeaderRowColor():string;\\n/**Returns the color of the header row or `null` if no color is set.\\n@return The color of the header row; returns `null` if no color is set.*/getHeaderRowColorObject():SpreadsheetApp.Color;\\n/**Returns the range for this banding.\\n@return The range for this banding.*/getRange():SpreadsheetApp.Range;\\n/**Returns the second column color that is alternating, or `null` if no color is set.\\n@deprecated\\n@return The HEX color or `null` if no color is set.*/getSecondColumnColor():string;\\n/**Returns the second alternating column color in the banding, or `null` if no color is set.\\n@return The second alternating column color in the banding, or `null` if no color is set.*/getSecondColumnColorObject():SpreadsheetApp.Color;\\n/**Returns the second row color that is alternating or `null` if no color is set.\\n@deprecated\\n@return The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` if no color is set.*/getSecondRowColor():string;\\n/**Returns the second alternating row color, or `null` if no color is set.\\n@return The second alternating row color in the banding, or `null` if no color is set.*/getSecondRowColorObject():SpreadsheetApp.Color;\\n/**Removes this banding.*/remove():void;\\n/**Sets the first column color that is alternating.\\n@param color The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` to clear the color.\\n@return This banding, for chaining.*/setFirstColumnColor(color:string):SpreadsheetApp.Banding;\\n/**Sets the first alternating column color in the banding.\\n@param color The new first alternating column color in the banding; setting to `null`\\n    clears the color.\\n@return This banding, for chaining.*/setFirstColumnColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Banding;\\n/**Sets the first row color that is alternating.\\n@param color The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` to clear the color.\\n@return This banding, for chaining.*/setFirstRowColor(color:string):SpreadsheetApp.Banding;\\n/**Sets the first alternating row color in the banding.\\n@param color The new first alternating color in the banding; setting to `null` clears the\\n    color.\\n@return This banding, for chaining.*/setFirstRowColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Banding;\\n/**Sets the color of the last column.\\n@param color The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` to clear the color.\\n@return This banding, for chaining.*/setFooterColumnColor(color:string):SpreadsheetApp.Banding;\\n/**Sets the color of the last column in the banding.\\n@param color The new color of the last column in the banding; setting to `null` clears\\n    the color.\\n@return This banding, for chaining.*/setFooterColumnColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Banding;\\n/**Sets the color of the last row.\\n@param color The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` to clear the color.\\n@return This banding, for chaining.*/setFooterRowColor(color:string):SpreadsheetApp.Banding;\\n/**Sets the color of the footer row in the banding.\\n@param color The new footer row color; setting to `null` clears the color.\\n@return This banding, for chaining.*/setFooterRowColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Banding;\\n/**Sets the color of the header column.\\n@param color The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` to clear the color.\\n@return This banding, for chaining.*/setHeaderColumnColor(color:string):SpreadsheetApp.Banding;\\n/**Sets the color of the header column.\\n@param color The new header column color; setting to `null` clears the color.\\n@return This banding, for chaining.*/setHeaderColumnColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Banding;\\n/**Sets the color of the header row.\\n@param color The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` to clear the color.\\n@return This banding, for chaining.*/setHeaderRowColor(color:string):SpreadsheetApp.Banding;\\n/**Sets the color of the header row.\\n@param color The new header row color; setting to `null` clears the color.\\n@return This banding, for chaining.*/setHeaderRowColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Banding;\\n/**Sets the range for this banding.\\n@param range The new range for this banding.\\n@return This banding, for chaining.*/setRange(range:SpreadsheetApp.Range):SpreadsheetApp.Banding;\\n/**Sets the second column color that is alternating.\\n@param color The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` to clear the color.\\n@return This banding, for chaining.*/setSecondColumnColor(color:string):SpreadsheetApp.Banding;\\n/**Sets the second alternating column color in the banding.\\n@param color The new second alternating column color in the banding; setting to `null`\\n    clears the color.\\n@return This banding, for chaining.*/setSecondColumnColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Banding;\\n/**Sets the second row color that is alternating.\\n@param color The color code in CSS notation (such as `'#ffffff'` or `'white'`), or\\n    `null` to clear the color.\\n@return This banding, for chaining.*/setSecondRowColor(color:string):SpreadsheetApp.Banding;\\n/**Sets the second alternating color in the banding.\\n@param color The new second alternating color in the banding; setting to `null` clears\\n    the color.\\n@return This banding, for chaining.*/setSecondRowColorObject(color:SpreadsheetApp.Color):SpreadsheetApp.Banding;}interface AutoFillSeries{}interface _AutoFillSeries{\\n/**Auto-filling with this setting results in the empty cells in the expanded range being filled\\nwith copies of the existing values.*/ALTERNATE_SERIES:AutoFillSeries;\\n/**Default. Auto-filling with this setting results in the empty cells in the expanded range being\\nfilled with increments of the existing values.*/DEFAULT_SERIES:AutoFillSeries;}}const SpreadsheetApp:SpreadsheetApp;\"],[\"ui-app.d.ts\",\"interface UiApp{\\n/**Create a new UiInstance, which you can use to build a UI.\\n\\nUse this in the entry point of your app to create a UI. For example:\\n\\n```\\nfunction doGet(e) {\\n  var app \\u003d UiApp.createApplication();\\n  // Create a button tied to a server click handler.\\n  app.add(app.createButton('Click me!', app.createServerHandler('onClick')).setId('button'));\\n  // Create a button tied to a client click handler.\\n  app.add(app.createButton('Click me too!',\\n      app.createClientHandler().forEventSource().setText('Clicked!')));\\n  return app; // If you don't return the UiInstance, the change won't happen\\n}\\n\\nfunction onClick(e) {\\n  var app \\u003d UiApp.getActiveApplication();\\n  app.getElementById('button').setText('Clicked!');\\n  return app;\\n}\\n```\\n\\nNote that you cannot return a new UiInstance in an event handler from an existing\\nUiInstance.\\n@deprecated*/createApplication():void;\\n/**Gets the active UiInstance.\\n\\nUse this in the context of an event handler to interact with the existing UI. For example:\\n\\n```\\nfunction doGet(e) {\\n  var app \\u003d UiApp.createApplication();\\n  app.add(app.createButton('Click me!', app.createServerHandler('onClick')).setId('button'));\\n  return app;\\n}\\n\\nfunction onClick(e) {\\n  var app \\u003d UiApp.getActiveApplication();\\n  app.getElementById('button').setText('Clicked!');\\n  return app;  // If you don't return the UiInstance, the change won't happen\\n}\\n```\\n@deprecated*/getActiveApplication():void;\\n/**Return the browser user-agent string, so that you can tailor your app as needed.\\n@deprecated\\n@return the user-agent string.*/getUserAgent():string;}const UiApp:UiApp;\"],[\"url-fetch-app.d.ts\",\"interface UrlFetchApp{\\n/**Makes a request to fetch a URL.\\n\\nThis works over HTTP as well as HTTPS.\\n\\n```\\n// The code below logs the HTML code of the Google home page.\\nvar response \\u003d UrlFetchApp.fetch(\\\"http://www.google.com/\\\");\\nLogger.log(response.getContentText());\\n```\\n@param url The URL to fetch. The URL can have up to 2,082 characters.\\n@return The HTTP response data.*/fetch(url:string):UrlFetchApp.HTTPResponse;\\n/**Makes a request to fetch a URL using optional advanced parameters.\\n\\nThis works over HTTP as well as HTTPS.\\n\\n```\\n// Make a GET request and log the returned content.\\nvar response \\u003d UrlFetchApp.fetch('http://www.google.com/');\\nLogger.log(response.getContentText());\\n```\\n\\n```\\n// Make a POST request with form data.\\nvar resumeBlob \\u003d Utilities.newBlob('Hire me!', 'text/plain', 'resume.txt');\\nvar formData \\u003d {\\n  'name': 'Bob Smith',\\n  'email': 'bob@example.com',\\n  'resume': resumeBlob\\n};\\n// Because payload is a JavaScript object, it is interpreted as\\n// as form data. (No need to specify contentType; it automatically\\n// defaults to either 'application/x-www-form-urlencoded'\\n// or 'multipart/form-data')\\nvar options \\u003d {\\n  'method' : 'post',\\n  'payload' : formData\\n};\\nUrlFetchApp.fetch('https://httpbin.org/post', options);\\n```\\n\\n```\\n// Make a POST request with a JSON payload.\\nvar data \\u003d {\\n  'name': 'Bob Smith',\\n  'age': 35,\\n  'pets': ['fido', 'fluffy']\\n};\\nvar options \\u003d {\\n  'method' : 'post',\\n  'contentType': 'application/json',\\n  // Convert the JavaScript object to a JSON string.\\n  'payload' : JSON.stringify(data)\\n};\\nUrlFetchApp.fetch('https://httpbin.org/post', options);\\n```\\n@param url The URL to fetch. The URL can have up to 2,082 characters.\\n@param params The optional JavaScript object specifying advanced parameters as defined below.\\n@return The HTTP response data.*/fetch(url:string,params:Object):UrlFetchApp.HTTPResponse;\\n/**Makes multiple requests to fetch multiple URLs using optional advanced parameters.\\n\\nThis works over HTTP as well as HTTPS.\\n\\n```\\n// Make both a POST request with form data, and a GET request.\\nvar resumeBlob \\u003d Utilities.newBlob('Hire me!', 'text/plain', 'resume.txt');\\nvar formData \\u003d {\\n  'name': 'Bob Smith',\\n  'email': 'bob@example.com',\\n  'resume': resumeBlob\\n};\\n// Because payload is a JavaScript object, it is interpreted as\\n// as form data. (No need to specify contentType; it defaults to either\\n// 'application/x-www-form-urlencoded' or 'multipart/form-data')\\nvar request1 \\u003d {\\n  'url': 'https://httpbin.org/post',\\n  'method' : 'post',\\n  'payload' : formData\\n};\\n// A request may also just be a URL.\\nvar request2 \\u003d 'https://httpbin.org/get?key\\u003dvalue';\\nUrlFetchApp.fetchAll([request1, request2]);\\n```\\n@param requests An array of either URLs or JavaScript objects specifying requests as defined\\n    below.\\n@return An array of HTTP response data from each input request.*/fetchAll(requests:Object[]):UrlFetchApp.HTTPResponse[];\\n/**Returns the request that is made if the operation was invoked.\\n\\nThis method does not actually issue the request.\\n\\n```\\n// The code below logs the value for every key of the returned map.\\nvar response \\u003d UrlFetchApp.getRequest(\\\"http://www.google.com/\\\");\\nfor(i in response) {\\n  Logger.log(i + \\\": \\\" + response[i]);\\n}\\n```\\n@param url The URL to look up. The URL can have up to 2,082 characters.\\n@return A map of Field Name to Value. The map has at least the following keys: `url`,\\n    `method`, `contentType`, `payload`, and `headers`.*/getRequest(url:string):Object;\\n/**Returns the request that is made if the operation were invoked.\\n\\nThis method does not actually issue the request.\\n@param url The URL to look up. The URL can have up to 2,082 characters.\\n@param params An optional JavaScript object specifying advanced parameters as defined below.\\n@return A map of Field Name to Value. The map has at least the following keys: `url`,\\n    `method`, `contentType`, `payload`, and `headers`.*/getRequest(url:string,params:Object):Object;}module UrlFetchApp{interface HTTPResponse{\\n/**Returns an attribute/value map of headers for the HTTP response, with headers that have\\nmultiple values returned as arrays.\\n\\n```\\n// The code below logs the HTTP headers from the response\\n// received when fetching the Google home page.\\nvar response \\u003d UrlFetchApp.fetch(\\\"http://www.google.com/\\\");\\nLogger.log(response.getAllHeaders());\\n```\\n@return a JavaScript key/value map of HTTP headers*/getAllHeaders():Object;\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;\\n/**Gets the raw binary content of an HTTP response.\\n\\n```\\n// The code below logs the value of the first byte of the Google home page.\\nvar response \\u003d UrlFetchApp.fetch(\\\"http://www.google.com/\\\");\\nLogger.log(response.getContent()[0]);\\n```\\n@return the content as a raw binary array*/getContent():Byte[];\\n/**Gets the content of an HTTP response encoded as a string.\\n\\n```\\n// The code below logs the HTML code of the Google home page.\\nvar response \\u003d UrlFetchApp.fetch(\\\"http://www.google.com/\\\");\\nLogger.log(response.getContentText());\\n```\\n@return the content of the HTTP response, as a string*/getContentText():string;\\n/**Returns the content of an HTTP response encoded as a string of the given charset.\\n\\n```\\n// The code below logs the HTML code of the Google home page with the UTF-8 charset.\\nvar response \\u003d UrlFetchApp.fetch(\\\"http://www.google.com/\\\");\\nLogger.log(response.getContentText(\\\"UTF-8\\\"));\\n```\\n@param charset a string representing the charset to be used for encoding the HTTP response\\n    content\\n@return the content of the HTTP response, encoded using the given charset*/getContentText(charset:string):string;\\n/**Returns an attribute/value map of headers for the HTTP response.\\n\\n```\\n// The code below logs the HTTP headers from the response\\n// received when fetching the Google home page.\\nvar response \\u003d UrlFetchApp.fetch(\\\"http://www.google.com/\\\");\\nLogger.log(response.getHeaders());\\n```\\n@return a JavaScript key/value map of HTTP headers*/getHeaders():Object;\\n/**Get the HTTP status code (200 for OK, etc.) of an HTTP response.\\n\\n```\\n// The code below logs the HTTP status code from the response received\\n// when fetching the Google home page.\\n// It should be 200 if the request succeeded.\\nvar response \\u003d UrlFetchApp.fetch(\\\"http://www.google.com/\\\");\\nLogger.log(response.getResponseCode());\\n```\\n@return HTTP response code (e.g. 200 for OK)*/getResponseCode():Integer;}}const UrlFetchApp:UrlFetchApp;\"],[\"user-properties.d.ts\",\"interface UserProperties{\\n/**Deletes all properties.\\n\\n```\\nUserProperties.deleteAllProperties();\\n```\\n@deprecated\\n@return this object, for chaining*/deleteAllProperties():UserProperties;\\n/**Deletes the property with the given key.\\n\\n```\\nUserProperties.deleteProperty('special');\\n```\\n@deprecated\\n@param key key for property to delete\\n@return this object, for chaining*/deleteProperty(key:string):UserProperties;\\n/**Get all of the available keys.\\n@deprecated*/getKeys():string[];\\n/**Get all of the available properties at once.\\n\\nThis gives a copy, not a live view, so changing the properties on the returned object won't\\nupdate them in storage and vice versa.\\n\\n```\\nUserProperties.setProperties({\\n  \\\"cow\\\"     : \\\"moo\\\",\\n  \\\"sheep\\\"   : \\\"baa\\\",\\n  \\\"chicken\\\" : \\\"cluck\\\"\\n});\\n\\n// Logs \\\"A cow goes: moo\\\"\\nLogger.log(\\\"A cow goes: %s\\\", UserProperties.getProperty(\\\"cow\\\"));\\n\\n// This makes a copy. Any changes that happen here will not\\n// be written back to properties.\\nvar animalSounds \\u003d UserProperties.getProperties();\\n\\n// Logs:\\n// A chicken goes cluck!\\n// A cow goes moo!\\n// A sheep goes baa!\\nfor(var kind in animalSounds) {\\n  Logger.log(\\\"A %s goes %s!\\\", kind, animalSounds[kind]);\\n}\\n```\\n@deprecated\\n@return a copy of the properties containing key-value pairs*/getProperties():Object;\\n/**Returns the value associated with the provided key, or null if there is no such value.\\n\\n```\\nvar specialValue \\u003d UserProperties.getProperty('special');\\n```\\n@deprecated\\n@param key key for the value to retrieve\\n@return the value associated with the key*/getProperty(key:string):string;\\n/**Bulk-sets all the properties drawn from the given object.\\n\\n```\\nUserProperties.setProperties({special: 'sauce', 'meaning': 42});\\n```\\n@deprecated\\n@param properties an object containing the properties to set.\\n@return this object, for chaining*/setProperties(properties:Object):UserProperties;\\n/**Bulk-sets all the properties drawn from the given object.\\n\\n```\\n// This deletes all other properties\\nUserProperties.setProperties({special: 'sauce', 'meaning': 42}, true);\\n```\\n@deprecated\\n@param properties an object containing the properties to set.\\n@param deleteAllOthers whether to delete all existing properties.\\n@return this object, for chaining*/setProperties(properties:Object,deleteAllOthers:boolean):UserProperties;\\n/**Persists the specified in value with the provided key. Any existing value associated with this\\nkey will be overwritten.\\n\\n```\\nUserProperties.setProperty('special', 'sauce');\\n```\\n@deprecated\\n@param key key for property\\n@param value value to associate with the key\\n@return this object, for chaining*/setProperty(key:string,value:string):UserProperties;}const UserProperties:UserProperties;\"],[\"utilities.d.ts\",\"interface Utilities{Charset:Utilities._Charset;DigestAlgorithm:_DigestAlgorithm;MacAlgorithm:Utilities._MacAlgorithm;RsaAlgorithm:Utilities._RsaAlgorithm;\\n/**Decodes a base-64 encoded string into a UTF-8 byte array.\\n\\n```\\n// This is the base64 encoded form of \\\"Google グループ\\\"\\nvar base64data \\u003d \\\"R29vZ2xlIOOCsOODq+ODvOODlw\\u003d\\u003d\\\";\\n\\n// This logs:\\n//     [71, 111, 111, 103, 108, 101, 32, -29, -126, -80,\\n//      -29, -125, -85, -29, -125, -68, -29, -125, -105]\\nvar decoded \\u003d Utilities.base64Decode(base64data);\\nLogger.log(decoded);\\n\\n// If we want a String instead of a byte array:\\n// This logs the original \\\"Google グループ\\\"\\nLogger.log(Utilities.newBlob(decoded).getDataAsString());\\n```\\n@param encoded An array of bytes of data to decode.\\n@return The raw data represented by the base-64 encoded argument as a byte array.*/base64Decode(encoded:string):Byte[];\\n/**Decodes a base-64 encoded string into a byte array in a specific character set.\\n\\n```\\n// This is the base64 encoded form of \\\"Google グループ\\\"\\nvar base64data \\u003d \\\"R29vZ2xlIOOCsOODq+ODvOODlw\\u003d\\u003d\\\";\\n\\nvar decoded \\u003d Utilities.base64Decode(base64data, Utilities.Charset.UTF_8);\\n\\n// This logs:\\n//     [71, 111, 111, 103, 108, 101, 32, -29, -126, -80,\\n//      -29, -125, -85, -29, -125, -68, -29, -125, -105]\\nLogger.log(decoded);\\n\\n// If we want a String instead of a byte array:\\n// This logs the original \\\"Google グループ\\\"\\nLogger.log(Utilities.newBlob(decoded).getDataAsString());\\n```\\n@param encoded The string of data to decode.\\n@param charset A [`Charset`](https://developers.google.com/apps-script/reference/utilities/charset.html) specifying the charset of the input.\\n@return The raw data represented by the base-64 encoded argument as a byte array.*/base64Decode(encoded:string,charset:Utilities.Charset):Byte[];\\n/**Decodes a base-64 web-safe encoded string into a UTF-8 byte array.\\n\\n```\\n// This is the base64 web-safe encoded form of \\\"Google グループ\\\"\\nvar base64data \\u003d \\\"R29vZ2xlIOOCsOODq-ODvOODlw\\u003d\\u003d\\\";\\n\\nvar decoded \\u003d Utilities.base64DecodeWebSafe(base64data);\\n\\n// This logs:\\n//     [71, 111, 111, 103, 108, 101, 32, -29, -126, -80,\\n//      -29, -125, -85, -29, -125, -68, -29, -125, -105]\\nLogger.log(decoded);\\n\\n// If we want a String instead of a byte array:\\n// This logs the original \\\"Google グループ\\\"\\nLogger.log(Utilities.newBlob(decoded).getDataAsString());\\n```\\n@param encoded An array of bytes of web-safe data to decode.\\n@return The raw data represented by the base-64 web-safe encoded argument as a byte array.*/base64DecodeWebSafe(encoded:string):Byte[];\\n/**Decodes a base-64 web-safe encoded string into a byte array in a specific character set.\\n\\n```\\n// This is the base64 web-safe encoded form of \\\"Google グループ\\\"\\nvar base64data \\u003d \\\"R29vZ2xlIOOCsOODq-ODvOODlw\\u003d\\u003d\\\";\\n\\nvar decoded \\u003d Utilities.base64DecodeWebSafe(base64data, Utilities.Charset.UTF_8);\\n\\n// This logs:\\n//     [71, 111, 111, 103, 108, 101, 32, -29, -126, -80,\\n//      -29, -125, -85, -29, -125, -68, -29, -125, -105]\\nLogger.log(decoded);\\n\\n// If we want a String instead of a byte array:\\n// This logs the original \\\"Google グループ\\\"\\nLogger.log(Utilities.newBlob(decoded).getDataAsString());\\n```\\n@param encoded The string of web-safe data to decode.\\n@param charset A [`Charset`](https://developers.google.com/apps-script/reference/utilities/charset.html) specifying the charset of the input.\\n@return The raw data represented by the base-64 web-safe encoded argument as a byte array.*/base64DecodeWebSafe(encoded:string,charset:Utilities.Charset):Byte[];\\n/**Generates a base-64 encoded string from the given byte array. Base 64 is a common encoding\\naccepted by a variety of tools that cannot accept binary data. Base 64 is commonly used in\\ninternet protocols such as email, HTTP, or in XML documents.\\n\\n```\\n// Instantiates a blob here for clarity\\nvar blob \\u003d Utilities.newBlob(\\\"A string here\\\");\\n\\n// Writes 'QSBzdHJpbmcgaGVyZQ\\u003d\\u003d' to the log.\\nvar encoded \\u003d Utilities.base64Encode(blob.getBytes());\\nLogger.log(encoded);\\n```\\n@param data A byte[] of data to encode.\\n@return The base-64 encoded representation of the passed in data.*/base64Encode(data:Byte[]):string;\\n/**Generates a base-64 encoded string from the given string. Base 64 is a common encoding accepted\\nby a variety of tools that cannot accept binary data. Base 64 is commonly used in internet\\nprotocols such as email, HTTP, or in XML documents.\\n\\n```\\n// Writes 'QSBzdHJpbmcgaGVyZQ\\u003d\\u003d' to the log.\\nvar encoded \\u003d Utilities.base64Encode(\\\"A string here\\\");\\nLogger.log(encoded);\\n```\\n@param data The string to encode.\\n@return The base-64 encoded representation of the input string.*/base64Encode(data:string):string;\\n/**Generates a base-64 encoded string from the given string in a specific character set. A Charset\\nis a way of encoding characters such that they can be encoded. These are typically done in a\\nbinary format, which can generally be incompatible with certain data transmission protocols. To\\nmake the data compatible, they are generally encoded into base 64, which is a common encoding\\naccepted by a variety of tools that cannot accept binary data. Base 64 is commonly used in\\ninternet protocols such as email, HTTP, or in XML documents.\\n\\n```\\n// \\\"Google Groups\\\" in Katakana (Japanese)\\nvar input \\u003d \\\"Google グループ\\\";\\n\\n// Writes \\\"R29vZ2xlIOOCsOODq+ODvOODlw\\u003d\\u003d\\\" to the log\\nvar encoded \\u003d Utilities.base64Encode(input, Utilities.Charset.UTF_8);\\nLogger.log(encoded);\\n\\n```\\n@param data The string of data to encode.\\n@param charset A `Charset` specifying the charset of the input.\\n@return The base-64 encoded representation of the input string with the given `Charset`.*/base64Encode(data:string,charset:Utilities.Charset):string;\\n/**Generates a base-64 web-safe encoded string from the given byte array. Base 64 is a common\\nencoding accepted by a variety of tools that cannot accept binary data. Base 64 web-safe is\\ncommonly used in internet protocols such as email, HTTP, or in XML documents.\\n\\n```\\n// Instantiates a blob here for clarity\\nvar blob \\u003d Utilities.newBlob(\\\"A string here\\\");\\n\\n// Writes 'QSBzdHJpbmcgaGVyZQ\\u003d\\u003d' to the log.\\nvar encoded \\u003d Utilities.base64EncodeWebSafe(blob.getBytes());\\nLogger.log(encoded);\\n```\\n@param data An array of bytes of data to encode.\\n@return The base-64 web-safe encoded representation of the passed in data.*/base64EncodeWebSafe(data:Byte[]):string;\\n/**Generates a base-64 web-safe encoded string from the given string. Base 64 is a common encoding\\naccepted by a variety of tools that cannot accept binary data. Base 64 web-safe is commonly\\nused in internet protocols such as email, HTTP, or in XML documents.\\n\\n```\\n// Writes 'QSBzdHJpbmcgaGVyZQ\\u003d\\u003d' to the log.\\nvar encoded \\u003d Utilities.base64EncodeWebSafe(\\\"A string here\\\");\\nLogger.log(encoded);\\n```\\n@param data The string to encode.\\n@return The base-64 web-safe encoded representation of the input string.*/base64EncodeWebSafe(data:string):string;\\n/**Generates a base-64 web-safe encoded string from the given string in a specific character set.\\nA Charset is a way of encoding characters such that they can be encoded. These are typically\\ndone in a binary format, which can generally be incompatible with certain data transmission\\nprotocols. To make the data compatible, they are generally encoded into base 64, which is a\\ncommon encoding accepted by a variety of tools that cannot accept binary data. Base 64 web-safe\\nis commonly used in internet protocols such as email, HTTP, or in XML documents.\\n\\n```\\n// \\\"Google Groups\\\" in Katakana (Japanese)\\nvar input \\u003d \\\"Google グループ\\\";\\n\\n// Writes \\\"R29vZ2xlIOOCsOODq-ODvOODlw\\u003d\\u003d\\\" to the log\\nvar encoded \\u003d Utilities.base64EncodeWebSafe(input, Utilities.Charset.UTF_8);\\nLogger.log(encoded);\\n\\n```\\n@param data The string of data to encode.\\n@param charset A `Charset` specifying the charset of the input.\\n@return The base-64 web-safe encoded representation of the input string with the given `Charset`.*/base64EncodeWebSafe(data:string,charset:Utilities.Charset):string;\\n/**Compute a digest using the specified algorithm on the specified `Byte[]` value.\\n\\n```\\nvar input \\u003d Utilities.base64Decode(\\\"aW5wdXQgdG8gaGFzaA0K\\\") // \\u003d\\u003d base64encode(\\\"input to hash\\\")\\nvar digest \\u003d Utilities.computeDigest(Utilities.DigestAlgorithm.MD5, input);\\nLogger.log(digest);\\n```\\n@param algorithm A [`DigestAlgorithm`](https://developers.google.com/apps-script/reference/utilities/digest-algorithm.html) to use.\\n@param value An input string value to compute a digest for.\\n@return A byte[] representing the output digest.*/computeDigest(algorithm:DigestAlgorithm,value:Byte[]):Byte[];\\n/**Compute a digest using the specified algorithm on the specified `String` value.\\n\\n```\\nvar digest \\u003d Utilities.computeDigest(Utilities.DigestAlgorithm.MD5, \\\"input to hash\\\");\\nLogger.log(digest);\\n```\\n@param algorithm A [`DigestAlgorithm`](https://developers.google.com/apps-script/reference/utilities/digest-algorithm.html) to use.\\n@param value An input string value to compute a digest for.\\n@return A byte[] representing the output digest.*/computeDigest(algorithm:DigestAlgorithm,value:string):Byte[];\\n/**Compute a digest using the specified algorithm on the specified `String` value with the\\ngiven character set.\\n\\n```\\nvar digest \\u003d Utilities.computeDigest(Utilities.DigestAlgorithm.MD5,\\n                                     \\\"input to hash\\\",\\n                                     Utilities.Charset.US_ASCII);\\nLogger.log(digest);\\n```\\n@param algorithm A [`DigestAlgorithm`](https://developers.google.com/apps-script/reference/utilities/digest-algorithm.html) to use.\\n@param value An input string value to compute a digest for.\\n@param charset A [`Charset`](https://developers.google.com/apps-script/reference/utilities/charset.html) representing the input character set.\\n@return A byte[] representing the output digest.*/computeDigest(algorithm:DigestAlgorithm,value:string,charset:Utilities.Charset):Byte[];\\n/**Signs the provided value using HMAC-SHA256 with the given key.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar input \\u003d Utilities.base64Decode(\\\"aW5wdXQgdG8gaGFzaA0K\\\") // \\u003d\\u003d base64encode(\\\"input to hash\\\")\\nvar key \\u003d Utilities.base64Decode(\\\"a2V5\\\"); // \\u003d\\u003d base64encode(\\\"key\\\")\\nvar signature \\u003d Utilities.computeHmacSha256Signature(input, key);\\nLogger.log(signature);\\n```\\n@param value The input value to generate a hash for.\\n@param key A key to use to generate the hash with.\\n@return A byte[] representing the output signature.*/computeHmacSha256Signature(value:Byte[],key:Byte[]):Byte[];\\n/**Signs the provided value using HMAC-SHA256 with the given key.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar signature \\u003d Utilities.computeHmacSha256Signature(\\\"this is my input\\\",\\n                                                      \\\"my key - use a stronger one\\\");\\nLogger.log(signature);\\n```\\n@param value The input value to generate a hash for.\\n@param key A key to use to generate the hash with.\\n@return A byte[] representing the output signature.*/computeHmacSha256Signature(value:string,key:string):Byte[];\\n/**Signs the provided value using HMAC-SHA256 with the given key and character set.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar signature \\u003d Utilities.computeHmacSha256Signature(\\\"this is my input\\\",\\n                                                     \\\"my key - use a stronger one\\\",\\n                                                     Utilities.Charset.US_ASCII);\\nLogger.log(signature);\\n```\\n@param value The input value to generate a hash for.\\n@param key A key to use to generate the hash with.\\n@param charset A [`Charset`](https://developers.google.com/apps-script/reference/utilities/charset.html) representing the input character set.\\n@return A byte[] representing the output signature.*/computeHmacSha256Signature(value:string,key:string,charset:Utilities.Charset):Byte[];\\n/**Compute a message authentication code using the specified algorithm on the specified key and\\nvalue.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar input \\u003d Utilities.base64Decode(\\\"aW5wdXQgdG8gaGFzaA0K\\\") // \\u003d\\u003d base64encode(\\\"input to hash\\\")\\nvar key \\u003d Utilities.base64Decode(\\\"a2V5\\\"); // \\u003d\\u003d base64encode(\\\"key\\\")\\nvar signature \\u003d Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_MD5, input, key);\\nLogger.log(signature);\\n```\\n@param algorithm A [`MacAlgorithm`](https://developers.google.com/apps-script/reference/utilities/mac-algorithm.html) algorithm to use to hash the input value.\\n@param value The input value to generate a hash for.\\n@param key A key to use to generate the hash with.\\n@return A byte[] representing the output signature.*/computeHmacSignature(algorithm:Utilities.MacAlgorithm,value:Byte[],key:Byte[]):Byte[];\\n/**Compute a message authentication code using the specified algorithm on the specified key and\\nvalue.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar signature \\u003d Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_MD5,\\n                                               \\\"input to hash\\\",\\n                                               \\\"key\\\");\\nLogger.log(signature);\\n```\\n@param algorithm A [`MacAlgorithm`](https://developers.google.com/apps-script/reference/utilities/mac-algorithm.html) algorithm to use to hash the input value.\\n@param value The input value to generate a hash for.\\n@param key A key to use to generate the hash with.\\n@return A byte[] representing the output signature.*/computeHmacSignature(algorithm:Utilities.MacAlgorithm,value:string,key:string):Byte[];\\n/**Compute a message authentication code using the specified algorithm on the specified key and\\nvalue.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar signature \\u003d Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_MD5,\\n                                               \\\"input to hash\\\",\\n                                               \\\"key\\\",\\n                                               Utilities.Charset.US_ASCII);\\nLogger.log(signature);\\n```\\n@param algorithm A [`MacAlgorithm`](https://developers.google.com/apps-script/reference/utilities/mac-algorithm.html) algorithm to use to hash the input value.\\n@param value The input value to generate a hash for.\\n@param key A key to use to generate the hash with.\\n@param charset A [`Charset`](https://developers.google.com/apps-script/reference/utilities/charset.html) representing the input character set.\\n@return A byte[] representing the output signature.*/computeHmacSignature(algorithm:Utilities.MacAlgorithm,value:string,key:string,charset:Utilities.Charset):Byte[];\\n/**Signs the provided value using RSA-SHA1 with the given key.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar signature \\u003d Utilities.computeRsaSha1Signature(\\\"this is my input\\\",\\n    \\\"-----BEGIN PRIVATE KEY-----\\\\nprivatekeyhere\\\\n-----END PRIVATE KEY-----\\\\n\\\");\\nLogger.log(signature);\\n```\\n@param value The input value to generate a hash for.\\n@param key A PEM formatted key to use to generate the signature.\\n@return A byte[] representing the output signature.*/computeRsaSha1Signature(value:string,key:string):Byte[];\\n/**Signs the provided value using RSA-SHA1 with the given key and charset.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar signature \\u003d Utilities.computeRsaSha1Signature(\\\"this is my input\\\",\\n    \\\"-----BEGIN PRIVATE KEY-----\\\\nprivatekeyhere\\\\n-----END PRIVATE KEY-----\\\\n\\\"\\n    Utilities.Charset.US_ASCII);\\nLogger.log(signature);\\n```\\n@param value The input value to generate a hash for.\\n@param key A PEM formatted key to use to generate the signature.\\n@param charset A [`Charset`](https://developers.google.com/apps-script/reference/utilities/charset.html) representing the input character set.\\n@return A byte[] representing the output signature.*/computeRsaSha1Signature(value:string,key:string,charset:Utilities.Charset):Byte[];\\n/**Signs the provided value using RSA-SHA256 with the given key.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar signature \\u003d Utilities.computeRsaSha256Signature(\\\"this is my input\\\",\\n    \\\"-----BEGIN PRIVATE KEY-----\\\\nprivatekeyhere\\\\n-----END PRIVATE KEY-----\\\\n\\\");\\nLogger.log(signature);\\n```\\n@param value The input value to generate a hash for.\\n@param key A PEM formatted key to use to generate the signature.\\n@return A byte[] representing the output signature.*/computeRsaSha256Signature(value:string,key:string):Byte[];\\n/**Signs the provided value using RSA-SHA256 with the given key.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar signature \\u003d Utilities.computeRsaSha256Signature(\\\"this is my input\\\",\\n    \\\"-----BEGIN PRIVATE KEY-----\\\\nprivatekeyhere\\\\n-----END PRIVATE KEY-----\\\\n\\\");\\nLogger.log(signature);\\n```\\n@param value The input value to generate a hash for.\\n@param key A PEM formatted key to use to generate the signature.\\n@param charset A [`Charset`](https://developers.google.com/apps-script/reference/utilities/charset.html) representing the input character set.\\n@return A byte[] representing the output signature.*/computeRsaSha256Signature(value:string,key:string,charset:Utilities.Charset):Byte[];\\n/**Signs the provided value using the specified RSA algorithm with the given key.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar signature \\u003d Utilities.computeRsaSignature(Utilities.RsaAlgorithm.RSA_SHA_256,\\n    \\\"this is my input\\\",\\n    \\\"-----BEGIN PRIVATE KEY-----\\\\nprivatekeyhere\\\\n-----END PRIVATE KEY-----\\\\n\\\");\\nLogger.log(signature);\\n```\\n@param algorithm A [`RsaAlgorithm`](https://developers.google.com/apps-script/reference/utilities/rsa-algorithm.html) algorithm to use to hash the input value.\\n@param value The input value to generate a hash for.\\n@param key A PEM formatted key to use to generate the signature.\\n@return A byte[] representing the output signature.*/computeRsaSignature(algorithm:Utilities.RsaAlgorithm,value:string,key:string):Byte[];\\n/**Signs the provided value using the specified RSA algorithm with the given key and charset.\\n\\n```\\n// This writes an array of bytes to the log.\\nvar signature \\u003d Utilities.computeRsaSignature(Utilities.RsaAlgorithm.RSA_SHA_256,\\n    \\\"this is my input\\\",\\n    \\\"-----BEGIN PRIVATE KEY-----\\\\nprivatekeyhere\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\n    Utilities.Charset.US_ASCII);\\nLogger.log(signature);\\n```\\n@param algorithm A [`RsaAlgorithm`](https://developers.google.com/apps-script/reference/utilities/rsa-algorithm.html) algorithm to use to hash the input value.\\n@param value The input value to generate a hash for.\\n@param key A PEM formatted key to use to generate the signature.\\n@param charset A [`Charset`](https://developers.google.com/apps-script/reference/utilities/charset.html) representing the input character set.\\n@return A byte[] representing the output signature.*/computeRsaSignature(algorithm:Utilities.RsaAlgorithm,value:string,key:string,charset:Utilities.Charset):Byte[];\\n/**Formats date according to specification described in Java SE SimpleDateFormat class. Please\\nvisit the specification at [\\nhttp://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html](http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html)\\n\\n```\\n// This formats the date as Greenwich Mean Time in the format\\n// year-month-dateThour-minute-second.\\nvar formattedDate \\u003d Utilities.formatDate(new Date(), \\\"GMT\\\", \\\"yyyy-MM-dd'T'HH:mm:ss'Z'\\\");\\nLogger.log(formattedDate);\\n```\\n@param date A `Date` to format as a String.\\n@param timeZone The output timezone of the result.\\n@param format A format per the `SimpleDateFormat` specification.\\n@return The input date as a formatted string.*/formatDate(date:Date,timeZone:string,format:string):string;\\n/**Performs `sprintf`-like string formatting using '%'-style format strings.\\n\\n```\\n// \\\" 123.456000\\\"\\nUtilities.formatString('%11.6f', 123.456);\\n\\n// \\\"   abc\\\"\\nUtilities.formatString('%6s', 'abc');\\n```\\n@param template The format string that controls what gets returned.\\n@param args Objects to use to fill in the '%' placeholders in the template.\\n@return The formatted string.*/formatString(template:string,...args:Object[]):string;\\n/**Get a UUID as a string (equivalent to using the [`java.util.UUID.randomUUID()`](https://docs.oracle.com/javase/7/docs/api/java/util/UUID.html) method). This identifier is not guaranteed to be unique across\\nall time and space. As such, do not use in situations where guaranteed uniqueness is required.\\n\\n```\\n//This assigns a UUID as a temporary ID for a data object you are creating in your script.\\nvar myDataObject \\u003d {\\n   tempId: Utilities.getUuid();\\n};\\n```\\n@return A string representation of the UUID.*/getUuid():string;\\n/**`gzip`-compresses the provided [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) data and returns it in a new [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) object.\\n\\n```\\nvar textBlob \\u003d Utilities.newBlob(\\\"Some text to compress using gzip compression\\\");\\n\\n// Create the compressed blob.\\nvar gzipBlob \\u003d Utilities.gzip(textBlob);\\n```\\n@param blob A [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) object to compress using `gzip`.\\n@return A new [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) containing the compressed data.*/gzip(blob:BlobSource):Blob;\\n/**`gzip`-compresses the provided [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) data and returns it in a new [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) object. This version of the method allows a filename to be specified.\\n\\n```\\nvar textBlob \\u003d Utilities.newBlob(\\\"Some text to compress using gzip compression\\\");\\n\\n// Create the compressed blob.\\nvar gzipBlob \\u003d Utilities.gzip(textBlob, \\\"text.gz\\\");\\n```\\n@param blob A [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) object to compress using `gzip`.\\n@param name The name of the `gzip` file to be created.\\n@return A new [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) containing the compressed data.*/gzip(blob:BlobSource,name:string):Blob;\\n/**Return an object corresponding to the JSON string passed in.\\n\\n```\\n// Returns the object { name: \\\"John Smith\\\", company: \\\"Virginia Company\\\"}\\nvar obj \\u003d Utilities.jsonParse('{\\\"name\\\":\\\"John Smith\\\",\\\"company\\\":\\\"Virginia Company\\\"}');\\n```\\n@deprecated\\n@param jsonString A String representation of a JavaScript object to deserialize.\\n@return A JavaScript object representation of the input.*/jsonParse(jsonString:string):Object;\\n/**Return a JSON string of the object passed in.\\n\\n```\\n// Logs: {\\\"name\\\":\\\"John Smith\\\",\\\"company\\\":\\\"Virginia Company\\\"}\\nvar person \\u003d { name: \\\"John Smith\\\", company: \\\"Virginia Company\\\" };\\nvar json \\u003d Utilities.jsonStringify(person);\\nLogger.log(json);\\n```\\n@deprecated\\n@param obj the JavaScript object to serialize to JSON\\n@return a JSON serialized JavaScript object*/jsonStringify(obj:Object):string;\\n/**Create a new Blob object from a byte array. Blobs are used in many Apps Script APIs that take\\nbinary data as input.\\n\\n```\\n// Creates a blob object from a byte array.\\nconst data \\u003d [71, 79, 79, 71, 76, 69];\\nconst blob \\u003d Utilities.newBlob(data);\\n\\n// Logs the blob data as a string to the console.\\nconsole.log(blob.getDataAsString());\\n```\\n@param data The bytes for the blob.\\n@return The newly created Blob.*/newBlob(data:Byte[]):Blob;\\n/**Create a new Blob object from a byte array and content type. Blobs are used in many Apps Script\\nAPIs that take binary data as input.\\n\\n```\\n// Declares a byte array.\\nconst data \\u003d [71, 79, 79, 71, 76, 69];\\n\\n// Declares the content type of the blob.\\nconst contentType \\u003d 'application/json';\\n\\n// Creates a blob object from the byte array and content type.\\nconst blob \\u003d Utilities.newBlob(data, contentType);\\n\\n// Logs the blob data as a string to the console.\\nconsole.log(blob.getDataAsString());\\n\\n// Logs the content type of the blob to the console.\\nconsole.log(blob.getContentType());\\n```\\n@param data The bytes for the blob.\\n@param contentType The content type of the blob - can be `null`.\\n@return The newly created Blob.*/newBlob(data:Byte[],contentType:string):Blob;\\n/**Create a new Blob object from a byte array, content type, and name. Blobs are used in many Apps\\nScript APIs that take binary data as input.\\n\\n```\\n// Declares a byte array.\\nconst data \\u003d [71, 79, 79, 71, 76, 69];\\n\\n// Declares the content type of the blob.\\nconst contentType \\u003d 'application/json';\\n\\n// Declares the name of the blob.\\nconst name \\u003d 'Example blob';\\n\\n// Creates a blob object from the byte array, content type, and name.\\nconst blob \\u003d Utilities.newBlob(data, contentType, name);\\n\\n// Logs the blob data as a string to the console.\\nconsole.log('Blob data:', blob.getDataAsString());\\n\\n// Logs the content type of the blob to the console.\\nconsole.log('Blob content type:', blob.getContentType());\\n\\n// Logs the name of the blob to the console.\\nconsole.log('Blob name:', blob.getName());\\n```\\n@param data The bytes for the blob.\\n@param contentType - The content type of the blob - can be `null`.\\n@param name The name of the blob - can be `null`.\\n@return The newly created Blob.*/newBlob(data:Byte[],contentType:string,name:string):Blob;\\n/**Create a new Blob object from a string. Blobs are used in many Apps Script APIs that take\\nbinary data as input.\\n\\n```\\n// Declares a string for the blob.\\nconst data \\u003d 'GOOGLE';\\n\\n// Creates a blob object from a string.\\nconst blob \\u003d Utilities.newBlob(data);\\n\\n// Logs the blob data in byte array to the console.\\nconsole.log('Blob Data:', blob.getBytes());\\n```\\n@param data The string for the blob, assumed UTF-8.\\n@return The newly created Blob.*/newBlob(data:string):Blob;\\n/**Create a new Blob object from a string and content type. Blobs are used in many Apps Script\\nAPIs that take binary data as input.\\n\\n```\\n// Declares a string for the blob.\\nconst data \\u003d 'GOOGLE';\\n\\n// Declares the content type of blob.\\nconst contentType \\u003d 'application/json';\\n\\n// Creates a blob object from the string and content type.\\nconst blob \\u003d Utilities.newBlob(data, contentType);\\n\\n// Logs the blob data in byte array to the console.\\nconsole.log('Blob data:', blob.getBytes());\\n\\n// Logs the content type of the blob to the console.\\nconsole.log(blob.getContentType());\\n```\\n@param data The string for the blob, assumed UTF-8.\\n@param contentType The content type of the blob - can be `null`.\\n@return The newly created Blob.*/newBlob(data:string,contentType:string):Blob;\\n/**Create a new Blob object from a string, content type, and name. Blobs are used in many Apps\\nScript APIs that take binary data as input.\\n\\n```\\n// Declares a string for the blob.\\nconst data \\u003d 'GOOGLE';\\n\\n// Declares the content type of the blob.\\nconst contentType \\u003d 'application/json';\\n\\n// Declares the name of the blob.\\nconst name \\u003d 'Example blob';\\n\\n// Create a blob object from the string, content type, and name.\\nconst blob \\u003d Utilities.newBlob(data, contentType, name);\\n\\n// Logs the blob data in byte array to the console.\\nconsole.log('Blob data:', blob.getBytes());\\n\\n// Logs the content type of the blob to the console.\\nconsole.log('Blob content type:', blob.getContentType());\\n\\n// Logs the name of the blob to the console.\\nconsole.log('Blob name:', blob.getName());\\n```\\n@param data The string for the blob, assumed UTF-8.\\n@param contentType The content type of the blob - can be `null`.\\n@param name The name of the blob - can be `null`.\\n@return The newly created Blob.*/newBlob(data:string,contentType:string,name:string):Blob;\\n/**Returns a tabular 2D array representation of a CSV string.\\n\\n```\\n// This creates a two-dimensional array of the format [[a, b, c], [d, e, f]]\\nvar csvString \\u003d \\\"a,b,c\\\\nd,e,f\\\";\\nvar data \\u003d Utilities.parseCsv(csvString);\\n```\\n@param csv A string containing a single or multiline data in comma-separated value (CSV)\\n    format.\\n@return A two-dimensional array containing the values in the CSV string.*/parseCsv(csv:string):string[][];\\n/**Returns a tabular 2D array representation of a CSV string using a custom delimiter.\\n\\n```\\n// This creates a two-dimensional array of the format [[a, b, c], [d, e, f]]\\nvar csvString \\u003d \\\"a\\\\tb\\\\tc\\\\nd\\\\te\\\\tf\\\";\\nvar data \\u003d Utilities.parseCsv(csvString, '\\\\t');\\n```\\n@param csv A string containing a single or multiline data in comma-separated value (CSV)\\n    format.\\n@param delimiter Between values.\\n@return A two-dimensional array containing the values in the CSV string.*/parseCsv(csv:string,delimiter:Char):string[][];\\n/**Parses the provided string date according to the specification described in the Java Standard\\nEdition `SimpleDateFormat` class. For more information, see the Java [`SimpleDateFormat` class](http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).\\n\\n```\\n// This set of parameters parses the given string as a date in Greenwich Mean Time, formatted\\n// as year-month-dateThour-minute-second.\\nvar date \\u003d Utilities.parseDate(\\\"1970-01-01 00:00:00\\\", \\\"GMT\\\", \\\"yyyy-MM-dd' 'HH:mm:ss\\\");\\nLogger.log(date);\\n```\\n@param date A string value to parse as a date.\\n@param timeZone The output time zone.\\n@param format The date format per the `SimpleDateFormat` specification.\\n@return The input string as a date.*/parseDate(date:string,timeZone:string,format:string):Date;\\n/**Sleeps for specified number of milliseconds. Immediately puts the script to sleep for the\\nspecified number of milliseconds. The maximum allowed value is 300000 (or 5 minutes).\\n\\n```\\n// Creates a blob object from a string.\\nconst data \\u003d 'GOOGLE';\\nconst blob \\u003d Utilities.newBlob(data);\\n\\n// Puts the script to sleep for 10,000 milliseconds (10 seconds).\\nUtilities.sleep(10000);\\n\\n// Logs the blob data in byte array to the console.\\nconsole.log(blob.getBytes());\\n```\\n@param milliseconds The number of milliseconds to sleep.*/sleep(milliseconds:Integer):void;\\n/**Uncompresses a [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) object and returns a [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) containing the uncompressed\\ndata.\\n\\n```\\nvar textBlob \\u003d Utilities.newBlob(\\\"Some text to compress using gzip compression\\\");\\n\\n// Create the compressed blob.\\nvar gzipBlob \\u003d Utilities.gzip(textBlob, \\\"text.gz\\\");\\n\\n// Uncompress the data.\\nvar uncompressedBlob \\u003d Utilities.ungzip(gzipBlob);\\n```\\n@param blob The [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) of compressed data.\\n@return A [`Blob`](https://developers.google.com/apps-script/reference/utilities/../base/blob.html) representing the decompressed data.*/ungzip(blob:BlobSource):Blob;\\n/**Takes a Blob representing a zip file and returns its component files.\\n\\n```\\nvar googleFavIconUrl \\u003d \\\"https://www.google.com/favicon.ico\\\";\\nvar googleLogoUrl \\u003d \\\"https://www.google.com/images/srpr/logo3w.png\\\";\\n\\n// Fetch the Google favicon.ico file and get the Blob data\\nvar faviconBlob \\u003d UrlFetchApp.fetch(googleFavIconUrl).getBlob();\\nvar logoBlob \\u003d UrlFetchApp.fetch(googleLogoUrl).getBlob();\\n\\n// zip now references a blob containing an archive of both faviconBlob and logoBlob\\nvar zip \\u003d Utilities.zip([faviconBlob, logoBlob], \\\"google_images.zip\\\");\\n\\n// This now unzips the blobs\\nvar files \\u003d Utilities.unzip(zip);\\n```\\n@param blob The zip file blob.\\n@return A Blob[] representing the component blobs, each named with the full path inside the\\n    zip.*/unzip(blob:BlobSource):Blob[];\\n/**Creates a new Blob object that is a zip file containing the data from the Blobs passed in.\\n\\n```\\nvar googleFavIconUrl \\u003d \\\"https://www.google.com/favicon.ico\\\";\\nvar googleLogoUrl \\u003d \\\"https://www.google.com/images/srpr/logo3w.png\\\";\\n\\n// Fetch the Google favicon.ico file and get the Blob data\\nvar faviconBlob \\u003d UrlFetchApp.fetch(googleFavIconUrl).getBlob();\\nvar logoBlob \\u003d UrlFetchApp.fetch(googleLogoUrl).getBlob();\\n\\n// zip now references a blob containing an archive of both faviconBlob and logoBlob\\nvar zip \\u003d Utilities.zip([faviconBlob, logoBlob]);\\n```\\n@param blobs A array of blobs to zip up.\\n@return A new blob containing the inputs as an archive.*/zip(blobs:BlobSource[]):Blob;\\n/**Creates a new Blob object that is a zip file containing the data from the Blobs passed in. This\\nversion of the method allows a filename to be specified.\\n\\n```\\nvar googleFavIconUrl \\u003d \\\"https://www.google.com/favicon.ico\\\";\\nvar googleLogoUrl \\u003d \\\"https://www.google.com/images/srpr/logo3w.png\\\";\\n\\n// Fetch the Google favicon.ico file and get the Blob data\\nvar faviconBlob \\u003d UrlFetchApp.fetch(googleFavIconUrl).getBlob();\\nvar logoBlob \\u003d UrlFetchApp.fetch(googleLogoUrl).getBlob();\\n\\n// zip now references a blob containing an archive of both faviconBlob and logoBlob\\nvar zip \\u003d Utilities.zip([faviconBlob, logoBlob], \\\"google_images.zip\\\");\\n```\\n@param blobs A array of blobs to zip up.\\n@param name The name of the zip file to be created.\\n@return A new blob containing the inputs as an archive.*/zip(blobs:BlobSource[],name:string):Blob;}module Utilities{interface RsaAlgorithm{}interface _RsaAlgorithm{RSA_SHA_1:RsaAlgorithm;RSA_SHA_256:RsaAlgorithm;}interface MacAlgorithm{}interface _MacAlgorithm{HMAC_MD5:MacAlgorithm;HMAC_SHA_1:MacAlgorithm;HMAC_SHA_256:MacAlgorithm;HMAC_SHA_384:MacAlgorithm;HMAC_SHA_512:MacAlgorithm;}interface Charset{}interface _Charset{US_ASCII:Charset;UTF_8:Charset;}}const Utilities:Utilities;\"],[\"xml-service.d.ts\",\"interface XmlService{\\n/**An enumeration representing the types of XML content nodes.*/ContentTypes:XmlService._ContentType;\\n/**Creates an unattached [`CDATASection`](https://developers.google.com/apps-script/reference/xml-service/cdata.html) node with the given value.\\n@param text the value to set\\n@return the newly created `CDATASection` node*/createCdata(text:string):XmlService.Cdata;\\n/**Creates an unattached [`Comment`](https://developers.google.com/apps-script/reference/xml-service/comment.html) node with the given value.\\n@param text the value to set\\n@return the newly created `Comment` node*/createComment(text:string):XmlService.Comment;\\n/**Creates an unattached [`DocumentType`](https://developers.google.com/apps-script/reference/xml-service/doc-type.html) node for the root [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node\\nwith the given name.\\n@param elementName the name of the root `Element` node to specify in the `DocType`\\n    declaration\\n@return the newly created `DocumentType` node*/createDocType(elementName:string):XmlService.DocType;\\n/**Creates an unattached [`DocumentType`](https://developers.google.com/apps-script/reference/xml-service/doc-type.html) node for the root [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node\\nwith the given name, and the given system ID for the external subset data.\\n@param elementName the name of the root `Element` node to specify in the `DocType`\\n    declaration\\n@param systemId the system ID of the external subset data to set\\n@return the newly created `DocumentType` node*/createDocType(elementName:string,systemId:string):XmlService.DocType;\\n/**Creates an unattached [`DocumentType`](https://developers.google.com/apps-script/reference/xml-service/doc-type.html) node for the root [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node\\nwith the given name, and the given public ID and system ID for the external subset data.\\n@param elementName the name of the root `Element` node to specify in the `DocType`\\n    declaration\\n@param publicId the public ID of the external subset data to set\\n@param systemId the system ID of the external subset data to set\\n@return the newly created `DocumentType` node*/createDocType(elementName:string,publicId:string,systemId:string):XmlService.DocType;\\n/**Creates an empty XML document.\\n@return the newly created document*/createDocument():XmlService.Document;\\n/**Creates an XML document with the given root [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node.\\n@param rootElement the root `Element` node to set\\n@return the newly created document*/createDocument(rootElement:XmlService.Element):XmlService.Document;\\n/**Creates an unattached [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node with the given local name and no namespace.\\n@param name the local name to set\\n@return the newly created `Element` node*/createElement(name:string):XmlService.Element;\\n/**Creates an unattached [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node with the given local name and namespace.\\n@param name the local name to set\\n@param namespace the namespace to set\\n@return the newly created `Element` node*/createElement(name:string,namespace:XmlService.Namespace):XmlService.Element;\\n/**Creates an unattached [`Text`](https://developers.google.com/apps-script/reference/xml-service/text.html) node with the given value.\\n@param text the value to set\\n@return the newly created `Text` node*/createText(text:string):XmlService.Text;\\n/**Creates a [`Format`](https://developers.google.com/apps-script/reference/xml-service/format.html) object for outputting a compact XML document. The formatter\\ndefaults to `UTF-8` encoding, no indentation, and no additional line breaks, but includes\\nthe XML declaration and its encoding.\\n\\n```\\n// Log an XML document in compact form.\\nvar xml \\u003d '\\u003croot\\u003e\\u003ca\\u003e\\u003cb\\u003eText!\\u003c/b\\u003e\\u003cb\\u003eMore text!\\u003c/b\\u003e\\u003c/a\\u003e\\u003c/root\\u003e';\\nvar document \\u003d XmlService.parse(xml);\\nvar output \\u003d XmlService.getCompactFormat()\\n    .format(document);\\nLogger.log(output);\\n```\\n@return the newly created formatter*/getCompactFormat():XmlService.Format;\\n/**Creates a [`Namespace`](https://developers.google.com/apps-script/reference/xml-service/namespace.html) with the given URI.\\n@param uri the URI for the namespace\\n@return the newly created namespace*/getNamespace(uri:string):XmlService.Namespace;\\n/**Creates a [`Namespace`](https://developers.google.com/apps-script/reference/xml-service/namespace.html) with the given prefix and URI.\\n@param prefix the prefix for the namespace\\n@param uri the URI for the namespace\\n@return the newly created namespace*/getNamespace(prefix:string,uri:string):XmlService.Namespace;\\n/**Creates a [`Namespace`](https://developers.google.com/apps-script/reference/xml-service/namespace.html) that represents the absence of a real namespace.\\n@return the newly created namespace*/getNoNamespace():XmlService.Namespace;\\n/**Creates a [`Format`](https://developers.google.com/apps-script/reference/xml-service/format.html) object for outputting a human-readable XML document. The formatter\\ndefaults to `UTF-8` encoding, two-space indentation, `\\\\r\\\\n` line separators after\\nevery node, and includes the XML declaration and its encoding.\\n\\n```\\n// Log an XML document in human-readable form.\\nvar xml \\u003d '\\u003croot\\u003e\\u003ca\\u003e\\u003cb\\u003eText!\\u003c/b\\u003e\\u003cb\\u003eMore text!\\u003c/b\\u003e\\u003c/a\\u003e\\u003c/root\\u003e';\\nvar document \\u003d XmlService.parse(xml);\\nvar output \\u003d XmlService.getPrettyFormat()\\n    .format(document);\\nLogger.log(output);\\n```\\n@return the newly created formatter*/getPrettyFormat():XmlService.Format;\\n/**Creates a [`Format`](https://developers.google.com/apps-script/reference/xml-service/format.html) object for outputting a raw XML document. The formatter defaults to\\n`UTF-8` encoding, no indentation and no line breaks other than those provided in the XML\\ndocument itself, and includes the XML declaration and its encoding.\\n\\n```\\n// Log an XML document in raw form.\\nvar xml \\u003d '\\u003croot\\u003e\\u003ca\\u003e\\u003cb\\u003eText!\\u003c/b\\u003e\\u003cb\\u003eMore text!\\u003c/b\\u003e\\u003c/a\\u003e\\u003c/root\\u003e';\\nvar document \\u003d XmlService.parse(xml);\\nvar output \\u003d XmlService.getRawFormat()\\n    .format(document);\\nLogger.log(output);\\n```\\n@return the newly created formatter*/getRawFormat():XmlService.Format;\\n/**Creates a [`Namespace`](https://developers.google.com/apps-script/reference/xml-service/namespace.html) with the standard `xml` prefix.\\n@return the newly created namespace*/getXmlNamespace():XmlService.Namespace;\\n/**Creates an [`Document`](https://developers.google.com/apps-script/reference/xml-service/document.html) from the given XML, without validating the XML.\\n\\n```\\nvar xml \\u003d '\\u003croot\\u003e\\u003ca\\u003e\\u003cb\\u003eText!\\u003c/b\\u003e\\u003cb\\u003eMore text!\\u003c/b\\u003e\\u003c/a\\u003e\\u003c/root\\u003e';\\nvar doc \\u003d XmlService.parse(xml);\\n```\\n@param xml the XML to parse\\n@return the newly created document*/parse(xml:string):XmlService.Document;}module XmlService{interface Text{\\n/**Appends the given text to any content that already exists in the node.\\n@param text the text to append to the node\\n@return the `Text` node, for chaining*/append(text:string):XmlService.Text;\\n/**Detaches the node from its parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent,\\nthis method has no effect.\\n@return the detached node*/detach():XmlService.Content;\\n/**Gets the node's parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent, this method\\nreturns `null`.\\n@return the parent `Element` node*/getParentElement():XmlService.Element;\\n/**Gets the text value of the `Text` node.\\n@return the text value of the `Text` node*/getText():string;\\n/**Gets the text value of all nodes that are direct or indirect children of the node, in the order\\nthey appear in the document.\\n@return the text value of all nodes that are direct or indirect children of the node*/getValue():string;\\n/**Sets the text value of the `Text` node.\\n@param text the text value to set\\n@return the `Text` node, for chaining*/setText(text:string):XmlService.Text;}interface ProcessingInstruction{\\n/**Detaches the node from its parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent,\\nthis method has no effect.\\n@return the detached node*/detach():XmlService.Content;\\n/**Gets the raw data for every instruction in the `ProcessingInstruction` node.\\n@return the raw data for every instruction in the `ProcessingInstruction` node*/getData():string;\\n/**Gets the node's parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent, this method\\nreturns `null`.\\n@return the parent `Element` node*/getParentElement():XmlService.Element;\\n/**Gets the target for the `ProcessingInstruction` node.\\n@return the target for the `ProcessingInstruction` node*/getTarget():string;\\n/**Gets the text value of all nodes that are direct or indirect children of the node, in the order\\nthey appear in the document.\\n@return the text value of all nodes that are direct or indirect children of the node*/getValue():string;}interface Namespace{\\n/**Gets the prefix for the namespace.\\n@return the prefix for the namespace*/getPrefix():string;\\n/**Gets the URI for the namespace.\\n@return the URI for the namespace*/getURI():string;}interface Format{\\n/**Outputs the given [`Document`](https://developers.google.com/apps-script/reference/xml-service/document.html) as a formatted string.\\n@param document the document to format\\n@return the formatted document*/format(document:XmlService.Document):string;\\n/**Outputs the given [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node as a formatted string.\\n@param element the element to format\\n@return the formatted element*/format(element:XmlService.Element):string;\\n/**Sets the character encoding that the formatter should use. The `encoding` argument must\\nbe an accepted XML encoding like `ISO-8859-1`, `US-ASCII`, `UTF-8`, or `UTF-16`.\\n\\n```\\n// Log an XML document with encoding that does not support certain special characters.\\nvar xml \\u003d '\\u003croot\\u003e\\u003ca\\u003e\\u003cb\\u003eಠ‿ಠ\\u003c/b\\u003e\\u003cb\\u003eಠ‿ಠ\\u003c/b\\u003e\\u003c/a\\u003e\\u003c/root\\u003e';\\nvar document \\u003d XmlService.parse(xml);\\nvar output \\u003d XmlService.getRawFormat()\\n    .setEncoding('ISO-8859-1')\\n    .format(document);\\nLogger.log(output);\\n```\\n@param encoding the encoding to use\\n@return the formatter, for chaining*/setEncoding(encoding:string):XmlService.Format;\\n/**Sets the string used to indent child nodes relative to their parents. Setting an indent other\\nthan `null` will cause the formatter to insert a line break after every node.\\n\\n```\\n// Log an XML document with each child node indented four spaces.\\nvar xml \\u003d '\\u003croot\\u003e\\u003ca\\u003e\\u003cb\\u003eText!\\u003c/b\\u003e\\u003cb\\u003eMore text!\\u003c/b\\u003e\\u003c/a\\u003e\\u003c/root\\u003e';\\nvar document \\u003d XmlService.parse(xml);\\nvar output \\u003d XmlService.getCompactFormat()\\n    .setIndent('    ')\\n    .format(document);\\nLogger.log(output);\\n```\\n@param indent the indent to use\\n@return the formatter, for chaining*/setIndent(indent:string):XmlService.Format;\\n/**Sets the string to insert whenever the formatter would normally insert a line break. The three\\npre-defined formatters have different conditions under which they insert a line break. The\\ndefault line separator is `\\\\r\\\\n`.\\n\\n```\\n// Log an XML document with several spaces and a pipe character in place of line breaks.\\nvar xml \\u003d '\\u003croot\\u003e\\u003ca\\u003e\\u003cb\\u003eText!\\u003c/b\\u003e\\u003cb\\u003eMore text!\\u003c/b\\u003e\\u003c/a\\u003e\\u003c/root\\u003e';\\nvar document \\u003d XmlService.parse(xml);\\nvar output \\u003d XmlService.getRawFormat()\\n    .setLineSeparator(' | ')\\n    .format(document);\\nLogger.log(output);\\n```\\n@param separator the separator to use\\n@return the formatter, for chaining*/setLineSeparator(separator:string):XmlService.Format;\\n/**Sets whether the formatter should omit the XML declaration, such as `\\u003c?xml version\\u003d\\\"1.0\\\"\\nencoding\\u003d\\\"UTF-8\\\"?\\u003e`.\\n@param omitDeclaration `true` to omit the XML declaration; `false` to include it\\n@return the formatter, for chaining*/setOmitDeclaration(omitDeclaration:boolean):XmlService.Format;\\n/**Sets whether the formatter should omit the encoding in the XML declaration, such as the\\nencoding field in `\\u003c?xml version\\u003d\\\"1.0\\\" encoding\\u003d\\\"UTF-8\\\"?\\u003e`.\\n@param omitEncoding `true` to omit the encoding in the XML declaration; `false` to\\n    include it\\n@return the formatter, for chaining*/setOmitEncoding(omitEncoding:boolean):XmlService.Format;}interface EntityRef{\\n/**Detaches the node from its parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent,\\nthis method has no effect.\\n@return the detached node*/detach():XmlService.Content;\\n/**Gets the name of the `EntityReference` node.\\n@return the name of the `EntityReference` node*/getName():string;\\n/**Gets the node's parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent, this method\\nreturns `null`.\\n@return the parent `Element` node*/getParentElement():XmlService.Element;\\n/**Gets the public ID of the `EntityReference` node. If the node does not have a public ID,\\nthis method returns `null`.\\n@return the public ID of the `EntityReference` node, or `null` if it has none*/getPublicId():string;\\n/**Gets the system ID of the `EntityReference` node. If the node does not have a system ID,\\nthis method returns `null`.\\n@return the system ID of the `EntityReference` node, or `null` if it has none*/getSystemId():string;\\n/**Gets the text value of all nodes that are direct or indirect children of the node, in the order\\nthey appear in the document.\\n@return the text value of all nodes that are direct or indirect children of the node*/getValue():string;\\n/**Sets the name of the `EntityReference` node.\\n@param name the name to set\\n@return the `EntityReference` node, for chaining*/setName(name:string):XmlService.EntityRef;\\n/**Sets the public ID of the `EntityReference` node.\\n@param id the public ID to set\\n@return the `EntityReference` node, for chaining*/setPublicId(id:string):XmlService.EntityRef;\\n/**Sets the system ID of the `EntityReference` node.\\n@param id the system ID to set\\n@return the `EntityReference` node, for chaining*/setSystemId(id:string):XmlService.EntityRef;}interface Element{\\n/**Inserts the given node at the given index among all nodes that are immediate children of the\\n`Element` node. The `content` argument can be a [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) object or any\\nnode object that corresponds to a type listed in [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html).\\n@param index the index at which to insert the node among all nodes that are immediate children\\n    of the `Element` node\\n@param content the node to insert\\n@return the `Element` node, for chaining*/addContent(index:Integer,content:XmlService.Content):XmlService.Element;\\n/**Appends the given node as the last child of the `Element` node. The `content`\\nargument can be a [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) object or any node object that corresponds to a type\\nlisted in [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html).\\n@param content the node to append\\n@return the `Element` node, for chaining*/addContent(content:XmlService.Content):XmlService.Element;\\n/**Creates unattached copies of all nodes that are immediate children of the {@code Element} node.\\n@return an array of unattached copies of all nodes that are immediate children of the\\n    {@code Element} node*/cloneContent():XmlService.Content[];\\n/**Detaches the node from its parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent,\\nthis method has no effect.\\n@return the detached node*/detach():XmlService.Content;\\n/**Gets all nodes that are immediate children of the {@code Element} node.\\n@return an array of all nodes that are immediate children of the {@code Element} node*/getAllContent():XmlService.Content[];\\n/**Gets the attribute for this `Element` node with the given name and no namespace. If there\\nis no such attribute, this method returns `null`.\\n@param name the name of the attribute\\n@return the attribute, or `null` if there is no attribute with the given name and no\\n    namespace*/getAttribute(name:string):XmlService.Attribute;\\n/**Gets the attribute for this `Element` node with the given name and namespace. If there is\\nno such node, this method returns `null`.\\n@param name the name of the attribute\\n@param namespace the namespace of the attribute\\n@return the attribute, or `null` if there is no attribute with the given name and\\n    namespace*/getAttribute(name:string,namespace:XmlService.Namespace):XmlService.Attribute;\\n/**Gets all attributes for this `Element` node, in the order they appear in the document.\\n@return an array of all attributes for this `Element` node*/getAttributes():XmlService.Attribute[];\\n/**Gets the first `Element` node with the given name and no namespace that is an immediate\\nchild of this `Element` node. If there is no such node, this method returns `null`.\\n@param name the name of the child `Element` node\\n@return the `Element` node, or `null` if there is no immediate child `Element` node with the given name and no namespace*/getChild(name:string):XmlService.Element;\\n/**Gets the first `Element` node with the given name and namespace that is an immediate\\nchild of this `Element` node. If there is no such node, this method returns `null`.\\n@param name the name of the child `Element` node\\n@param namespace the namespace of the child `Element` node\\n@return the `Element` node, or `null` if there is no immediate child `Element` node with the given name and namespace*/getChild(name:string,namespace:XmlService.Namespace):XmlService.Element;\\n/**Gets the text value of the node with the given name and no namespace, if the node is an\\nimmediate child of the `Element` node. If there is no such node, this method returns\\n`null`.\\n@param name the name of the child node\\n@return the text value of the child node, or `null` if there is no immediate child node\\n    with the given name and no namespace*/getChildText(name:string):string;\\n/**Gets the text value of the node with the given name and namespace, if the node is an immediate\\nchild of the `Element` node. If there is no such node, this method returns `null`.\\n@param name the name of the child node\\n@param namespace the namespace of the child node\\n@return the text value of the child node, or `null` if there is no immediate child node\\n    with the given name and namespace*/getChildText(name:string,namespace:XmlService.Namespace):string;\\n/**Gets all `Element` nodes that are immediate children of this `Element` node, in the\\norder they appear in the document.\\n@return an array of all `Element` nodes that are immediate children of this `Element` node*/getChildren():XmlService.Element[];\\n/**Gets all `Element` nodes with the given name and no namespace that are immediate children\\nof this `Element` node, in the order they appear in the document.\\n@param name the name of the child `Element` nodes\\n@return an array of all `Element` nodes with the given name and no namespace that are\\n    immediate children of this `Element` node*/getChildren(name:string):XmlService.Element[];\\n/**Gets all `Element` nodes with the given name and namespace that are immediate children of\\nthis `Element` node, in the order they appear in the document.\\n@param name the name of the child `Element` nodes\\n@param namespace the namespace of the child `Element` nodes\\n@return an array of all `Element` nodes with the given name and namespace that are\\n    immediate children of this `Element` node*/getChildren(name:string,namespace:XmlService.Namespace):XmlService.Element[];\\n/**Gets the node at the given index among all nodes that are immediate children of the\\n{@code Element} node. If there is no node at the given index, this method returns `null`.\\n@param index the index for the node among all nodes that are immediate children of the\\n    {@code Element} node\\n@return the node, or `null` if there is no node at the given index*/getContent(index:Integer):XmlService.Content;\\n/**Gets the number of nodes that are immediate children of the {@code Element} node.\\n@return the number of nodes that are immediate children of the {@code Element} node*/getContentSize():Integer;\\n/**Gets all nodes that are direct or indirect children of the {@code Element} node, in the order they\\nappear in the document.\\n@return an array of all nodes that are direct or indirect children of the {@code Element} node*/getDescendants():XmlService.Content[];\\n/**Gets the XML document that contains the {@code Element} node.\\n@return the document that contains the {@code Element} node*/getDocument():XmlService.Document;\\n/**Gets the local name of the `Element` node. If the node has a namespace prefix, use [`getQualifiedName()`](https://developers.google.com/apps-script/reference/xml-service/element.html#getQualifiedName()) or [`getNamespace()`](https://developers.google.com/apps-script/reference/xml-service/element.html#getNamespace()).[`getPrefix()`](https://developers.google.com/apps-script/reference/xml-service/namespace.html#getPrefix()) to\\nget the prefix.\\n@return the local name of the `Element` node*/getName():string;\\n/**Gets the namespace for the `Element` node.\\n@return the namespace for the `Element` node*/getNamespace():XmlService.Namespace;\\n/**Gets the namespace with the given prefix for the `Element` node.\\n@param prefix the prefix for the namespace\\n@return the namespace with the given prefix for the `Element` node*/getNamespace(prefix:string):XmlService.Namespace;\\n/**Gets the node's parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent, this method\\nreturns `null`.\\n@return the parent `Element` node*/getParentElement():XmlService.Element;\\n/**Gets the local name and namespace prefix of the `Element` node, in the form `[namespacePrefix]:[localName]`. If the node does not have a namespace prefix, use [`getName()`](https://developers.google.com/apps-script/reference/xml-service/element.html#getName()).\\n@return the local name and namespace prefix of the `Element` node, in the form `[namespacePrefix]:[localName]`*/getQualifiedName():string;\\n/**Gets the text value of the `Element` node.\\n@return the text value of the `Element` node*/getText():string;\\n/**Gets the text value of all nodes that are direct or indirect children of the node, in the order\\nthey appear in the document.\\n@return the text value of all nodes that are direct or indirect children of the node*/getValue():string;\\n/**Determines whether this `Element` node is a direct or indirect parent of a given `Element` node.\\n@param other the other `Element` node\\n@return `true` if this `Element` node is a direct or indirect parent of the given\\n    `Element` node; `false` if not*/isAncestorOf(other:XmlService.Element):boolean;\\n/**Determines whether the `Element` node is the document's root node.\\n@return `true` if the `Element` node is the document's root node; `false` if\\n    not*/isRootElement():boolean;\\n/**Removes the attribute for this `Element` node with the given name and no namespace, if\\nsuch an attribute exists.\\n@param attributeName the name of the attribute\\n@return `true` if the attribute existed and was removed; `false` if not*/removeAttribute(attributeName:string):boolean;\\n/**Removes the attribute for this `Element` node with the given name and namespace, if such\\nan attribute exists.\\n@param attributeName the name of the attribute\\n@param namespace the namespace of the attribute\\n@return `true` if the attribute existed and was removed; `false` if not*/removeAttribute(attributeName:string,namespace:XmlService.Namespace):boolean;\\n/**Removes the given attribute for this `Element` node, if such an attribute exists.\\n@param attribute the attribute\\n@return `true` if the attribute existed and was removed; `false` if not*/removeAttribute(attribute:XmlService.Attribute):boolean;\\n/**Removes all nodes that are immediate children of the {@code Element} node.\\n@return an array of all nodes that were immediate children of the {@code Element} node before they\\n    were removed*/removeContent():XmlService.Content[];\\n/**Removes the node at the given index among all nodes that are immediate children of the\\n{@code Element} node. If there is no node at the given index, this method returns `null`.\\n@param index the index for the node among all nodes that are immediate children of the\\n    {@code Element} node\\n@return the node that was removed, or `null` if there is no node at the given index*/removeContent(index:Integer):XmlService.Content;\\n/**Removes the given node, if the node is an immediate child of the {@code Element} node. The `content` argument can be a [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) object or any node object that corresponds to a\\ntype listed in [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html).\\n@param content the node to remove\\n@return `true` if the node was an immediate child and was removed; `false` if not*/removeContent(content:XmlService.Content):boolean;\\n/**Sets the attribute for this `Element` node with the given name, value, and no namespace.\\n@param name the name of the attribute to set\\n@param value the value of the attribute to set\\n@return the `Element` node, for chaining*/setAttribute(name:string,value:string):XmlService.Element;\\n/**Sets the attribute for this `Element` node with the given name, value, and namespace.\\n@param name the name of the attribute to set\\n@param value the value of the attribute to set\\n@param namespace the namespace of the attribute to set\\n@return the `Element` node, for chaining*/setAttribute(name:string,value:string,namespace:XmlService.Namespace):XmlService.Element;\\n/**Sets the given attribute for this `Element` node.\\n@param attribute the attribute to set\\n@return the `Element` node, for chaining*/setAttribute(attribute:XmlService.Attribute):XmlService.Element;\\n/**Sets the local name of the `Element` node. To set a namespace prefix for the node, use\\n[`setNamespace(namespace)`](https://developers.google.com/apps-script/reference/xml-service/element.html#setNamespace(Namespace)) in conjunction with [`XmlService.getNamespace(prefix, uri)`](https://developers.google.com/apps-script/reference/xml-service/xml-service.html#getNamespace(String,String)).\\n@param name the local name to set\\n@return the `Element` node, for chaining*/setName(name:string):XmlService.Element;\\n/**Sets the namespace for the `Element` node.\\n@param namespace the namespace to set\\n@return the `Element` node, for chaining*/setNamespace(namespace:XmlService.Namespace):XmlService.Element;\\n/**Sets the text value of the `Element` node. If the node already contains a text value or\\nany child nodes, this method overwrites the old content. To append or insert content instead,\\nuse [`addContent(content)`](https://developers.google.com/apps-script/reference/xml-service/element.html#addContent(Content)) or [`addContent(index, content)`](https://developers.google.com/apps-script/reference/xml-service/element.html#addContent(Integer,Content)).\\n@param text the text to set\\n@return the `Element` node, for chaining*/setText(text:string):XmlService.Element;}interface Document{\\n/**Inserts the given node at the given index among all nodes that are immediate children of the\\ndocument. The `content` argument can be a [`Content`](https://developers.google.com/apps-script/reference/xml-service/content.html) object or any node object\\nthat corresponds to a type listed in [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html). Note, however, that a document\\ncan only have one child [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node, which is implicitly the root `Element`\\nnode.\\n@param index the index at which to insert the node among all nodes that are immediate children\\n    of the document\\n@param content the node to insert\\n@return the document, for chaining*/addContent(index:Integer,content:XmlService.Content):XmlService.Document;\\n/**Appends the given node to the end of the document. The `content` argument can be a [`Content`](https://developers.google.com/apps-script/reference/xml-service/content.html) object or any node object that corresponds to a type listed in [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html). Note, however, that a document can only have one child [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html)\\nnode, which is implicitly the root `Element` node.\\n@param content the node to append\\n@return the document, for chaining*/addContent(content:XmlService.Content):XmlService.Document;\\n/**Creates unattached copies of all nodes that are immediate children of the document.\\n@return an array of unattached copies of all nodes that are immediate children of the\\n    document*/cloneContent():XmlService.Content[];\\n/**Detaches and returns the document's root [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the document does not have\\na root `Element` node, this method returns `null`.\\n@return the detached `Element` node, or `null` if the document does not have a root\\n    `Element` node*/detachRootElement():XmlService.Element;\\n/**Gets all nodes that are immediate children of the document.\\n@return an array of all nodes that are immediate children of the document*/getAllContent():XmlService.Content[];\\n/**Gets the node at the given index among all nodes that are immediate children of the\\ndocument. If there is no node at the given index, this method returns `null`.\\n@param index the index for the node among all nodes that are immediate children of the\\n    document\\n@return the node, or `null` if there is no node at the given index*/getContent(index:Integer):XmlService.Content;\\n/**Gets the number of nodes that are immediate children of the document.\\n@return the number of nodes that are immediate children of the document*/getContentSize():Integer;\\n/**Gets all nodes that are direct or indirect children of the document, in the order they\\nappear in the document.\\n@return an array of all nodes that are direct or indirect children of the document*/getDescendants():XmlService.Content[];\\n/**Gets the document's [`DocType`](https://developers.google.com/apps-script/reference/xml-service/doc-type.html) declaration. If the document does not have a `DocumentType` node, this method returns `null`.\\n@return the `DocumentType` node, or `null` if the document does not have a `DocumentType` node*/getDocType():XmlService.DocType;\\n/**Gets the document's root [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the document does not have a root `Element` node, this method returns `null`.\\n@return the root `Element` node, or `null` if the document does not have a root\\n    `Element` node*/getRootElement():XmlService.Element;\\n/**Determines whether the document has a root [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node.\\n@return `true` if the document has a root `Element` node; `false` if not*/hasRootElement():boolean;\\n/**Removes all nodes that are immediate children of the document.\\n@return an array of all nodes that were immediate children of the document before they\\n    were removed*/removeContent():XmlService.Content[];\\n/**Removes the node at the given index among all nodes that are immediate children of the\\ndocument. If there is no node at the given index, this method returns `null`.\\n@param index the index for the node among all nodes that are immediate children of the\\n    document\\n@return the node that was removed, or `null` if there is no node at the given index*/removeContent(index:Integer):XmlService.Content;\\n/**Removes the given node, if the node is an immediate child of the document. The `content` argument can be a [`Content`](https://developers.google.com/apps-script/reference/xml-service/content.html) object or any node object that corresponds to a\\ntype listed in [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html).\\n@param content the node to remove\\n@return `true` if the node was an immediate child and was removed; `false` if not*/removeContent(content:XmlService.Content):boolean;\\n/**Sets the document's [`DocType`](https://developers.google.com/apps-script/reference/xml-service/doc-type.html) declaration. If the document already has a different\\n`DocType` node, this method overwrites the old node. This method throws an exception if\\nthe document already contains the same `DocType` node that is being set.\\n@param docType the `DocumentType` to set\\n@return the document, for chaining*/setDocType(docType:XmlService.DocType):XmlService.Document;\\n/**Sets the document's root [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the document already has a root `Element` node, this method overwrites the old node.\\n@param element the root `Element` node to set\\n@return the document, for chaining*/setRootElement(element:XmlService.Element):XmlService.Document;}interface DocType{\\n/**Detaches the node from its parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent,\\nthis method has no effect.\\n@return the detached node*/detach():XmlService.Content;\\n/**Gets the name of the root [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node specified in the `DocType` declaration.\\n@return the name of the root `Element` node specified in the `DocType` declaration*/getElementName():string;\\n/**Gets the internal subset data for the `DocumentType` node.\\n@return the internal subset data*/getInternalSubset():string;\\n/**Gets the node's parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent, this method\\nreturns `null`.\\n@return the parent `Element` node*/getParentElement():XmlService.Element;\\n/**Gets the public ID of the external subset data for the `DocumentType` node.\\n@return the public ID of the external subset data*/getPublicId():string;\\n/**Gets the system ID of the external subset data for the `DocumentType` node.\\n@return the system ID of the external subset data*/getSystemId():string;\\n/**Gets the text value of all nodes that are direct or indirect children of the node, in the order\\nthey appear in the document.\\n@return the text value of all nodes that are direct or indirect children of the node*/getValue():string;\\n/**Sets the name of the root [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node to specify in the `DocType`\\ndeclaration.\\n@param name the name of the root `Element` node to specify in the `DocType`\\n    declaration\\n@return the `DocumentType` node, for chaining*/setElementName(name:string):XmlService.DocType;\\n/**Sets the internal subset data for the `DocumentType` node.\\n@param data the internal subset data to set\\n@return the `DocumentType` node, for chaining*/setInternalSubset(data:string):XmlService.DocType;\\n/**Sets the public ID of the external subset data for the `DocumentType` node.\\n@param id the public ID of the external subset data to set\\n@return the `DocumentType` node, for chaining*/setPublicId(id:string):XmlService.DocType;\\n/**Sets the system ID of the external subset data for the `DocumentType` node.\\n@param id the system ID of the external subset data to set\\n@return the `DocumentType` node, for chaining*/setSystemId(id:string):XmlService.DocType;}interface ContentType{}interface _ContentType{\\n/**An XML [`CDATASection`](https://developers.google.com/apps-script/reference/xml-service/cdata.html) node.*/CDATA:ContentType;\\n/**An XML [`Comment`](https://developers.google.com/apps-script/reference/xml-service/comment.html) node.*/COMMENT:ContentType;\\n/**An XML [`DocumentType`](https://developers.google.com/apps-script/reference/xml-service/doc-type.html) node.*/DOCTYPE:ContentType;\\n/**An XML [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node.*/ELEMENT:ContentType;\\n/**An XML [`EntityReference`](https://developers.google.com/apps-script/reference/xml-service/entity-ref.html) node.*/ENTITYREF:ContentType;\\n/**An XML [`ProcessingInstruction`](https://developers.google.com/apps-script/reference/xml-service/processing-instruction.html) node.*/PROCESSINGINSTRUCTION:ContentType;\\n/**An XML [`Text`](https://developers.google.com/apps-script/reference/xml-service/text.html) node.*/TEXT:ContentType;}interface Content{\\n/**Casts the node as a [`CDATASection`](https://developers.google.com/apps-script/reference/xml-service/cdata.html) node for the purposes of autocomplete. If the\\nnode's [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html) is not already `CDATA`, this method returns `null`.\\n@return the `CDATASection` node*/asCdata():XmlService.Cdata;\\n/**Casts the node as a [`Comment`](https://developers.google.com/apps-script/reference/xml-service/comment.html) node for the purposes of autocomplete. If the node's\\n[`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html) is not already `COMMENT`, this method returns `null`.\\n@return the `Comment` node, or `null` if the node's content type is not [`COMMENT`](https://developers.google.com/apps-script/reference/xml-service/content-type.html)*/asComment():XmlService.Comment;\\n/**Casts the node as a [`DocumentType`](https://developers.google.com/apps-script/reference/xml-service/doc-type.html) node for the purposes of autocomplete. If\\nthe node's [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html) is not already `DOCTYPE`, this method returns `null`.\\n@return the `DocumentType` node*/asDocType():XmlService.DocType;\\n/**Casts the node as an [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node for the purposes of autocomplete. If the node's\\n[`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html) is not already `ELEMENT`, this method returns `null`.\\n@return the `Element` node*/asElement():XmlService.Element;\\n/**Casts the node as a [`EntityReference`](https://developers.google.com/apps-script/reference/xml-service/entity-ref.html) node for the purposes of autocomplete.\\nIf the node's [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html) is not already `ENTITYREF`, this method returns\\n`null`.\\n@return the `EntityReference` node*/asEntityRef():XmlService.EntityRef;\\n/**Casts the node as a [`ProcessingInstruction`](https://developers.google.com/apps-script/reference/xml-service/processing-instruction.html) node for the purposes of autocomplete. If\\nthe node's [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html) is not already `PROCESSINGINSTRUCTION`, this method\\nreturns `null`.\\n@return the `ProcessingInstruction` node*/asProcessingInstruction():XmlService.ProcessingInstruction;\\n/**Casts the node as a [`Text`](https://developers.google.com/apps-script/reference/xml-service/text.html) node for the purposes of autocomplete. If the node's [`ContentType`](https://developers.google.com/apps-script/reference/xml-service/content-type.html) is not already `TEXT`, this method returns `null`.\\n@return the `Text` node*/asText():XmlService.Text;\\n/**Detaches the node from its parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent,\\nthis method has no effect.\\n@return the detached node*/detach():XmlService.Content;\\n/**Gets the node's parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent, this method\\nreturns `null`.\\n@return the parent `Element` node*/getParentElement():XmlService.Element;\\n/**Gets the node's content type.\\n@return the node's content type*/getType():XmlService.ContentType;\\n/**Gets the text value of all nodes that are direct or indirect children of the node, in the order\\nthey appear in the document.\\n@return the text value of all nodes that are direct or indirect children of the node*/getValue():string;}interface Comment{\\n/**Detaches the node from its parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent,\\nthis method has no effect.\\n@return the detached node*/detach():XmlService.Content;\\n/**Gets the node's parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent, this method\\nreturns `null`.\\n@return the parent `Element` node*/getParentElement():XmlService.Element;\\n/**Gets the text value of the `Comment` node.\\n@return the text value of the `Comment` node*/getText():string;\\n/**Gets the text value of all nodes that are direct or indirect children of the node, in the order\\nthey appear in the document.\\n@return the text value of all nodes that are direct or indirect children of the node*/getValue():string;\\n/**Sets the text value of the `Comment` node.\\n@param text the text value to set\\n@return the `Comment` node, for chaining*/setText(text:string):XmlService.Comment;}interface Cdata{\\n/**Appends the given text to any content that already exists in the node.\\n@param text the text to append to the node\\n@return the `Text` node, for chaining*/append(text:string):XmlService.Text;\\n/**Detaches the node from its parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent,\\nthis method has no effect.\\n@return the detached node*/detach():XmlService.Content;\\n/**Gets the node's parent [`Element`](https://developers.google.com/apps-script/reference/xml-service/element.html) node. If the node does not have a parent, this method\\nreturns `null`.\\n@return the parent `Element` node*/getParentElement():XmlService.Element;\\n/**Gets the text value of the `Text` node.\\n@return the text value of the `Text` node*/getText():string;\\n/**Gets the text value of all nodes that are direct or indirect children of the node, in the order\\nthey appear in the document.\\n@return the text value of all nodes that are direct or indirect children of the node*/getValue():string;\\n/**Sets the text value of the `Text` node.\\n@param text the text value to set\\n@return the `Text` node, for chaining*/setText(text:string):XmlService.Text;}interface Attribute{\\n/**Gets the local name of the attribute. If the attribute has a namespace prefix, use [`getNamespace()`](https://developers.google.com/apps-script/reference/xml-service/attribute.html#getNamespace()).[`getPrefix()`](https://developers.google.com/apps-script/reference/xml-service/namespace.html#getPrefix()) to get the prefix.\\n@return the local name of the attribute*/getName():string;\\n/**Gets the namespace for the attribute.\\n@return the namespace for the attribute*/getNamespace():XmlService.Namespace;\\n/**Gets the value of the attribute.\\n@return the value of the attribute*/getValue():string;\\n/**Sets the local name of the attribute. To set a namespace prefix for the attribute, use [`setNamespace(namespace)`](https://developers.google.com/apps-script/reference/xml-service/attribute.html#setNamespace(Namespace)) in conjunction with [`XmlService.getNamespace(prefix, uri)`](https://developers.google.com/apps-script/reference/xml-service/xml-service.html#getNamespace(String,String)).\\n@param name the local name to set\\n@return the attribute, for chaining*/setName(name:string):XmlService.Attribute;\\n/**Sets the namespace for the attribute. The namespace must have a prefix.\\n@param namespace the namespace to set\\n@return the attribute, for chaining*/setNamespace(namespace:XmlService.Namespace):XmlService.Attribute;\\n/**Sets the value of the attribute.\\n@param value the value to set\\n@return the attribute, for chaining*/setValue(value:string):XmlService.Attribute;}}const XmlService:XmlService;\"],[\"console.d.ts\",\"interface console{\\n/**Outputs a blank ERROR level message to Stackdriver Logging.*/error():void;\\n/**Outputs an ERROR level message to Stackdriver Logging.\\n@param formatOrObject a string containing zero or more substitution strings, or a JavaScript\\n    object to be logged as a JavaScript object if no other parameters.\\n@param values objects with which to replace substitution strings within the message. This gives\\n    you additional control over the format of the output.*/error(formatOrObject:Object,...values:Object[]):void;\\n/**Outputs blank INFO level message to Stackdriver Logging.*/info():void;\\n/**Outputs an INFO level message to Stackdriver Logging.\\n@param formatOrObject a string containing zero or more substitution strings, or a JavaScript\\n    object to be logged as a JavaScript object if no other parameters.\\n@param values objects with which to replace substitution strings within the message. This gives\\n    you additional control over the format of the output.*/info(formatOrObject:Object,...values:Object[]):void;\\n/**Outputs a blank DEBUG level message to Stackdriver Logging.*/log():void;\\n/**Outputs a DEBUG level message to Stackdriver Logging.\\n@param formatOrObject a string containing zero or more substitution strings, or a JavaScript\\n    object to be logged as a JavaScript object if no other parameters.\\n@param values objects with which to replace substitution strings within the message. This gives\\n    you additional control over the format of the output.*/log(formatOrObject:Object,...values:Object[]):void;\\n/**Starts a timer you can use to track how long an operation takes.\\n@param label The name to give the new timer.*/time(label:string):void;\\n/**Stops a timer that was previously started by calling `console.time()`. The time duration\\nis logged in Stackdriver.\\n@param label the name of the timer to stop.*/timeEnd(label:string):void;\\n/**Outputs a blank WARNING level message to Stackdriver Logging.*/warn():void;\\n/**Outputs a WARNING level message to Stackdriver Logging.\\n@param formatOrObject a string containing zero or more substitution strings, or a JavaScript\\n    object to be logged as a JavaScript object if no other parameters.\\n@param values objects with which to replace substitution strings within the message. This gives\\n    you additional control over the format of the output.*/warn(formatOrObject:Object,...values:Object[]):void;}const console:console;\"],[\"data-studio-app.d.ts\",\"interface DataStudioApp{\\n/**Creates a new Community Connector.\\n@return A new [`CommunityConnector`](https://developers.google.com/apps-script/reference/data-studio/community-connector.html) object.*/createCommunityConnector():DataStudioApp.CommunityConnector;}module DataStudioApp{interface UserError{printJson():string;\\n/**Sets the text of the debug error, which is only shown to admins.\\n@param text The error text.\\n@return This object, for chaining.*/setDebugText(text:string):DataStudioApp.UserError;\\n/**Sets the text of the user error.\\n@param text The error text.\\n@return This object, for chaining.*/setText(text:string):DataStudioApp.UserError;\\n/**Triggers this exception to be thrown.*/throwException():void;}interface TextInput{\\n/**Enables overriding for this config entry. If set to `true`, data source creators have the\\noption to enable this for report editors\\n@param allowOverride Whether or not this config entry can be overridden in reports.\\n@return This builder, for chaining.*/setAllowOverride(allowOverride:boolean):DataStudioApp.TextInput;\\n/**Sets the help text for this configuration entry.\\n@param helpText The helpText to set.\\n@return This builder, for chaining.*/setHelpText(helpText:string):DataStudioApp.TextInput;\\n/**Sets the unique ID for this configuration entry.\\n@param id The ID to set.\\n@return This builder, for chaining.*/setId(id:string):DataStudioApp.TextInput;\\n/**Sets the dynamic status for this configuration entry.\\n\\nIf a dynamic configuration entry is modified, subsequent configuration entries are cleared.\\n@param isDynamic The dynamic status to set.\\n@return This builder, for chaining.*/setIsDynamic(isDynamic:boolean):DataStudioApp.TextInput;\\n/**Sets the display name for this configuration entry.\\n@param name The name to set.\\n@return This builder, for chaining.*/setName(name:string):DataStudioApp.TextInput;\\n/**Sets the placeholder text for this configuration entry.\\n@param placeholder The placeholder text to set.\\n@return This builder, for chaining.*/setPlaceholder(placeholder:string):DataStudioApp.TextInput;}interface TextArea{\\n/**Enables overriding for this config entry. If set to `true`, data source creators have the\\noption to enable this for report editors.\\n@param allowOverride Whether or not this config entry can be overridden in reports.\\n@return This builder, for chaining.*/setAllowOverride(allowOverride:boolean):DataStudioApp.TextArea;\\n/**Sets the help text for this configuration entry.\\n@param helpText The helpText to set.\\n@return This builder, for chaining.*/setHelpText(helpText:string):DataStudioApp.TextArea;\\n/**Sets the unique ID for this configuration entry.\\n@param id The ID to set.\\n@return This builder, for chaining.*/setId(id:string):DataStudioApp.TextArea;\\n/**Sets the dynamic status for this configuration entry.\\n\\nIf a dynamic configuration entry is modified, subsequent configuration entries are cleared.\\n@param isDynamic The dynamic status to set.\\n@return This builder, for chaining.*/setIsDynamic(isDynamic:boolean):DataStudioApp.TextArea;\\n/**Sets the display name for this configuration entry.\\n@param name The name to set.\\n@return This builder, for chaining.*/setName(name:string):DataStudioApp.TextArea;\\n/**Sets the placeholder text for this configuration entry.\\n@param placeholder The placeholder text to set.\\n@return This builder, for chaining.*/setPlaceholder(placeholder:string):DataStudioApp.TextArea;}interface SetCredentialsResponse{\\n/**Validates this object and returns it in the format needed by Data Studio.\\n@return The validated [`SetCredentialsResponse`](https://developers.google.com/apps-script/reference/data-studio/set-credentials-response.html) object.*/build():Object;printJson():string;\\n/**Sets the valid status of this [`SetCredentialsResponse`](https://developers.google.com/apps-script/reference/data-studio/set-credentials-response.html). Set to `true` if the\\ncredentials provided in the request were valid, `false`, otherwise.\\n@param isValid The valid status to set.\\n@return This builder, for chaining.*/setIsValid(isValid:boolean):DataStudioApp.SetCredentialsResponse;}interface SelectSingle{\\n/**Adds a new select option.\\n@param optionBuilder A builder for an option.\\n@return This builder, for chaining.*/addOption(optionBuilder:DataStudioApp.OptionBuilder):DataStudioApp.SelectSingle;\\n/**Enables overriding for this config entry. If set to `true`, data source creators have the\\noption to enable this for report editors.\\n@param allowOverride Whether or not this config entry can be overridden in reports.\\n@return This builder, for chaining.*/setAllowOverride(allowOverride:boolean):DataStudioApp.SelectSingle;\\n/**Sets the help text for this configuration entry.\\n@param helpText The helpText to set.\\n@return This builder, for chaining.*/setHelpText(helpText:string):DataStudioApp.SelectSingle;\\n/**Sets the unique ID for this configuration entry.\\n@param id The ID to set.\\n@return This builder, for chaining.*/setId(id:string):DataStudioApp.SelectSingle;\\n/**Sets the dynamic status for this configuration entry.\\n\\nIf a dynamic configuration entry is modified, subsequent configuration entries are cleared.\\n@param isDynamic The dynamic status to set.\\n@return This builder, for chaining.*/setIsDynamic(isDynamic:boolean):DataStudioApp.SelectSingle;\\n/**Sets the display name for this configuration entry.\\n@param name The name to set.\\n@return This builder, for chaining.*/setName(name:string):DataStudioApp.SelectSingle;}interface SelectMultiple{\\n/**Adds a new select option.\\n@param optionBuilder A builder for an option.\\n@return This builder, for chaining.*/addOption(optionBuilder:DataStudioApp.OptionBuilder):DataStudioApp.SelectMultiple;\\n/**Enables overriding for this config entry. If set to `true`, data source creators have the\\noption to enable this for report editors.\\n@param allowOverride Whether or not this config entry can be overridden in reports.\\n@return This builder, for chaining.*/setAllowOverride(allowOverride:boolean):DataStudioApp.SelectMultiple;\\n/**Sets the help text for this configuration entry.\\n@param helpText The help text to set.\\n@return This builder, for chaining.*/setHelpText(helpText:string):DataStudioApp.SelectMultiple;\\n/**Sets the unique ID for this configuration entry.\\n@param id The ID to set.\\n@return This builder, for chaining.*/setId(id:string):DataStudioApp.SelectMultiple;\\n/**Sets the dynamic status for this configuration entry.\\n\\nIf a dynamic configuration entry is modified, subsequent configuration entries are cleared.\\n@param isDynamic The dynamic status to set.\\n@return This builder, for chaining.*/setIsDynamic(isDynamic:boolean):DataStudioApp.SelectMultiple;\\n/**Sets the display name for this configuration entry.\\n@param name The name to set.\\n@return This builder, for chaining.*/setName(name:string):DataStudioApp.SelectMultiple;}interface OptionBuilder{\\n/**Sets the label of this option builder. Labels are the text that the user sees when selecting\\none or more options from the dropdown.\\n@param label The label to set.\\n@return This builder, for chaining.*/setLabel(label:string):DataStudioApp.OptionBuilder;\\n/**Sets the value of this option builder. Values are what is passed to the code when a user\\nselects one or more options from the dropdown.\\n@param value The value to set.\\n@return This builder, for chaining.*/setValue(value:string):DataStudioApp.OptionBuilder;}interface Info{\\n/**Sets the unique ID for this configuration entry.\\n@param id The ID to set.\\n@return This builder, for chaining.*/setId(id:string):DataStudioApp.Info;\\n/**Sets the text for this configuration entry.\\n@param text The text to set.\\n@return This builder, for chaining.*/setText(text:string):DataStudioApp.Info;}interface GetSchemaResponse{\\n/**Validates this object and returns it in the format needed by Data Studio.\\n@return The validated [`GetSchemaResponse`](https://developers.google.com/apps-script/reference/data-studio/get-schema-response.html) object.*/build():Object;printJson():string;\\n/**Sets the [`Fields`](https://developers.google.com/apps-script/reference/data-studio/fields.html) of the builder.\\n@param fields The fields to set.\\n@return This builder, for chaining.*/setFields(fields:DataStudioApp.Fields):DataStudioApp.GetSchemaResponse;}interface GetDataResponse{\\n/**Adds multiple rows of data to this [`GetDataResponse`](https://developers.google.com/apps-script/reference/data-studio/get-data-response.html).\\n@param rows The rows of data to set.\\n@return This builder, for chaining.*/addAllRows(rows:string[][]):DataStudioApp.GetDataResponse;\\n/**Adds a row of data to this [`GetDataResponse`](https://developers.google.com/apps-script/reference/data-studio/get-data-response.html).\\n@param row The row of data to set.\\n@return This builder, for chaining.*/addRow(row:string[]):DataStudioApp.GetDataResponse;\\n/**Validates this object and returns it in the format needed by Data Studio.\\n@return The validated [`GetDataResponse`](https://developers.google.com/apps-script/reference/data-studio/get-data-response.html) object.*/build():Object;\\n/**Sets the [`Fields`](https://developers.google.com/apps-script/reference/data-studio/fields.html) of the builder.\\n@param fields The fields to set.\\n@return This builder, for chaining.*/setFields(fields:DataStudioApp.Fields):DataStudioApp.GetDataResponse;\\n/**Sets the filters applied status for this builder. Set to `true` if all filters were\\nsuccessfully applied, `false` otherwise.\\n@param filtersApplied - The filters applied status to set.\\n@return This builder, for chaining.*/setFiltersApplied(filtersApplied:boolean):DataStudioApp.GetDataResponse;}interface GetAuthTypeResponse{\\n/**Validates this object and returns it in the format needed by Data Studio.\\n@return The validated [`GetAuthTypeResponse`](https://developers.google.com/apps-script/reference/data-studio/get-auth-type-response.html) object.*/build():Object;printJson():string;\\n/**Sets the [`AuthType`](https://developers.google.com/apps-script/reference/data-studio/auth-type.html) of the builder.\\n@param authType The authentication type to set.\\n@return This builder, for chaining.*/setAuthType(authType:DataStudioApp.AuthType):DataStudioApp.GetAuthTypeResponse;\\n/**Sets the help URL of the builder.\\n\\nThe help URL is an optional URL the user can visit to get help on setting up auth. This is\\nonly supported for `USER_PASS`, `KEY`, and `USER_TOKEN`\\nauthTypes.\\n@param helpUrl The help URL to set.\\n@return This builder, for chaining.*/setHelpUrl(helpUrl:string):DataStudioApp.GetAuthTypeResponse;}interface Fields{\\n/**Returns a view of this object as an array.\\n\\n```\\nvar fields \\u003d //reference to fields object.\\nfields.newDimension().setId('field1_id');\\nfields.newDimension().setId('field2_id');\\nfields.newDimension().setId('field3_id');\\n\\n// Logging the ID of each field:\\nfields\\n  .asArray()\\n  .map(function(field) {\\n     Logger.log(field.getId());\\n  });\\n```\\n@return An array of [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html) objects.*/asArray():DataStudioApp.Field[];\\n/**Validates this object and returns it in the format needed by Data Studio.\\n@return The validated field data, represented as a list of objects.*/build():Object[];\\n/**Returns a new [`Fields`](https://developers.google.com/apps-script/reference/data-studio/fields.html) object filtered to [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html)s with an ID in `ids`.\\n\\n```\\nvar fields \\u003d //reference to fields object.\\nfields.newDimension().setId('field1_id');\\nfields.newDimension().setId('field2_id');\\nfields.newDimension().setId('field3_id');\\n\\n// subsetFields is a Fields object that only contains field1 and field2.\\nvar subsetFields \\u003d fields.forIds(['field1_id', 'field3_id']);\\n```\\n@param ids The IDs of fields that should be kept.\\n@return A new [`Fields`](https://developers.google.com/apps-script/reference/data-studio/fields.html) object.*/forIds(ids:string[]):DataStudioApp.Fields;\\n/**Returns the default dimension to be used for the set of fields. The default dimension is\\nselected automatically when a new visualization is made.\\n@return The dimension that is set as the default dimension, or `null` if no default\\n    dimension was set.*/getDefaultDimension():DataStudioApp.Field;\\n/**Returns the default metric to be used for the set of fields. The default metric is selected\\nautomatically when a new visualization is made.\\n@return The metric that is set as the default metric, or `null` if no default metric was\\n    set.*/getDefaultMetric():DataStudioApp.Field;\\n/**Returns a field with a given ID, or `null` if no field with that ID is in this [`Fields`](https://developers.google.com/apps-script/reference/data-studio/fields.html) object.\\n\\n```\\nvar fields \\u003d //reference to fields object.\\nvar field1 \\u003d fields.newDimension().setId('field1_id');\\n\\n// byId is the same as field1.\\nvar byId \\u003d fields.getFieldById('field1_id');\\n\\n// byId2 is null.\\nvar byId2 \\u003d fields.getFieldById('not present id');\\n```\\n@param fieldId The ID of the field to get.\\n@return The [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html) with the given ID, or `null` if no such field is contained\\n    within this [`Fields`](https://developers.google.com/apps-script/reference/data-studio/fields.html) object.*/getFieldById(fieldId:string):DataStudioApp.Field;\\n/**Returns a new dimension [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html).\\n@return A new dimension [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html).*/newDimension():DataStudioApp.Field;\\n/**Returns a new metric [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html).\\n@return A new metric [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html).*/newMetric():DataStudioApp.Field;\\n/**Sets the default dimension to be used for the set of fields. The default dimension is selected\\nautomatically when a new visualization is made.\\n@param fieldId The ID of the field to use as the default dimension. This ID must be present in\\n    the set of fields.*/setDefaultDimension(fieldId:string):void;\\n/**Sets the default metric to be used for the set of fields. The default metric is selected\\nautomatically when a new visualization is made.\\n@param fieldId The ID of the field to use as the default metric. This ID must be present in the\\n    set of fields.*/setDefaultMetric(fieldId:string):void;}interface FieldType{}interface _FieldType{\\n/**A `true` or `false` boolean value.*/BOOLEAN:FieldType;\\n/**A city such as Mountain View.*/CITY:FieldType;\\n/**A city code such as 1014044.*/CITY_CODE:FieldType;\\n/**A continent such as Americas.*/CONTINENT:FieldType;\\n/**A continent code such as 019.*/CONTINENT_CODE:FieldType;\\n/**A country such as United States.*/COUNTRY:FieldType;\\n/**A country code such as US.*/COUNTRY_CODE:FieldType;\\n/**Currency from AED.*/CURRENCY_AED:FieldType;\\n/**Currency from ALL.*/CURRENCY_ALL:FieldType;\\n/**Currency from ARS.*/CURRENCY_ARS:FieldType;\\n/**Currency from AUD.*/CURRENCY_AUD:FieldType;\\n/**Currency from BDT.*/CURRENCY_BDT:FieldType;\\n/**Currency from BGN.*/CURRENCY_BGN:FieldType;\\n/**Currency from BOB.*/CURRENCY_BOB:FieldType;\\n/**Currency from BRL.*/CURRENCY_BRL:FieldType;\\n/**Currency from CAD.*/CURRENCY_CAD:FieldType;\\n/**Currency from CDF.*/CURRENCY_CDF:FieldType;\\n/**Currency from CHF.*/CURRENCY_CHF:FieldType;\\n/**Currency from CLP.*/CURRENCY_CLP:FieldType;\\n/**Currency from CNY.*/CURRENCY_CNY:FieldType;\\n/**Currency from COP.*/CURRENCY_COP:FieldType;\\n/**Currency from CRC.*/CURRENCY_CRC:FieldType;\\n/**Currency from CZK.*/CURRENCY_CZK:FieldType;\\n/**Currency from DKK.*/CURRENCY_DKK:FieldType;\\n/**Currency from DOP.*/CURRENCY_DOP:FieldType;\\n/**Currency from EGP.*/CURRENCY_EGP:FieldType;\\n/**Currency from ETB.*/CURRENCY_ETB:FieldType;\\n/**Currency from EUR.*/CURRENCY_EUR:FieldType;\\n/**Currency from GBP.*/CURRENCY_GBP:FieldType;\\n/**Currency from HKD.*/CURRENCY_HKD:FieldType;\\n/**Currency from HRK.*/CURRENCY_HRK:FieldType;\\n/**Currency from HUF.*/CURRENCY_HUF:FieldType;\\n/**Currency from IDR.*/CURRENCY_IDR:FieldType;\\n/**Currency from ILS.*/CURRENCY_ILS:FieldType;\\n/**Currency from INR.*/CURRENCY_INR:FieldType;\\n/**Currency from IRR.*/CURRENCY_IRR:FieldType;\\n/**Currency from ISK.*/CURRENCY_ISK:FieldType;\\n/**Currency from JMD.*/CURRENCY_JMD:FieldType;\\n/**Currency from JPY.*/CURRENCY_JPY:FieldType;\\n/**Currency from KRW.*/CURRENCY_KRW:FieldType;\\n/**Currency from LKR.*/CURRENCY_LKR:FieldType;\\n/**Currency from LTL.*/CURRENCY_LTL:FieldType;\\n/**Currency from MNT.*/CURRENCY_MNT:FieldType;\\n/**Currency from MVR.*/CURRENCY_MVR:FieldType;\\n/**Currency from MXN.*/CURRENCY_MXN:FieldType;\\n/**Currency from MYR.*/CURRENCY_MYR:FieldType;\\n/**Currency from NGN.*/CURRENCY_NGN:FieldType;\\n/**Currency from NOK.*/CURRENCY_NOK:FieldType;\\n/**Currency from NZD.*/CURRENCY_NZD:FieldType;\\n/**Currency from PAB.*/CURRENCY_PAB:FieldType;\\n/**Currency from PEN.*/CURRENCY_PEN:FieldType;\\n/**Currency from PHP.*/CURRENCY_PHP:FieldType;\\n/**Currency from PKR.*/CURRENCY_PKR:FieldType;\\n/**Currency from PLN.*/CURRENCY_PLN:FieldType;\\n/**Currency from RON.*/CURRENCY_RON:FieldType;\\n/**Currency from RSD.*/CURRENCY_RSD:FieldType;\\n/**Currency from RUB.*/CURRENCY_RUB:FieldType;\\n/**Currency from SAR.*/CURRENCY_SAR:FieldType;\\n/**Currency from SEK.*/CURRENCY_SEK:FieldType;\\n/**Currency from SGD.*/CURRENCY_SGD:FieldType;\\n/**Currency from THB.*/CURRENCY_THB:FieldType;\\n/**Currency from TRY.*/CURRENCY_TRY:FieldType;\\n/**Currency from TWD.*/CURRENCY_TWD:FieldType;\\n/**Currency from TZS.*/CURRENCY_TZS:FieldType;\\n/**Currency from UAH.*/CURRENCY_UAH:FieldType;\\n/**Currency from USD.*/CURRENCY_USD:FieldType;\\n/**Currency from UYU.*/CURRENCY_UYU:FieldType;\\n/**Currency from VEF.*/CURRENCY_VEF:FieldType;\\n/**Currency from VND.*/CURRENCY_VND:FieldType;\\n/**Currency from YER.*/CURRENCY_YER:FieldType;\\n/**Currency from ZAR.*/CURRENCY_ZAR:FieldType;\\n/**Day in the format of DD such as 17.*/DAY:FieldType;\\n/**A number in the range of [0,6] with 0 representing Sunday.*/DAY_OF_WEEK:FieldType;\\n/**A duration of time in seconds.*/DURATION:FieldType;\\n/**Hour in the format of HH such as 13.*/HOUR:FieldType;\\n/**A hyperlink. Only use this for calculated fields with the [`HYPERLINK`](https://support.google.com/datastudio/answer/7431836)\\nfunction.*/HYPERLINK:FieldType;\\n/**An image. Only use this for calculated fields with the [`IMAGE`](https://support.google.com/datastudio/answer/7570489) function.*/IMAGE:FieldType;\\n/**An image link. Only use this for calculated fields with the [`HYPERLINK`](https://support.google.com/datastudio/answer/7431836) function\\nwhile using `IMAGE` for the link label.*/IMAGE_LINK:FieldType;\\n/**A latitude longitude pair such as 51.5074, -0.1278.*/LATITUDE_LONGITUDE:FieldType;\\n/**A metro such as San Francisco-Oakland-San Jose CA.*/METRO:FieldType;\\n/**A metro code such as 200807.*/METRO_CODE:FieldType;\\n/**Minute in the format of mm such as 12.*/MINUTE:FieldType;\\n/**Month in the format of MM such as 03.*/MONTH:FieldType;\\n/**Month and day in the format of MMDD such as 0317.*/MONTH_DAY:FieldType;\\n/**A decimal number.*/NUMBER:FieldType;\\n/**Decimal percentage (can be over 1.0). For example, 137% is represented as 1.37.*/PERCENT:FieldType;\\n/**Quarter in the format of 1, 2, 3, or 4).*/QUARTER:FieldType;\\n/**A region such as California.*/REGION:FieldType;\\n/**A region code such as CA.*/REGION_CODE:FieldType;\\n/**A sub-continent such as North America.*/SUB_CONTINENT:FieldType;\\n/**A sub-continent code such as 003.*/SUB_CONTINENT_CODE:FieldType;\\n/**Free-form text.*/TEXT:FieldType;\\n/**A URL as text such as https://google.com.*/URL:FieldType;\\n/**Week in the format of ww such as 07.*/WEEK:FieldType;\\n/**Year in the format of YYYY such as 2017.*/YEAR:FieldType;\\n/**Year and month in the format of YYYYMM such as 201703.*/YEAR_MONTH:FieldType;\\n/**Year, month, and day in the format of YYYYMMDD such as 20170317.*/YEAR_MONTH_DAY:FieldType;\\n/**Year, month, day, and hour in the format of YYYYMMDDHH such as 2017031703.*/YEAR_MONTH_DAY_HOUR:FieldType;\\n/**Year, month, day, hour, and minute in the format of YYYYMMDDHHmm such as 201703170230.*/YEAR_MONTH_DAY_MINUTE:FieldType;\\n/**Year, month, day, hour, minute, and second in the format of YYYYMMDDHHmmss such as\\n20170317023017.*/YEAR_MONTH_DAY_SECOND:FieldType;\\n/**Year and quarter in the format of YYYYQ such as 20171.*/YEAR_QUARTER:FieldType;\\n/**Year and week in the format of YYYYww such as 201707.*/YEAR_WEEK:FieldType;}interface Field{\\n/**Returns the [`AggregationType`](https://developers.google.com/apps-script/reference/data-studio/aggregation-type.html) of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). [`AggregationType`](https://developers.google.com/apps-script/reference/data-studio/aggregation-type.html) determines\\nhow Data Studio combines similar data into dimensions.\\n@return The aggregationType for this field.*/getAggregation():DataStudioApp.AggregationType;\\n/**Returns the description of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). Descriptions are short explanations of a field's\\npurpose.\\n@return The description for this field.*/getDescription():string;\\n/**Returns the formula of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). Formulas define a data transformation that Data\\nStudio runs at query-time.\\n@return The formula for this field.*/getFormula():string;\\n/**Returns the group of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). Fields collected into a group are presented together\\nin the Data Studio UI.\\n@return The group for this field.*/getGroup():string;\\n/**Returns the ID of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). IDs are unique per set of fields and are used in formulas\\nto refer to fields.\\n@return The ID for this field.*/getId():string;\\n/**Returns `true` if this field can be reaggregated, `false` otherwise.\\n@return `true` if this field can be reaggregated, `false` otherwise.*/getIsReaggregatable():boolean;\\n/**Returns the name of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). Names are shown to the user to distinguish fields.\\n@return The name for this field.*/getName():string;\\n/**Returns the [`FieldType`](https://developers.google.com/apps-script/reference/data-studio/field-type.html) of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html).\\n@return The type for this field.*/getType():DataStudioApp.FieldType;\\n/**Returns `true` if this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html) is the default metric or dimension.\\n@return `true` if this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html) is the default metric or dimension; `false`\\n    otherwise.*/isDefault():boolean;\\n/**Returns `true` if this field is a dimension.\\n@return `true` if this field is a dimension; returns `false` otherwise.*/isDimension():boolean;\\n/**Returns `true` if this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html) is hidden. You can use hidden fields in formulas,\\nbut not in charts. You cannot hide fields containing formulas.\\n@return `true` if this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html) is hidden; `false` otherwise.*/isHidden():boolean;\\n/**Returns `true` if this field is a metric.\\n@return `true` if this field is a metric; returns `false` otherwise.*/isMetric():boolean;\\n/**Sets the aggregation type of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). [`AggregationType`](https://developers.google.com/apps-script/reference/data-studio/aggregation-type.html) determines how Data\\nStudio combines similar data into dimensions. This throws an error if called on a metric.\\n@param aggregation The aggregation type to set.\\n@return This builder, for chaining.*/setAggregation(aggregation:DataStudioApp.AggregationType):DataStudioApp.Field;\\n/**Sets the description of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). Descriptions are short explanations of a field's\\npurpose.\\n@param description The description to set.\\n@return This builder, for chaining.*/setDescription(description:string):DataStudioApp.Field;\\n/**Sets the formula of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). Formulas define a data transformation that Data Studio\\nruns at query-time.\\n@param formula The formula to set.\\n@return This builder, for chaining.*/setFormula(formula:string):DataStudioApp.Field;\\n/**Sets the group of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). Fields collected into a group are presented together in\\nthe Data Studio UI.\\n@param group The group to set.\\n@return This builder, for chaining.*/setGroup(group:string):DataStudioApp.Field;\\n/**Sets the ID of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). IDs are unique per set of fields and are used in formulas to\\nrefer to fields.\\n@param id The ID to set.\\n@return This builder, for chaining.*/setId(id:string):DataStudioApp.Field;\\n/**Sets the hidden status of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). You can use hidden fields in formulas, but not in\\ncharts. You cannot hide fields containing formulas.\\n@param isHidden The hidden status to set.\\n@return This builder, for chaining.*/setIsHidden(isHidden:boolean):DataStudioApp.Field;\\n/**Sets the reaggregation-permitted status for a [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). Attempting to set an aggregation\\ntype on a field that can't be reaggregated results in an error.\\n@param isReaggregatable The reaggregation-permitted status to set.\\n@return This builder, for chaining.*/setIsReaggregatable(isReaggregatable:boolean):DataStudioApp.Field;\\n/**Sets the name of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html). Names are shown to the user to distinguish fields.\\n@param name The name to set.\\n@return This builder, for chaining.*/setName(name:string):DataStudioApp.Field;\\n/**Sets the [`FieldType`](https://developers.google.com/apps-script/reference/data-studio/field-type.html) of this [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html).\\n@param type The type to set.\\n@return This builder, for chaining.*/setType(type:DataStudioApp.FieldType):DataStudioApp.Field;}interface DebugError{printJson():string;\\n/**Sets the text of the debug error, which is only shown to admins.\\n@param text The error text.\\n@return This object, for chaining.*/setText(text:string):DataStudioApp.DebugError;\\n/**Triggers this exception to be thrown.*/throwException():void;}interface Config{\\n/**Validates this object and returns it in the format needed by Data Studio.\\n@return The validated [`Config`](https://developers.google.com/apps-script/reference/data-studio/config.html) object.*/build():Object;\\n/**Returns a new checkbox configuration entry.\\n@return A new checkbox configuration entry.*/newCheckbox():DataStudioApp.Checkbox;\\n/**Returns a new info configuration entry.\\n@return A new info configuration entry.*/newInfo():DataStudioApp.Info;\\n/**Returns a new options builder.\\n@return A new options builder.*/newOptionBuilder():DataStudioApp.OptionBuilder;\\n/**Returns a new select multiple configuration entry.\\n@return A new select multiple configuration entry.*/newSelectMultiple():DataStudioApp.SelectMultiple;\\n/**Returns a new select single configuration entry.\\n@return A new select single configuration entry.*/newSelectSingle():DataStudioApp.SelectSingle;\\n/**Returns a new text area configuration entry.\\n@return A new text area configuration entry.*/newTextArea():DataStudioApp.TextArea;\\n/**Returns a new text input configuration entry.\\n@return A new text input configuration entry.*/newTextInput():DataStudioApp.TextInput;printJson():string;\\n/**If `true`, a date range is provided for getData() requests.\\n@param dateRangeRequired Whether or not a date range should be provided to `getData()`\\n    requests.\\n@return This builder, for chaining.*/setDateRangeRequired(dateRangeRequired:boolean):DataStudioApp.Config;\\n/**If `true`, `getConfig()` is called again with the current user configuration.\\n@param isSteppedConfig The stepped config status to set.\\n@return This builder, for chaining.*/setIsSteppedConfig(isSteppedConfig:boolean):DataStudioApp.Config;}interface CommunityConnector{\\n/**The [`AggregationType`](https://developers.google.com/apps-script/reference/data-studio/aggregation-type.html) enumeration.*/AggregationType:DataStudioApp._AggregationType;\\n/**The [`AuthType`](https://developers.google.com/apps-script/reference/data-studio/auth-type.html) enumeration.*/AuthType:DataStudioApp._AuthType;\\n/**The [`BigQueryParameterType`](https://developers.google.com/apps-script/reference/data-studio/big-query-parameter-type.html) enumeration.*/BigQueryParameterType:DataStudioApp._BigQueryParameterType;\\n/**The [`FieldType`](https://developers.google.com/apps-script/reference/data-studio/field-type.html) enumeration.*/FieldType:DataStudioApp._FieldType;\\n/**Returns a [`Config`](https://developers.google.com/apps-script/reference/data-studio/config.html) object. Use this object to add configuration entries.\\n@return A [`Config`](https://developers.google.com/apps-script/reference/data-studio/config.html) object.*/getConfig():DataStudioApp.Config;\\n/**Returns a [`Fields`](https://developers.google.com/apps-script/reference/data-studio/fields.html) object. Use this object to add metric and dimension [`Field`](https://developers.google.com/apps-script/reference/data-studio/field.html)s.\\n@return A [`Fields`](https://developers.google.com/apps-script/reference/data-studio/fields.html) object.*/getFields():DataStudioApp.Fields;\\n/**Returns a new [`GetAuthTypeResponse`](https://developers.google.com/apps-script/reference/data-studio/get-auth-type-response.html) object. Use this object to create a response for the\\n`getAuthType()` function you implement in your script project.\\n@return A new [`GetAuthTypeResponse`](https://developers.google.com/apps-script/reference/data-studio/get-auth-type-response.html) object.*/newAuthTypeResponse():DataStudioApp.GetAuthTypeResponse;\\n/**Returns a new [`BigQueryConfig`](https://developers.google.com/apps-script/reference/data-studio/big-query-config.html) object. Use this object to create a response for the\\n`getData()` function you implement in your script project.\\n@return A new [`BigQueryConfig`](https://developers.google.com/apps-script/reference/data-studio/big-query-config.html) object.*/newBigQueryConfig():DataStudioApp.BigQueryConfig;\\n/**Returns a new [`DebugError`](https://developers.google.com/apps-script/reference/data-studio/debug-error.html) object. Use this object to create debug errors.\\n@return A new [`DebugError`](https://developers.google.com/apps-script/reference/data-studio/debug-error.html) object.*/newDebugError():DataStudioApp.DebugError;\\n/**Returns a new [`GetDataResponse`](https://developers.google.com/apps-script/reference/data-studio/get-data-response.html) object. Use this object to create a response for the\\n`getData()` function you implement in your script project.\\n@return A new [`GetDataResponse`](https://developers.google.com/apps-script/reference/data-studio/get-data-response.html) object.*/newGetDataResponse():DataStudioApp.GetDataResponse;\\n/**Returns a new [`GetSchemaResponse`](https://developers.google.com/apps-script/reference/data-studio/get-schema-response.html) object. Use this object to create a response for the\\n`getSchema()` function you implement in your script project.\\n@return A new [`GetSchemaResponse`](https://developers.google.com/apps-script/reference/data-studio/get-schema-response.html) object.*/newGetSchemaResponse():DataStudioApp.GetSchemaResponse;\\n/**Returns a new [`SetCredentialsResponse`](https://developers.google.com/apps-script/reference/data-studio/set-credentials-response.html) object. Use this object to create a response for\\nthe `setCredentials()` function you implement in your script project.\\n@return A new [`SetCredentialsResponse`](https://developers.google.com/apps-script/reference/data-studio/set-credentials-response.html) object.*/newSetCredentialsResponse():DataStudioApp.SetCredentialsResponse;\\n/**Returns a new [`UserError`](https://developers.google.com/apps-script/reference/data-studio/user-error.html) object. Use this object to create user errors.\\n@return A new [`UserError`](https://developers.google.com/apps-script/reference/data-studio/user-error.html) object.*/newUserError():DataStudioApp.UserError;}interface Checkbox{\\n/**Enables overriding for this config entry. If set to `true`, data source creators have the\\noption to enable this for report editors.\\n@param allowOverride Whether or not this config entry can be overridden in reports.\\n@return This builder, for chaining.*/setAllowOverride(allowOverride:boolean):DataStudioApp.Checkbox;\\n/**Sets the help text for this configuration entry.\\n@param helpText The helpText to set.\\n@return This builder, for chaining.*/setHelpText(helpText:string):DataStudioApp.Checkbox;\\n/**Sets the unique ID for this configuration entry.\\n@param id The ID to set.\\n@return This builder, for chaining.*/setId(id:string):DataStudioApp.Checkbox;\\n/**Sets the dynamic status for this configuration entry.\\n\\nIf a dynamic configuration entry is modified, subsequent configuration entries are cleared.\\n@param isDynamic The dynamic status to set.\\n@return This builder, for chaining.*/setIsDynamic(isDynamic:boolean):DataStudioApp.Checkbox;\\n/**Sets the display name for this configuration entry.\\n@param name The name to set.\\n@return This builder, for chaining.*/setName(name:string):DataStudioApp.Checkbox;}interface BigQueryParameterType{}interface _BigQueryParameterType{\\n/**Boolean.*/BOOL:BigQueryParameterType;\\n/**64-bit floating point number.*/FLOAT64:BigQueryParameterType;\\n/**64-bit integer.*/INT64:BigQueryParameterType;\\n/**String.*/STRING:BigQueryParameterType;}interface BigQueryConfig{\\n/**Adds a query parameter to this [`BigQueryConfig`](https://developers.google.com/apps-script/reference/data-studio/big-query-config.html).\\n@param name The parameter name.\\n@param type The parameter type.\\n@param value The parameter value.\\n@return This object, for chaining.*/addQueryParameter(name:string,type:DataStudioApp.BigQueryParameterType,value:string):DataStudioApp.BigQueryConfig;\\n/**Validates this object and returns it in the format needed by Data Studio.\\n@return The validated [`Config`](https://developers.google.com/apps-script/reference/data-studio/config.html) object.*/build():Object;printJson():string;\\n/**Sets the access token of this [`BigQueryConfig`](https://developers.google.com/apps-script/reference/data-studio/big-query-config.html).\\n@param accessToken The access token to set.\\n@return This object, for chaining.*/setAccessToken(accessToken:string):DataStudioApp.BigQueryConfig;\\n/**Sets the billing project ID of this [`BigQueryConfig`](https://developers.google.com/apps-script/reference/data-studio/big-query-config.html).\\n@param billingProjectId The billing project ID to set.\\n@return This object, for chaining.*/setBillingProjectId(billingProjectId:string):DataStudioApp.BigQueryConfig;\\n/**Sets the SQL query of this [`BigQueryConfig`](https://developers.google.com/apps-script/reference/data-studio/big-query-config.html).\\n@param query The query to set.\\n@return This object, for chaining.*/setQuery(query:string):DataStudioApp.BigQueryConfig;\\n/**Determines if the query is interpreted as standard or legacy SQL.\\n@param useStandardSql If `true`, the query is interpreted as standard SQL. If `false`, the query is interpreted as legacy SQL.\\n@return This object, for chaining.*/setUseStandardSql(useStandardSql:boolean):DataStudioApp.BigQueryConfig;}interface AuthType{}interface _AuthType{\\n/**API Key or Token needed.*/KEY:AuthType;\\n/**No authorization needed.*/NONE:AuthType;\\n/**OAuth2 authorization needed.*/OAUTH2:AuthType;\\n/**Path and key needed.*/PATH_KEY:AuthType;\\n/**Username, path, and password needed.*/PATH_USER_PASS:AuthType;\\n/**Username and password credentials needed.*/USER_PASS:AuthType;\\n/**Username and token needed.*/USER_TOKEN:AuthType;}interface AggregationType{}interface _AggregationType{\\n/**Auto. Use Auto for calculated fields which reference an aggregated field.*/AUTO:AggregationType;\\n/**Average.*/AVG:AggregationType;\\n/**Count.*/COUNT:AggregationType;\\n/**Count Distinct.*/COUNT_DISTINCT:AggregationType;\\n/**Max.*/MAX:AggregationType;\\n/**Min.*/MIN:AggregationType;\\n/**DEPRECATED: Use `AUTO` instead. No aggregation.\\n@deprecated*/NO_AGGREGATION:AggregationType;\\n/**Sum.*/SUM:AggregationType;}}const DataStudioApp:DataStudioApp;\"],[\"conference-data-service.d.ts\",\"interface ConferenceDataService{\\n/**The [`ConferenceErrorType`](https://developers.google.com/apps-script/reference/conference-data/conference-error-type.html) enumeration.*/ConferenceErrorType:ConferenceDataService._ConferenceErrorType;\\n/**The [`EntryPointFeature`](https://developers.google.com/apps-script/reference/conference-data/entry-point-feature.html) enumeration.*/EntryPointFeature:ConferenceDataService._EntryPointFeature;\\n/**The [`EntryPointType`](https://developers.google.com/apps-script/reference/conference-data/entry-point-type.html) enumeration.*/EntryPointType:ConferenceDataService._EntryPointType;\\n/**Returns a new, empty [`ConferenceDataBuilder`](https://developers.google.com/apps-script/reference/conference-data/conference-data-builder.html).\\n@return a new, empty [`ConferenceDataBuilder`](https://developers.google.com/apps-script/reference/conference-data/conference-data-builder.html)*/newConferenceDataBuilder():ConferenceDataService.ConferenceDataBuilder;\\n/**Returns a new, empty [`ConferenceError`](https://developers.google.com/apps-script/reference/conference-data/conference-error.html).\\n@return a new, empty [`ConferenceError`](https://developers.google.com/apps-script/reference/conference-data/conference-error.html)*/newConferenceError():ConferenceDataService.ConferenceError;\\n/**Returns a new, empty [`ConferenceParameter`](https://developers.google.com/apps-script/reference/conference-data/conference-parameter.html).\\n@return a new, empty [`ConferenceParameter`](https://developers.google.com/apps-script/reference/conference-data/conference-parameter.html)*/newConferenceParameter():ConferenceDataService.ConferenceParameter;\\n/**Returns a new, empty [`EntryPoint`](https://developers.google.com/apps-script/reference/conference-data/entry-point.html).\\n@return a new, empty [`EntryPoint`](https://developers.google.com/apps-script/reference/conference-data/entry-point.html)*/newEntryPoint():ConferenceDataService.EntryPoint;}module ConferenceDataService{interface EntryPointType{}interface _EntryPointType{\\n/**A link to more information about entry points into a conference. A conference can have zero or\\none `MORE` entry points. A conference with only a `MORE` entry point is not valid.*/MORE:EntryPointType;\\n/**A phone entry point for a conference. A conference can have zero or more `PHONE` entry\\npoints.*/PHONE:EntryPointType;\\n/**A SIP entry point for a conference. A conference can have zero or one `SIP` entry points.*/SIP:EntryPointType;\\n/**A video entry point for a conference. A conference can have zero or one `VIDEO` entry\\npoints.*/VIDEO:EntryPointType;}interface EntryPointFeature{}interface _EntryPointFeature{\\n/**Applies to PHONE entry point only. A call to a toll number is charged to the calling party. A\\nnumber can't be toll and toll-free at the same time.*/TOLL:EntryPointFeature;\\n/**Applies to PHONE entry point only. For the calling party, a call to a toll-free number is free\\nof charge. A number can't be toll and toll-free at the same time.*/TOLL_FREE:EntryPointFeature;\\n/**Do not use. Here only as a default value for compatibility reasons.*/UNKNOWN_FEATURE:EntryPointFeature;}interface EntryPoint{\\n/**Adds the feature of the entry point, such as being toll or toll-free.\\n@param feature The feature to set.\\n@return this object, for chaining*/addFeature(feature:ConferenceDataService.EntryPointFeature):ConferenceDataService.EntryPoint;\\n/**An access code for accessing the conference. Maximum length 128 characters. Optional.\\n@param accessCode The access code to set.\\n@return this object, for chaining*/setAccessCode(accessCode:string):ConferenceDataService.EntryPoint;\\n/**Sets the type of this entry point. Required.\\n@param entryPointType The entry point type to set.\\n@return this object, for chaining*/setEntryPointType(entryPointType:ConferenceDataService.EntryPointType):ConferenceDataService.EntryPoint;\\n/**A meeting code for accessing the conference. Maximum length 128 characters. Optional.\\n@param meetingCode The meeting code to set.\\n@return this object, for chaining*/setMeetingCode(meetingCode:string):ConferenceDataService.EntryPoint;\\n/**A passcode for accessing the conference. Maximum length 128 characters. Optional.\\n@param passcode The passcode to set.\\n@return this object, for chaining*/setPasscode(passcode:string):ConferenceDataService.EntryPoint;\\n/**A password code for accessing the conference. Maximum length 128 characters. Optional.\\n@param password The password to set.\\n@return this object, for chaining*/setPassword(password:string):ConferenceDataService.EntryPoint;\\n/**A PIN code for accessing the conference. Maximum length 128 characters. Optional.\\n@param pin The PIN code to set.\\n@return this object, for chaining*/setPin(pin:string):ConferenceDataService.EntryPoint;\\n/**The CLDR/ISO 3166 region code for the country associated with this entry point. Applicable only\\nto phone entry point types. Optional.\\n@param regionCode The regionCode to set.\\n@return this object, for chaining*/setRegionCode(regionCode:string):ConferenceDataService.EntryPoint;\\n/**Sets the URI for joining the conference through this entry point. For [`PHONE`](https://developers.google.com/apps-script/reference/conference-data/entry-point-type.html#PHONE) entry points, the prefix `tel:` is required. For [`SIP`](https://developers.google.com/apps-script/reference/conference-data/entry-point-type.html#SIP) entry points, the prefix `sip:` is required. For [`VIDEO`](https://developers.google.com/apps-script/reference/conference-data/entry-point-type.html#VIDEO) and [`MORE`](https://developers.google.com/apps-script/reference/conference-data/entry-point-type.html#MORE) entry points, the prefixes\\n`http:` or `https:` are required. Maximum length 1300 characters. Required.\\n@param uri The URI to set.\\n@return this object, for chaining*/setUri(uri:string):ConferenceDataService.EntryPoint;}interface ConferenceParameter{\\n/**Sets the key of this [`ConferenceParameter`](https://developers.google.com/apps-script/reference/conference-data/conference-parameter.html). The maximum length for this field is 50\\ncharacters. Required.\\n@param key The key to set.\\n@return this object, for chaining*/setKey(key:string):ConferenceDataService.ConferenceParameter;\\n/**Sets the value of this [`ConferenceParameter`](https://developers.google.com/apps-script/reference/conference-data/conference-parameter.html). The maximum length for this field is 1024\\ncharacters. Required.\\n@param value The value to set.\\n@return this object, for chaining*/setValue(value:string):ConferenceDataService.ConferenceParameter;}interface ConferenceErrorType{}interface _ConferenceErrorType{\\n/**An authentication error during conference data generation.*/AUTHENTICATION:ConferenceErrorType;\\n/**The user is not allowed to use the selected conference solution (but might be allowed to use\\nother solutions offered by the add-on).*/CONFERENCE_SOLUTION_FORBIDDEN:ConferenceErrorType;\\n/**A permanent error during conference data generation.*/PERMANENT:ConferenceErrorType;\\n/**The user isn't allowed to perform an action in the third-party conferencing system.*/PERMISSION_DENIED:ConferenceErrorType;\\n/**A temporary error during conference data generation.*/TEMPORARY:ConferenceErrorType;\\n/**An unknown error during conference data generation.*/UNKNOWN:ConferenceErrorType;}interface ConferenceError{\\n/**If the error type is [`AUTHENTICATION`](https://developers.google.com/apps-script/reference/conference-data/conference-error-type.html#AUTHENTICATION), the add-on must\\nprovide a URL calling back into the add-on to allow users to log in. The maximum length for\\nthis field is 1800 characters.\\n@param authenticationUrl The authentication URL to set.\\n@return this object, for chaining*/setAuthenticationUrl(authenticationUrl:string):ConferenceDataService.ConferenceError;\\n/**Sets the error type of this [`ConferenceError`](https://developers.google.com/apps-script/reference/conference-data/conference-error.html).\\n@param conferenceErrorType The type of error to set.\\n@return this object, for chaining*/setConferenceErrorType(conferenceErrorType:ConferenceDataService.ConferenceErrorType):ConferenceDataService.ConferenceError;}interface ConferenceDataBuilder{\\n/**Adds a [`ConferenceParameter`](https://developers.google.com/apps-script/reference/conference-data/conference-parameter.html) to this [`ConferenceData`](https://developers.google.com/apps-script/reference/conference-data/conference-data.html). The maximum number of\\nparameters per [`ConferenceData`](https://developers.google.com/apps-script/reference/conference-data/conference-data.html) is 300.\\n@param conferenceParameter The parameter to add.\\n@return This builder, for chaining.*/addConferenceParameter(conferenceParameter:ConferenceDataService.ConferenceParameter):ConferenceDataService.ConferenceDataBuilder;\\n/**Adds an [`EntryPoint`](https://developers.google.com/apps-script/reference/conference-data/entry-point.html) to this [`ConferenceData`](https://developers.google.com/apps-script/reference/conference-data/conference-data.html). The maximum number of entry points\\nper [`ConferenceData`](https://developers.google.com/apps-script/reference/conference-data/conference-data.html) is 300.\\n@param entryPoint The entry point to add.\\n@return This builder, for chaining.*/addEntryPoint(entryPoint:ConferenceDataService.EntryPoint):ConferenceDataService.ConferenceDataBuilder;\\n/**Builds and validates the [`ConferenceData`](https://developers.google.com/apps-script/reference/conference-data/conference-data.html).\\n@return the validated conference data*/build():ConferenceDataService.ConferenceData;\\n/**Sets the conference ID of this [`ConferenceData`](https://developers.google.com/apps-script/reference/conference-data/conference-data.html). The maximum length for this field is 512\\ncharacters.\\n@param conferenceId The ID to set.\\n@return This builder, for chaining.*/setConferenceId(conferenceId:string):ConferenceDataService.ConferenceDataBuilder;\\n/**Sets the conference solution ID defined in the addon's manifest. The value must be specified\\nand populates conference's name and iconUrl values.\\n\\nNote that the field is required for GSuite add-ons whereas it's ignored for Conferencing\\nadd-ons\\n@param conferenceSolutionId The ID matching the manifest.\\n@return This builder, for chaining.*/setConferenceSolutionId(conferenceSolutionId:string):ConferenceDataService.ConferenceDataBuilder;\\n/**Sets the [`ConferenceError`](https://developers.google.com/apps-script/reference/conference-data/conference-error.html) of this [`ConferenceData`](https://developers.google.com/apps-script/reference/conference-data/conference-data.html), indicating that the conference\\nwas not successfully created.\\n@param conferenceError The error to set.\\n@return This builder, for chaining.*/setError(conferenceError:ConferenceDataService.ConferenceError):ConferenceDataService.ConferenceDataBuilder;\\n/**Sets the additional notes of this [`ConferenceData`](https://developers.google.com/apps-script/reference/conference-data/conference-data.html), such as instructions from the\\nadministrator or legal notices. Can contain HTML. The maximum length for this field is 2048\\ncharacters.\\n@param notes The additional notes to set.\\n@return This builder, for chaining.*/setNotes(notes:string):ConferenceDataService.ConferenceDataBuilder;}interface ConferenceData{printJson():string;}}const ConferenceDataService:ConferenceDataService;\"],[\"contacts-app.d.ts\",\"interface ContactsApp{ExtendedField:ContactsApp._ExtendedField;Field:ContactsApp._Field;Gender:ContactsApp._Gender;Month:_Month;Priority:ContactsApp._Priority;Sensitivity:ContactsApp._Sensitivity;\\n/**Creates a new contact.\\n\\n```\\n// The code below creates a new contact with the name \\\"John Doe\\\" and the email address\\n// \\\"john.doe@example.com\\\".\\nvar contact \\u003d ContactsApp.createContact('John', 'Doe', 'john.doe@example.com');\\n```\\n@deprecated\\n@param givenName the first name of the contact\\n@param familyName the last name of the contact\\n@param email the email address of the contact\\n@return the newly created Contact object*/createContact(givenName:string,familyName:string,email:string):ContactsApp.Contact;\\n/**Creates a contact group with the given name\\n\\n```\\n// The code below creates a new contact group named \\\"Work Friends\\\"\\nvar group \\u003d ContactsApp.createContactGroup(\\\"Work Friends\\\");\\n```\\n@deprecated\\n@param name the name of the new contact group\\n@return the newly created contact group*/createContactGroup(name:string):ContactsApp.ContactGroup;\\n/**Deletes the contact.\\n\\n```\\n// The code below retrieves a contact with the email address \\\"john.doe@example.com\\\"\\n// and then deletes that contact.\\nvar contact \\u003d ContactsApp.getContact('john.doe@example.com');\\nContactsApp.deleteContact(contact);\\n```\\n@deprecated\\n@param contact the contact to be deleted*/deleteContact(contact:ContactsApp.Contact):void;\\n/**Deletes the contact group\\n\\n```\\n// The code below creates deletes the contact group named \\\"Work Friends\\\"\\nvar group \\u003d ContactsApp.getContactGroup(\\\"Work Friends\\\");\\nContactsApp.deleteContactGroup(group);\\n```\\n@deprecated\\n@param group the contact group to delete*/deleteContactGroup(group:ContactsApp.ContactGroup):void;\\n/**Finds a Contact with the given email address.\\n@deprecated\\n@param email the email address of the contact to be found\\n@return the Contact containing that email address*/findByEmailAddress(email:string):ContactsApp.Contact;\\n/**Finds a contact group of the given name.\\n@deprecated\\n@param name the name of the contact group to find\\n@return the contact group matching the given name*/findContactGroup(name:string):ContactsApp.ContactGroup;\\n/**Get all the contacts belonging to this user.\\n@deprecated\\n@return all the contacts for this user*/getAllContacts():ContactsApp.Contact[];\\n/**Gets a contact by the email address.\\n\\nIf multiple contacts share the same email address, the method favors those contacts who have\\nmarked the email address as primary; if none of the contacts had the email address marked as\\nprimary or multiple contacts had the email address marked as primary, then it returns the first\\nresult in the sorted contacts order.\\n\\n```\\n// The code below retrieves a contact with the email address \\\"john.doe@example.com\\\".\\nvar contact \\u003d ContactsApp.getContact('john.doe@example.com');\\n```\\n@deprecated\\n@param emailAddress the email address of the contact\\n@return the contact containing that email address*/getContact(emailAddress:string):ContactsApp.Contact;\\n/**Gets the contact with this id.\\n\\n```\\n// The code below retrieves the contact with the id\\n// \\\"http://www.google.com/m8/feeds/contacts/john.doe%40example.com/base/7c86afde08d34ca5\\\"\\nvar id \\u003d 'http://www.google.com/m8/feeds/contacts/john.doe%40example.com/base/7c86afde08d34c';\\nvar contact \\u003d ContactApp.getContactById(id);\\n```\\n@deprecated\\n@param id the id of the contact to retrieve\\n@return the matching contact or null*/getContactById(id:string):ContactsApp.Contact;\\n/**Gets a contact group with the given name, or returns null if no such contact group is found.\\n\\n```\\n// The code below returns the contact group with the name \\\"Work Friends\\\"\\nvar group  \\u003d ContactsApp.getContactGroup('Work Friends');\\n```\\n@deprecated\\n@param name the name of the contact group to match\\n@return the matching contact group or null if no matching contact group is found*/getContactGroup(name:string):ContactsApp.ContactGroup;\\n/**Gets a contact group with the given id, or returns null if no such contact group is found.\\n\\n```\\n// The code below returns the contact group with the id\\n// \\\"http://www.google.com/m8/feeds/groups/john.doe%40example.com/base/54eefbb093fdecb\\\"\\nvar id \\u003d \\\"http://www.google.com/m8/feeds/groups/john.doe%40example.com/base/54eefbb093fdecb\\\";\\nvar group  \\u003d ContactsApp.getContactGroupById(id);\\n```\\n@deprecated\\n@param id the id of the contact group to match\\n@return the matching contact group or null if no matching contact group is found*/getContactGroupById(id:string):ContactsApp.ContactGroup;\\n/**Gets the complete list of the user's contact groups.\\n\\nA user can have a list of Contacts, and potentially a list of Contact Groups also. Each\\nContact Group can contain Contacts. This method returns a list of all the Contact Groups.\\n\\n```\\n// The retrieves all the contract groups for the user and then logs the group name of each\\n// contact group.\\nvar groups  \\u003d ContactsApp.getContactGroups();\\nfor (var i \\u003d 0; i \\u003c groups.length; i++) {\\n  Logger.log(groups[i].getName());\\n}\\n```\\n@deprecated\\n@return an array of the user's contact groups*/getContactGroups():ContactsApp.ContactGroup[];\\n/**Gets all of the user's contacts.\\n\\n```\\n// The code below will retrieve all the user's contacts\\nvar contacts \\u003d ContactsApp.getContacts();\\n```\\n@deprecated\\n@return an array of all the user's contacts*/getContacts():ContactsApp.Contact[];\\n/**Get contacts matching an address.\\n\\n```\\n// The code below returns an array of contacts where the contact's address contains\\n// \\\"San Francisco'.\\nvar contacts \\u003d ContactsApp.getContactsByAddress('San Francisco');\\n```\\n@deprecated\\n@param query the string to search for in contact's addresses\\n@return an array of matching contacts*/getContactsByAddress(query:string):ContactsApp.Contact[];\\n/**Get contacts matching an address, limited to a specific field.\\n\\n```\\n// The code below returns an array of contacts where the contact's address contains\\n// \\\"San Francisco\\\" in the Home address field.\\nvar contacts \\u003d ContactsApp.getContactsByAddress('San Francisco',\\n                                                ContactsApp.Field.HOME_ADDRESS);\\n```\\n@deprecated\\n@param query the string to search for in contact's addresses\\n@param label the field to search within\\n@return an array of matching contacts*/getContactsByAddress(query:string,label:ContactsApp.Field):ContactsApp.Contact[];\\n/**Get contacts matching an address, limited to the specified custom address label.\\n\\n```\\n// The code below returns an array of contacts where the contact's address contains\\n// \\\"San Francisco\\\" in a custom address label (created by the user) called\\n// \\\"vacation\\\".\\nvar contacts \\u003d ContactsApp.getContactsByAddress('San Francisco', 'vacation');\\n```\\n@deprecated\\n@param query the string to search for in contact's addresses with the specified custom address\\n    label\\n@param label the custom address label to search within\\n@return an array of matching contacts*/getContactsByAddress(query:string,label:string):ContactsApp.Contact[];\\n/**Get contacts matching the company field.\\n\\n```\\n// The code below returns an array of contacts where the contact's company field\\n// contains \\\"Google\\\".\\nvar contacts \\u003d ContactsApp.getContactsByCompany('Google');\\n```\\n@deprecated\\n@param query the string to search for in contact's company field\\n@return an array of matching contacts*/getContactsByCompany(query:string):ContactsApp.Contact[];\\n/**Get contacts matching a given value in a custom field.\\n\\nThe custom field can be specified by a String or as one of the ContactsApp.ExtendedField\\nvalues.\\n\\n```\\n// The code below returns an array of contacts where the contact's custom field\\n// named \\\"Favorite Sport\\\" contains \\\"tennis\\\".\\nvar contacts \\u003d ContactsApp.getContactsByCustomField('tennis', 'Favorite Sport');\\n```\\n@deprecated\\n@param query the string to search for in contact's custom field\\n@param label the custom field to search within\\n@return an array of matching contacts*/getContactsByCustomField(query:Object,label:ContactsApp.ExtendedField):ContactsApp.Contact[];\\n/**Get contacts matching a given month and day for a particular standard field.\\n\\n```\\n// The code below returns an array of contacts where the contact's \\\"Birthday\\\" field\\n// contains April for the month and 19 for the day.\\nvar contacts \\u003d ContactsApp.getContactsByDate(ContactsApp.Month.APRIL, 19,\\n                                              ContactsApp.Field.BIRTHDAY);\\n```\\n@deprecated\\n@param month the month to match, as one of the values from ContactsApp.Month\\n@param day the day to match\\n@param label the field to search within, from ContactsApp.Field\\n@return an array of matching contacts*/getContactsByDate(month:Month,day:Integer,label:ContactsApp.Field):ContactsApp.Contact[];\\n/**Get contacts matching a given month, day, and year for a particular standard field.\\n\\n```\\n// The code below returns an array of contacts where the contact's \\\"Birthday\\\" field\\n// contains April for the month, 19 for the day, and 1950 for the year.\\nvar contacts \\u003d ContactsApp.getContactsByDate(ContactsApp.Month.APRIL, 19, 1950,\\n                                             ContactsApp.Field.BIRTHDAY);\\n```\\n@deprecated\\n@param month the month to match, as one of the values from ContactsApp.Month\\n@param day the day to match\\n@param year the year to match, can be null\\n@param label the field to search within, from ContactsApp.Field\\n@return an array of matching contacts*/getContactsByDate(month:Month,day:Integer,year:Integer,label:ContactsApp.Field):ContactsApp.Contact[];\\n/**Get contacts matching a given month, day, and year for a particular custom field.\\n\\n```\\n// The code below returns an array of contacts where the contact's custom \\\"Start Date\\\" field\\n// contains April for the month, 19 for the day, and 2011 for the year.\\nvar contacts \\u003d ContactsApp.getContactsByDate(ContactsApp.Month.APRIL, 19, 2011, 'Start Date');\\n```\\n@deprecated\\n@param month the month to match, as one of the values from ContactsApp.Month\\n@param day the day to match\\n@param year the year to match, can be null\\n@param label the custom field to search within\\n@return an array of matching contacts*/getContactsByDate(month:Month,day:Integer,year:Integer,label:string):ContactsApp.Contact[];\\n/**Get contacts matching a given month and day for a particular custom field.\\n\\n```\\n// The code below returns an array of contacts where the contact's custom \\\"Start Date\\\" field\\n// contains April for the month and 19 for the day.\\nvar contacts \\u003d ContactsApp.getContactsByDate(ContactsApp.Month.APRIL, 19, 'Start Date');\\n```\\n@deprecated\\n@param month the month to match, as one of the values from ContactsApp.Month\\n@param day the day to match\\n@param label the custom field to search within\\n@return an array of matching contacts*/getContactsByDate(month:Month,day:Integer,label:string):ContactsApp.Contact[];\\n/**Get contacts matching an email address.\\n\\n```\\n// The code below returns an array of contacts where the contact's email address contains\\n// \\\"john.doe@example.com'.\\nvar contacts \\u003d ContactsApp.getContactsByEmailAddress('john.doe@example.com');\\n```\\n@deprecated\\n@param query the string to search for in contact email addresses\\n@return an array of matching contacts*/getContactsByEmailAddress(query:string):ContactsApp.Contact[];\\n/**Get contacts matching an email address, limited to a specific field.\\n\\n```\\n// The code below returns an array of contacts where the contact's email address contains\\n// \\\"john.doe@example.com\\\" in the Home email field.\\nvar contacts \\u003d ContactsApp.getContactsByEmailAddress('john.doe@example.com',\\n                                                     ContactsApp.Field.HOME_EMAIL);\\n```\\n@deprecated\\n@param query the string to search for in contact email addresses\\n@param label the field to search within\\n@return an array of matching contacts*/getContactsByEmailAddress(query:string,label:ContactsApp.Field):ContactsApp.Contact[];\\n/**Get contacts matching an email address, limited to the specified custom email address label.\\n\\n```\\n// The code below returns an array of contacts where the contact's email address contains\\n// \\\"john.doe@example.com\\\" in a custom email address label (created by the user) called\\n// \\\"alternate\\\".\\nvar contacts \\u003d ContactsApp.getContactsByEmailAddress('john.doe@example.com', 'alternate');\\n```\\n@deprecated\\n@param query the string to search for in contact email addresses with the specified custom\\n    email address label\\n@param label the custom email address label to search within\\n@return an array of matching contacts*/getContactsByEmailAddress(query:string,label:string):ContactsApp.Contact[];\\n/**Get the contacts in a given ContactGroup.\\n\\n```\\n// The code below returns an array of contacts in the ContactGroup with the name\\n// \\\"Work Friends\\\".\\nvar group  \\u003d ContactsApp.getContactGroup('Work Friends');\\nvar contacts \\u003d ContactsApp.getContactsByGroup(group);\\n```\\n@deprecated\\n@param group the group of contacts\\n@return an array of of contacts in the given group*/getContactsByGroup(group:ContactsApp.ContactGroup):ContactsApp.Contact[];\\n/**Get contacts matching an instant messaging address.\\n\\n```\\n// The code below returns an array of contacts where the contact's instant messaging address\\n// contains \\\"ChatWithJohnDoe\\\" in any instant messaging field.\\nvar contacts \\u003d ContactsApp.getContactsByIM('ChatWithJohnDoe');\\n```\\n@deprecated\\n@param query the string to search for in contact's instant messaging addresses\\n@return an array of matching contacts*/getContactsByIM(query:string):ContactsApp.Contact[];\\n/**Get contacts matching an instant messaging address, limited to a specific field.\\n\\n```\\n// The code below returns an array of contacts where the contact's instant messaging address\\n// contains \\\"ChatWithJohnDoe\\\" in the AIM instant messaging field.\\nvar contacts \\u003d ContactsApp.getContactsByIM('ChatWithJohnDoe',\\n                                            ContactsApp.Field.AIM);\\n```\\n@deprecated\\n@param query the string to search for in contact's instant messaging addresses\\n@param label the field to search within\\n@return an array of matching contacts*/getContactsByIM(query:string,label:ContactsApp.Field):ContactsApp.Contact[];\\n/**Get contacts matching an instant messaging address, limited to the specified custom instant\\nmessaging label.\\n\\n```\\n// The code below returns an array of contacts where the contact's instant messaging address\\n// contains \\\"ChatWithJohnDoe\\\" in a custom instant messaging label (created by the user) called\\n// \\\"eBuddy\\\".\\nvar contacts \\u003d ContactsApp.getContactsByIM('ChatWithJohnDoe', 'eBuddy');\\n```\\n@deprecated\\n@param query the string to search for in contact's instant messaging addresses with the\\n    specified custom instant messaging label\\n@param label the custom instant messaging label to search within\\n@return an array of matching contacts*/getContactsByIM(query:string,label:string):ContactsApp.Contact[];\\n/**Get contacts matching the job title field.\\n\\n```\\n// The code below returns an array of contacts where the contact's job title field\\n// contains \\\"Product Manager\\\".\\nvar contacts \\u003d ContactsApp.getContactsByJobTitle('Product Manager');\\n```\\n@deprecated\\n@param query the string to search for in contact's job title field\\n@return an array of matching contacts*/getContactsByJobTitle(query:string):ContactsApp.Contact[];\\n/**Get contacts matching a name.\\n\\n```\\n// The code below returns an array of contacts where the contact name contains \\\"John\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John');\\n```\\n@deprecated\\n@param query the string to search for in contact names\\n@return an array of matching contacts*/getContactsByName(query:string):ContactsApp.Contact[];\\n/**Get contacts matching a name, limited to a specific field.\\n\\n```\\n// The code below returns an array of contacts where the contact name contains \\\"John\\\"\\n// in the Given Name field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John', ContactsApp.Field.GIVEN_NAME);\\n```\\n@deprecated\\n@param query the string to search for in contact names\\n@param label the field to search within\\n@return an array of matching contacts*/getContactsByName(query:string,label:ContactsApp.Field):ContactsApp.Contact[];\\n/**Get contacts matching the notes field.\\n\\n```\\n// The code below returns an array of contacts where the contact's notes field\\n// contains \\\"sent birthday card\\\".\\nvar contacts \\u003d ContactsApp.getContactsByNotes('sent birthday card');\\n```\\n@deprecated\\n@param query the string to search for in contact's notes field\\n@return an array of matching contacts*/getContactsByNotes(query:string):ContactsApp.Contact[];\\n/**Get contacts matching a phone number.\\n\\nThis method will expand out lettered phone numbers, so if you search for '212-555-CODE' and\\nyou have '212-555-2633' in your contacts or vice versa, the method will find the appropriate\\ncontact.\\n\\n```\\n// The code below returns an array of contacts where the contact's phone number contains\\n// \\\"212-555-1234' in any phone number field.\\nvar contacts \\u003d ContactsApp.getContactsByPhone('212-555-1234');\\n```\\n@deprecated\\n@param query the string to search for in contact's phone numbers\\n@return an array of matching contacts*/getContactsByPhone(query:string):ContactsApp.Contact[];\\n/**Get contacts matching a phone number, limited to a specific field.\\n\\nThis method will expand out lettered phone numbers, so if you search for '212-555-CODE' and\\nyou have '212-555-2633' in your contacts or vice versa, the method will find the appropriate\\ncontact.\\n\\n```\\n// The code below returns an array of contacts where the contact's phone number contains\\n// \\\"212-555-1234\\\" in the Home phone number field.\\nvar contacts \\u003d ContactsApp.getContactsByPhone('212-555-1234',\\n                                              ContactsApp.Field.HOME_PHONE);\\n```\\n@deprecated\\n@param query the string to search for in contact's phone numbers\\n@param label the field to search within\\n@return an array of matching contacts*/getContactsByPhone(query:string,label:ContactsApp.Field):ContactsApp.Contact[];\\n/**Get contacts matching a phone number, limited to the specified custom phone number label.\\n\\nThis method will expand out lettered phone numbers, so if you search for '212-555-CODE' and\\nyou have '212-555-2633' in your contacts or vice versa, the method will find the appropriate\\ncontact.\\n\\n```\\n// The code below returns an array of contacts where the contact's phone number contains\\n// \\\"212-555-1234\\\" in a custom phone number label (created by the user) called\\n// \\\"alternate\\\".\\nvar contacts \\u003d ContactsApp.getContactsByPhone('212-555-1234', 'alternate');\\n```\\n@deprecated\\n@param query the string to search for in contact's phone numbers with the specified custom\\n    phone number label\\n@param label the custom phone number label to search within\\n@return an array of matching contacts*/getContactsByPhone(query:string,label:string):ContactsApp.Contact[];\\n/**Get contacts matching a URL.\\n\\n```\\n// The code below returns an array of contacts where the contact's URL contains\\n// \\\"www.example.com' in any URL field.\\nvar contacts \\u003d ContactsApp.getContactsByUrl('www.example.com');\\n```\\n@deprecated\\n@param query the string to search for in contact's URLs\\n@return an array of matching contacts*/getContactsByUrl(query:string):ContactsApp.Contact[];\\n/**Get contacts matching a URL, limited to a specific field.\\n\\n```\\n// The code below returns an array of contacts where the contact's URL contains\\n// \\\"www.example.com\\\" in the Work URL field.\\nvar contacts \\u003d ContactsApp.getContactsByUrl('www.example.com',\\n                                            ContactsApp.Field.WORK_WEBSITE);\\n```\\n@deprecated\\n@param query the string to search for in contact's URLs\\n@param label the field to search within\\n@return an array of matching contacts*/getContactsByUrl(query:string,label:ContactsApp.Field):ContactsApp.Contact[];\\n/**Get contacts matching a URL, limited to the specified custom URL label.\\n\\n```\\n// The code below returns an array of contacts where the contact's URL contains\\n// \\\"www.example.com\\\" in a custom URL label (created by the user) called\\n// \\\"alternate work\\\".\\nvar contacts \\u003d ContactsApp.getContactsByUrl('www.example.com', 'alternate work');\\n```\\n@deprecated\\n@param query the string to search for in contact's URLs with the specified custom URL label\\n@param label the custom URL label to search within\\n@return an array of matching contacts*/getContactsByUrl(query:string,label:string):ContactsApp.Contact[];}module ContactsApp{interface UrlField{\\n/**Deletes this URL field.\\n\\n```\\n// Retrieves and deletes the Blog URL field for contact 'John\\n// Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar urlFields \\u003d contacts[0].getUrls(ContactsApp.Field.BLOG);\\nurlFields[0].deleteUrlField();\\n```\\n@deprecated*/deleteUrlField():void;\\n/**Get the address for this field.\\n\\n```\\n// Logs the address for the 'Home Address' field for contact 'John Doe'.\\n// Can be used similarly for other fields that contain addresses.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar homeAddress \\u003d contacts[0].getAddresses(ContactsApp.Field.HOME_ADDRESS);\\nLogger.log(homeAddress[0].getAddress());\\n```\\n@return the address as a string*/getAddress():string;\\n/**Gets the label for this field. This may be a Field, ExtendedField, or a String.\\n\\n```\\n// Logs the label for all the address fields associated with contact\\n// 'John Doe'. This method can be similarly called for any field that has\\n// a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nfor (var i \\u003d 0; i \\u003c addressFields.length; i++) {\\n  Logger.log(addressFields[i].getLabel());\\n}\\n```\\n@return the label for this field*/getLabel():Object;\\n/**Gets whether this is the primary field value.\\n\\n```\\n// Logs whether or not the first address field associated with contact\\n// 'John Doe' is labeled as primary. This method can be similarly called\\n// for any field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nLogger.log(addressFields[0].isPrimary());\\n```\\n@return whether this is primary*/isPrimary():boolean;\\n/**Sets the address of this field.\\n\\n```\\n// Sets the address for the 'Home Address' field for contact 'John Doe'.\\n// Can be used similarly for other fields that contain addresses.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar homeAddress \\u003d contacts[0].getAddresses(ContactsApp.Field.HOME_ADDRESS);\\nhomeAddress[0].setAddress('123 Main St, Raleigh, NC, 27601');\\n```\\n@param address the new address\\n@return this field, useful for chaining*/setAddress(address:string):ContactsApp.UrlField;\\n/**Sets this field to primary.\\n\\n```\\n// Sets the the first address field associated with contact 'John Doe'\\n// as primary. This method can be similarly called for any field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setAsPrimary();\\n```\\n@return this FieldValue for chaining*/setAsPrimary():ContactsApp.UrlField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Work' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel(ContactsApp.Field.WORK_ADDRESS);\\n```\\n@param field the new standard label\\n@return this FieldValue for chaining*/setLabel(field:ContactsApp.Field):ContactsApp.UrlField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Apartment' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel('Apartment');\\n```\\n@param label the new label for this field\\n@return this field, useful for chaining*/setLabel(label:string):ContactsApp.UrlField;}interface Sensitivity{}interface _Sensitivity{\\n/**confidential sensitivity\\n@deprecated*/CONFIDENTIAL:Sensitivity;\\n/**normal sensitivity\\n@deprecated*/NORMAL:Sensitivity;\\n/**personal sensitivity\\n@deprecated*/PERSONAL:Sensitivity;\\n/**private sensitivity\\n@deprecated*/PRIVATE:Sensitivity;}interface Priority{}interface _Priority{\\n/**high priority\\n@deprecated*/HIGH:Priority;\\n/**low priority\\n@deprecated*/LOW:Priority;\\n/**normal priority\\n@deprecated*/NORMAL:Priority;}interface PhoneField{\\n/**Deletes this phone number field.\\n\\n```\\n// Retrieves and deletes the work phone number field for contact 'John\\n// Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar phoneFields \\u003d contacts[0].getPhones(ContactsApp.Field.WORK_PHONE);\\nphoneFields[0].deletePhoneField();\\n```\\n@deprecated*/deletePhoneField():void;\\n/**Gets the label for this field. This may be a Field, ExtendedField, or a String.\\n\\n```\\n// Logs the label for all the address fields associated with contact\\n// 'John Doe'. This method can be similarly called for any field that has\\n// a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nfor (var i \\u003d 0; i \\u003c addressFields.length; i++) {\\n  Logger.log(addressFields[i].getLabel());\\n}\\n```\\n@return the label for this field*/getLabel():Object;\\n/**Get the phone number for this field.\\n\\n```\\n// Logs the work phone number for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar phoneFields \\u003d contacts[0].getPhones(ContactsApp.Field.WORK_PHONE);\\nLogger.log(phoneFields[0].getPhoneNumber());\\n```\\n@deprecated\\n@return the number as a string*/getPhoneNumber():string;\\n/**Gets whether this is the primary field value.\\n\\n```\\n// Logs whether or not the first address field associated with contact\\n// 'John Doe' is labeled as primary. This method can be similarly called\\n// for any field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nLogger.log(addressFields[0].isPrimary());\\n```\\n@return whether this is primary*/isPrimary():boolean;\\n/**Sets this field to primary.\\n\\n```\\n// Sets the the first address field associated with contact 'John Doe'\\n// as primary. This method can be similarly called for any field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setAsPrimary();\\n```\\n@return this FieldValue for chaining*/setAsPrimary():ContactsApp.PhoneField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Work' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel(ContactsApp.Field.WORK_ADDRESS);\\n```\\n@param field the new standard label\\n@return this FieldValue for chaining*/setLabel(field:ContactsApp.Field):ContactsApp.PhoneField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Apartment' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel('Apartment');\\n```\\n@param label the new label for this field\\n@return this field, useful for chaining*/setLabel(label:string):ContactsApp.PhoneField;\\n/**Sets the phone number for this field.\\n\\n```\\n// Sets the work phone number for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar phoneFields \\u003d contacts[0].getPhones(ContactsApp.Field.WORK_PHONE);\\nphoneFields[0].setPhoneNumber('212-555-1234');\\n```\\n@deprecated\\n@param number the new number\\n@return this field, useful for chaining*/setPhoneNumber(number:string):ContactsApp.PhoneField;}interface IMField{\\n/**Deletes this instant messaging field.\\n\\n```\\n// Retrieves and deletes the AIM instant messaging field for contact 'John\\n// Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar imFields \\u003d contacts[0].getIMs(ContactsApp.Field.AIM);\\nimFields[0].deleteIMField();\\n```\\n@deprecated*/deleteIMField():void;\\n/**Get the address for this field.\\n\\n```\\n// Logs the address for the 'Home Address' field for contact 'John Doe'.\\n// Can be used similarly for other fields that contain addresses.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar homeAddress \\u003d contacts[0].getAddresses(ContactsApp.Field.HOME_ADDRESS);\\nLogger.log(homeAddress[0].getAddress());\\n```\\n@return the address as a string*/getAddress():string;\\n/**Gets the label for this field. This may be a Field, ExtendedField, or a String.\\n\\n```\\n// Logs the label for all the address fields associated with contact\\n// 'John Doe'. This method can be similarly called for any field that has\\n// a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nfor (var i \\u003d 0; i \\u003c addressFields.length; i++) {\\n  Logger.log(addressFields[i].getLabel());\\n}\\n```\\n@return the label for this field*/getLabel():Object;\\n/**Gets whether this is the primary field value.\\n\\n```\\n// Logs whether or not the first address field associated with contact\\n// 'John Doe' is labeled as primary. This method can be similarly called\\n// for any field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nLogger.log(addressFields[0].isPrimary());\\n```\\n@return whether this is primary*/isPrimary():boolean;\\n/**Sets the address of this field.\\n\\n```\\n// Sets the address for the 'Home Address' field for contact 'John Doe'.\\n// Can be used similarly for other fields that contain addresses.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar homeAddress \\u003d contacts[0].getAddresses(ContactsApp.Field.HOME_ADDRESS);\\nhomeAddress[0].setAddress('123 Main St, Raleigh, NC, 27601');\\n```\\n@param address the new address\\n@return this field, useful for chaining*/setAddress(address:string):ContactsApp.IMField;\\n/**Sets this field to primary.\\n\\n```\\n// Sets the the first address field associated with contact 'John Doe'\\n// as primary. This method can be similarly called for any field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setAsPrimary();\\n```\\n@return this FieldValue for chaining*/setAsPrimary():ContactsApp.IMField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Work' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel(ContactsApp.Field.WORK_ADDRESS);\\n```\\n@param field the new standard label\\n@return this FieldValue for chaining*/setLabel(field:ContactsApp.Field):ContactsApp.IMField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Apartment' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel('Apartment');\\n```\\n@param label the new label for this field\\n@return this field, useful for chaining*/setLabel(label:string):ContactsApp.IMField;}interface Gender{}interface _Gender{\\n/**female gender\\n@deprecated*/FEMALE:Gender;\\n/**male gender\\n@deprecated*/MALE:Gender;}interface Field{}interface _Field{\\n/**the contact's AIM identifier\\n@deprecated*/AIM:Field;\\n/**the contact's anniversary\\n@deprecated*/ANNIVERSARY:Field;\\n/**the contact's assistant's phone number\\n@deprecated*/ASSISTANT_PHONE:Field;\\n/**the contact's birthday\\n@deprecated*/BIRTHDAY:Field;\\n/**the contact's blog URL\\n@deprecated*/BLOG:Field;\\n/**the contact's callback phone number\\n@deprecated*/CALLBACK_PHONE:Field;\\n/**the contact's company\\n@deprecated*/COMPANY:Field;\\n/**the contact's family (last) name\\n@deprecated*/FAMILY_NAME:Field;\\n/**the contact's FTP URL\\n@deprecated*/FTP:Field;\\n/**the contact's full name\\n@deprecated*/FULL_NAME:Field;\\n/**the contact's given (first) name\\n@deprecated*/GIVEN_NAME:Field;\\n/**the contact's Google Talk identifier\\n@deprecated*/GOOGLE_TALK:Field;\\n/**the contact's Google Voice number\\n@deprecated*/GOOGLE_VOICE:Field;\\n/**the contact's home address\\n@deprecated*/HOME_ADDRESS:Field;\\n/**the contact's home email address\\n@deprecated*/HOME_EMAIL:Field;\\n/**the contact's home fax number\\n@deprecated*/HOME_FAX:Field;\\n/**the contact's home page URL\\n@deprecated*/HOME_PAGE:Field;\\n/**the contact's home phone number\\n@deprecated*/HOME_PHONE:Field;\\n/**the contact's home website URL\\n@deprecated*/HOME_WEBSITE:Field;\\n/**the contact's ICQ identifier\\n@deprecated*/ICQ:Field;\\n/**the contact's initials\\n@deprecated*/INITIALS:Field;\\n/**the contact's Jabber identifier\\n@deprecated*/JABBER:Field;\\n/**the contact's job title\\n@deprecated*/JOB_TITLE:Field;\\n/**the contact's maiden name\\n@deprecated*/MAIDEN_NAME:Field;\\n/**the contact's main phone number\\n@deprecated*/MAIN_PHONE:Field;\\n/**the contact's middle name\\n@deprecated*/MIDDLE_NAME:Field;\\n/**the contact's mobile phone number\\n@deprecated*/MOBILE_PHONE:Field;\\n/**the contact's MSN identifier\\n@deprecated*/MSN:Field;\\n/**the contact's nickname\\n@deprecated*/NICKNAME:Field;\\n/**notes about the contact\\n@deprecated*/NOTES:Field;\\n/**the contact's pager number\\n@deprecated*/PAGER:Field;\\n/**the prefix for the contact's name\\n@deprecated*/PREFIX:Field;\\n/**the contact's profile URL\\n@deprecated*/PROFILE:Field;\\n/**the contact's QQ identifer\\n@deprecated*/QQ:Field;\\n/**the contact's short name\\n@deprecated*/SHORT_NAME:Field;\\n/**the contact's Skype identifier\\n@deprecated*/SKYPE:Field;\\n/**the suffix for the contact's name\\n@deprecated*/SUFFIX:Field;\\n/**the contact's work address\\n@deprecated*/WORK_ADDRESS:Field;\\n/**the contact's work email address\\n@deprecated*/WORK_EMAIL:Field;\\n/**the contact's work fax number\\n@deprecated*/WORK_FAX:Field;\\n/**the contact's work phone number\\n@deprecated*/WORK_PHONE:Field;\\n/**the contact's work website URL\\n@deprecated*/WORK_WEBSITE:Field;\\n/**the contact's Yahoo instant messaging identifier\\n@deprecated*/YAHOO:Field;}interface ExtendedField{}interface _ExtendedField{\\n/**the contact's billing information\\n@deprecated*/BILLING_INFORMATION:ExtendedField;\\n/**the contact's directory server\\n@deprecated*/DIRECTORY_SERVER:ExtendedField;\\n/**the contact's gender\\n@deprecated*/GENDER:ExtendedField;\\n/**the contact's hobby\\n@deprecated*/HOBBY:ExtendedField;\\n/**the contact's home information\\n@deprecated*/HOME:ExtendedField;\\n/**the contact's language\\n@deprecated*/LANGUAGE:ExtendedField;\\n/**the contact's mileage\\n@deprecated*/MILEAGE:ExtendedField;\\n/**the contact's other information\\n@deprecated*/OTHER:ExtendedField;\\n/**the contact's priority\\n@deprecated*/PRIORITY:ExtendedField;\\n/**the contact's sensitivity\\n@deprecated*/SENSITIVITY:ExtendedField;\\n/**the contact's user information\\n@deprecated*/USER:ExtendedField;\\n/**the contact's work information\\n@deprecated*/WORK:ExtendedField;}interface EmailField{\\n/**Deletes this email address from the Contact.\\n\\n```\\n// Retrieves and deletes the work email address for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar workEmail \\u003d contacts[0].getEmails(ContactsApp.Field.WORK_EMAIL);\\nworkEmail[0].deleteEmailField();\\n```\\n@deprecated*/deleteEmailField():void;\\n/**Get the address for this field.\\n\\n```\\n// Logs the address for the 'Home Address' field for contact 'John Doe'.\\n// Can be used similarly for other fields that contain addresses.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar homeAddress \\u003d contacts[0].getAddresses(ContactsApp.Field.HOME_ADDRESS);\\nLogger.log(homeAddress[0].getAddress());\\n```\\n@return the address as a string*/getAddress():string;\\n/**Returns the display name for this email address.\\n\\n```\\n// Logs the display name for the the work email address for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar workEmail \\u003d contacts[0].getEmails(ContactsApp.Field.WORK_EMAIL);\\nLogger.log(workEmail[0].getDisplayName());\\n```\\n@deprecated\\n@return the display name for this email*/getDisplayName():string;\\n/**Gets the label for this field. This may be a Field, ExtendedField, or a String.\\n\\n```\\n// Logs the label for all the address fields associated with contact\\n// 'John Doe'. This method can be similarly called for any field that has\\n// a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nfor (var i \\u003d 0; i \\u003c addressFields.length; i++) {\\n  Logger.log(addressFields[i].getLabel());\\n}\\n```\\n@return the label for this field*/getLabel():Object;\\n/**Gets whether this is the primary field value.\\n\\n```\\n// Logs whether or not the first address field associated with contact\\n// 'John Doe' is labeled as primary. This method can be similarly called\\n// for any field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nLogger.log(addressFields[0].isPrimary());\\n```\\n@return whether this is primary*/isPrimary():boolean;\\n/**Sets the address of this field.\\n\\n```\\n// Sets the address for the 'Home Address' field for contact 'John Doe'.\\n// Can be used similarly for other fields that contain addresses.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar homeAddress \\u003d contacts[0].getAddresses(ContactsApp.Field.HOME_ADDRESS);\\nhomeAddress[0].setAddress('123 Main St, Raleigh, NC, 27601');\\n```\\n@param address the new address\\n@return this field, useful for chaining*/setAddress(address:string):ContactsApp.EmailField;\\n/**Sets this field to primary.\\n\\n```\\n// Sets the the first address field associated with contact 'John Doe'\\n// as primary. This method can be similarly called for any field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setAsPrimary();\\n```\\n@return this FieldValue for chaining*/setAsPrimary():ContactsApp.EmailField;\\n/**Sets the display name for this email address.\\n\\n```\\n// Sets the display name to 'Doe, John' for the the work email address for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar workEmail \\u003d contacts[0].getEmails(ContactsApp.Field.WORK_EMAIL);\\nworkEmail[0].setDisplayName('Doe, John');\\n```\\n@deprecated\\n@param name the new display name for this email address\\n@return this email field, useful for chaining*/setDisplayName(name:string):ContactsApp.EmailField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Work' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel(ContactsApp.Field.WORK_ADDRESS);\\n```\\n@param field the new standard label\\n@return this FieldValue for chaining*/setLabel(field:ContactsApp.Field):ContactsApp.EmailField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Apartment' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel('Apartment');\\n```\\n@param label the new label for this field\\n@return this field, useful for chaining*/setLabel(label:string):ContactsApp.EmailField;}interface DateField{\\n/**Deletes this date.\\n\\n```\\n// Deletes all the dates that are set for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar dates \\u003d contacts[0].getDates();\\nfor (var i \\u003d 0; i \\u003c dates.length; i++) {\\n  dates[i].deleteDateField();\\n}\\n```\\n@deprecated*/deleteDateField():void;\\n/**Gets the day of the month for this date.\\n\\nNote: For standard JavaScript Date objects the [\\n`getDay()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay) method returns the day of the week instead.\\n\\n```\\n// Logs the day of the birthday for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar birthday \\u003d contacts[0].getDates(ContactsApp.Field.BIRTHDAY)[0];\\nLogger.log(birthday.getDay());\\n```\\n@deprecated\\n@return the day of the month*/getDay():Integer;\\n/**Gets the label for this field. This may be a Field, ExtendedField, or a String.\\n\\n```\\n// Logs the label for all the address fields associated with contact\\n// 'John Doe'. This method can be similarly called for any field that has\\n// a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nfor (var i \\u003d 0; i \\u003c addressFields.length; i++) {\\n  Logger.log(addressFields[i].getLabel());\\n}\\n```\\n@return the label for this field*/getLabel():Object;\\n/**Gets the month for this date.\\n\\n```\\n// Logs the month of the birthday for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar birthday \\u003d contacts[0].getDates(ContactsApp.Field.BIRTHDAY)[0];\\nLogger.log(birthday.getMonth());\\n```\\n@deprecated\\n@return the month*/getMonth():Month;\\n/**Gets the year for this date.\\n\\n```\\n// Logs the year of the birthday for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar birthday \\u003d contacts[0].getDates(ContactsApp.Field.BIRTHDAY)[0];\\nLogger.log(birthday.getYear());\\n```\\n@deprecated\\n@return the year*/getYear():Integer;\\n/**Sets the date to this day, without a year.\\n\\nThis method only applies to date fields that don't require a year, such as birthdays.\\n\\n```\\n// Sets the birthday for contact 'John Doe' to April 1\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar birthday \\u003d contacts[0].getDates(ContactsApp.Field.BIRTHDAY)[0];\\nbirthday.setDate(ContactsApp.Month.APRIL, 1);\\n```\\n@deprecated\\n@param month the month\\n@param day the day\\n@return this date, useful for chaining*/setDate(month:Month,day:Integer):ContactsApp.DateField;\\n/**Sets the date to this day.\\n\\n```\\n// Sets the birthday for contact 'John Doe' to April 1, 1980\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar birthday \\u003d contacts[0].getDates(ContactsApp.Field.BIRTHDAY)[0];\\nbirthday.setDate(ContactsApp.Month.APRIL, 1, 1980);\\n```\\n@deprecated\\n@param month the month\\n@param day the day\\n@param year the year\\n@return this date, useful for chaining*/setDate(month:Month,day:Integer,year:Integer):ContactsApp.DateField;\\n/**Sets the label of this field, such as 'Birthday' or 'Anniversary'.\\n\\n```\\n// Retrieves the first date that's set for contact 'John Doe' and re-labels\\n// it as an anniversary\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar firstDate \\u003d contacts[0].getDates()[0];\\nfirstDate.setLabel(ContactsApp.Field.ANNIVERSARY);\\n```\\n@deprecated\\n@param label the new standard label\\n@return this field, useful for chaining*/setLabel(label:ContactsApp.Field):ContactsApp.DateField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Apartment' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel('Apartment');\\n```\\n@param label the new label for this field\\n@return this field, useful for chaining*/setLabel(label:string):ContactsApp.DateField;}interface CustomField{\\n/**Deletes this field.\\n\\n```\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar fields \\u003d contacts[0].getCustomFields();\\nfor (var i \\u003d 0; i \\u003c fields.length; i++) {\\n  if (fields[i].getLabel() \\u003d\\u003d 'foo') {\\n    fields[i].deleteCustomField();\\n  }\\n}\\n```\\n@deprecated*/deleteCustomField():void;\\n/**Gets the label for this field. This may be a Field, ExtendedField, or a String.\\n\\n```\\n// Logs the label for all the address fields associated with contact\\n// 'John Doe'. This method can be similarly called for any field that has\\n// a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nfor (var i \\u003d 0; i \\u003c addressFields.length; i++) {\\n  Logger.log(addressFields[i].getLabel());\\n}\\n```\\n@return the label for this field*/getLabel():Object;\\n/**Gets the value of the field.\\n\\n```\\n// Logs the value of all the custom fields for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar fields \\u003d contacts[0].getCustomFields();\\nfor (var i in fields) {\\n  Logger.log(fields[i].getValue());\\n}\\n```\\n@deprecated\\n@return the value stored in the field*/getValue():Object;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the first custom field associated with contact 'John Doe' to use 'Mail application' as\\n// a label, with 'Gmail' as the value.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar field \\u003d contacts[0].getCustomFields()[0];\\nfield.setLabel('Mail application');\\nfield.setValue('Gmail');\\n```\\n@deprecated\\n@param field the new standard label\\n@return this field, useful for chaining*/setLabel(field:ContactsApp.ExtendedField):ContactsApp.CustomField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Apartment' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel('Apartment');\\n```\\n@param label the new label for this field\\n@return this field, useful for chaining*/setLabel(label:string):ContactsApp.CustomField;\\n/**Sets the value of this field.\\n\\n```\\n// Sets the first custom field associated with contact 'John Doe' to use 'Mail application' as\\n// a label, with 'Gmail' as the value.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar field \\u003d contacts[0].getCustomFields()[0];\\nfield.setLabel('Mail application');\\nfield.setValue('Gmail');\\n```\\n@deprecated\\n@param value the new value\\n@return this field, useful for chaining*/setValue(value:Object):ContactsApp.CustomField;}interface ContactGroup{\\n/**Adds the given contact to this group\\n\\n```\\n// The code below creates a new contact and adds it to the \\\"Work Friends\\\" contact group\\nvar contact \\u003d ContactsApp.createContact('John', 'Doe', 'john.doe@example.com');\\nvar group \\u003d ContactsApp.getContactGroup('Work Friends');\\ngroup.addContact(contact);\\n```\\n@deprecated\\n@param contact the contact to be added to the group\\n@return this contact group*/addContact(contact:ContactsApp.Contact):ContactsApp.ContactGroup;\\n/**Deletes this contact group.\\n\\nDeletes non-system groups only; system groups cannot be deleted.\\n\\n```\\n// The code below retrieves a contact group named \\\"Work Friends\\\" and deletes it\\nvar group \\u003d ContactsApp.getContactGroup('Work Friends');\\ngroup.deleteGroup();\\n```\\n@deprecated*/deleteGroup():void;\\n/**Gets all the contacts in this contact group.\\n\\n```\\n// The code below retrieves all the contacts in the group named \\\"Work Friends\\\"\\nvar group \\u003d ContactsApp.getContactGroup('Work Friends');\\nvar contacts \\u003d group.getContacts();\\n```\\n@deprecated\\n@return the contacts in this group*/getContacts():ContactsApp.Contact[];\\n/**Returns the name of this group.\\n@deprecated\\n@return the name of this group*/getGroupName():string;\\n/**Gets the id of this contact group.\\n\\n```\\n// The code below retrieves a contact group named \\\"Work Friends\\\" and gets its id\\nvar group \\u003d ContactsApp.getContactGroup('Work Friends');\\nvar id \\u003d group.getId();\\n```\\n@deprecated\\n@return the id of this group*/getId():string;\\n/**Gets the name of this contact group.\\n\\n```\\n// The code below creates a new contact group and then retrieves its name\\nvar group \\u003d ContactsApp.createContactGroup('Work Friends');\\nvar name \\u003d group.getName();\\n```\\n@deprecated\\n@return this name of this contact group*/getName():string;\\n/**Gets a boolean value to determine whether this contact group is a system group (undeletable) or\\nnot.\\n\\nSystems groups are a set of groups that are predefined in Google Contacts, such as \\\"My\\nContacts\\\", \\\"Family\\\", \\\"Coworkers\\\", etc. The name of a system group usually contains the words\\n\\\"System Group\\\".\\n\\n```\\n// The code below retrieves two contact groups, then logs whether or not\\n// each is a system group.\\nvar myGroup \\u003d ContactsApp.getContactGroup('Work Friends');\\nvar systemGroup \\u003d ContactsApp.getContactGroup('System Group: Coworkers');\\nLogger.log(myGroup.isSystemGroup()); // Returns false, if the group exists.\\nLogger.log(systemGroup.isSystemGroup()); // Returns true.\\n```\\n@deprecated\\n@return whether or not this contact group is a system group*/isSystemGroup():boolean;\\n/**Removes the given contact from this group\\n\\n```\\n// The code below retrieves all the contacts named \\\"John Doe' and removes them from the\\n// \\\"Work Friends\\\" contact group\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar group \\u003d ContactsApp.getContactGroup('Work Friends');\\nfor (var i in contacts) {\\n  group.removeContact(contacts[i]);\\n}\\n```\\n@deprecated\\n@param contact the contact to be removed from the group\\n@return this contact group*/removeContact(contact:ContactsApp.Contact):ContactsApp.ContactGroup;\\n/**Sets the name of this group.\\n@deprecated\\n@param name the name to set for this group*/setGroupName(name:string):void;\\n/**Sets the name of this contact group.\\n\\n```\\n// The code below retrieves the contact group named \\\"Work Friends\\\" and renames it to\\n// \\\"Work Buddies\\\"\\nvar group \\u003d ContactsApp.getContactGroup('Work Friends');\\ngroup.setName('Work Buddies');\\n```\\n@deprecated\\n@param name the new name for the contact group\\n@return this contact group*/setName(name:string):ContactsApp.ContactGroup;}interface Contact{\\n/**Adds an address to the contact with either a standard or custom label.\\n\\nThe label can be either from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and adds the address\\n// \\\"123 Main St, Some City, NY 10011\\\" with the the ContactsApp.Field.WORK_ADDRESS label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar address \\u003d contacts[0].addAddress(ContactsApp.Field.WORK_ADDRESS,\\n                                    '123 Main St, Some City, NY 10011');\\n```\\n@deprecated\\n@param label the label of the new address, either from ContactsApp.Field or a custom string\\n@param address the new address\\n@return the newly created field*/addAddress(label:Object,address:string):ContactsApp.AddressField;\\n/**Adds a company to the contact.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and adds the company \\\"Google\\\" and the\\n// job title \\\"Product Manager\\\".\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar url \\u003d contacts[0].addCompany('Google', 'Product Manager');\\n```\\n@deprecated\\n@param company the name of the company to add to this contact\\n@param title the job title associated with this contact for this company\\n@return the newly created field*/addCompany(company:string,title:string):ContactsApp.CompanyField;\\n/**Adds a custom field to the contact with either an extended or custom label.\\n\\nThe label can be either from ContactsApp.ExtendedField or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and adds the custom field\\n// ContactsApp.ExtendedField.HOBBY with the value \\\"hiking\\\".\\n// Note that ContactsApp.ExtendedField.HOBBY is not the same as a custom field named 'HOBBY'.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\ncontacts[0].addCustomField(ContactsApp.ExtendedField.HOBBY, 'hiking');\\n```\\n@deprecated\\n@param label the label of the new address, either from ContactsApp.ExtendedField or a custom\\n    string\\n@param content the value to store in the custom field\\n@return the newly created field*/addCustomField(label:Object,content:Object):ContactsApp.CustomField;\\n/**Adds a date to the contact with either an standard or custom label.\\n\\nThe label can be either from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and adds a\\n// ContactsApp.ExtendedField.BIRTHDAY with the value \\\"April 19, 1950\\\".\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar birthday \\u003d contacts[0].addDate(ContactsApp.Field.BIRTHDAY,\\n                                   ContactsApp.Month.APRIL, 19, 1950);\\n```\\n@deprecated\\n@param label the label of the new date, either from ContactsApp.Field or a custom string\\n@param month the month, from ContactApps.Month\\n@param day the day\\n@param year the year\\n@return the newly created date*/addDate(label:Object,month:Month,day:Integer,year:Integer):ContactsApp.DateField;\\n/**Add an email address with a standard label (home, work, etc.) or a custom label\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and adds the email address\\n// \\\"j.doe@example.com\\\" to the ContactsApp.Field.HOME_EMAIL label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar emailField \\u003d contacts[0].addEmail(ContactsApp.Field.HOME_EMAIL, 'j.doe@example.com');\\n```\\n@deprecated\\n@param label the label of the new email, either from ContactsApp.Field or a custom string\\n@param address the new email address\\n@return the newly added field*/addEmail(label:Object,address:string):ContactsApp.EmailField;\\n/**Adds an IM address to the contact with either a standard or custom label.\\n\\nThe label can be either from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and adds the IM address \\\"ChatWithJohn\\\"\\n// with the the ContactsApp.Field.AIM label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar email \\u003d contacts[0].addIM(ContactsApp.Field.AIM, 'ChatWithJohn');\\n```\\n@deprecated\\n@param label the label of the new IM address, either from ContactsApp.Field or a custom string\\n@param address the new IM address\\n@return the newly created field*/addIM(label:Object,address:string):ContactsApp.IMField;\\n/**Adds a phone number to the contact with either a standard or custom label.\\n\\nThe label can be either from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and adds the phone number\\n// \\\"212-555-1234\\\" with the the ContactsApp.Field.WORK_PHONE label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar phone \\u003d contacts[0].addPhone(ContactsApp.Field.WORK_PHONE, '212-555-1234');\\n```\\n@deprecated\\n@param label the label of the new phone number, either from ContactsApp.Field or a custom\\n    string\\n@param number the new phone number\\n@return the newly created field*/addPhone(label:Object,number:string):ContactsApp.PhoneField;\\n/**Adds this contact to the given contact group.\\n\\n```\\n// The code below creates a new contact and then adds it to the contact group named\\n// \\\"Work Friends\\\"\\nvar contact \\u003d ContactsApp.createContact('John', 'Doe', 'john.doe@example.com');\\nvar group \\u003d ContactsApp.getContactGroup('Work Friends');\\ncontact \\u003d contact.addToGroup(group);\\n```\\n@deprecated\\n@param group the contact group to add this contact to\\n@return this contact*/addToGroup(group:ContactsApp.ContactGroup):ContactsApp.Contact;\\n/**Adds a URL to the contact with either a standard or custom label.\\n\\nThe label can be either from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and adds the URL\\n// \\\"http://www.example.com\\\" with the the ContactsApp.Field.WORK_WEBSITE label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar url \\u003d contacts[0].addUrl(ContactsApp.Field.WORK_WEBSITE, 'http://www.example.com');\\n```\\n@deprecated\\n@param label the label of the new address, either from ContactsApp.Field or a custom string\\n@param url the new URL\\n@return the newly created field*/addUrl(label:Object,url:string):ContactsApp.UrlField;\\n/**Deletes this contact.\\n\\n```\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  contacts[i].deleteContact();\\n}\\n```\\n@deprecated*/deleteContact():void;\\n/**Gets all the addresses for this contact.\\n\\n```\\n// The code below logs the addresses of all the contacts whose names contain \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getAddresses());\\n}\\n```\\n@deprecated\\n@return a list of addresses*/getAddresses():ContactsApp.AddressField[];\\n/**Gets all the addresses for this contact matching a particular field.\\n\\nThe label can be either from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and logs the addresses\\n// associated with that contact that are in the ContactsApp.Field.WORK_ADDRESS label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addresses \\u003d contacts[0].getAddresses(ContactsApp.Field.WORK_ADDRESS);\\nfor (var i in addresses) {\\n  Logger.log(addresses[i].getAddress());\\n}\\n```\\n@deprecated\\n@param label the label to match, either from ContactsApp.Field or a custom string\\n@return a list of addresses*/getAddresses(label:Object):ContactsApp.AddressField[];\\n/**Gets all the companies for this contact.\\n\\n```\\n// The code below logs the company names of all the contacts whose names contain \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  var companies \\u003d contacts[i].getCompanies();\\n  for (var j in companies) {\\n    Logger.log(companies[j].getCompanyName());\\n  }\\n}\\n```\\n@deprecated\\n@return a list of companies*/getCompanies():ContactsApp.CompanyField[];\\n/**Gets all the contact groups that contain this contact.\\n\\n```\\n// The code below gets a contact named \\\"John Doe\\\" and retrieves all the contact groups that\\n// the contact belongs to\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar groups \\u003d contacts[0].getContactGroups();\\n```\\n@deprecated\\n@return the groups containing this contact*/getContactGroups():ContactsApp.ContactGroup[];\\n/**Gets all the custom fields for this contact.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and logs the custom fields\\n// associated with that contact\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar fields \\u003d contacts[0].getCustomFields();\\nfor (var i in fields) {\\n  Logger.log(fields[i].getValue());\\n}\\n```\\n@deprecated\\n@return a list of custom fields*/getCustomFields():ContactsApp.CustomField[];\\n/**Gets all the custom fields for this contact matching a particular field.\\n\\nThe label can be either a standard label from ContactsApp.ExtendedField or a custom label\\nstring.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and logs the custom fields\\n// associated with that contact that are in the ContactsApp.ExtendedField.HOBBY label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar hobbies \\u003d contacts[0].getCustomFields(ContactsApp.ExtendedField.HOBBY);\\nfor (var i in hobbies) {\\n  Logger.log(hobbies[i].getValue());\\n}\\n```\\n@deprecated\\n@param label the label to match, either from ContactsApp.ExtendedField or a custom string\\n@return a list of custom fields*/getCustomFields(label:Object):ContactsApp.CustomField[];\\n/**Gets all the dates for this contact.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and logs the label of the date\\n// associated with that contact\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar dates \\u003d contacts[0].getDates();\\nfor (var i in dates) {\\n  Logger.log(dates[i].getLabel());\\n}\\n```\\n@deprecated\\n@return a list of dates*/getDates():ContactsApp.DateField[];\\n/**Gets all the dates for this contact matching a particular field.\\n\\nThe label can be either a standard label from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and logs the day of the month\\n// associated with that contact that are in the ContactsApp.Field.BIRTHDAY label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar birthdays \\u003d contacts[0].getDates(ContactsApp.Field.BIRTHDAY);\\nfor (var i in birthdays) {\\n  Logger.log(birthdays[i].getDay());\\n}\\n```\\n@deprecated\\n@param label the label to match, either from ContactsApp.Field or a custom string\\n@return a list of dates*/getDates(label:Object):ContactsApp.DateField[];\\n/**Gets a list of the email addresses available for this Contact.\\n@deprecated\\n@return a list of email addresses available for this Contact*/getEmailAddresses():string[];\\n/**Gets the email addresses of this contact.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and logs the email addresses\\n// associated with that contact\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar emails \\u003d contacts[0].getEmails();\\nfor (var i in emails) {\\n  Logger.log(emails[i].getAddress());\\n}\\n```\\n@deprecated\\n@return the list of email addresses for the the contact*/getEmails():ContactsApp.EmailField[];\\n/**Gets the email addresses for this contact matching a particular field.\\n\\nThe label can be either a standard label from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and logs the email addresses\\n// associated with that contact that are in the ContactsApp.Field.HOME_EMAIL label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar emails \\u003d contacts[0].getEmails(ContactsApp.Field.HOME_EMAIL);\\nfor (var i in emails) {\\n  Logger.log(emails[i].getAddress());\\n}\\n```\\n@deprecated\\n@param label the label to match, either from ContactsApp.Field or a custom string\\n@return the list of email addresses for the the contact*/getEmails(label:Object):ContactsApp.EmailField[];\\n/**Gets the family name (last name) of the contact as a string.\\n\\n```\\n// The code below logs the family name of all the contacts whose names contain \\\"John\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getFamilyName());\\n}\\n```\\n@deprecated\\n@return the family name of the contact*/getFamilyName():string;\\n/**Gets the full name (given name and last name) of the contact as a string.\\n\\n```\\n// The code below logs the full name of all the contacts whose names contain \\\"John\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getFullName());\\n}\\n```\\n@deprecated\\n@return the full name of the contact*/getFullName():string;\\n/**Gets the given name (first name) of the contact as a string.\\n\\n```\\n// The code below logs the given name of all the contacts whose names contain \\\"Smith\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('Smith');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getGivenName());\\n}\\n```\\n@deprecated\\n@return the given name of the contact*/getGivenName():string;\\n/**Gets the home address of this Contact, or empty string if none exists.\\n@deprecated\\n@return the home address of this Contact, or empty string if none exists*/getHomeAddress():string;\\n/**Gets the home fax number of this Contact or empty string if none exists.\\n@deprecated\\n@return the home fax number of this Contact or empty string if none exists*/getHomeFax():string;\\n/**Gets the home phone number of this Contact or empty string if none exists.\\n@deprecated\\n@return the home phone number of this Contact or empty string if none exists*/getHomePhone():string;\\n/**Gets all the IM addresses for this contact.\\n\\n```\\n// The code below logs the IM addresses of all the contacts whose names contain \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getIMs());\\n}\\n```\\n@deprecated\\n@return a list of IM addresses*/getIMs():ContactsApp.IMField[];\\n/**Gets all the IM addresses for this contact matching a particular field.\\n\\nThe label can be either from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and logs the IM addresses\\n// associated with that contact that are in the ContactsApp.Field.GOOGLE_TALK label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar imAddresses \\u003d contacts[0].getIMs(ContactsApp.Field.GOOGLE_TALK);\\nfor (var i in imAddresses) {\\n  Logger.log(imAddresses[i].getAddress());\\n}\\n```\\n@deprecated\\n@param label the label to match, either from ContactsApp.Field or a custom string\\n@return a list of IM addresses*/getIMs(label:Object):ContactsApp.IMField[];\\n/**Returns the unique id of this contact.\\n\\n```\\nvar contact \\u003d ContactsApp.createContact('John', 'Doe', 'john.doe@example.com');\\nvar id \\u003d contact.getId();\\n```\\n@deprecated\\n@return the id of this contact*/getId():string;\\n/**Gets the contact's initials.\\n\\n```\\n// The code below logs the initials of all the contacts whose names contain \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getInitials());\\n}\\n```\\n@deprecated\\n@return the initials of the contact*/getInitials():string;\\n/**Gets the date this contact was last updated.\\n\\n```\\n// The code below logs the last updated date of all the contacts whose names contain\\n// \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getLastUpdated());\\n}\\n```\\n@deprecated\\n@return the date this contact was last updated*/getLastUpdated():Date;\\n/**Gets the maiden name of the contact as a string.\\n\\n```\\n// The code below logs the maiden name of all the contacts whose names contain \\\"Jane\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('Jane');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getMaidenName());\\n}\\n```\\n@deprecated\\n@return the maiden name of the contact*/getMaidenName():string;\\n/**Gets the middle name of the contact as a string.\\n\\n```\\n// The code below logs the middle name of all the contacts whose names contain \\\"Smith\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('Smith');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getMiddleName());\\n}\\n```\\n@deprecated\\n@return the middle name of the contact*/getMiddleName():string;\\n/**Gets the mobile phone number of this Contact or empty string if none exists.\\n@deprecated\\n@return the mobile phone number of this Contact or empty string if none exists*/getMobilePhone():string;\\n/**Gets the nickname of the contact as a string.\\n\\n```\\n// The code below logs the nickname of all the contacts whose names contain \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getNickname());\\n}\\n```\\n@deprecated\\n@return the nickname of the contact*/getNickname():string;\\n/**Gets the notes associated with this contact, or an empty string if there are no notes.\\n\\n```\\n// The code below logs the notes of all the contacts whose names contain \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getNotes());\\n}\\n```\\n@deprecated\\n@return the notes associated with this contact*/getNotes():string;\\n/**Gets the pager phone number of this Contact or empty string if none exists.\\n@deprecated\\n@return the pager phone number of this Contact or empty string if none exists*/getPager():string;\\n/**Gets all the phone numbers for this contact.\\n\\n```\\n// The code below logs the phone numbers of all the contacts whose names contain \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getPhones());\\n}\\n```\\n@deprecated\\n@return a list of phone numbers*/getPhones():ContactsApp.PhoneField[];\\n/**Gets all the phone numbers for this contact matching a particular field.\\n\\nThe label can be either from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and logs the phone numbers\\n// associated with that contact that are in the ContactsApp.Field.WORK_PHONE label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar phones \\u003d contacts[0].getPhones(ContactsApp.Field.WORK_PHONE);\\nfor (var i in phones) {\\n  Logger.log(phones[i].getPhoneNumber());\\n}\\n```\\n@deprecated\\n@param label the label to match, either from ContactsApp.Field or a custom string\\n@return a list of phone numbers*/getPhones(label:Object):ContactsApp.PhoneField[];\\n/**Gets the prefix to the contact's name.\\n\\n```\\n// The code below logs the prefix of all the contacts whose names contain \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getPrefix());\\n}\\n```\\n@deprecated\\n@return the prefix of the contact's name*/getPrefix():string;\\n/**Gets the primary email address of the contact as a string.\\n\\n```\\n// The code below logs the primary email address of all the contacts whose names contain\\n// \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getPrimaryEmail());\\n}\\n```\\n@deprecated\\n@return the primary email address of the contact*/getPrimaryEmail():string;\\n/**Gets the short name of the contact as a string.\\n\\n```\\n// The code below logs the short name of all the contacts whose names contain \\\"Johnathan\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('Johnathan');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getShortName());\\n}\\n```\\n@deprecated\\n@return the short name of the contact*/getShortName():string;\\n/**Gets the suffix to the contact's name.\\n\\n```\\n// The code below logs the suffix of all the contacts whose names contain \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getSuffix());\\n}\\n```\\n@deprecated\\n@return the suffix of the contact's name*/getSuffix():string;\\n/**Gets all the URLs for this contact.\\n\\n```\\n// The code below logs the URLs of all the contacts whose names contain \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  Logger.log(contacts[i].getUrls());\\n}\\n```\\n@deprecated\\n@return a list of URLs*/getUrls():ContactsApp.UrlField[];\\n/**Gets all the URLs for this contact matching a particular field.\\n\\nThe label can be either from ContactsApp.Field or a custom label string.\\n\\n```\\n// The code below retrieves a contact named \\\"John Doe\\\" and logs the URLs\\n// associated with that contact that are in the ContactsApp.Field.WORK_WEBSITE label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar urls \\u003d contacts[0].getUrls(ContactsApp.Field.WORK_WEBSITE);\\nfor (var i in urls) {\\n  Logger.log(urls[i].getAddress());\\n}\\n```\\n@deprecated\\n@param label the label to match, either from ContactsApp.Field or a custom string\\n@return a list of URLs*/getUrls(label:Object):ContactsApp.UrlField[];\\n/**Gets the user defined value associated with the given key.\\n@deprecated\\n@param key the key can be any basic type (String, int, etc.)\\n@return the user defined content that has been stored with this key*/getUserDefinedField(key:string):string;\\n/**Gets all the user defined fields for this Contact and returns them as the properties of a\\nJavaScript Object.\\n@deprecated\\n@return the user defined fields for this Contact, as properties of a JavaScript Object*/getUserDefinedFields():Object;\\n/**Gets the work address of this Contact, or empty string if none exists.\\n@deprecated\\n@return the work address of this Contact, or empty string if none exists*/getWorkAddress():string;\\n/**Gets the work fax number of this Contact or empty string if none exists.\\n@deprecated\\n@return the work fax number of this Contact or empty string if none exists*/getWorkFax():string;\\n/**Gets the work phone number of this Contact or empty string if none exists.\\n@deprecated\\n@return the work phone number of this Contact or empty string if none exists*/getWorkPhone():string;\\n/**Removes this contact from the given contact group.\\n\\n```\\n// The code below gets all the contacts named \\\"John Doe\\\" and then removes each of them from\\n// the \\\"Work Friends\\\" contact group\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar group \\u003d ContactsApp.getContactGroup('Work Friends');\\nfor (var i in contacts) {\\n  contacts[i] \\u003d contacts[i].removeFromGroup(group);\\n}\\n```\\n@deprecated\\n@param group the contact group to remove this contact from\\n@return this contact*/removeFromGroup(group:ContactsApp.ContactGroup):ContactsApp.Contact;\\n/**Sets the family name (last name) of the contact.\\n\\n```\\n// The code below changes the family name of all the contacts whose names are \\\"John Doe\\\"\\n// to \\\"Doe-Smith\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  contacts[i].setFamilyName('Doe-Smith');\\n}\\n```\\n@deprecated\\n@param familyName the new family name of the contact\\n@return this contact*/setFamilyName(familyName:string):ContactsApp.Contact;\\n/**Sets the full name (given name and last name) of the contact.\\n\\n```\\n// The code below changes the full name of all the contacts whose names are \\\"John Doe\\\"\\n// to \\\"Johnny Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  contacts[i].setFullName('Johnny Doe');\\n}\\n```\\n@deprecated\\n@param fullName the new full name of the contact\\n@return this contact*/setFullName(fullName:string):ContactsApp.Contact;\\n/**Sets the given name (first name) of the contact.\\n\\n```\\n// The code below changes the given name of all the contacts whose names are \\\"John Doe\\\"\\n// to \\\"Johnny\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  contacts[i].setGivenName('Johnny');\\n}\\n```\\n@deprecated\\n@param givenName the new given name of the contact\\n@return this contact*/setGivenName(givenName:string):ContactsApp.Contact;\\n/**Sets the home address of this Contact.\\n@deprecated\\n@param addr the home address to set*/setHomeAddress(addr:string):void;\\n/**Sets the home fax number of this Contact.\\n@deprecated\\n@param phone the home fax number to set*/setHomeFax(phone:string):void;\\n/**Sets the home phone number of this Contact.\\n@deprecated\\n@param phone the home phone number to set*/setHomePhone(phone:string):void;\\n/**Sets the contact's initials.\\n\\n```\\n// The code below sets the initials of all the contacts whose names are \\\"Johnathan Doe\\\"\\n// to \\\"JD\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('Johnathan Doe');\\nfor (var i in contacts) {\\n  contacts[i].setInitials('JD');\\n}\\n```\\n@deprecated\\n@param initials the new initials of the contact\\n@return this contact*/setInitials(initials:string):ContactsApp.Contact;\\n/**Sets the maiden name of the contact.\\n\\n```\\n// The code below changes the maiden name of all the contacts whose names are \\\"Jane Doe\\\"\\n// to \\\"Smith\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('Jane Doe');\\nfor (var i in contacts) {\\n  contacts[i].setMaidenName('Smith');\\n}\\n```\\n@deprecated\\n@param maidenName the new maiden name of the contact\\n@return this contact*/setMaidenName(maidenName:string):ContactsApp.Contact;\\n/**Sets the middle name of the contact.\\n\\n```\\n// The code below changes the middle name of all the contacts whose names are \\\"John Doe\\\"\\n// to \\\"Danger\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  contacts[i].setMiddleName('Danger');\\n}\\n```\\n@deprecated\\n@param middleName the new middle name of the contact\\n@return this contact*/setMiddleName(middleName:string):ContactsApp.Contact;\\n/**Sets the mobile phone number of this Contact.\\n@deprecated\\n@param phone the mobile phone number to set*/setMobilePhone(phone:string):void;\\n/**Sets the nickname of the contact.\\n\\n```\\n// The code below changes the nickname of all the contacts whose names are \\\"John Doe\\\"\\n// to \\\"JohnnyD\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  contacts[i].setNickname('JohnnyD');\\n}\\n```\\n@deprecated\\n@param nickname the new nickname of the contact\\n@return this contact*/setNickname(nickname:string):ContactsApp.Contact;\\n/**Sets the notes associated with this contact.\\n\\n```\\n// The code below sets the notes of all the contacts whose names are \\\"John Doe\\\"\\n// to \\\"Met him at the hackathon\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nfor (var i in contacts) {\\n  contacts[i].setNotes('Met him at the hackathon');\\n}\\n```\\n@deprecated\\n@param notes the notes to be stored for this contact\\n@return this contact*/setNotes(notes:string):ContactsApp.Contact;\\n/**Sets the pager number of this Contact.\\n@deprecated\\n@param phone the pager number to set*/setPager(phone:string):void;\\n/**Sets the prefix to the contact's name.\\n\\n```\\n// The code below sets the prefix of all the contacts whose names are \\\"Johnathan Doe\\\"\\n// to \\\"Mr\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('Johnathan Doe');\\nfor (var i in contacts) {\\n  contacts[i].setPrefix('Mr');\\n}\\n```\\n@deprecated\\n@param prefix the new prefix of the contact's name\\n@return this contact*/setPrefix(prefix:string):ContactsApp.Contact;\\n/**Sets the primary email address of this Contact.\\n@deprecated\\n@param primaryEmail the primary email address to set*/setPrimaryEmail(primaryEmail:string):void;\\n/**Sets the short name of the contact.\\n\\n```\\n// The code below changes the short name of all the contacts whose names are \\\"Johnathan Doe\\\"\\n// to \\\"John\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('Johnathan Doe');\\nfor (var i in contacts) {\\n  contacts[i].setShortName('John');\\n}\\n```\\n@deprecated\\n@param shortName the new short name of the contact\\n@return this contact*/setShortName(shortName:string):ContactsApp.Contact;\\n/**Sets the suffix to the contact's name.\\n\\n```\\n// The code below sets the suffix of all the contacts whose names are \\\"Johnathan Doe\\\"\\n// to \\\"Jr\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('Johnathan Doe');\\nfor (var i in contacts) {\\n  contacts[i].setSuffix('Jr');\\n}\\n```\\n@deprecated\\n@param suffix the new suffix of the contact's name\\n@return this contact*/setSuffix(suffix:string):ContactsApp.Contact;\\n/**Sets a single user defined field for this Contact, to be stored with a given key.\\n@deprecated\\n@param key the key can be any basic type (String, int, etc.)\\n@param value the value can be any basic type (String, int, etc.)*/setUserDefinedField(key:string,value:string):void;\\n/**Sets the user defined fields for this Contact with the properties of the given Object.\\n@deprecated\\n@param o an Object with one or more properties in the form {key: value}*/setUserDefinedFields(o:Object):void;\\n/**Sets the work address of this Contact.\\n@deprecated\\n@param addr the work address to set*/setWorkAddress(addr:string):void;\\n/**Sets the work fax number of this Contact.\\n@deprecated\\n@param phone the work fax number to set*/setWorkFax(phone:string):void;\\n/**Sets the work phone number of this Contact.\\n@deprecated\\n@param phone the work phone number to set*/setWorkPhone(phone:string):void;}interface CompanyField{\\n/**Deletes this company field.\\n\\n```\\n// Deletes the first company associated with contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar company \\u003d contacts[0].getCompanies()[0];\\ncompany.deleteCompanyField();\\n```\\n@deprecated*/deleteCompanyField():void;\\n/**Gets the company name.\\n\\n```\\n// Logs company name for all companies associated with contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar companies \\u003d contacts[0].getCompanies();\\nfor (var i in companies) {\\n  Logger.log(companies[i].getCompanyName());\\n}\\n```\\n@deprecated\\n@return the name of the company*/getCompanyName():string;\\n/**Gets the job title.\\n\\n```\\n// Logs job title for all companies associated with contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar companies \\u003d contacts[0].getCompanies();\\nfor (var i in companies) {\\n  Logger.log(companies[i].getJobTitle());\\n}\\n```\\n@deprecated\\n@return the job title*/getJobTitle():string;\\n/**Gets whether this is the primary company.\\n\\n```\\n// Logs true or false depending on whether each company is the primary\\n// company for contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar companies \\u003d contacts[0].getCompanies();\\nfor (var i in companies) {\\n  Logger.log(companies[i].isPrimary());\\n}\\n```\\n@deprecated\\n@return whether this is primary*/isPrimary():boolean;\\n/**Sets this company as the primary company, and unsets whatever company was previously primary.\\n\\n```\\n// Sets the first company associated with contact 'John Doe' as primary\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar company \\u003d contacts[0].getCompanies()[0];\\ncompany.setAsPrimary();\\n```\\n@deprecated\\n@return this company field, useful for chaining*/setAsPrimary():ContactsApp.CompanyField;\\n/**Sets the company name.\\n\\n```\\n// Sets the company name for the first company associated with contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar company \\u003d contacts[0].getCompanies()[0];\\ncompany.setCompanyName('ACME Corp');\\n```\\n@deprecated\\n@param company the new name for the company\\n@return this company field, useful for chaining*/setCompanyName(company:string):ContactsApp.CompanyField;\\n/**Sets the job title.\\n\\n```\\n// Sets the job title for the first company associated with contact 'John Doe'\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar company \\u003d contacts[0].getCompanies()[0];\\ncompany.setJobTitle('Manager');\\n```\\n@deprecated\\n@param title the new job title for the contact at this company\\n@return this company field, useful for chaining*/setJobTitle(title:string):ContactsApp.CompanyField;}interface AddressField{\\n/**Deletes this address field.\\n\\n```\\n// The code below deletes the home addresses for a contact named \\\"John Doe\\\"\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar homeAddresses \\u003d contacts[0].getAddresses(ContactsApp.Field.HOME_ADDRESS);\\nfor (var i in homeAddresses) {\\n  homeAddresses[i].deleteAddressField();\\n}\\n```\\n@deprecated*/deleteAddressField():void;\\n/**Get the address for this field.\\n\\n```\\n// Logs the address for the 'Home Address' field for contact 'John Doe'.\\n// Can be used similarly for other fields that contain addresses.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar homeAddress \\u003d contacts[0].getAddresses(ContactsApp.Field.HOME_ADDRESS);\\nLogger.log(homeAddress[0].getAddress());\\n```\\n@return the address as a string*/getAddress():string;\\n/**Gets the label for this field. This may be a Field, ExtendedField, or a String.\\n\\n```\\n// Logs the label for all the address fields associated with contact\\n// 'John Doe'. This method can be similarly called for any field that has\\n// a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nfor (var i \\u003d 0; i \\u003c addressFields.length; i++) {\\n  Logger.log(addressFields[i].getLabel());\\n}\\n```\\n@return the label for this field*/getLabel():Object;\\n/**Gets whether this is the primary field value.\\n\\n```\\n// Logs whether or not the first address field associated with contact\\n// 'John Doe' is labeled as primary. This method can be similarly called\\n// for any field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\nLogger.log(addressFields[0].isPrimary());\\n```\\n@return whether this is primary*/isPrimary():boolean;\\n/**Sets the address of this field.\\n\\n```\\n// Sets the address for the 'Home Address' field for contact 'John Doe'.\\n// Can be used similarly for other fields that contain addresses.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar homeAddress \\u003d contacts[0].getAddresses(ContactsApp.Field.HOME_ADDRESS);\\nhomeAddress[0].setAddress('123 Main St, Raleigh, NC, 27601');\\n```\\n@param address the new address\\n@return this field, useful for chaining*/setAddress(address:string):ContactsApp.AddressField;\\n/**Sets this field to primary.\\n\\n```\\n// Sets the the first address field associated with contact 'John Doe'\\n// as primary. This method can be similarly called for any field.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setAsPrimary();\\n```\\n@return this FieldValue for chaining*/setAsPrimary():ContactsApp.AddressField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Work' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel(ContactsApp.Field.WORK_ADDRESS);\\n```\\n@param field the new standard label\\n@return this FieldValue for chaining*/setLabel(field:ContactsApp.Field):ContactsApp.AddressField;\\n/**Sets the label of this field.\\n\\n```\\n// Sets the label to 'Apartment' for the first address field associated\\n// with contact 'John Doe'. This method can be similarly called for any\\n// field that has a label.\\nvar contacts \\u003d ContactsApp.getContactsByName('John Doe');\\nvar addressFields \\u003d contacts[0].getAddresses();\\naddressFields[0].setLabel('Apartment');\\n```\\n@param label the new label for this field\\n@return this field, useful for chaining*/setLabel(label:string):ContactsApp.AddressField;}}const ContactsApp:ContactsApp;\"],[\"j-s-o-n.d.ts\",\"interface JSON{parse(text:string):Object;parse(text:string,reviver:Function):Object;stringify(value:Object):string;stringify(value:Object,replacer:Function):string;stringify(value:Object,replacer:Function,space:Object):string;}const JSON:JSON;\"],[\"math.d.ts\",\"interface Math{E:number;LN10:number;LN2:number;LOG10E:number;LOG2E:number;PI:number;SQRT1_2:number;SQRT_2:number;abs(x:number):number;acos(x:number):number;asin(x:number):number;atan(x:number):number;atan2(y:number,x:number):number;ceil(x:number):Integer;cos(x:number):number;exp(x:number):number;floor(x:number):Integer;log(x:number):number;max(...values:number[]):number;min(...values:number[]):number;pow(x:number,y:number):number;random():number;round(x:number):Integer;sin(x:number):number;sqrt(x:number):number;tan(x:number):number;}const Math:Math;\"],[\"blob.d.ts\",\"interface Blob{\\n/**Returns a copy of this blob.\\n@return The new copy.*/copyBlob():Blob;\\n/**Gets all the blobs that are contained within this (possibly composite) blob.\\n@deprecated\\n@return The blobs contained within the blob.*/getAllBlobs():Blob[];\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Gets the data stored in this blob.\\n@return The stored bytes.*/getBytes():Byte[];\\n/**Gets the content type of the bytes in this blob.\\n@return The content type of this data, if known, or `null`.*/getContentType():string;\\n/**Gets the data of this blob as a String with UTF-8 encoding.\\n@return The data as a string.*/getDataAsString():string;\\n/**Gets the data of this blob as a string with the specified encoding.\\n@param charset The charset to use in encoding the data in this blob as a string.\\n@return The data as a string.*/getDataAsString(charset:string):string;\\n/**Gets the name of this blob.\\n@return The name of this data, if known, or `null`.*/getName():string;\\n/**Returns whether this blob is a Google Workspace file (Sheets, Docs, etc.).\\n@return `true` if this blob is a Google Workspace file; `false` if not.*/isGoogleType():boolean;\\n/**Sets the data stored in this blob.\\n@param data The new data.\\n@return This blob, for chaining.*/setBytes(data:Byte[]):Blob;\\n/**Sets the content type of the bytes in this blob.\\n@param contentType The new contentType.\\n@return This blob, for chaining.*/setContentType(contentType:string):Blob;\\n/**Sets the content type of the bytes in this blob based on the file extension. The contentType is\\n`null` if it cannot be guessed from its extension.\\n@return This blob, for chaining.*/setContentTypeFromExtension():Blob;\\n/**Sets the data of this blob from a string with UTF-8 encoding.\\n@param string The string data.\\n@return This blob, for chaining.*/setDataFromString(string:string):Blob;\\n/**Sets the data of this blob from a string with the specified encoding.\\n@param string The string data.\\n@param charset The charset to use in interpreting the string as bytes.\\n@return This blob, for chaining.*/setDataFromString(string:string,charset:string):Blob;\\n/**Sets the name of this blob.\\n@param name The new name.\\n@return This blob, for chaining.*/setName(name:string):Blob;}\"],[\"blob-source.d.ts\",\"interface BlobSource{\\n/**Return the data inside this object as a blob converted to the specified content type. This\\nmethod adds the appropriate extension to the filename—for example, \\\"myfile.pdf\\\". However, it\\nassumes that the part of the filename that follows the last period (if any) is an existing\\nextension that should be replaced. Consequently, \\\"ShoppingList.12.25.2014\\\" becomes\\n\\\"ShoppingList.12.25.pdf\\\".\\n\\nTo view the daily quotas for conversions, see [Quotas for Google\\nServices](https://developers.google.com/apps-script/guides/services/quotas). Newly created Google Workspace domains might be temporarily subject to stricter\\nquotas.\\n@param contentType The MIME type to convert to. For most blobs, `'application/pdf'` is\\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`, `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also\\n    valid. For a Google Docs document, `'text/markdown'` is also valid.\\n@return The data as a blob.*/getAs(contentType:string):Blob;\\n/**Return the data inside this object as a blob.\\n@return The data as a blob.*/getBlob():Blob;}\"],[\"button.d.ts\",\"interface Button{}interface _Button{\\n/**A \\\"Cancel\\\" button, indicating that an operation should not proceed.*/CANCEL:Button;\\n/**The standard close button displayed in every dialog's title bar. This button is not explicitly\\nadded to a dialog, and it cannot be removed.*/CLOSE:Button;\\n/**A \\\"No\\\" button, indicating a negative response to a question.*/NO:Button;\\n/**An \\\"OK\\\" button, indicating that an operation should proceed.*/OK:Button;\\n/**A \\\"Yes\\\" button, indicating a positive response to a question.*/YES:Button;}\"],[\"button-set.d.ts\",\"interface ButtonSet{}interface _ButtonSet{\\n/**A single \\\"OK\\\" button, indicating an informational message that can only be dismissed.*/OK:ButtonSet;\\n/**An \\\"OK\\\" button and a \\\"Cancel\\\" button, allowing the user to either proceed with or halt an\\noperation.*/OK_CANCEL:ButtonSet;\\n/**A \\\"Yes\\\" button and a \\\"No\\\" button, allowing the user to answer a yes/no question.*/YES_NO:ButtonSet;\\n/**A \\\"Yes\\\" button, a \\\"No\\\" button, and a \\\"Cancel\\\" button, allowing the user to either answer a\\nyes/no question or halt an operation.*/YES_NO_CANCEL:ButtonSet;}\"],[\"color-type.d.ts\",\"interface ColorType{}interface _ColorType{\\n/**A color defined by red, green, blue color channels.*/RGB:ColorType;\\n/**A color that refers to an entry in the theme's color scheme.*/THEME:ColorType;\\n/**A color type that is not supported.*/UNSUPPORTED:ColorType;}\"],[\"column-type.d.ts\",\"interface ColumnType{}interface _ColumnType{\\n/**Corresponds to date values.*/DATE:ColumnType;\\n/**Corresponds to number values.*/NUMBER:ColumnType;\\n/**Corresponds to string values.*/STRING:ColumnType;}\"],[\"data-table.d.ts\",\"interface DataTable{}\"],[\"data-table-builder.d.ts\",\"interface DataTableBuilder{\\n/**Adds a column to the data table. Columns will be added from 0 to n.\\n\\nThe first column is often used by charts for labels (for instance, X-axis labels on line\\ncharts, or slice labels in pie charts). The other columns are often used for data and therefore\\noften require numeric values.\\n@param type type of data in the column (number, string, or date)\\n@param label label of the column (it's used for chart legends).\\n@return this builder, for chaining.*/addColumn(type:ColumnType,label:string):DataTableBuilder;\\n/**Adds a row to the data table.\\n@param values values for the row, specified in the same order that the columns are entered.\\n@return this builder, for chaining.*/addRow(values:Object[]):DataTableBuilder;\\n/**Builds and returns a data table.\\n@return the data table*/build():DataTable;\\n/**Sets a specific value in the table.\\n\\nYou may set a value before adding the column to the data table. However, unless the column\\nis added at some point, the value will be ignored.\\n\\nNot all column values need to be filled in. Those missing will be considered `null`.\\n@param row the row index (the first row has index 0)\\n@param column the column index (the first column has index 0)\\n@param value the value of the table cell (should have the right type for the column).\\n@return this builder, for chaining*/setValue(row:Integer,column:Integer,value:Object):DataTableBuilder;}\"],[\"data-table-source.d.ts\",\"interface DataTableSource{\\n/**Return the data inside this object as a DataTable.\\n\\n```\\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file,\\n// use SpreadsheetApp.getActiveSpreadsheet().\\n// TODO(developer): Replace the ID with your own.\\nconst ss \\u003d SpreadsheetApp.openById('abc123456');\\n\\n// Gets Sheet1 by its name.\\nconst sheet \\u003d ss.getSheetByName('Sheet1');\\n\\n// Gets the range A1:B7 on Sheet1.\\nconst range \\u003d sheet.getRange('A1:B7');\\n\\n// Gets the range A1:B7 as a data table. The values in each column must be of the same type.\\nconst datatable \\u003d range.getDataTable();\\n\\n// Uses the Charts service to build a bar chart from the data table.\\n// This doesn't build an embedded chart. To do that, use sheet.newChart().addRange() instead.\\nconst chart \\u003d Charts.newBarChart()\\n                  .setDataTable(datatable)\\n                  .setOption('title', 'Your Chart Title Here')\\n                  .build();\\n```\\n@return the data as a datatable.*/getDataTable():DataTable;}\"],[\"digest-algorithm.d.ts\",\"interface DigestAlgorithm{}interface _DigestAlgorithm{\\n/**MD2 algorithm*/MD2:DigestAlgorithm;\\n/**MD5 algorithm*/MD5:DigestAlgorithm;\\n/**SHA-1 algorithm*/SHA_1:DigestAlgorithm;\\n/**SHA-256 algorithm*/SHA_256:DigestAlgorithm;\\n/**SHA-384 algorithm*/SHA_384:DigestAlgorithm;\\n/**SHA-512 algorithm*/SHA_512:DigestAlgorithm;}\"],[\"menu.d.ts\",\"interface Menu{\\n/**Adds an item to the menu. The label for a menu item should be in sentence case (only the first\\nword capitalized).\\n@param caption The label for the menu item, with only the first word capitalized.\\n@param functionName The name of the function to invoke when the user selects the item. You can\\n    use functions from included libraries, such as `Library.libFunction1`.\\n@return This [`Menu`](https://developers.google.com/apps-script/reference/base/menu.html), for chaining.*/addItem(caption:string,functionName:string):Menu;\\n/**Adds a visual separator to the menu.\\n@return This [`Menu`](https://developers.google.com/apps-script/reference/base/menu.html), for chaining.*/addSeparator():Menu;\\n/**Adds a sub-menu to the menu.\\n@param menu The sub-menu, constructed like a top-level menu.\\n@return This [`Menu`](https://developers.google.com/apps-script/reference/base/menu.html), for chaining.*/addSubMenu(menu:Menu):Menu;\\n/**Inserts the menu into the instance of the editor's user interface.*/addToUi():void;}\"],[\"month.d.ts\",\"interface Month{}interface _Month{\\n/**April (month 4).*/APRIL:Month;\\n/**August (month 8).*/AUGUST:Month;\\n/**December (month 12).*/DECEMBER:Month;\\n/**February (month 2).*/FEBRUARY:Month;\\n/**January (month 1).*/JANUARY:Month;\\n/**July (month 7).*/JULY:Month;\\n/**June (month 6).*/JUNE:Month;\\n/**March (month 3).*/MARCH:Month;\\n/**May (month 5).*/MAY:Month;\\n/**November (month 11).*/NOVEMBER:Month;\\n/**October (month 10).*/OCTOBER:Month;\\n/**September (month 9).*/SEPTEMBER:Month;}\"],[\"prompt-response.d.ts\",\"interface PromptResponse{\\n/**Gets the text that the user entered in the dialog's input field. The text is available even if\\nthe user closed the dialog by clicking a button with a negative connotation, like \\\"Cancel\\\" or\\nthe close button in the dialog's title bar. [`getSelectedButton()`](https://developers.google.com/apps-script/reference/base/prompt-response.html#getSelectedButton()) can help to determine\\nwhether the user intended the response text to be valid.\\n@return The text that the user entered in the dialog's input field.*/getResponseText():string;\\n/**Gets the button that the user clicked to dismiss the dialog. If the user clicked the close\\nbutton that is included in every dialog's title bar, this method returns [`Button.CLOSE`](https://developers.google.com/apps-script/reference/base/button.html#CLOSE).\\n@return The button that the user clicked.*/getSelectedButton():Button;}\"],[\"rgb-color.d.ts\",\"interface RgbColor{\\n/**Returns the color as a CSS-style 7 character hexadecimal string (#rrggbb) or 9 character\\nhexadecimal string (#aarrggbb).\\n@return The hex representation of color.*/asHexString():string;\\n/**The blue channel of this color, as a number from 0 to 255.\\n@return The value of blue channel.*/getBlue():Integer;\\n/**Get the type of this color.\\n@return The color type.*/getColorType():ColorType;\\n/**The green channel of this color, as a number from 0 to 255.\\n@return The value of green channel.*/getGreen():Integer;\\n/**The red channel of this color, as a number from 0 to 255.\\n@return The value of red channel.*/getRed():Integer;}\"],[\"target-audience.d.ts\",\"interface TargetAudience{\\n/**Returns the ID of the target audience.\\n@return The target audience's ID.*/getId():string;}\"],[\"time-interval.d.ts\",\"interface TimeInterval{\\n/**Gets the end time, exclusive.\\n@return The end time.*/getEndTime():Date;\\n/**Gets the start time, inclusive.\\n@return The start time.*/getStartTime():Date;}\"],[\"ui.d.ts\",\"interface Ui{\\n/**An enum representing predetermined, localized dialog buttons returned by an [alert](https://developers.google.com/apps-script/reference/base/ui.html#alert(String)) or [`PromptResponse.getSelectedButton()`](https://developers.google.com/apps-script/reference/base/prompt-response.html#getSelectedButton()) to indicate\\nwhich button in a dialog the user clicked.*/Button:_Button;\\n/**An enum representing predetermined, localized sets of one or more dialog buttons that can be\\nadded to an [alert](https://developers.google.com/apps-script/reference/base/ui.html#alert(String,ButtonSet)) or a [prompt](https://developers.google.com/apps-script/reference/base/ui.html#prompt(String,ButtonSet)).*/ButtonSet:_ButtonSet;\\n/**Opens a dialog box in the user's editor with the given message and an \\\"OK\\\" button. This method\\nsuspends the server-side script while the dialog is open. The script resumes after the user\\ndismisses the dialog, but [`Jdbc`](https://developers.google.com/apps-script/reference/base/../jdbc/jdbc.html)\\nconnections and [`LockService`](https://developers.google.com/apps-script/reference/base/../lock/lock-service.html) locks don't\\npersist across the suspension. For more information, see the [guide to dialogs and sidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Display \\\"Hello, world\\\" in a dialog box with an \\\"OK\\\" button. The user can also close the\\n// dialog by clicking the close button in its title bar.\\nSpreadsheetApp.getUi().alert('Hello, world');\\n```\\n@param prompt The message to display in the dialog box.\\n@return The button the user clicked.*/alert(prompt:string):Button;\\n/**Opens a dialog box in the user's editor with the given message and set of buttons. This method\\nsuspends the server-side script while the dialog is open. The script resumes after the user\\ndismisses the dialog, but [`Jdbc`](https://developers.google.com/apps-script/reference/base/../jdbc/jdbc.html)\\nconnections and [`LockService`](https://developers.google.com/apps-script/reference/base/../lock/lock-service.html) locks don't\\npersist across the suspension. For more information, see the [guide to dialogs and sidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Display a dialog box with a message and \\\"Yes\\\" and \\\"No\\\" buttons. The user can also close the\\n// dialog by clicking the close button in its title bar.\\nvar ui \\u003d SpreadsheetApp.getUi();\\nvar response \\u003d ui.alert('Are you sure you want to continue?', ui.ButtonSet.YES_NO);\\n\\n// Process the user's response.\\nif (response \\u003d\\u003d ui.Button.YES) {\\n  Logger.log('The user clicked \\\"Yes.\\\"');\\n} else {\\n  Logger.log('The user clicked \\\"No\\\" or the close button in the dialog\\\\'s title bar.');\\n}\\n```\\n@param prompt The message to display in the dialog box.\\n@param buttons The button set to display in the dialog box.\\n@return The button the user clicked.*/alert(prompt:string,buttons:ButtonSet):Button;\\n/**Opens a dialog box in the user's editor with the given title, message, and set of buttons. This\\nmethod suspends the server-side script while the dialog is open. The script resumes after the\\nuser dismisses the dialog, but [`Jdbc`](https://developers.google.com/apps-script/reference/base/../jdbc/jdbc.html)\\nconnections and [`LockService`](https://developers.google.com/apps-script/reference/base/../lock/lock-service.html) locks don't\\npersist across the suspension. For more information, see the [guide to dialogs and sidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Display a dialog box with a title, message, and \\\"Yes\\\" and \\\"No\\\" buttons. The user can also\\n// close the dialog by clicking the close button in its title bar.\\nvar ui \\u003d SpreadsheetApp.getUi();\\nvar response \\u003d ui.alert('Confirm', 'Are you sure you want to continue?', ui.ButtonSet.YES_NO);\\n\\n// Process the user's response.\\nif (response \\u003d\\u003d ui.Button.YES) {\\n  Logger.log('The user clicked \\\"Yes.\\\"');\\n} else {\\n  Logger.log('The user clicked \\\"No\\\" or the close button in the dialog\\\\'s title bar.');\\n}\\n```\\n@param title The title to display above the dialog box.\\n@param prompt The message to display in the dialog box.\\n@param buttons The button set to display in the dialog box.\\n@return The button the user clicked.*/alert(title:string,prompt:string,buttons:ButtonSet):Button;\\n/**Creates a builder that can be used to insert a sub-menu into the editor's Extensions menu. The\\nmenu isn't actually be updated until [`Menu.addToUi()`](https://developers.google.com/apps-script/reference/base/menu.html#addToUi()) is called. If the script is running\\nas an add-on, the sub-menu name matches the add-on's name in the web store; if the script is [bound](/apps-script/scripts_containers) to the document directly, the sub-menu name\\nmatches the script's name. For more information, see the [guide to menus](/apps-script/guides/menus).\\n\\n```\\n// Add an item to the Add-on menu, under a sub-menu whose name is set automatically.\\nfunction onOpen(e) {\\n  SpreadsheetApp.getUi()\\n      .createAddonMenu()\\n      .addItem('Show', 'showSidebar')\\n      .addToUi();\\n}\\n```\\n@return The new menu builder.*/createAddonMenu():Menu;\\n/**Creates a builder that can be used to add a menu to the editor's user interface. The menu isn't\\nactually be added until [`Menu.addToUi()`](https://developers.google.com/apps-script/reference/base/menu.html#addToUi()) is called. For more information, see the [guide to menus](/apps-script/guides/menus). The label for a top-level menu should be\\nin headline case (all major words capitalized), although the label for a sub-menu should be in\\nsentence case (only the first word capitalized). If the script is published as an [add-on](/gsuite/add-ons/overview), the `caption` parameter is ignored and the\\nmenu is added as a sub-menu of the Extensions menu, equivalent to [`createAddonMenu()`](https://developers.google.com/apps-script/reference/base/ui.html#createAddonMenu()).\\n\\n```\\n// Add a custom menu to the active document, including a separator and a sub-menu.\\nfunction onOpen(e) {\\n  SpreadsheetApp.getUi()\\n      .createMenu('My Menu')\\n      .addItem('My menu item', 'myFunction')\\n      .addSeparator()\\n      .addSubMenu(SpreadsheetApp.getUi().createMenu('My sub-menu')\\n          .addItem('One sub-menu item', 'mySecondFunction')\\n          .addItem('Another sub-menu item', 'myThirdFunction'))\\n      .addToUi();\\n}\\n```\\n@param caption The label for the menu, with all major words capitalized for a top-level menu,\\n    or only the first word capitalized for a sub-menu.\\n@return The new menu builder.*/createMenu(caption:string):Menu;\\n/**Opens an input dialog box in the user's editor with the given message and an \\\"OK\\\" button. This\\nmethod suspends the server-side script while the dialog is open. The script resumes after the\\nuser dismisses the dialog, but [`Jdbc`](https://developers.google.com/apps-script/reference/base/../jdbc/jdbc.html)\\nconnections and [`LockService`](https://developers.google.com/apps-script/reference/base/../lock/lock-service.html) locks don't\\npersist across the suspension. For more information, see the [guide to dialogs and sidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Display a dialog box with a message, input field, and an \\\"OK\\\" button. The user can also\\n// close the dialog by clicking the close button in its title bar.\\nvar ui \\u003d SpreadsheetApp.getUi();\\nvar response \\u003d ui.prompt('Enter your name:');\\n\\n// Process the user's response.\\nif (response.getSelectedButton() \\u003d\\u003d ui.Button.OK) {\\n  Logger.log('The user\\\\'s name is %s.', response.getResponseText());\\n} else {\\n  Logger.log('The user clicked the close button in the dialog\\\\'s title bar.');\\n}\\n```\\n@param prompt The message to display in the dialog box.\\n@return A representation of the user's response.*/prompt(prompt:string):PromptResponse;\\n/**Opens an input dialog box in the user's editor with the given message and set of buttons. This\\nmethod suspends the server-side script while the dialog is open. The script resumes after the\\nuser dismisses the dialog, but [`Jdbc`](https://developers.google.com/apps-script/reference/base/../jdbc/jdbc.html)\\nconnections and [`LockService`](https://developers.google.com/apps-script/reference/base/../lock/lock-service.html) locks don't\\npersist across the suspension. For more information, see the [guide to dialogs and sidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Display a dialog box with a message, input field, and \\\"Yes\\\" and \\\"No\\\" buttons. The user can\\n// also close the dialog by clicking the close button in its title bar.\\nvar ui \\u003d SpreadsheetApp.getUi();\\nvar response \\u003d ui.prompt('May I know your name?', ui.ButtonSet.YES_NO);\\n\\n// Process the user's response.\\nif (response.getSelectedButton() \\u003d\\u003d ui.Button.YES) {\\n  Logger.log('The user\\\\'s name is %s.', response.getResponseText());\\n} else if (response.getSelectedButton() \\u003d\\u003d ui.Button.NO) {\\n  Logger.log('The user didn\\\\'t want to provide a name.');\\n} else {\\n  Logger.log('The user clicked the close button in the dialog\\\\'s title bar.');\\n}\\n```\\n@param prompt The message to display in the dialog box.\\n@param buttons The button set to display in the dialog box.\\n@return A representation of the user's response.*/prompt(prompt:string,buttons:ButtonSet):PromptResponse;\\n/**Opens an input dialog box in the user's editor with the given title, message, and set of\\nbuttons. This method suspends the server-side script while the dialog is open. The script\\nresumes after the user dismisses the dialog, but [`Jdbc`](https://developers.google.com/apps-script/reference/base/../jdbc/jdbc.html) connections and [`LockService`](https://developers.google.com/apps-script/reference/base/../lock/lock-service.html) locks don't persist across the\\nsuspension. For more information, see the [guide to\\ndialogs and sidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Display a dialog box with a title, message, input field, and \\\"Yes\\\" and \\\"No\\\" buttons. The\\n// user can also close the dialog by clicking the close button in its title bar.\\nvar ui \\u003d SpreadsheetApp.getUi();\\nvar response \\u003d ui.prompt('Getting to know you', 'May I know your name?', ui.ButtonSet.YES_NO);\\n\\n// Process the user's response.\\nif (response.getSelectedButton() \\u003d\\u003d ui.Button.YES) {\\n  Logger.log('The user\\\\'s name is %s.', response.getResponseText());\\n} else if (response.getSelectedButton() \\u003d\\u003d ui.Button.NO) {\\n  Logger.log('The user didn\\\\'t want to provide a name.');\\n} else {\\n  Logger.log('The user clicked the close button in the dialog\\\\'s title bar.');\\n}\\n```\\n@param title The title to display above the dialog box.\\n@param prompt The message to display in the dialog box.\\n@param buttons The button set to display in the dialog box.\\n@return A representation of the user's response.*/prompt(title:string,prompt:string,buttons:ButtonSet):PromptResponse;\\n/**Opens a dialog box in the user's editor with custom client-side content. This method does\\n_not_ suspend the server-side script while the dialog is open. To communicate with the\\nserver-side script, the client-side component must make asynchronous callbacks using the [`google.script`](/apps-script/guides/html/communication) API for [`HtmlService`](https://developers.google.com/apps-script/reference/base/../html/html-service.html). To close the dialog\\nprogrammatically, call [\\n`google.script.host.close()`](/apps-script/guides/html/#serve_html_as_a_google_docs_sheets_or_forms_user_interface) on the client side of an `HtmlService` web\\napp. For more information, see the [guide to dialogs and\\nsidebars](/apps-script/guides/dialogs).\\n\\n```\\n// Display a dialog box with custom HtmlService content.\\nvar htmlOutput \\u003d HtmlService\\n    .createHtmlOutput('\\u003cp\\u003eA change of speed, a change of style...\\u003c/p\\u003e')\\n    .setTitle('My add-on')\\n    .setWidth(250)\\n    .setHeight(300);\\nSpreadsheetApp.getUi().showDialog(htmlOutput);\\n```\\n@deprecated\\n@param userInterface An [`HtmlOutput`](https://developers.google.com/apps-script/reference/base/../html/html-output.html)\\n    representing the interface to display.*/showDialog(userInterface:Object):void;\\n/**Opens a modal dialog box in the user's editor with custom client-side content. This method does\\n_not_ suspend the server-side script while the dialog is open. To communicate with the\\nserver-side script, the client-side component must make asynchronous callbacks using the [`google.script`](/apps-script/guides/html/communication) API for [`HtmlService`](https://developers.google.com/apps-script/reference/base/../html/html-service.html). To close the dialog\\nprogrammatically, call [\\n`google.script.host.close()`](/apps-script/guides/html/#serve_html_as_a_google_docs_sheets_or_forms_user_interface) on the client side of an `HtmlService` web\\napp. For more information, see the [guide to dialogs and\\nsidebars](/apps-script/guides/dialogs).\\n\\nModal dialogs prevent the user from interacting with anything other than the dialog. By\\ncontrast, [modeless dialogs](https://developers.google.com/apps-script/reference/base/ui.html#showModelessDialog(Object,String)) and [sidebars](https://developers.google.com/apps-script/reference/base/ui.html#showSidebar(Object)) let the user interact with the editor. In almost all cases, a\\nmodal dialog or sidebar is a better choice than a modeless dialog.\\n\\n```\\n// Display a modal dialog box with custom HtmlService content.\\nvar htmlOutput \\u003d HtmlService\\n    .createHtmlOutput('\\u003cp\\u003eA change of speed, a change of style...\\u003c/p\\u003e')\\n    .setWidth(250)\\n    .setHeight(300);\\nSpreadsheetApp.getUi().showModalDialog(htmlOutput, 'My add-on');\\n```\\n@param userInterface An [`HtmlOutput`](https://developers.google.com/apps-script/reference/base/../html/html-output.html)\\n    representing the interface to display.\\n@param title The title of the dialog; overrides any title set by calling `setTitle()` on\\n    the `userInterface` object.*/showModalDialog(userInterface:Object,title:string):void;\\n/**Opens a modeless dialog box in the user's editor with custom client-side content. This method\\ndoes _not_ suspend the server-side script while the dialog is open. To communicate with\\nthe server-side script, the client-side component must make asynchronous callbacks using the [`google.script`](/apps-script/guides/html/communication) API for [`HtmlService`](https://developers.google.com/apps-script/reference/base/../html/html-service.html). To close the dialog\\nprogrammatically, call [\\n`google.script.host.close()`](/apps-script/guides/html/#serve_html_as_a_google_docs_sheets_or_forms_user_interface) on the client side of an `HtmlService` web\\napp. For more information, see the [guide to dialogs and\\nsidebars](/apps-script/guides/dialogs).\\n\\nModeless dialogs let the user interact with the editor behind the dialog. By contrast,\\n[modal dialogs](https://developers.google.com/apps-script/reference/base/ui.html#showModalDialog(Object,String)) do not. In almost all cases, a modal\\ndialog or [sidebar](https://developers.google.com/apps-script/reference/base/ui.html#showSidebar(Object)) is a better choice than a modeless dialog.\\n\\n```\\n// Display a modeless dialog box with custom HtmlService content.\\nvar htmlOutput \\u003d HtmlService\\n    .createHtmlOutput('\\u003cp\\u003eA change of speed, a change of style...\\u003c/p\\u003e')\\n    .setWidth(250)\\n    .setHeight(300);\\nSpreadsheetApp.getUi().showModelessDialog(htmlOutput, 'My add-on');\\n```\\n@param userInterface An [`HtmlOutput`](https://developers.google.com/apps-script/reference/base/../html/html-output.html)\\n    representing the interface to display.\\n@param title The title of the dialog; overrides any title set by calling `setTitle()` on\\n    the `userInterface` object.*/showModelessDialog(userInterface:Object,title:string):void;\\n/**Opens a sidebar in the user's editor with custom client-side content. This method does\\n_not_ suspend the server-side script while the sidebar is open. To communicate with the\\nserver-side script, the client-side component must make asynchronous callbacks using the [`google.script`](/apps-script/guides/html/communication) API for [`HtmlService`](https://developers.google.com/apps-script/reference/base/../html/html-service.html). To close the sidebar\\nprogrammatically, call [\\n`google.script.host.close()`](/apps-script/guides/html/#serve_html_as_a_google_docs_sheets_or_forms_user_interface) on the client side of an `HtmlService` web\\napp. For more information, see the [guide to dialogs and\\nsidebars](/apps-script/guides/dialogs).\\n\\nThe sidebar displays on the right side of the editor for users whose environments use a\\nleft-to-right language and on the left side of the editor for right-to-left languages. All\\nsidebars shown by scripts are 300 pixels wide.\\n\\n```\\n// Display a sidebar with custom HtmlService content.\\nvar htmlOutput \\u003d HtmlService\\n    .createHtmlOutput('\\u003cp\\u003eA change of speed, a change of style...\\u003c/p\\u003e')\\n    .setTitle('My add-on');\\nSpreadsheetApp.getUi().showSidebar(htmlOutput);\\n```\\n@param userInterface An [`HtmlOutput`](https://developers.google.com/apps-script/reference/base/../html/html-output.html)\\n    representing the interface to display.*/showSidebar(userInterface:Object):void;}\"],[\"user.d.ts\",\"interface User{\\n/**Gets the user's email address, if available. If security policies do not allow access to the\\nuser's email address, this method returns a blank string. The circumstances in which the email\\naddress is available vary: for example, the user's email address is not available in any\\ncontext that allows a script to run without that user's authorization, like a simple `onOpen(e)` or `onEdit(e)` trigger, a custom function in Google Sheets, or a web app\\ndeployed to \\\"execute as me\\\" (that is, authorized by the developer instead of the user).\\nHowever, these restrictions generally do not apply if the developer runs the script themselves\\nor belongs to the same Google Workspace domain as the user.\\n\\n```\\n// Log the email address of the person running the script.\\nLogger.log(Session.getActiveUser().getEmail());\\n```\\n@return The user's email's address, or a blank string if security policies do not allow access\\n    to the user's email address.*/getEmail():string;\\n/**Gets the user's email address.\\n\\n```\\n// Log the email address of the person running the script.\\nLogger.log(Session.getActiveUser().getUserLoginId());\\n```\\n@deprecated\\n@return The user's email's address.*/getUserLoginId():string;}\"],[\"weekday.d.ts\",\"interface Weekday{}interface _Weekday{\\n/**Friday.*/FRIDAY:Weekday;\\n/**Monday.*/MONDAY:Weekday;\\n/**Saturday.*/SATURDAY:Weekday;\\n/**Sunday.*/SUNDAY:Weekday;\\n/**Thursday.*/THURSDAY:Weekday;\\n/**Tuesday.*/TUESDAY:Weekday;\\n/**Wednesday.*/WEDNESDAY:Weekday;}\"]]]